Shader "ARBestPractices/City" {
	Properties {
		[Header(Diffuse)] [HDR] _Color ("Color", Vector) = (1,1,1,1)
		_MainTex ("Texture", 2D) = "white" {}
		_NightTexture ("Night Texture", 2D) = "white" {}
		_DayWeight ("Day Weight", Range(0, 1)) = 1
		[Header(Emission)] [HDR] _EmissionColor ("Color", Vector) = (0,0,0,0)
		_EmissionTex ("Emission Texture", 2D) = "white" {}
		[Header(Material)] _Glossiness ("Smoothness", Range(0, 1)) = 0.5
		_Metallic ("Metallic", Range(0, 1)) = 0
	}
	SubShader {
		LOD 200
		Tags { "RenderType" = "Opaque" }
		Pass {
			Name "FORWARD"
			LOD 200
			Tags { "LIGHTMODE" = "FORWARDBASE" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
			GpuProgramID 42083
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = tmpvar_2;
					  xlv_TEXCOORD6 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec4 hdr_26;
					  hdr_26 = tmpvar_2;
					  mediump vec4 tmpvar_27;
					  tmpvar_27.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_27.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_28;
					  tmpvar_28 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_27.xyz, tmpvar_27.w);
					  mediump vec4 tmpvar_29;
					  tmpvar_29 = tmpvar_28;
					  lowp vec3 tmpvar_30;
					  mediump vec4 c_31;
					  highp vec3 tmpvar_32;
					  tmpvar_32 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_33;
					  mediump vec3 albedo_34;
					  albedo_34 = tmpvar_10;
					  mediump vec3 tmpvar_35;
					  tmpvar_35 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_34, vec3(_Metallic));
					  mediump float tmpvar_36;
					  tmpvar_36 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_33 = (albedo_34 * tmpvar_36);
					  tmpvar_30 = tmpvar_33;
					  mediump vec3 diffColor_37;
					  diffColor_37 = tmpvar_30;
					  mediump float alpha_38;
					  alpha_38 = tmpvar_12;
					  tmpvar_30 = diffColor_37;
					  mediump vec3 diffColor_39;
					  diffColor_39 = tmpvar_30;
					  mediump vec3 color_40;
					  mediump vec2 rlPow4AndFresnelTerm_41;
					  mediump float tmpvar_42;
					  highp float tmpvar_43;
					  tmpvar_43 = clamp (dot (tmpvar_32, tmpvar_4), 0.0, 1.0);
					  tmpvar_42 = tmpvar_43;
					  mediump float tmpvar_44;
					  highp float tmpvar_45;
					  tmpvar_45 = clamp (dot (tmpvar_32, worldViewDir_6), 0.0, 1.0);
					  tmpvar_44 = tmpvar_45;
					  highp vec2 tmpvar_46;
					  tmpvar_46.x = dot ((worldViewDir_6 - (2.0 * 
					    (dot (tmpvar_32, worldViewDir_6) * tmpvar_32)
					  )), tmpvar_4);
					  tmpvar_46.y = (1.0 - tmpvar_44);
					  highp vec2 tmpvar_47;
					  tmpvar_47 = ((tmpvar_46 * tmpvar_46) * (tmpvar_46 * tmpvar_46));
					  rlPow4AndFresnelTerm_41 = tmpvar_47;
					  mediump float tmpvar_48;
					  tmpvar_48 = rlPow4AndFresnelTerm_41.x;
					  mediump float specular_49;
					  highp float smoothness_50;
					  smoothness_50 = _Glossiness;
					  highp vec2 tmpvar_51;
					  tmpvar_51.x = tmpvar_48;
					  tmpvar_51.y = (1.0 - smoothness_50);
					  highp float tmpvar_52;
					  tmpvar_52 = (texture2D (unity_NHxRoughness, tmpvar_51).x * 16.0);
					  specular_49 = tmpvar_52;
					  color_40 = ((diffColor_39 + (specular_49 * tmpvar_35)) * (tmpvar_3 * tmpvar_42));
					  color_40 = (color_40 + ((
					    (hdr_26.x * ((hdr_26.w * (tmpvar_29.w - 1.0)) + 1.0))
					   * tmpvar_29.xyz) * mix (tmpvar_35, vec3(
					    clamp ((_Glossiness + (1.0 - tmpvar_36)), 0.0, 1.0)
					  ), rlPow4AndFresnelTerm_41.yyy)));
					  mediump vec4 tmpvar_53;
					  tmpvar_53.w = 1.0;
					  tmpvar_53.xyz = color_40;
					  c_31.xyz = tmpvar_53.xyz;
					  c_31.w = alpha_38;
					  c_5 = c_31;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = tmpvar_2;
					  xlv_TEXCOORD6 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 tmpvar_26;
					  mediump vec4 hdr_27;
					  hdr_27 = tmpvar_2;
					  mediump vec4 tmpvar_28;
					  tmpvar_28.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_28.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_29;
					  tmpvar_29 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_28.xyz, tmpvar_28.w);
					  mediump vec4 tmpvar_30;
					  tmpvar_30 = tmpvar_29;
					  tmpvar_26 = ((hdr_27.x * (
					    (hdr_27.w * (tmpvar_30.w - 1.0))
					   + 1.0)) * tmpvar_30.xyz);
					  lowp vec3 tmpvar_31;
					  mediump vec4 c_32;
					  highp vec3 tmpvar_33;
					  tmpvar_33 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_34;
					  mediump vec3 albedo_35;
					  albedo_35 = tmpvar_10;
					  mediump vec3 tmpvar_36;
					  tmpvar_36 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_35, vec3(_Metallic));
					  mediump float tmpvar_37;
					  tmpvar_37 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_34 = (albedo_35 * tmpvar_37);
					  tmpvar_31 = tmpvar_34;
					  mediump vec3 diffColor_38;
					  diffColor_38 = tmpvar_31;
					  mediump float alpha_39;
					  alpha_39 = tmpvar_12;
					  tmpvar_31 = diffColor_38;
					  mediump vec3 diffColor_40;
					  diffColor_40 = tmpvar_31;
					  mediump vec3 color_41;
					  mediump float surfaceReduction_42;
					  highp float specularTerm_43;
					  highp float a2_44;
					  mediump float roughness_45;
					  mediump float perceptualRoughness_46;
					  highp vec3 tmpvar_47;
					  highp vec3 inVec_48;
					  inVec_48 = (tmpvar_4 + worldViewDir_6);
					  tmpvar_47 = (inVec_48 * inversesqrt(max (0.001, 
					    dot (inVec_48, inVec_48)
					  )));
					  mediump float tmpvar_49;
					  highp float tmpvar_50;
					  tmpvar_50 = clamp (dot (tmpvar_33, tmpvar_4), 0.0, 1.0);
					  tmpvar_49 = tmpvar_50;
					  highp float tmpvar_51;
					  tmpvar_51 = clamp (dot (tmpvar_33, tmpvar_47), 0.0, 1.0);
					  mediump float tmpvar_52;
					  highp float tmpvar_53;
					  tmpvar_53 = clamp (dot (tmpvar_33, worldViewDir_6), 0.0, 1.0);
					  tmpvar_52 = tmpvar_53;
					  highp float tmpvar_54;
					  highp float smoothness_55;
					  smoothness_55 = _Glossiness;
					  tmpvar_54 = (1.0 - smoothness_55);
					  perceptualRoughness_46 = tmpvar_54;
					  highp float tmpvar_56;
					  highp float perceptualRoughness_57;
					  perceptualRoughness_57 = perceptualRoughness_46;
					  tmpvar_56 = (perceptualRoughness_57 * perceptualRoughness_57);
					  roughness_45 = tmpvar_56;
					  mediump float tmpvar_58;
					  tmpvar_58 = (roughness_45 * roughness_45);
					  a2_44 = tmpvar_58;
					  specularTerm_43 = ((roughness_45 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_47), 0.0, 1.0)) * (1.5 + roughness_45))
					   * 
					    (((tmpvar_51 * tmpvar_51) * (a2_44 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_59;
					  tmpvar_59 = clamp (specularTerm_43, 0.0, 100.0);
					  specularTerm_43 = tmpvar_59;
					  surfaceReduction_42 = (1.0 - ((roughness_45 * perceptualRoughness_46) * 0.28));
					  mediump float x_60;
					  x_60 = (1.0 - tmpvar_52);
					  mediump vec3 tmpvar_61;
					  tmpvar_61 = mix (tmpvar_36, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_37)
					  ), 0.0, 1.0)), vec3(((x_60 * x_60) * (x_60 * x_60))));
					  highp vec3 tmpvar_62;
					  tmpvar_62 = (((
					    (diffColor_40 + (tmpvar_59 * tmpvar_36))
					   * tmpvar_3) * tmpvar_49) + ((surfaceReduction_42 * tmpvar_26) * tmpvar_61));
					  color_41 = tmpvar_62;
					  mediump vec4 tmpvar_63;
					  tmpvar_63.w = 1.0;
					  tmpvar_63.xyz = color_41;
					  c_32.xyz = tmpvar_63.xyz;
					  c_32.w = alpha_39;
					  c_5 = c_32;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = tmpvar_2;
					  xlv_TEXCOORD6 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 tmpvar_26;
					  mediump vec4 hdr_27;
					  hdr_27 = tmpvar_2;
					  mediump vec4 tmpvar_28;
					  tmpvar_28.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_28.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_29;
					  tmpvar_29 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_28.xyz, tmpvar_28.w);
					  mediump vec4 tmpvar_30;
					  tmpvar_30 = tmpvar_29;
					  tmpvar_26 = ((hdr_27.x * (
					    (hdr_27.w * (tmpvar_30.w - 1.0))
					   + 1.0)) * tmpvar_30.xyz);
					  lowp vec3 tmpvar_31;
					  mediump vec4 c_32;
					  highp vec3 tmpvar_33;
					  tmpvar_33 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_34;
					  mediump vec3 albedo_35;
					  albedo_35 = tmpvar_10;
					  mediump vec3 tmpvar_36;
					  tmpvar_36 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_35, vec3(_Metallic));
					  mediump float tmpvar_37;
					  tmpvar_37 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_34 = (albedo_35 * tmpvar_37);
					  tmpvar_31 = tmpvar_34;
					  mediump vec3 diffColor_38;
					  diffColor_38 = tmpvar_31;
					  mediump float alpha_39;
					  alpha_39 = tmpvar_12;
					  tmpvar_31 = diffColor_38;
					  mediump vec3 diffColor_40;
					  diffColor_40 = tmpvar_31;
					  mediump vec3 color_41;
					  mediump float surfaceReduction_42;
					  highp float specularTerm_43;
					  highp float a2_44;
					  mediump float roughness_45;
					  mediump float perceptualRoughness_46;
					  highp vec3 tmpvar_47;
					  highp vec3 inVec_48;
					  inVec_48 = (tmpvar_4 + worldViewDir_6);
					  tmpvar_47 = (inVec_48 * inversesqrt(max (0.001, 
					    dot (inVec_48, inVec_48)
					  )));
					  mediump float tmpvar_49;
					  highp float tmpvar_50;
					  tmpvar_50 = clamp (dot (tmpvar_33, tmpvar_4), 0.0, 1.0);
					  tmpvar_49 = tmpvar_50;
					  highp float tmpvar_51;
					  tmpvar_51 = clamp (dot (tmpvar_33, tmpvar_47), 0.0, 1.0);
					  mediump float tmpvar_52;
					  highp float tmpvar_53;
					  tmpvar_53 = clamp (dot (tmpvar_33, worldViewDir_6), 0.0, 1.0);
					  tmpvar_52 = tmpvar_53;
					  highp float tmpvar_54;
					  highp float smoothness_55;
					  smoothness_55 = _Glossiness;
					  tmpvar_54 = (1.0 - smoothness_55);
					  perceptualRoughness_46 = tmpvar_54;
					  highp float tmpvar_56;
					  highp float perceptualRoughness_57;
					  perceptualRoughness_57 = perceptualRoughness_46;
					  tmpvar_56 = (perceptualRoughness_57 * perceptualRoughness_57);
					  roughness_45 = tmpvar_56;
					  mediump float tmpvar_58;
					  tmpvar_58 = (roughness_45 * roughness_45);
					  a2_44 = tmpvar_58;
					  specularTerm_43 = ((roughness_45 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_47), 0.0, 1.0)) * (1.5 + roughness_45))
					   * 
					    (((tmpvar_51 * tmpvar_51) * (a2_44 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_59;
					  tmpvar_59 = clamp (specularTerm_43, 0.0, 100.0);
					  specularTerm_43 = tmpvar_59;
					  surfaceReduction_42 = (1.0 - ((roughness_45 * perceptualRoughness_46) * 0.28));
					  mediump float x_60;
					  x_60 = (1.0 - tmpvar_52);
					  mediump vec3 tmpvar_61;
					  tmpvar_61 = mix (tmpvar_36, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_37)
					  ), 0.0, 1.0)), vec3(((x_60 * x_60) * (x_60 * x_60))));
					  highp vec3 tmpvar_62;
					  tmpvar_62 = (((
					    (diffColor_40 + (tmpvar_59 * tmpvar_36))
					   * tmpvar_3) * tmpvar_49) + ((surfaceReduction_42 * tmpvar_26) * tmpvar_61));
					  color_41 = tmpvar_62;
					  mediump vec4 tmpvar_63;
					  tmpvar_63.w = 1.0;
					  tmpvar_63.xyz = color_41;
					  c_32.xyz = tmpvar_63.xyz;
					  c_32.w = alpha_39;
					  c_5 = c_32;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_8;
					float u_xlat10;
					float u_xlat24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_27;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat2.z = (-_Glossiness) + 1.0;
					    u_xlat16_25 = (-u_xlat2.z) * 0.699999988 + 1.70000005;
					    u_xlat16_25 = u_xlat16_25 * u_xlat2.z;
					    u_xlat16_25 = u_xlat16_25 * 6.0;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_25);
					    u_xlat16_3.x = u_xlat10_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
					    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat10 = u_xlat24;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
					#else
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					#endif
					    u_xlat24 = u_xlat24 + u_xlat24;
					    u_xlat0.xyz = u_xlat4.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat2.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat2.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_27 = (-u_xlat10) + 1.0;
					    u_xlat16_8 = u_xlat16_27 * u_xlat16_27;
					    u_xlat16_8 = u_xlat16_27 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_27 * u_xlat16_8;
					    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_2.xyz + (-u_xlat10_4.xyz);
					    u_xlat2.xyz = vec3(_DayWeight) * u_xlat16_2.xyz + u_xlat10_4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_27 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_29 = (-u_xlat16_27) + _Glossiness;
					    u_xlat16_29 = u_xlat16_29 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
					#else
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_29);
					    u_xlat16_7.xyz = vec3(u_xlat16_8) * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat16_27) + u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz;
					    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_3.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					lowp vec3 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat8;
					float u_xlat16;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_24 = (-_Glossiness) + 1.0;
					    u_xlat16_26 = (-u_xlat16_24) * 0.699999988 + 1.70000005;
					    u_xlat16_26 = u_xlat16_24 * u_xlat16_26;
					    u_xlat16_26 = u_xlat16_26 * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_26);
					    u_xlat16_3.x = u_xlat10_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_25 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_27 = u_xlat16_24 * u_xlat16_25;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24 + 1.5;
					    u_xlat16_27 = (-u_xlat16_27) * 0.280000001 + 1.0;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_27);
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = inversesqrt(u_xlat4.x);
					    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_27 = (-u_xlat1.x) + 1.0;
					    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
					    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_5.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz + (-u_xlat10_5.xyz);
					    u_xlat1.xyz = vec3(_DayWeight) * u_xlat16_1.xyz + u_xlat10_5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_7.x = (-u_xlat16_30) + _Glossiness;
					    u_xlat16_7.x = u_xlat16_7.x + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
					#else
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xxx;
					    u_xlat16_7.xyz = vec3(u_xlat16_27) * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz;
					    u_xlat28 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat28);
					    u_xlat28 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat8 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
					#else
					    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16 = max(u_xlat28, 0.319999993);
					    u_xlat16 = u_xlat16_24 * u_xlat16;
					    u_xlat16_24 = u_xlat16_25 * u_xlat16_25 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_24 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat16;
					    u_xlat0.x = u_xlat16_25 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat16_6.xyz * u_xlat0.xxx;
					    u_xlat0.xzw = u_xlat1.xyz * vec3(u_xlat16_30) + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat8) + u_xlat16_3.xyz;
					    u_xlat10_1.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					lowp vec3 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat8;
					float u_xlat16;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_24 = (-_Glossiness) + 1.0;
					    u_xlat16_26 = (-u_xlat16_24) * 0.699999988 + 1.70000005;
					    u_xlat16_26 = u_xlat16_24 * u_xlat16_26;
					    u_xlat16_26 = u_xlat16_26 * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_26);
					    u_xlat16_3.x = u_xlat10_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_25 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_27 = u_xlat16_24 * u_xlat16_25;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24 + 1.5;
					    u_xlat16_27 = (-u_xlat16_27) * 0.280000001 + 1.0;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_27);
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = inversesqrt(u_xlat4.x);
					    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_27 = (-u_xlat1.x) + 1.0;
					    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
					    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_5.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz + (-u_xlat10_5.xyz);
					    u_xlat1.xyz = vec3(_DayWeight) * u_xlat16_1.xyz + u_xlat10_5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_7.x = (-u_xlat16_30) + _Glossiness;
					    u_xlat16_7.x = u_xlat16_7.x + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
					#else
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xxx;
					    u_xlat16_7.xyz = vec3(u_xlat16_27) * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz;
					    u_xlat28 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat28);
					    u_xlat28 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat8 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
					#else
					    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16 = max(u_xlat28, 0.319999993);
					    u_xlat16 = u_xlat16_24 * u_xlat16;
					    u_xlat16_24 = u_xlat16_25 * u_xlat16_25 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_24 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat16;
					    u_xlat0.x = u_xlat16_25 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat16_6.xyz * u_xlat0.xxx;
					    u_xlat0.xzw = u_xlat1.xyz * vec3(u_xlat16_30) + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat8) + u_xlat16_3.xyz;
					    u_xlat10_1.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  mediump vec3 normal_7;
					  normal_7 = tmpvar_6;
					  mediump vec3 x1_8;
					  mediump vec4 tmpvar_9;
					  tmpvar_9 = (normal_7.xyzz * normal_7.yzzx);
					  x1_8.x = dot (unity_SHBr, tmpvar_9);
					  x1_8.y = dot (unity_SHBg, tmpvar_9);
					  x1_8.z = dot (unity_SHBb, tmpvar_9);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_6;
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (x1_8 + (unity_SHC.xyz * (
					    (normal_7.x * normal_7.x)
					   - 
					    (normal_7.y * normal_7.y)
					  )));
					  xlv_TEXCOORD5 = tmpvar_2;
					  xlv_TEXCOORD6 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 normalWorld_26;
					  normalWorld_26 = xlv_TEXCOORD1;
					  mediump vec4 tmpvar_27;
					  tmpvar_27.w = 1.0;
					  tmpvar_27.xyz = normalWorld_26;
					  mediump vec3 x_28;
					  x_28.x = dot (unity_SHAr, tmpvar_27);
					  x_28.y = dot (unity_SHAg, tmpvar_27);
					  x_28.z = dot (unity_SHAb, tmpvar_27);
					  mediump vec4 hdr_29;
					  hdr_29 = tmpvar_2;
					  mediump vec4 tmpvar_30;
					  tmpvar_30.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_30.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_31;
					  tmpvar_31 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_30.xyz, tmpvar_30.w);
					  mediump vec4 tmpvar_32;
					  tmpvar_32 = tmpvar_31;
					  lowp vec3 tmpvar_33;
					  mediump vec4 c_34;
					  highp vec3 tmpvar_35;
					  tmpvar_35 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_36;
					  mediump vec3 albedo_37;
					  albedo_37 = tmpvar_10;
					  mediump vec3 tmpvar_38;
					  tmpvar_38 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_37, vec3(_Metallic));
					  mediump float tmpvar_39;
					  tmpvar_39 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_36 = (albedo_37 * tmpvar_39);
					  tmpvar_33 = tmpvar_36;
					  mediump vec3 diffColor_40;
					  diffColor_40 = tmpvar_33;
					  mediump float alpha_41;
					  alpha_41 = tmpvar_12;
					  tmpvar_33 = diffColor_40;
					  mediump vec3 diffColor_42;
					  diffColor_42 = tmpvar_33;
					  mediump vec3 color_43;
					  mediump vec2 rlPow4AndFresnelTerm_44;
					  mediump float tmpvar_45;
					  highp float tmpvar_46;
					  tmpvar_46 = clamp (dot (tmpvar_35, tmpvar_4), 0.0, 1.0);
					  tmpvar_45 = tmpvar_46;
					  mediump float tmpvar_47;
					  highp float tmpvar_48;
					  tmpvar_48 = clamp (dot (tmpvar_35, worldViewDir_6), 0.0, 1.0);
					  tmpvar_47 = tmpvar_48;
					  highp vec2 tmpvar_49;
					  tmpvar_49.x = dot ((worldViewDir_6 - (2.0 * 
					    (dot (tmpvar_35, worldViewDir_6) * tmpvar_35)
					  )), tmpvar_4);
					  tmpvar_49.y = (1.0 - tmpvar_47);
					  highp vec2 tmpvar_50;
					  tmpvar_50 = ((tmpvar_49 * tmpvar_49) * (tmpvar_49 * tmpvar_49));
					  rlPow4AndFresnelTerm_44 = tmpvar_50;
					  mediump float tmpvar_51;
					  tmpvar_51 = rlPow4AndFresnelTerm_44.x;
					  mediump float specular_52;
					  highp float smoothness_53;
					  smoothness_53 = _Glossiness;
					  highp vec2 tmpvar_54;
					  tmpvar_54.x = tmpvar_51;
					  tmpvar_54.y = (1.0 - smoothness_53);
					  highp float tmpvar_55;
					  tmpvar_55 = (texture2D (unity_NHxRoughness, tmpvar_54).x * 16.0);
					  specular_52 = tmpvar_55;
					  color_43 = ((diffColor_42 + (specular_52 * tmpvar_38)) * (tmpvar_3 * tmpvar_45));
					  color_43 = (color_43 + ((
					    max (((1.055 * pow (
					      max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_28))
					    , vec3(0.4166667, 0.4166667, 0.4166667))) - 0.055), vec3(0.0, 0.0, 0.0))
					   * diffColor_42) + (
					    ((hdr_29.x * ((hdr_29.w * 
					      (tmpvar_32.w - 1.0)
					    ) + 1.0)) * tmpvar_32.xyz)
					   * 
					    mix (tmpvar_38, vec3(clamp ((_Glossiness + (1.0 - tmpvar_39)), 0.0, 1.0)), rlPow4AndFresnelTerm_44.yyy)
					  )));
					  mediump vec4 tmpvar_56;
					  tmpvar_56.w = 1.0;
					  tmpvar_56.xyz = color_43;
					  c_34.xyz = tmpvar_56.xyz;
					  c_34.w = alpha_41;
					  c_5 = c_34;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  mediump vec3 normal_7;
					  normal_7 = tmpvar_6;
					  mediump vec3 x1_8;
					  mediump vec4 tmpvar_9;
					  tmpvar_9 = (normal_7.xyzz * normal_7.yzzx);
					  x1_8.x = dot (unity_SHBr, tmpvar_9);
					  x1_8.y = dot (unity_SHBg, tmpvar_9);
					  x1_8.z = dot (unity_SHBb, tmpvar_9);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_6;
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (x1_8 + (unity_SHC.xyz * (
					    (normal_7.x * normal_7.x)
					   - 
					    (normal_7.y * normal_7.y)
					  )));
					  xlv_TEXCOORD5 = tmpvar_2;
					  xlv_TEXCOORD6 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 normalWorld_26;
					  normalWorld_26 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_27;
					  mediump vec3 tmpvar_28;
					  mediump vec4 tmpvar_29;
					  tmpvar_29.w = 1.0;
					  tmpvar_29.xyz = normalWorld_26;
					  mediump vec3 x_30;
					  x_30.x = dot (unity_SHAr, tmpvar_29);
					  x_30.y = dot (unity_SHAg, tmpvar_29);
					  x_30.z = dot (unity_SHAb, tmpvar_29);
					  tmpvar_28 = max (((1.055 * 
					    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_30)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  mediump vec4 hdr_31;
					  hdr_31 = tmpvar_2;
					  mediump vec4 tmpvar_32;
					  tmpvar_32.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_32.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_33;
					  tmpvar_33 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_32.xyz, tmpvar_32.w);
					  mediump vec4 tmpvar_34;
					  tmpvar_34 = tmpvar_33;
					  tmpvar_27 = ((hdr_31.x * (
					    (hdr_31.w * (tmpvar_34.w - 1.0))
					   + 1.0)) * tmpvar_34.xyz);
					  lowp vec3 tmpvar_35;
					  mediump vec4 c_36;
					  highp vec3 tmpvar_37;
					  tmpvar_37 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_38;
					  mediump vec3 albedo_39;
					  albedo_39 = tmpvar_10;
					  mediump vec3 tmpvar_40;
					  tmpvar_40 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_39, vec3(_Metallic));
					  mediump float tmpvar_41;
					  tmpvar_41 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_38 = (albedo_39 * tmpvar_41);
					  tmpvar_35 = tmpvar_38;
					  mediump vec3 diffColor_42;
					  diffColor_42 = tmpvar_35;
					  mediump float alpha_43;
					  alpha_43 = tmpvar_12;
					  tmpvar_35 = diffColor_42;
					  mediump vec3 diffColor_44;
					  diffColor_44 = tmpvar_35;
					  mediump vec3 color_45;
					  mediump float surfaceReduction_46;
					  highp float specularTerm_47;
					  highp float a2_48;
					  mediump float roughness_49;
					  mediump float perceptualRoughness_50;
					  highp vec3 tmpvar_51;
					  highp vec3 inVec_52;
					  inVec_52 = (tmpvar_4 + worldViewDir_6);
					  tmpvar_51 = (inVec_52 * inversesqrt(max (0.001, 
					    dot (inVec_52, inVec_52)
					  )));
					  mediump float tmpvar_53;
					  highp float tmpvar_54;
					  tmpvar_54 = clamp (dot (tmpvar_37, tmpvar_4), 0.0, 1.0);
					  tmpvar_53 = tmpvar_54;
					  highp float tmpvar_55;
					  tmpvar_55 = clamp (dot (tmpvar_37, tmpvar_51), 0.0, 1.0);
					  mediump float tmpvar_56;
					  highp float tmpvar_57;
					  tmpvar_57 = clamp (dot (tmpvar_37, worldViewDir_6), 0.0, 1.0);
					  tmpvar_56 = tmpvar_57;
					  highp float tmpvar_58;
					  highp float smoothness_59;
					  smoothness_59 = _Glossiness;
					  tmpvar_58 = (1.0 - smoothness_59);
					  perceptualRoughness_50 = tmpvar_58;
					  highp float tmpvar_60;
					  highp float perceptualRoughness_61;
					  perceptualRoughness_61 = perceptualRoughness_50;
					  tmpvar_60 = (perceptualRoughness_61 * perceptualRoughness_61);
					  roughness_49 = tmpvar_60;
					  mediump float tmpvar_62;
					  tmpvar_62 = (roughness_49 * roughness_49);
					  a2_48 = tmpvar_62;
					  specularTerm_47 = ((roughness_49 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_51), 0.0, 1.0)) * (1.5 + roughness_49))
					   * 
					    (((tmpvar_55 * tmpvar_55) * (a2_48 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_63;
					  tmpvar_63 = clamp (specularTerm_47, 0.0, 100.0);
					  specularTerm_47 = tmpvar_63;
					  surfaceReduction_46 = (1.0 - ((roughness_49 * perceptualRoughness_50) * 0.28));
					  mediump float x_64;
					  x_64 = (1.0 - tmpvar_56);
					  mediump vec3 tmpvar_65;
					  tmpvar_65 = mix (tmpvar_40, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_41)
					  ), 0.0, 1.0)), vec3(((x_64 * x_64) * (x_64 * x_64))));
					  highp vec3 tmpvar_66;
					  tmpvar_66 = (((
					    ((diffColor_44 + (tmpvar_63 * tmpvar_40)) * tmpvar_3)
					   * tmpvar_53) + (tmpvar_28 * diffColor_44)) + ((surfaceReduction_46 * tmpvar_27) * tmpvar_65));
					  color_45 = tmpvar_66;
					  mediump vec4 tmpvar_67;
					  tmpvar_67.w = 1.0;
					  tmpvar_67.xyz = color_45;
					  c_36.xyz = tmpvar_67.xyz;
					  c_36.w = alpha_43;
					  c_5 = c_36;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  mediump vec3 normal_7;
					  normal_7 = tmpvar_6;
					  mediump vec3 x1_8;
					  mediump vec4 tmpvar_9;
					  tmpvar_9 = (normal_7.xyzz * normal_7.yzzx);
					  x1_8.x = dot (unity_SHBr, tmpvar_9);
					  x1_8.y = dot (unity_SHBg, tmpvar_9);
					  x1_8.z = dot (unity_SHBb, tmpvar_9);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_6;
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (x1_8 + (unity_SHC.xyz * (
					    (normal_7.x * normal_7.x)
					   - 
					    (normal_7.y * normal_7.y)
					  )));
					  xlv_TEXCOORD5 = tmpvar_2;
					  xlv_TEXCOORD6 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 normalWorld_26;
					  normalWorld_26 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_27;
					  mediump vec3 tmpvar_28;
					  mediump vec4 tmpvar_29;
					  tmpvar_29.w = 1.0;
					  tmpvar_29.xyz = normalWorld_26;
					  mediump vec3 x_30;
					  x_30.x = dot (unity_SHAr, tmpvar_29);
					  x_30.y = dot (unity_SHAg, tmpvar_29);
					  x_30.z = dot (unity_SHAb, tmpvar_29);
					  tmpvar_28 = max (((1.055 * 
					    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_30)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  mediump vec4 hdr_31;
					  hdr_31 = tmpvar_2;
					  mediump vec4 tmpvar_32;
					  tmpvar_32.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_32.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_33;
					  tmpvar_33 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_32.xyz, tmpvar_32.w);
					  mediump vec4 tmpvar_34;
					  tmpvar_34 = tmpvar_33;
					  tmpvar_27 = ((hdr_31.x * (
					    (hdr_31.w * (tmpvar_34.w - 1.0))
					   + 1.0)) * tmpvar_34.xyz);
					  lowp vec3 tmpvar_35;
					  mediump vec4 c_36;
					  highp vec3 tmpvar_37;
					  tmpvar_37 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_38;
					  mediump vec3 albedo_39;
					  albedo_39 = tmpvar_10;
					  mediump vec3 tmpvar_40;
					  tmpvar_40 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_39, vec3(_Metallic));
					  mediump float tmpvar_41;
					  tmpvar_41 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_38 = (albedo_39 * tmpvar_41);
					  tmpvar_35 = tmpvar_38;
					  mediump vec3 diffColor_42;
					  diffColor_42 = tmpvar_35;
					  mediump float alpha_43;
					  alpha_43 = tmpvar_12;
					  tmpvar_35 = diffColor_42;
					  mediump vec3 diffColor_44;
					  diffColor_44 = tmpvar_35;
					  mediump vec3 color_45;
					  mediump float surfaceReduction_46;
					  highp float specularTerm_47;
					  highp float a2_48;
					  mediump float roughness_49;
					  mediump float perceptualRoughness_50;
					  highp vec3 tmpvar_51;
					  highp vec3 inVec_52;
					  inVec_52 = (tmpvar_4 + worldViewDir_6);
					  tmpvar_51 = (inVec_52 * inversesqrt(max (0.001, 
					    dot (inVec_52, inVec_52)
					  )));
					  mediump float tmpvar_53;
					  highp float tmpvar_54;
					  tmpvar_54 = clamp (dot (tmpvar_37, tmpvar_4), 0.0, 1.0);
					  tmpvar_53 = tmpvar_54;
					  highp float tmpvar_55;
					  tmpvar_55 = clamp (dot (tmpvar_37, tmpvar_51), 0.0, 1.0);
					  mediump float tmpvar_56;
					  highp float tmpvar_57;
					  tmpvar_57 = clamp (dot (tmpvar_37, worldViewDir_6), 0.0, 1.0);
					  tmpvar_56 = tmpvar_57;
					  highp float tmpvar_58;
					  highp float smoothness_59;
					  smoothness_59 = _Glossiness;
					  tmpvar_58 = (1.0 - smoothness_59);
					  perceptualRoughness_50 = tmpvar_58;
					  highp float tmpvar_60;
					  highp float perceptualRoughness_61;
					  perceptualRoughness_61 = perceptualRoughness_50;
					  tmpvar_60 = (perceptualRoughness_61 * perceptualRoughness_61);
					  roughness_49 = tmpvar_60;
					  mediump float tmpvar_62;
					  tmpvar_62 = (roughness_49 * roughness_49);
					  a2_48 = tmpvar_62;
					  specularTerm_47 = ((roughness_49 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_51), 0.0, 1.0)) * (1.5 + roughness_49))
					   * 
					    (((tmpvar_55 * tmpvar_55) * (a2_48 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_63;
					  tmpvar_63 = clamp (specularTerm_47, 0.0, 100.0);
					  specularTerm_47 = tmpvar_63;
					  surfaceReduction_46 = (1.0 - ((roughness_49 * perceptualRoughness_50) * 0.28));
					  mediump float x_64;
					  x_64 = (1.0 - tmpvar_56);
					  mediump vec3 tmpvar_65;
					  tmpvar_65 = mix (tmpvar_40, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_41)
					  ), 0.0, 1.0)), vec3(((x_64 * x_64) * (x_64 * x_64))));
					  highp vec3 tmpvar_66;
					  tmpvar_66 = (((
					    ((diffColor_44 + (tmpvar_63 * tmpvar_40)) * tmpvar_3)
					   * tmpvar_53) + (tmpvar_28 * diffColor_44)) + ((surfaceReduction_46 * tmpvar_27) * tmpvar_65));
					  color_45 = tmpvar_66;
					  mediump vec4 tmpvar_67;
					  tmpvar_67.w = 1.0;
					  tmpvar_67.xyz = color_45;
					  c_36.xyz = tmpvar_67.xyz;
					  c_36.w = alpha_43;
					  c_5 = c_36;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat12;
					mediump vec3 u_xlat16_12;
					lowp vec3 u_xlat10_12;
					float u_xlat30;
					mediump float u_xlat16_31;
					float u_xlat32;
					mediump float u_xlat16_34;
					mediump float u_xlat16_36;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat16_1.x = dot((-u_xlat2.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_1.xxx) + (-u_xlat2.xyz);
					    u_xlat3.z = (-_Glossiness) + 1.0;
					    u_xlat16_31 = (-u_xlat3.z) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat16_31 * u_xlat3.z;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_31);
					    u_xlat16_4.x = u_xlat10_1.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_1.xyz * u_xlat16_4.xxx;
					    u_xlat30 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat5.xyz = vec3(u_xlat30) * vs_TEXCOORD1.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat32 = u_xlat30;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
					#else
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					#endif
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat2.xyz = u_xlat5.xyz * (-vec3(u_xlat30)) + u_xlat2.xyz;
					    u_xlat30 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = vec3(u_xlat30) * _LightColor0.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat3.x = u_xlat30 * u_xlat30;
					    u_xlat30 = texture(unity_NHxRoughness, u_xlat3.xz).x;
					    u_xlat30 = u_xlat30 * 16.0;
					    u_xlat16_34 = (-u_xlat32) + 1.0;
					    u_xlat16_2 = u_xlat16_34 * u_xlat16_34;
					    u_xlat16_2 = u_xlat16_34 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_34 * u_xlat16_2;
					    u_xlat10_12.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_3.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_12.xyz = u_xlat10_12.xyz + (-u_xlat10_3.xyz);
					    u_xlat12.xyz = vec3(_DayWeight) * u_xlat16_12.xyz + u_xlat10_3.xyz;
					    u_xlat12.xyz = u_xlat12.xyz * _Color.xyz;
					    u_xlat16_7.xyz = u_xlat12.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat12.xyz = u_xlat12.xyz * vs_COLOR0.xyz;
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_34 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_36 = (-u_xlat16_34) + _Glossiness;
					    u_xlat16_8.xyz = u_xlat12.xyz * vec3(u_xlat16_34);
					    u_xlat16_34 = u_xlat16_36 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
					#else
					    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_34);
					    u_xlat16_9.xyz = vec3(u_xlat16_2) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = vec3(u_xlat30) * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_9.xyz;
					    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_8.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_4.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat30 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump float u_xlat16_9;
					mediump vec3 u_xlat16_11;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_22;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_3.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_2.xyz + (-u_xlat10_3.xyz);
					    u_xlat2.xyz = vec3(_DayWeight) * u_xlat16_2.xyz + u_xlat10_3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat16_1.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat3.xyz;
					    u_xlat16_22 = (-u_xlat16_22) + _Glossiness;
					    u_xlat16_22 = u_xlat16_22 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
					#else
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + vec3(u_xlat16_22);
					    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat21 = max(u_xlat21, 0.319999993);
					    u_xlat16_23 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_23 * u_xlat16_23 + 1.5;
					    u_xlat21 = u_xlat21 * u_xlat16_3;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat16_9 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_16 = u_xlat16_9 * u_xlat16_9 + -1.0;
					    u_xlat2.x = u_xlat2.x * u_xlat16_16 + 1.00001001;
					    u_xlat21 = u_xlat21 * u_xlat2.x;
					    u_xlat21 = u_xlat16_9 / u_xlat21;
					    u_xlat16_22 = u_xlat16_23 * u_xlat16_9;
					    u_xlat16_22 = (-u_xlat16_22) * 0.280000001 + 1.0;
					    u_xlat21 = u_xlat21 + -9.99999975e-05;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = min(u_xlat21, 100.0);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat3.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = (-u_xlat3.x) + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat21) + u_xlat16_6.xyz;
					    u_xlat16_4.x = (-u_xlat16_23) * 0.699999988 + 1.70000005;
					    u_xlat16_4.x = u_xlat16_23 * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * 6.0;
					    u_xlat16_11.x = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;
					    u_xlat16_11.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_11.xxx) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_4.x);
					    u_xlat16_4.x = u_xlat10_0.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_0.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat16_4.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat2.xyz;
					    u_xlat10_2.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.xyz = u_xlat10_2.xyz * _EmissionColor.xyz;
					    u_xlat21 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump float u_xlat16_9;
					mediump vec3 u_xlat16_11;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_22;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_3.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_2.xyz + (-u_xlat10_3.xyz);
					    u_xlat2.xyz = vec3(_DayWeight) * u_xlat16_2.xyz + u_xlat10_3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat16_1.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat3.xyz;
					    u_xlat16_22 = (-u_xlat16_22) + _Glossiness;
					    u_xlat16_22 = u_xlat16_22 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
					#else
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + vec3(u_xlat16_22);
					    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat21 = max(u_xlat21, 0.319999993);
					    u_xlat16_23 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_23 * u_xlat16_23 + 1.5;
					    u_xlat21 = u_xlat21 * u_xlat16_3;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat16_9 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_16 = u_xlat16_9 * u_xlat16_9 + -1.0;
					    u_xlat2.x = u_xlat2.x * u_xlat16_16 + 1.00001001;
					    u_xlat21 = u_xlat21 * u_xlat2.x;
					    u_xlat21 = u_xlat16_9 / u_xlat21;
					    u_xlat16_22 = u_xlat16_23 * u_xlat16_9;
					    u_xlat16_22 = (-u_xlat16_22) * 0.280000001 + 1.0;
					    u_xlat21 = u_xlat21 + -9.99999975e-05;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = min(u_xlat21, 100.0);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat3.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = (-u_xlat3.x) + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat21) + u_xlat16_6.xyz;
					    u_xlat16_4.x = (-u_xlat16_23) * 0.699999988 + 1.70000005;
					    u_xlat16_4.x = u_xlat16_23 * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * 6.0;
					    u_xlat16_11.x = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;
					    u_xlat16_11.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_11.xxx) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_4.x);
					    u_xlat16_4.x = u_xlat10_0.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_0.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat16_4.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat2.xyz;
					    u_xlat10_2.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.xyz = u_xlat10_2.xyz * _EmissionColor.xyz;
					    u_xlat21 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = tmpvar_2;
					  xlv_TEXCOORD6 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  lowp vec4 tmpvar_26;
					  tmpvar_26 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
					  mediump vec4 hdr_27;
					  hdr_27 = tmpvar_2;
					  mediump vec4 tmpvar_28;
					  tmpvar_28.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_28.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_29;
					  tmpvar_29 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_28.xyz, tmpvar_28.w);
					  mediump vec4 tmpvar_30;
					  tmpvar_30 = tmpvar_29;
					  lowp vec3 tmpvar_31;
					  mediump vec4 c_32;
					  highp vec3 tmpvar_33;
					  tmpvar_33 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_34;
					  mediump vec3 albedo_35;
					  albedo_35 = tmpvar_10;
					  mediump vec3 tmpvar_36;
					  tmpvar_36 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_35, vec3(_Metallic));
					  mediump float tmpvar_37;
					  tmpvar_37 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_34 = (albedo_35 * tmpvar_37);
					  tmpvar_31 = tmpvar_34;
					  mediump vec3 diffColor_38;
					  diffColor_38 = tmpvar_31;
					  mediump float alpha_39;
					  alpha_39 = tmpvar_12;
					  tmpvar_31 = diffColor_38;
					  mediump vec3 diffColor_40;
					  diffColor_40 = tmpvar_31;
					  mediump vec3 color_41;
					  mediump vec2 rlPow4AndFresnelTerm_42;
					  mediump float tmpvar_43;
					  highp float tmpvar_44;
					  tmpvar_44 = clamp (dot (tmpvar_33, tmpvar_4), 0.0, 1.0);
					  tmpvar_43 = tmpvar_44;
					  mediump float tmpvar_45;
					  highp float tmpvar_46;
					  tmpvar_46 = clamp (dot (tmpvar_33, worldViewDir_6), 0.0, 1.0);
					  tmpvar_45 = tmpvar_46;
					  highp vec2 tmpvar_47;
					  tmpvar_47.x = dot ((worldViewDir_6 - (2.0 * 
					    (dot (tmpvar_33, worldViewDir_6) * tmpvar_33)
					  )), tmpvar_4);
					  tmpvar_47.y = (1.0 - tmpvar_45);
					  highp vec2 tmpvar_48;
					  tmpvar_48 = ((tmpvar_47 * tmpvar_47) * (tmpvar_47 * tmpvar_47));
					  rlPow4AndFresnelTerm_42 = tmpvar_48;
					  mediump float tmpvar_49;
					  tmpvar_49 = rlPow4AndFresnelTerm_42.x;
					  mediump float specular_50;
					  highp float smoothness_51;
					  smoothness_51 = _Glossiness;
					  highp vec2 tmpvar_52;
					  tmpvar_52.x = tmpvar_49;
					  tmpvar_52.y = (1.0 - smoothness_51);
					  highp float tmpvar_53;
					  tmpvar_53 = (texture2D (unity_NHxRoughness, tmpvar_52).x * 16.0);
					  specular_50 = tmpvar_53;
					  color_41 = ((diffColor_40 + (specular_50 * tmpvar_36)) * (tmpvar_3 * tmpvar_43));
					  color_41 = (color_41 + ((
					    pow (((unity_DynamicLightmap_HDR.x * tmpvar_26.w) * tmpvar_26.xyz), unity_DynamicLightmap_HDR.yyy)
					   * diffColor_40) + (
					    ((hdr_27.x * ((hdr_27.w * 
					      (tmpvar_30.w - 1.0)
					    ) + 1.0)) * tmpvar_30.xyz)
					   * 
					    mix (tmpvar_36, vec3(clamp ((_Glossiness + (1.0 - tmpvar_37)), 0.0, 1.0)), rlPow4AndFresnelTerm_42.yyy)
					  )));
					  mediump vec4 tmpvar_54;
					  tmpvar_54.w = 1.0;
					  tmpvar_54.xyz = color_41;
					  c_32.xyz = tmpvar_54.xyz;
					  c_32.w = alpha_39;
					  c_5 = c_32;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = tmpvar_2;
					  xlv_TEXCOORD6 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 tmpvar_26;
					  mediump vec3 tmpvar_27;
					  lowp vec4 tmpvar_28;
					  tmpvar_28 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
					  tmpvar_27 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_28.w) * tmpvar_28.xyz), unity_DynamicLightmap_HDR.yyy);
					  mediump vec4 hdr_29;
					  hdr_29 = tmpvar_2;
					  mediump vec4 tmpvar_30;
					  tmpvar_30.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_30.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_31;
					  tmpvar_31 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_30.xyz, tmpvar_30.w);
					  mediump vec4 tmpvar_32;
					  tmpvar_32 = tmpvar_31;
					  tmpvar_26 = ((hdr_29.x * (
					    (hdr_29.w * (tmpvar_32.w - 1.0))
					   + 1.0)) * tmpvar_32.xyz);
					  lowp vec3 tmpvar_33;
					  mediump vec4 c_34;
					  highp vec3 tmpvar_35;
					  tmpvar_35 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_36;
					  mediump vec3 albedo_37;
					  albedo_37 = tmpvar_10;
					  mediump vec3 tmpvar_38;
					  tmpvar_38 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_37, vec3(_Metallic));
					  mediump float tmpvar_39;
					  tmpvar_39 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_36 = (albedo_37 * tmpvar_39);
					  tmpvar_33 = tmpvar_36;
					  mediump vec3 diffColor_40;
					  diffColor_40 = tmpvar_33;
					  mediump float alpha_41;
					  alpha_41 = tmpvar_12;
					  tmpvar_33 = diffColor_40;
					  mediump vec3 diffColor_42;
					  diffColor_42 = tmpvar_33;
					  mediump vec3 color_43;
					  mediump float surfaceReduction_44;
					  highp float specularTerm_45;
					  highp float a2_46;
					  mediump float roughness_47;
					  mediump float perceptualRoughness_48;
					  highp vec3 tmpvar_49;
					  highp vec3 inVec_50;
					  inVec_50 = (tmpvar_4 + worldViewDir_6);
					  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
					    dot (inVec_50, inVec_50)
					  )));
					  mediump float tmpvar_51;
					  highp float tmpvar_52;
					  tmpvar_52 = clamp (dot (tmpvar_35, tmpvar_4), 0.0, 1.0);
					  tmpvar_51 = tmpvar_52;
					  highp float tmpvar_53;
					  tmpvar_53 = clamp (dot (tmpvar_35, tmpvar_49), 0.0, 1.0);
					  mediump float tmpvar_54;
					  highp float tmpvar_55;
					  tmpvar_55 = clamp (dot (tmpvar_35, worldViewDir_6), 0.0, 1.0);
					  tmpvar_54 = tmpvar_55;
					  highp float tmpvar_56;
					  highp float smoothness_57;
					  smoothness_57 = _Glossiness;
					  tmpvar_56 = (1.0 - smoothness_57);
					  perceptualRoughness_48 = tmpvar_56;
					  highp float tmpvar_58;
					  highp float perceptualRoughness_59;
					  perceptualRoughness_59 = perceptualRoughness_48;
					  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
					  roughness_47 = tmpvar_58;
					  mediump float tmpvar_60;
					  tmpvar_60 = (roughness_47 * roughness_47);
					  a2_46 = tmpvar_60;
					  specularTerm_45 = ((roughness_47 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
					   * 
					    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_61;
					  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
					  specularTerm_45 = tmpvar_61;
					  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
					  mediump float x_62;
					  x_62 = (1.0 - tmpvar_54);
					  mediump vec3 tmpvar_63;
					  tmpvar_63 = mix (tmpvar_38, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_39)
					  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
					  highp vec3 tmpvar_64;
					  tmpvar_64 = (((
					    ((diffColor_42 + (tmpvar_61 * tmpvar_38)) * tmpvar_3)
					   * tmpvar_51) + (tmpvar_27 * diffColor_42)) + ((surfaceReduction_44 * tmpvar_26) * tmpvar_63));
					  color_43 = tmpvar_64;
					  mediump vec4 tmpvar_65;
					  tmpvar_65.w = 1.0;
					  tmpvar_65.xyz = color_43;
					  c_34.xyz = tmpvar_65.xyz;
					  c_34.w = alpha_41;
					  c_5 = c_34;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = tmpvar_2;
					  xlv_TEXCOORD6 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 tmpvar_26;
					  mediump vec3 tmpvar_27;
					  lowp vec4 tmpvar_28;
					  tmpvar_28 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
					  tmpvar_27 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_28.w) * tmpvar_28.xyz), unity_DynamicLightmap_HDR.yyy);
					  mediump vec4 hdr_29;
					  hdr_29 = tmpvar_2;
					  mediump vec4 tmpvar_30;
					  tmpvar_30.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_30.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_31;
					  tmpvar_31 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_30.xyz, tmpvar_30.w);
					  mediump vec4 tmpvar_32;
					  tmpvar_32 = tmpvar_31;
					  tmpvar_26 = ((hdr_29.x * (
					    (hdr_29.w * (tmpvar_32.w - 1.0))
					   + 1.0)) * tmpvar_32.xyz);
					  lowp vec3 tmpvar_33;
					  mediump vec4 c_34;
					  highp vec3 tmpvar_35;
					  tmpvar_35 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_36;
					  mediump vec3 albedo_37;
					  albedo_37 = tmpvar_10;
					  mediump vec3 tmpvar_38;
					  tmpvar_38 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_37, vec3(_Metallic));
					  mediump float tmpvar_39;
					  tmpvar_39 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_36 = (albedo_37 * tmpvar_39);
					  tmpvar_33 = tmpvar_36;
					  mediump vec3 diffColor_40;
					  diffColor_40 = tmpvar_33;
					  mediump float alpha_41;
					  alpha_41 = tmpvar_12;
					  tmpvar_33 = diffColor_40;
					  mediump vec3 diffColor_42;
					  diffColor_42 = tmpvar_33;
					  mediump vec3 color_43;
					  mediump float surfaceReduction_44;
					  highp float specularTerm_45;
					  highp float a2_46;
					  mediump float roughness_47;
					  mediump float perceptualRoughness_48;
					  highp vec3 tmpvar_49;
					  highp vec3 inVec_50;
					  inVec_50 = (tmpvar_4 + worldViewDir_6);
					  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
					    dot (inVec_50, inVec_50)
					  )));
					  mediump float tmpvar_51;
					  highp float tmpvar_52;
					  tmpvar_52 = clamp (dot (tmpvar_35, tmpvar_4), 0.0, 1.0);
					  tmpvar_51 = tmpvar_52;
					  highp float tmpvar_53;
					  tmpvar_53 = clamp (dot (tmpvar_35, tmpvar_49), 0.0, 1.0);
					  mediump float tmpvar_54;
					  highp float tmpvar_55;
					  tmpvar_55 = clamp (dot (tmpvar_35, worldViewDir_6), 0.0, 1.0);
					  tmpvar_54 = tmpvar_55;
					  highp float tmpvar_56;
					  highp float smoothness_57;
					  smoothness_57 = _Glossiness;
					  tmpvar_56 = (1.0 - smoothness_57);
					  perceptualRoughness_48 = tmpvar_56;
					  highp float tmpvar_58;
					  highp float perceptualRoughness_59;
					  perceptualRoughness_59 = perceptualRoughness_48;
					  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
					  roughness_47 = tmpvar_58;
					  mediump float tmpvar_60;
					  tmpvar_60 = (roughness_47 * roughness_47);
					  a2_46 = tmpvar_60;
					  specularTerm_45 = ((roughness_47 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
					   * 
					    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_61;
					  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
					  specularTerm_45 = tmpvar_61;
					  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
					  mediump float x_62;
					  x_62 = (1.0 - tmpvar_54);
					  mediump vec3 tmpvar_63;
					  tmpvar_63 = mix (tmpvar_38, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_39)
					  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
					  highp vec3 tmpvar_64;
					  tmpvar_64 = (((
					    ((diffColor_42 + (tmpvar_61 * tmpvar_38)) * tmpvar_3)
					   * tmpvar_51) + (tmpvar_27 * diffColor_42)) + ((surfaceReduction_44 * tmpvar_26) * tmpvar_63));
					  color_43 = tmpvar_64;
					  mediump vec4 tmpvar_65;
					  tmpvar_65.w = 1.0;
					  tmpvar_65.xyz = color_43;
					  c_34.xyz = tmpvar_65.xyz;
					  c_34.w = alpha_41;
					  c_5 = c_34;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					lowp vec3 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump float u_xlat16_10;
					float u_xlat13;
					float u_xlat30;
					mediump float u_xlat16_31;
					mediump float u_xlat16_34;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat16_31 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
					    u_xlat16_2.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat0.xyz);
					    u_xlat3.z = (-_Glossiness) + 1.0;
					    u_xlat16_31 = (-u_xlat3.z) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat16_31 * u_xlat3.z;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_31);
					    u_xlat16_31 = u_xlat10_2.w + -1.0;
					    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;
					    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(u_xlat16_31);
					    u_xlat30 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat5.xyz = vec3(u_xlat30) * vs_TEXCOORD1.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat5.xyz);
					    u_xlat13 = u_xlat30;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
					#else
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					#endif
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat0.xyz = u_xlat5.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
					    u_xlat30 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = vec3(u_xlat30) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat3.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_31 = (-u_xlat13) + 1.0;
					    u_xlat16_10 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_10 = u_xlat16_31 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_31 * u_xlat16_10;
					    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_5.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_3.xyz + (-u_xlat10_5.xyz);
					    u_xlat3.xyz = vec3(_DayWeight) * u_xlat16_3.xyz + u_xlat10_5.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat16_7.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_34 = (-u_xlat16_31) + _Glossiness;
					    u_xlat16_8.xyz = vec3(u_xlat16_31) * u_xlat3.xyz;
					    u_xlat16_31 = u_xlat16_34 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_31);
					    u_xlat16_9.xyz = vec3(u_xlat16_10) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_9.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_1.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat30 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_6;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_22;
					mediump float u_xlat16_23;
					mediump float u_xlat16_24;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_2.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat2.xyz;
					    u_xlat16_22 = (-u_xlat16_22) + _Glossiness;
					    u_xlat16_22 = u_xlat16_22 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
					#else
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_22);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat21 = max(u_xlat21, 0.319999993);
					    u_xlat16_23 = (-_Glossiness) + 1.0;
					    u_xlat16_6 = u_xlat16_23 * u_xlat16_23 + 1.5;
					    u_xlat21 = u_xlat21 * u_xlat16_6;
					    u_xlat6.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * vs_TEXCOORD1.xyz;
					    u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat16_9 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_16 = u_xlat16_9 * u_xlat16_9 + -1.0;
					    u_xlat2.x = u_xlat2.x * u_xlat16_16 + 1.00001001;
					    u_xlat21 = u_xlat21 * u_xlat2.x;
					    u_xlat21 = u_xlat16_9 / u_xlat21;
					    u_xlat16_22 = u_xlat16_23 * u_xlat16_9;
					    u_xlat16_22 = (-u_xlat16_22) * 0.280000001 + 1.0;
					    u_xlat21 = u_xlat21 + -9.99999975e-05;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = min(u_xlat21, 100.0);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat21 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
					#else
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					#endif
					    u_xlat16_24 = (-u_xlat6.x) + 1.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_5.xyz + u_xlat16_3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat21) + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-u_xlat16_23) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_23;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat16_8 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_8 = u_xlat16_8 + u_xlat16_8;
					    u_xlat16_4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_8)) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat10_0.w + -1.0;
					    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_22);
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat2.xyz;
					    u_xlat10_2.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.xyz = u_xlat10_2.xyz * _EmissionColor.xyz;
					    u_xlat21 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_6;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_22;
					mediump float u_xlat16_23;
					mediump float u_xlat16_24;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_2.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat2.xyz;
					    u_xlat16_22 = (-u_xlat16_22) + _Glossiness;
					    u_xlat16_22 = u_xlat16_22 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
					#else
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_22);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat21 = max(u_xlat21, 0.319999993);
					    u_xlat16_23 = (-_Glossiness) + 1.0;
					    u_xlat16_6 = u_xlat16_23 * u_xlat16_23 + 1.5;
					    u_xlat21 = u_xlat21 * u_xlat16_6;
					    u_xlat6.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * vs_TEXCOORD1.xyz;
					    u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat16_9 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_16 = u_xlat16_9 * u_xlat16_9 + -1.0;
					    u_xlat2.x = u_xlat2.x * u_xlat16_16 + 1.00001001;
					    u_xlat21 = u_xlat21 * u_xlat2.x;
					    u_xlat21 = u_xlat16_9 / u_xlat21;
					    u_xlat16_22 = u_xlat16_23 * u_xlat16_9;
					    u_xlat16_22 = (-u_xlat16_22) * 0.280000001 + 1.0;
					    u_xlat21 = u_xlat21 + -9.99999975e-05;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = min(u_xlat21, 100.0);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat21 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
					#else
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					#endif
					    u_xlat16_24 = (-u_xlat6.x) + 1.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_5.xyz + u_xlat16_3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat21) + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-u_xlat16_23) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_23;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat16_8 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_8 = u_xlat16_8 + u_xlat16_8;
					    u_xlat16_4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_8)) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat10_0.w + -1.0;
					    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_22);
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat2.xyz;
					    u_xlat10_2.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.xyz = u_xlat10_2.xyz * _EmissionColor.xyz;
					    u_xlat21 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec4 tmpvar_26;
					  tmpvar_26 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_27;
					  color_27 = tmpvar_26;
					  mediump vec4 hdr_28;
					  hdr_28 = tmpvar_2;
					  mediump vec4 tmpvar_29;
					  tmpvar_29.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_29.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_30;
					  tmpvar_30 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_29.xyz, tmpvar_29.w);
					  mediump vec4 tmpvar_31;
					  tmpvar_31 = tmpvar_30;
					  lowp vec3 tmpvar_32;
					  mediump vec4 c_33;
					  highp vec3 tmpvar_34;
					  tmpvar_34 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_35;
					  mediump vec3 albedo_36;
					  albedo_36 = tmpvar_10;
					  mediump vec3 tmpvar_37;
					  tmpvar_37 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_36, vec3(_Metallic));
					  mediump float tmpvar_38;
					  tmpvar_38 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_35 = (albedo_36 * tmpvar_38);
					  tmpvar_32 = tmpvar_35;
					  mediump vec3 diffColor_39;
					  diffColor_39 = tmpvar_32;
					  mediump float alpha_40;
					  alpha_40 = tmpvar_12;
					  tmpvar_32 = diffColor_39;
					  mediump vec3 diffColor_41;
					  diffColor_41 = tmpvar_32;
					  mediump vec3 color_42;
					  mediump vec2 rlPow4AndFresnelTerm_43;
					  mediump float tmpvar_44;
					  highp float tmpvar_45;
					  tmpvar_45 = clamp (dot (tmpvar_34, tmpvar_4), 0.0, 1.0);
					  tmpvar_44 = tmpvar_45;
					  mediump float tmpvar_46;
					  highp float tmpvar_47;
					  tmpvar_47 = clamp (dot (tmpvar_34, worldViewDir_6), 0.0, 1.0);
					  tmpvar_46 = tmpvar_47;
					  highp vec2 tmpvar_48;
					  tmpvar_48.x = dot ((worldViewDir_6 - (2.0 * 
					    (dot (tmpvar_34, worldViewDir_6) * tmpvar_34)
					  )), tmpvar_4);
					  tmpvar_48.y = (1.0 - tmpvar_46);
					  highp vec2 tmpvar_49;
					  tmpvar_49 = ((tmpvar_48 * tmpvar_48) * (tmpvar_48 * tmpvar_48));
					  rlPow4AndFresnelTerm_43 = tmpvar_49;
					  mediump float tmpvar_50;
					  tmpvar_50 = rlPow4AndFresnelTerm_43.x;
					  mediump float specular_51;
					  highp float smoothness_52;
					  smoothness_52 = _Glossiness;
					  highp vec2 tmpvar_53;
					  tmpvar_53.x = tmpvar_50;
					  tmpvar_53.y = (1.0 - smoothness_52);
					  highp float tmpvar_54;
					  tmpvar_54 = (texture2D (unity_NHxRoughness, tmpvar_53).x * 16.0);
					  specular_51 = tmpvar_54;
					  color_42 = ((diffColor_41 + (specular_51 * tmpvar_37)) * (tmpvar_3 * tmpvar_44));
					  color_42 = (color_42 + ((
					    (unity_Lightmap_HDR.x * color_27.xyz)
					   * diffColor_41) + (
					    ((hdr_28.x * ((hdr_28.w * 
					      (tmpvar_31.w - 1.0)
					    ) + 1.0)) * tmpvar_31.xyz)
					   * 
					    mix (tmpvar_37, vec3(clamp ((_Glossiness + (1.0 - tmpvar_38)), 0.0, 1.0)), rlPow4AndFresnelTerm_43.yyy)
					  )));
					  mediump vec4 tmpvar_55;
					  tmpvar_55.w = 1.0;
					  tmpvar_55.xyz = color_42;
					  c_33.xyz = tmpvar_55.xyz;
					  c_33.w = alpha_40;
					  c_5 = c_33;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 tmpvar_26;
					  mediump vec3 tmpvar_27;
					  mediump vec4 tmpvar_28;
					  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_29;
					  color_29 = tmpvar_28;
					  tmpvar_27 = (unity_Lightmap_HDR.x * color_29.xyz);
					  mediump vec4 hdr_30;
					  hdr_30 = tmpvar_2;
					  mediump vec4 tmpvar_31;
					  tmpvar_31.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_31.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_32;
					  tmpvar_32 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_31.xyz, tmpvar_31.w);
					  mediump vec4 tmpvar_33;
					  tmpvar_33 = tmpvar_32;
					  tmpvar_26 = ((hdr_30.x * (
					    (hdr_30.w * (tmpvar_33.w - 1.0))
					   + 1.0)) * tmpvar_33.xyz);
					  lowp vec3 tmpvar_34;
					  mediump vec4 c_35;
					  highp vec3 tmpvar_36;
					  tmpvar_36 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_37;
					  mediump vec3 albedo_38;
					  albedo_38 = tmpvar_10;
					  mediump vec3 tmpvar_39;
					  tmpvar_39 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_38, vec3(_Metallic));
					  mediump float tmpvar_40;
					  tmpvar_40 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_37 = (albedo_38 * tmpvar_40);
					  tmpvar_34 = tmpvar_37;
					  mediump vec3 diffColor_41;
					  diffColor_41 = tmpvar_34;
					  mediump float alpha_42;
					  alpha_42 = tmpvar_12;
					  tmpvar_34 = diffColor_41;
					  mediump vec3 diffColor_43;
					  diffColor_43 = tmpvar_34;
					  mediump vec3 color_44;
					  mediump float surfaceReduction_45;
					  highp float specularTerm_46;
					  highp float a2_47;
					  mediump float roughness_48;
					  mediump float perceptualRoughness_49;
					  highp vec3 tmpvar_50;
					  highp vec3 inVec_51;
					  inVec_51 = (tmpvar_4 + worldViewDir_6);
					  tmpvar_50 = (inVec_51 * inversesqrt(max (0.001, 
					    dot (inVec_51, inVec_51)
					  )));
					  mediump float tmpvar_52;
					  highp float tmpvar_53;
					  tmpvar_53 = clamp (dot (tmpvar_36, tmpvar_4), 0.0, 1.0);
					  tmpvar_52 = tmpvar_53;
					  highp float tmpvar_54;
					  tmpvar_54 = clamp (dot (tmpvar_36, tmpvar_50), 0.0, 1.0);
					  mediump float tmpvar_55;
					  highp float tmpvar_56;
					  tmpvar_56 = clamp (dot (tmpvar_36, worldViewDir_6), 0.0, 1.0);
					  tmpvar_55 = tmpvar_56;
					  highp float tmpvar_57;
					  highp float smoothness_58;
					  smoothness_58 = _Glossiness;
					  tmpvar_57 = (1.0 - smoothness_58);
					  perceptualRoughness_49 = tmpvar_57;
					  highp float tmpvar_59;
					  highp float perceptualRoughness_60;
					  perceptualRoughness_60 = perceptualRoughness_49;
					  tmpvar_59 = (perceptualRoughness_60 * perceptualRoughness_60);
					  roughness_48 = tmpvar_59;
					  mediump float tmpvar_61;
					  tmpvar_61 = (roughness_48 * roughness_48);
					  a2_47 = tmpvar_61;
					  specularTerm_46 = ((roughness_48 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_50), 0.0, 1.0)) * (1.5 + roughness_48))
					   * 
					    (((tmpvar_54 * tmpvar_54) * (a2_47 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_62;
					  tmpvar_62 = clamp (specularTerm_46, 0.0, 100.0);
					  specularTerm_46 = tmpvar_62;
					  surfaceReduction_45 = (1.0 - ((roughness_48 * perceptualRoughness_49) * 0.28));
					  mediump float x_63;
					  x_63 = (1.0 - tmpvar_55);
					  mediump vec3 tmpvar_64;
					  tmpvar_64 = mix (tmpvar_39, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_40)
					  ), 0.0, 1.0)), vec3(((x_63 * x_63) * (x_63 * x_63))));
					  highp vec3 tmpvar_65;
					  tmpvar_65 = (((
					    ((diffColor_43 + (tmpvar_62 * tmpvar_39)) * tmpvar_3)
					   * tmpvar_52) + (tmpvar_27 * diffColor_43)) + ((surfaceReduction_45 * tmpvar_26) * tmpvar_64));
					  color_44 = tmpvar_65;
					  mediump vec4 tmpvar_66;
					  tmpvar_66.w = 1.0;
					  tmpvar_66.xyz = color_44;
					  c_35.xyz = tmpvar_66.xyz;
					  c_35.w = alpha_42;
					  c_5 = c_35;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 tmpvar_26;
					  mediump vec3 tmpvar_27;
					  mediump vec4 tmpvar_28;
					  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_29;
					  color_29 = tmpvar_28;
					  tmpvar_27 = (unity_Lightmap_HDR.x * color_29.xyz);
					  mediump vec4 hdr_30;
					  hdr_30 = tmpvar_2;
					  mediump vec4 tmpvar_31;
					  tmpvar_31.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_31.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_32;
					  tmpvar_32 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_31.xyz, tmpvar_31.w);
					  mediump vec4 tmpvar_33;
					  tmpvar_33 = tmpvar_32;
					  tmpvar_26 = ((hdr_30.x * (
					    (hdr_30.w * (tmpvar_33.w - 1.0))
					   + 1.0)) * tmpvar_33.xyz);
					  lowp vec3 tmpvar_34;
					  mediump vec4 c_35;
					  highp vec3 tmpvar_36;
					  tmpvar_36 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_37;
					  mediump vec3 albedo_38;
					  albedo_38 = tmpvar_10;
					  mediump vec3 tmpvar_39;
					  tmpvar_39 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_38, vec3(_Metallic));
					  mediump float tmpvar_40;
					  tmpvar_40 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_37 = (albedo_38 * tmpvar_40);
					  tmpvar_34 = tmpvar_37;
					  mediump vec3 diffColor_41;
					  diffColor_41 = tmpvar_34;
					  mediump float alpha_42;
					  alpha_42 = tmpvar_12;
					  tmpvar_34 = diffColor_41;
					  mediump vec3 diffColor_43;
					  diffColor_43 = tmpvar_34;
					  mediump vec3 color_44;
					  mediump float surfaceReduction_45;
					  highp float specularTerm_46;
					  highp float a2_47;
					  mediump float roughness_48;
					  mediump float perceptualRoughness_49;
					  highp vec3 tmpvar_50;
					  highp vec3 inVec_51;
					  inVec_51 = (tmpvar_4 + worldViewDir_6);
					  tmpvar_50 = (inVec_51 * inversesqrt(max (0.001, 
					    dot (inVec_51, inVec_51)
					  )));
					  mediump float tmpvar_52;
					  highp float tmpvar_53;
					  tmpvar_53 = clamp (dot (tmpvar_36, tmpvar_4), 0.0, 1.0);
					  tmpvar_52 = tmpvar_53;
					  highp float tmpvar_54;
					  tmpvar_54 = clamp (dot (tmpvar_36, tmpvar_50), 0.0, 1.0);
					  mediump float tmpvar_55;
					  highp float tmpvar_56;
					  tmpvar_56 = clamp (dot (tmpvar_36, worldViewDir_6), 0.0, 1.0);
					  tmpvar_55 = tmpvar_56;
					  highp float tmpvar_57;
					  highp float smoothness_58;
					  smoothness_58 = _Glossiness;
					  tmpvar_57 = (1.0 - smoothness_58);
					  perceptualRoughness_49 = tmpvar_57;
					  highp float tmpvar_59;
					  highp float perceptualRoughness_60;
					  perceptualRoughness_60 = perceptualRoughness_49;
					  tmpvar_59 = (perceptualRoughness_60 * perceptualRoughness_60);
					  roughness_48 = tmpvar_59;
					  mediump float tmpvar_61;
					  tmpvar_61 = (roughness_48 * roughness_48);
					  a2_47 = tmpvar_61;
					  specularTerm_46 = ((roughness_48 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_50), 0.0, 1.0)) * (1.5 + roughness_48))
					   * 
					    (((tmpvar_54 * tmpvar_54) * (a2_47 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_62;
					  tmpvar_62 = clamp (specularTerm_46, 0.0, 100.0);
					  specularTerm_46 = tmpvar_62;
					  surfaceReduction_45 = (1.0 - ((roughness_48 * perceptualRoughness_49) * 0.28));
					  mediump float x_63;
					  x_63 = (1.0 - tmpvar_55);
					  mediump vec3 tmpvar_64;
					  tmpvar_64 = mix (tmpvar_39, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_40)
					  ), 0.0, 1.0)), vec3(((x_63 * x_63) * (x_63 * x_63))));
					  highp vec3 tmpvar_65;
					  tmpvar_65 = (((
					    ((diffColor_43 + (tmpvar_62 * tmpvar_39)) * tmpvar_3)
					   * tmpvar_52) + (tmpvar_27 * diffColor_43)) + ((surfaceReduction_45 * tmpvar_26) * tmpvar_64));
					  color_44 = tmpvar_65;
					  mediump vec4 tmpvar_66;
					  tmpvar_66.w = 1.0;
					  tmpvar_66.xyz = color_44;
					  c_35.xyz = tmpvar_66.xyz;
					  c_35.w = alpha_42;
					  c_5 = c_35;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_9;
					float u_xlat11;
					float u_xlat27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_30;
					mediump float u_xlat16_32;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat2.z = (-_Glossiness) + 1.0;
					    u_xlat16_28 = (-u_xlat2.z) * 0.699999988 + 1.70000005;
					    u_xlat16_28 = u_xlat16_28 * u_xlat2.z;
					    u_xlat16_28 = u_xlat16_28 * 6.0;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_28);
					    u_xlat16_3.x = u_xlat10_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
					    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat11 = u_xlat27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
					#else
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat0.xyz = u_xlat4.xyz * (-vec3(u_xlat27)) + u_xlat0.xyz;
					    u_xlat27 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat2.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat2.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_30 = (-u_xlat11) + 1.0;
					    u_xlat16_9 = u_xlat16_30 * u_xlat16_30;
					    u_xlat16_9 = u_xlat16_30 * u_xlat16_9;
					    u_xlat16_9 = u_xlat16_30 * u_xlat16_9;
					    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_2.xyz + (-u_xlat10_4.xyz);
					    u_xlat2.xyz = vec3(_DayWeight) * u_xlat16_2.xyz + u_xlat10_4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_32 = (-u_xlat16_30) + _Glossiness;
					    u_xlat16_7.xyz = u_xlat2.xyz * vec3(u_xlat16_30);
					    u_xlat16_30 = u_xlat16_32 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_30);
					    u_xlat16_8.xyz = vec3(u_xlat16_9) * u_xlat16_8.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_7.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_8.xyz;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_3.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat27 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat27) + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					mediump float u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_9;
					mediump vec3 u_xlat16_11;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_25 = (-_Glossiness) + 1.0;
					    u_xlat16_2 = u_xlat16_25 * u_xlat16_25 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_2;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD1.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat16_9 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_17 = u_xlat16_9 * u_xlat16_9 + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_17 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat16_9 / u_xlat24;
					    u_xlat16_3 = u_xlat16_25 * u_xlat16_9;
					    u_xlat16_3 = (-u_xlat16_3) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz + (-u_xlat10_4.xyz);
					    u_xlat1.xyz = vec3(_DayWeight) * u_xlat16_1.xyz + u_xlat10_4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    u_xlat16_11.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_5.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_13.xyz = u_xlat4.xyz * u_xlat16_5.xxx;
					    u_xlat16_5.x = (-u_xlat16_5.x) + _Glossiness;
					    u_xlat16_5.x = u_xlat16_5.x + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
					#else
					    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = (-u_xlat16_11.xyz) + u_xlat16_5.xxx;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat16_11.xyz + u_xlat16_13.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_4.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_5.xyz = u_xlat16_13.xyz * u_xlat16_7.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat16_29 = (-u_xlat2.x) + 1.0;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_11.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz + u_xlat16_11.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_5.xyz;
					    u_xlat16_5.x = (-u_xlat16_25) * 0.699999988 + 1.70000005;
					    u_xlat16_5.x = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.x = u_xlat16_5.x * 6.0;
					    u_xlat16_13.x = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_13.x = u_xlat16_13.x + u_xlat16_13.x;
					    u_xlat16_13.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_13.xxx) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_13.xyz, u_xlat16_5.x);
					    u_xlat16_5.x = u_xlat10_0.w + -1.0;
					    u_xlat16_5.x = unity_SpecCube0_HDR.w * u_xlat16_5.x + 1.0;
					    u_xlat16_5.x = u_xlat16_5.x * unity_SpecCube0_HDR.x;
					    u_xlat16_5.xyz = u_xlat10_0.xyz * u_xlat16_5.xxx;
					    u_xlat16_5.xyz = vec3(u_xlat16_3) * u_xlat16_5.xyz;
					    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_11.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					mediump float u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_9;
					mediump vec3 u_xlat16_11;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_25 = (-_Glossiness) + 1.0;
					    u_xlat16_2 = u_xlat16_25 * u_xlat16_25 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_2;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD1.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat16_9 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_17 = u_xlat16_9 * u_xlat16_9 + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_17 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat16_9 / u_xlat24;
					    u_xlat16_3 = u_xlat16_25 * u_xlat16_9;
					    u_xlat16_3 = (-u_xlat16_3) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz + (-u_xlat10_4.xyz);
					    u_xlat1.xyz = vec3(_DayWeight) * u_xlat16_1.xyz + u_xlat10_4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    u_xlat16_11.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_5.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_13.xyz = u_xlat4.xyz * u_xlat16_5.xxx;
					    u_xlat16_5.x = (-u_xlat16_5.x) + _Glossiness;
					    u_xlat16_5.x = u_xlat16_5.x + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
					#else
					    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = (-u_xlat16_11.xyz) + u_xlat16_5.xxx;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat16_11.xyz + u_xlat16_13.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_4.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_5.xyz = u_xlat16_13.xyz * u_xlat16_7.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat16_29 = (-u_xlat2.x) + 1.0;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_11.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz + u_xlat16_11.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_5.xyz;
					    u_xlat16_5.x = (-u_xlat16_25) * 0.699999988 + 1.70000005;
					    u_xlat16_5.x = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.x = u_xlat16_5.x * 6.0;
					    u_xlat16_13.x = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_13.x = u_xlat16_13.x + u_xlat16_13.x;
					    u_xlat16_13.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_13.xxx) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_13.xyz, u_xlat16_5.x);
					    u_xlat16_5.x = u_xlat10_0.w + -1.0;
					    u_xlat16_5.x = unity_SpecCube0_HDR.w * u_xlat16_5.x + 1.0;
					    u_xlat16_5.x = u_xlat16_5.x * unity_SpecCube0_HDR.x;
					    u_xlat16_5.xyz = u_xlat10_0.xyz * u_xlat16_5.xxx;
					    u_xlat16_5.xyz = vec3(u_xlat16_3) * u_xlat16_5.xyz;
					    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_11.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump sampler2D unity_Lightmap;
					uniform sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 tmpvar_26;
					  mediump vec4 tmpvar_27;
					  tmpvar_27 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_28;
					  color_28 = tmpvar_27;
					  tmpvar_26 = (unity_Lightmap_HDR.x * color_28.xyz);
					  lowp vec4 tmpvar_29;
					  tmpvar_29 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
					  tmpvar_26 = (tmpvar_26 + pow ((
					    (unity_DynamicLightmap_HDR.x * tmpvar_29.w)
					   * tmpvar_29.xyz), unity_DynamicLightmap_HDR.yyy));
					  mediump vec4 hdr_30;
					  hdr_30 = tmpvar_2;
					  mediump vec4 tmpvar_31;
					  tmpvar_31.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_31.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_32;
					  tmpvar_32 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_31.xyz, tmpvar_31.w);
					  mediump vec4 tmpvar_33;
					  tmpvar_33 = tmpvar_32;
					  lowp vec3 tmpvar_34;
					  mediump vec4 c_35;
					  highp vec3 tmpvar_36;
					  tmpvar_36 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_37;
					  mediump vec3 albedo_38;
					  albedo_38 = tmpvar_10;
					  mediump vec3 tmpvar_39;
					  tmpvar_39 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_38, vec3(_Metallic));
					  mediump float tmpvar_40;
					  tmpvar_40 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_37 = (albedo_38 * tmpvar_40);
					  tmpvar_34 = tmpvar_37;
					  mediump vec3 diffColor_41;
					  diffColor_41 = tmpvar_34;
					  mediump float alpha_42;
					  alpha_42 = tmpvar_12;
					  tmpvar_34 = diffColor_41;
					  mediump vec3 diffColor_43;
					  diffColor_43 = tmpvar_34;
					  mediump vec3 color_44;
					  mediump vec2 rlPow4AndFresnelTerm_45;
					  mediump float tmpvar_46;
					  highp float tmpvar_47;
					  tmpvar_47 = clamp (dot (tmpvar_36, tmpvar_4), 0.0, 1.0);
					  tmpvar_46 = tmpvar_47;
					  mediump float tmpvar_48;
					  highp float tmpvar_49;
					  tmpvar_49 = clamp (dot (tmpvar_36, worldViewDir_6), 0.0, 1.0);
					  tmpvar_48 = tmpvar_49;
					  highp vec2 tmpvar_50;
					  tmpvar_50.x = dot ((worldViewDir_6 - (2.0 * 
					    (dot (tmpvar_36, worldViewDir_6) * tmpvar_36)
					  )), tmpvar_4);
					  tmpvar_50.y = (1.0 - tmpvar_48);
					  highp vec2 tmpvar_51;
					  tmpvar_51 = ((tmpvar_50 * tmpvar_50) * (tmpvar_50 * tmpvar_50));
					  rlPow4AndFresnelTerm_45 = tmpvar_51;
					  mediump float tmpvar_52;
					  tmpvar_52 = rlPow4AndFresnelTerm_45.x;
					  mediump float specular_53;
					  highp float smoothness_54;
					  smoothness_54 = _Glossiness;
					  highp vec2 tmpvar_55;
					  tmpvar_55.x = tmpvar_52;
					  tmpvar_55.y = (1.0 - smoothness_54);
					  highp float tmpvar_56;
					  tmpvar_56 = (texture2D (unity_NHxRoughness, tmpvar_55).x * 16.0);
					  specular_53 = tmpvar_56;
					  color_44 = ((diffColor_43 + (specular_53 * tmpvar_39)) * (tmpvar_3 * tmpvar_46));
					  color_44 = (color_44 + ((tmpvar_26 * diffColor_43) + (
					    ((hdr_30.x * ((hdr_30.w * 
					      (tmpvar_33.w - 1.0)
					    ) + 1.0)) * tmpvar_33.xyz)
					   * 
					    mix (tmpvar_39, vec3(clamp ((_Glossiness + (1.0 - tmpvar_40)), 0.0, 1.0)), rlPow4AndFresnelTerm_45.yyy)
					  )));
					  mediump vec4 tmpvar_57;
					  tmpvar_57.w = 1.0;
					  tmpvar_57.xyz = color_44;
					  c_35.xyz = tmpvar_57.xyz;
					  c_35.w = alpha_42;
					  c_5 = c_35;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump sampler2D unity_Lightmap;
					uniform sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 tmpvar_26;
					  mediump vec3 tmpvar_27;
					  mediump vec4 tmpvar_28;
					  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_29;
					  color_29 = tmpvar_28;
					  tmpvar_27 = (unity_Lightmap_HDR.x * color_29.xyz);
					  lowp vec4 tmpvar_30;
					  tmpvar_30 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
					  tmpvar_27 = (tmpvar_27 + pow ((
					    (unity_DynamicLightmap_HDR.x * tmpvar_30.w)
					   * tmpvar_30.xyz), unity_DynamicLightmap_HDR.yyy));
					  mediump vec4 hdr_31;
					  hdr_31 = tmpvar_2;
					  mediump vec4 tmpvar_32;
					  tmpvar_32.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_32.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_33;
					  tmpvar_33 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_32.xyz, tmpvar_32.w);
					  mediump vec4 tmpvar_34;
					  tmpvar_34 = tmpvar_33;
					  tmpvar_26 = ((hdr_31.x * (
					    (hdr_31.w * (tmpvar_34.w - 1.0))
					   + 1.0)) * tmpvar_34.xyz);
					  lowp vec3 tmpvar_35;
					  mediump vec4 c_36;
					  highp vec3 tmpvar_37;
					  tmpvar_37 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_38;
					  mediump vec3 albedo_39;
					  albedo_39 = tmpvar_10;
					  mediump vec3 tmpvar_40;
					  tmpvar_40 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_39, vec3(_Metallic));
					  mediump float tmpvar_41;
					  tmpvar_41 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_38 = (albedo_39 * tmpvar_41);
					  tmpvar_35 = tmpvar_38;
					  mediump vec3 diffColor_42;
					  diffColor_42 = tmpvar_35;
					  mediump float alpha_43;
					  alpha_43 = tmpvar_12;
					  tmpvar_35 = diffColor_42;
					  mediump vec3 diffColor_44;
					  diffColor_44 = tmpvar_35;
					  mediump vec3 color_45;
					  mediump float surfaceReduction_46;
					  highp float specularTerm_47;
					  highp float a2_48;
					  mediump float roughness_49;
					  mediump float perceptualRoughness_50;
					  highp vec3 tmpvar_51;
					  highp vec3 inVec_52;
					  inVec_52 = (tmpvar_4 + worldViewDir_6);
					  tmpvar_51 = (inVec_52 * inversesqrt(max (0.001, 
					    dot (inVec_52, inVec_52)
					  )));
					  mediump float tmpvar_53;
					  highp float tmpvar_54;
					  tmpvar_54 = clamp (dot (tmpvar_37, tmpvar_4), 0.0, 1.0);
					  tmpvar_53 = tmpvar_54;
					  highp float tmpvar_55;
					  tmpvar_55 = clamp (dot (tmpvar_37, tmpvar_51), 0.0, 1.0);
					  mediump float tmpvar_56;
					  highp float tmpvar_57;
					  tmpvar_57 = clamp (dot (tmpvar_37, worldViewDir_6), 0.0, 1.0);
					  tmpvar_56 = tmpvar_57;
					  highp float tmpvar_58;
					  highp float smoothness_59;
					  smoothness_59 = _Glossiness;
					  tmpvar_58 = (1.0 - smoothness_59);
					  perceptualRoughness_50 = tmpvar_58;
					  highp float tmpvar_60;
					  highp float perceptualRoughness_61;
					  perceptualRoughness_61 = perceptualRoughness_50;
					  tmpvar_60 = (perceptualRoughness_61 * perceptualRoughness_61);
					  roughness_49 = tmpvar_60;
					  mediump float tmpvar_62;
					  tmpvar_62 = (roughness_49 * roughness_49);
					  a2_48 = tmpvar_62;
					  specularTerm_47 = ((roughness_49 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_51), 0.0, 1.0)) * (1.5 + roughness_49))
					   * 
					    (((tmpvar_55 * tmpvar_55) * (a2_48 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_63;
					  tmpvar_63 = clamp (specularTerm_47, 0.0, 100.0);
					  specularTerm_47 = tmpvar_63;
					  surfaceReduction_46 = (1.0 - ((roughness_49 * perceptualRoughness_50) * 0.28));
					  mediump float x_64;
					  x_64 = (1.0 - tmpvar_56);
					  mediump vec3 tmpvar_65;
					  tmpvar_65 = mix (tmpvar_40, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_41)
					  ), 0.0, 1.0)), vec3(((x_64 * x_64) * (x_64 * x_64))));
					  highp vec3 tmpvar_66;
					  tmpvar_66 = (((
					    ((diffColor_44 + (tmpvar_63 * tmpvar_40)) * tmpvar_3)
					   * tmpvar_53) + (tmpvar_27 * diffColor_44)) + ((surfaceReduction_46 * tmpvar_26) * tmpvar_65));
					  color_45 = tmpvar_66;
					  mediump vec4 tmpvar_67;
					  tmpvar_67.w = 1.0;
					  tmpvar_67.xyz = color_45;
					  c_36.xyz = tmpvar_67.xyz;
					  c_36.w = alpha_43;
					  c_5 = c_36;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump sampler2D unity_Lightmap;
					uniform sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 tmpvar_26;
					  mediump vec3 tmpvar_27;
					  mediump vec4 tmpvar_28;
					  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_29;
					  color_29 = tmpvar_28;
					  tmpvar_27 = (unity_Lightmap_HDR.x * color_29.xyz);
					  lowp vec4 tmpvar_30;
					  tmpvar_30 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
					  tmpvar_27 = (tmpvar_27 + pow ((
					    (unity_DynamicLightmap_HDR.x * tmpvar_30.w)
					   * tmpvar_30.xyz), unity_DynamicLightmap_HDR.yyy));
					  mediump vec4 hdr_31;
					  hdr_31 = tmpvar_2;
					  mediump vec4 tmpvar_32;
					  tmpvar_32.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_32.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_33;
					  tmpvar_33 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_32.xyz, tmpvar_32.w);
					  mediump vec4 tmpvar_34;
					  tmpvar_34 = tmpvar_33;
					  tmpvar_26 = ((hdr_31.x * (
					    (hdr_31.w * (tmpvar_34.w - 1.0))
					   + 1.0)) * tmpvar_34.xyz);
					  lowp vec3 tmpvar_35;
					  mediump vec4 c_36;
					  highp vec3 tmpvar_37;
					  tmpvar_37 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_38;
					  mediump vec3 albedo_39;
					  albedo_39 = tmpvar_10;
					  mediump vec3 tmpvar_40;
					  tmpvar_40 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_39, vec3(_Metallic));
					  mediump float tmpvar_41;
					  tmpvar_41 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_38 = (albedo_39 * tmpvar_41);
					  tmpvar_35 = tmpvar_38;
					  mediump vec3 diffColor_42;
					  diffColor_42 = tmpvar_35;
					  mediump float alpha_43;
					  alpha_43 = tmpvar_12;
					  tmpvar_35 = diffColor_42;
					  mediump vec3 diffColor_44;
					  diffColor_44 = tmpvar_35;
					  mediump vec3 color_45;
					  mediump float surfaceReduction_46;
					  highp float specularTerm_47;
					  highp float a2_48;
					  mediump float roughness_49;
					  mediump float perceptualRoughness_50;
					  highp vec3 tmpvar_51;
					  highp vec3 inVec_52;
					  inVec_52 = (tmpvar_4 + worldViewDir_6);
					  tmpvar_51 = (inVec_52 * inversesqrt(max (0.001, 
					    dot (inVec_52, inVec_52)
					  )));
					  mediump float tmpvar_53;
					  highp float tmpvar_54;
					  tmpvar_54 = clamp (dot (tmpvar_37, tmpvar_4), 0.0, 1.0);
					  tmpvar_53 = tmpvar_54;
					  highp float tmpvar_55;
					  tmpvar_55 = clamp (dot (tmpvar_37, tmpvar_51), 0.0, 1.0);
					  mediump float tmpvar_56;
					  highp float tmpvar_57;
					  tmpvar_57 = clamp (dot (tmpvar_37, worldViewDir_6), 0.0, 1.0);
					  tmpvar_56 = tmpvar_57;
					  highp float tmpvar_58;
					  highp float smoothness_59;
					  smoothness_59 = _Glossiness;
					  tmpvar_58 = (1.0 - smoothness_59);
					  perceptualRoughness_50 = tmpvar_58;
					  highp float tmpvar_60;
					  highp float perceptualRoughness_61;
					  perceptualRoughness_61 = perceptualRoughness_50;
					  tmpvar_60 = (perceptualRoughness_61 * perceptualRoughness_61);
					  roughness_49 = tmpvar_60;
					  mediump float tmpvar_62;
					  tmpvar_62 = (roughness_49 * roughness_49);
					  a2_48 = tmpvar_62;
					  specularTerm_47 = ((roughness_49 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_51), 0.0, 1.0)) * (1.5 + roughness_49))
					   * 
					    (((tmpvar_55 * tmpvar_55) * (a2_48 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_63;
					  tmpvar_63 = clamp (specularTerm_47, 0.0, 100.0);
					  specularTerm_47 = tmpvar_63;
					  surfaceReduction_46 = (1.0 - ((roughness_49 * perceptualRoughness_50) * 0.28));
					  mediump float x_64;
					  x_64 = (1.0 - tmpvar_56);
					  mediump vec3 tmpvar_65;
					  tmpvar_65 = mix (tmpvar_40, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_41)
					  ), 0.0, 1.0)), vec3(((x_64 * x_64) * (x_64 * x_64))));
					  highp vec3 tmpvar_66;
					  tmpvar_66 = (((
					    ((diffColor_44 + (tmpvar_63 * tmpvar_40)) * tmpvar_3)
					   * tmpvar_53) + (tmpvar_27 * diffColor_44)) + ((surfaceReduction_46 * tmpvar_26) * tmpvar_65));
					  color_45 = tmpvar_66;
					  mediump vec4 tmpvar_67;
					  tmpvar_67.w = 1.0;
					  tmpvar_67.xyz = color_45;
					  c_36.xyz = tmpvar_67.xyz;
					  c_36.w = alpha_43;
					  c_5 = c_36;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					lowp vec3 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump float u_xlat16_10;
					float u_xlat13;
					float u_xlat30;
					mediump float u_xlat16_31;
					mediump float u_xlat16_34;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_1.xyz = unity_Lightmap_HDR.xxx * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat16_31 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
					    u_xlat16_2.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat0.xyz);
					    u_xlat3.z = (-_Glossiness) + 1.0;
					    u_xlat16_31 = (-u_xlat3.z) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat16_31 * u_xlat3.z;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_31);
					    u_xlat16_31 = u_xlat10_2.w + -1.0;
					    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;
					    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(u_xlat16_31);
					    u_xlat30 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat5.xyz = vec3(u_xlat30) * vs_TEXCOORD1.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat5.xyz);
					    u_xlat13 = u_xlat30;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
					#else
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					#endif
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat0.xyz = u_xlat5.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
					    u_xlat30 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = vec3(u_xlat30) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat3.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_31 = (-u_xlat13) + 1.0;
					    u_xlat16_10 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_10 = u_xlat16_31 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_31 * u_xlat16_10;
					    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_5.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_3.xyz + (-u_xlat10_5.xyz);
					    u_xlat3.xyz = vec3(_DayWeight) * u_xlat16_3.xyz + u_xlat10_5.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat16_7.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_34 = (-u_xlat16_31) + _Glossiness;
					    u_xlat16_8.xyz = vec3(u_xlat16_31) * u_xlat3.xyz;
					    u_xlat16_31 = u_xlat16_34 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_31);
					    u_xlat16_9.xyz = vec3(u_xlat16_10) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_9.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_1.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat30 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_6;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_22;
					mediump float u_xlat16_23;
					mediump float u_xlat16_24;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_1.xyz = unity_Lightmap_HDR.xxx * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_2.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat2.xyz;
					    u_xlat16_22 = (-u_xlat16_22) + _Glossiness;
					    u_xlat16_22 = u_xlat16_22 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
					#else
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_22);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat21 = max(u_xlat21, 0.319999993);
					    u_xlat16_23 = (-_Glossiness) + 1.0;
					    u_xlat16_6 = u_xlat16_23 * u_xlat16_23 + 1.5;
					    u_xlat21 = u_xlat21 * u_xlat16_6;
					    u_xlat6.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * vs_TEXCOORD1.xyz;
					    u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat16_9 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_16 = u_xlat16_9 * u_xlat16_9 + -1.0;
					    u_xlat2.x = u_xlat2.x * u_xlat16_16 + 1.00001001;
					    u_xlat21 = u_xlat21 * u_xlat2.x;
					    u_xlat21 = u_xlat16_9 / u_xlat21;
					    u_xlat16_22 = u_xlat16_23 * u_xlat16_9;
					    u_xlat16_22 = (-u_xlat16_22) * 0.280000001 + 1.0;
					    u_xlat21 = u_xlat21 + -9.99999975e-05;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = min(u_xlat21, 100.0);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat21 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
					#else
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					#endif
					    u_xlat16_24 = (-u_xlat6.x) + 1.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_5.xyz + u_xlat16_3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat21) + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-u_xlat16_23) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_23;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat16_8 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_8 = u_xlat16_8 + u_xlat16_8;
					    u_xlat16_4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_8)) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat10_0.w + -1.0;
					    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_22);
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat2.xyz;
					    u_xlat10_2.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.xyz = u_xlat10_2.xyz * _EmissionColor.xyz;
					    u_xlat21 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_6;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_22;
					mediump float u_xlat16_23;
					mediump float u_xlat16_24;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_1.xyz = unity_Lightmap_HDR.xxx * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_2.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat2.xyz;
					    u_xlat16_22 = (-u_xlat16_22) + _Glossiness;
					    u_xlat16_22 = u_xlat16_22 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
					#else
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_22);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat21 = max(u_xlat21, 0.319999993);
					    u_xlat16_23 = (-_Glossiness) + 1.0;
					    u_xlat16_6 = u_xlat16_23 * u_xlat16_23 + 1.5;
					    u_xlat21 = u_xlat21 * u_xlat16_6;
					    u_xlat6.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * vs_TEXCOORD1.xyz;
					    u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat16_9 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_16 = u_xlat16_9 * u_xlat16_9 + -1.0;
					    u_xlat2.x = u_xlat2.x * u_xlat16_16 + 1.00001001;
					    u_xlat21 = u_xlat21 * u_xlat2.x;
					    u_xlat21 = u_xlat16_9 / u_xlat21;
					    u_xlat16_22 = u_xlat16_23 * u_xlat16_9;
					    u_xlat16_22 = (-u_xlat16_22) * 0.280000001 + 1.0;
					    u_xlat21 = u_xlat21 + -9.99999975e-05;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = min(u_xlat21, 100.0);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat21 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
					#else
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					#endif
					    u_xlat16_24 = (-u_xlat6.x) + 1.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_5.xyz + u_xlat16_3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat21) + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-u_xlat16_23) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_23;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat16_8 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_8 = u_xlat16_8 + u_xlat16_8;
					    u_xlat16_4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_8)) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat10_0.w + -1.0;
					    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_22);
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat2.xyz;
					    u_xlat10_2.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.xyz = u_xlat10_2.xyz * _EmissionColor.xyz;
					    u_xlat21 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 normalWorld_26;
					  normalWorld_26 = xlv_TEXCOORD1;
					  mediump vec3 ambient_27;
					  mediump vec4 tmpvar_28;
					  tmpvar_28.w = 1.0;
					  tmpvar_28.xyz = normalWorld_26;
					  mediump vec3 x_29;
					  x_29.x = dot (unity_SHAr, tmpvar_28);
					  x_29.y = dot (unity_SHAg, tmpvar_28);
					  x_29.z = dot (unity_SHAb, tmpvar_28);
					  mediump vec3 x1_30;
					  mediump vec4 tmpvar_31;
					  tmpvar_31 = (normalWorld_26.xyzz * normalWorld_26.yzzx);
					  x1_30.x = dot (unity_SHBr, tmpvar_31);
					  x1_30.y = dot (unity_SHBg, tmpvar_31);
					  x1_30.z = dot (unity_SHBb, tmpvar_31);
					  ambient_27 = max (vec3(0.0, 0.0, 0.0), (x_29 + (x1_30 + 
					    (unity_SHC.xyz * ((normalWorld_26.x * normalWorld_26.x) - (normalWorld_26.y * normalWorld_26.y)))
					  )));
					  mediump vec3 tmpvar_32;
					  tmpvar_32 = max (((1.055 * 
					    pow (max (ambient_27, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  ambient_27 = tmpvar_32;
					  mediump vec4 tmpvar_33;
					  tmpvar_33 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_34;
					  color_34 = tmpvar_33;
					  mediump vec4 hdr_35;
					  hdr_35 = tmpvar_2;
					  mediump vec4 tmpvar_36;
					  tmpvar_36.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_36.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_37;
					  tmpvar_37 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_36.xyz, tmpvar_36.w);
					  mediump vec4 tmpvar_38;
					  tmpvar_38 = tmpvar_37;
					  lowp vec3 tmpvar_39;
					  mediump vec4 c_40;
					  highp vec3 tmpvar_41;
					  tmpvar_41 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_42;
					  mediump vec3 albedo_43;
					  albedo_43 = tmpvar_10;
					  mediump vec3 tmpvar_44;
					  tmpvar_44 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_43, vec3(_Metallic));
					  mediump float tmpvar_45;
					  tmpvar_45 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_42 = (albedo_43 * tmpvar_45);
					  tmpvar_39 = tmpvar_42;
					  mediump vec3 diffColor_46;
					  diffColor_46 = tmpvar_39;
					  mediump float alpha_47;
					  alpha_47 = tmpvar_12;
					  tmpvar_39 = diffColor_46;
					  mediump vec3 diffColor_48;
					  diffColor_48 = tmpvar_39;
					  mediump vec3 color_49;
					  mediump vec2 rlPow4AndFresnelTerm_50;
					  mediump float tmpvar_51;
					  highp float tmpvar_52;
					  tmpvar_52 = clamp (dot (tmpvar_41, tmpvar_4), 0.0, 1.0);
					  tmpvar_51 = tmpvar_52;
					  mediump float tmpvar_53;
					  highp float tmpvar_54;
					  tmpvar_54 = clamp (dot (tmpvar_41, worldViewDir_6), 0.0, 1.0);
					  tmpvar_53 = tmpvar_54;
					  highp vec2 tmpvar_55;
					  tmpvar_55.x = dot ((worldViewDir_6 - (2.0 * 
					    (dot (tmpvar_41, worldViewDir_6) * tmpvar_41)
					  )), tmpvar_4);
					  tmpvar_55.y = (1.0 - tmpvar_53);
					  highp vec2 tmpvar_56;
					  tmpvar_56 = ((tmpvar_55 * tmpvar_55) * (tmpvar_55 * tmpvar_55));
					  rlPow4AndFresnelTerm_50 = tmpvar_56;
					  mediump float tmpvar_57;
					  tmpvar_57 = rlPow4AndFresnelTerm_50.x;
					  mediump float specular_58;
					  highp float smoothness_59;
					  smoothness_59 = _Glossiness;
					  highp vec2 tmpvar_60;
					  tmpvar_60.x = tmpvar_57;
					  tmpvar_60.y = (1.0 - smoothness_59);
					  highp float tmpvar_61;
					  tmpvar_61 = (texture2D (unity_NHxRoughness, tmpvar_60).x * 16.0);
					  specular_58 = tmpvar_61;
					  color_49 = ((diffColor_48 + (specular_58 * tmpvar_44)) * (tmpvar_3 * tmpvar_51));
					  color_49 = (color_49 + ((
					    (tmpvar_32 + (unity_Lightmap_HDR.x * color_34.xyz))
					   * diffColor_48) + (
					    ((hdr_35.x * ((hdr_35.w * 
					      (tmpvar_38.w - 1.0)
					    ) + 1.0)) * tmpvar_38.xyz)
					   * 
					    mix (tmpvar_44, vec3(clamp ((_Glossiness + (1.0 - tmpvar_45)), 0.0, 1.0)), rlPow4AndFresnelTerm_50.yyy)
					  )));
					  mediump vec4 tmpvar_62;
					  tmpvar_62.w = 1.0;
					  tmpvar_62.xyz = color_49;
					  c_40.xyz = tmpvar_62.xyz;
					  c_40.w = alpha_47;
					  c_5 = c_40;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 normalWorld_26;
					  normalWorld_26 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_27;
					  mediump vec3 tmpvar_28;
					  mediump vec3 ambient_29;
					  mediump vec4 tmpvar_30;
					  tmpvar_30.w = 1.0;
					  tmpvar_30.xyz = normalWorld_26;
					  mediump vec3 x_31;
					  x_31.x = dot (unity_SHAr, tmpvar_30);
					  x_31.y = dot (unity_SHAg, tmpvar_30);
					  x_31.z = dot (unity_SHAb, tmpvar_30);
					  mediump vec3 x1_32;
					  mediump vec4 tmpvar_33;
					  tmpvar_33 = (normalWorld_26.xyzz * normalWorld_26.yzzx);
					  x1_32.x = dot (unity_SHBr, tmpvar_33);
					  x1_32.y = dot (unity_SHBg, tmpvar_33);
					  x1_32.z = dot (unity_SHBb, tmpvar_33);
					  ambient_29 = max (vec3(0.0, 0.0, 0.0), (x_31 + (x1_32 + 
					    (unity_SHC.xyz * ((normalWorld_26.x * normalWorld_26.x) - (normalWorld_26.y * normalWorld_26.y)))
					  )));
					  mediump vec3 tmpvar_34;
					  tmpvar_34 = max (((1.055 * 
					    pow (max (ambient_29, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  ambient_29 = tmpvar_34;
					  mediump vec4 tmpvar_35;
					  tmpvar_35 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_36;
					  color_36 = tmpvar_35;
					  tmpvar_28 = (tmpvar_34 + (unity_Lightmap_HDR.x * color_36.xyz));
					  mediump vec4 hdr_37;
					  hdr_37 = tmpvar_2;
					  mediump vec4 tmpvar_38;
					  tmpvar_38.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_38.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_39;
					  tmpvar_39 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_38.xyz, tmpvar_38.w);
					  mediump vec4 tmpvar_40;
					  tmpvar_40 = tmpvar_39;
					  tmpvar_27 = ((hdr_37.x * (
					    (hdr_37.w * (tmpvar_40.w - 1.0))
					   + 1.0)) * tmpvar_40.xyz);
					  lowp vec3 tmpvar_41;
					  mediump vec4 c_42;
					  highp vec3 tmpvar_43;
					  tmpvar_43 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_44;
					  mediump vec3 albedo_45;
					  albedo_45 = tmpvar_10;
					  mediump vec3 tmpvar_46;
					  tmpvar_46 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_45, vec3(_Metallic));
					  mediump float tmpvar_47;
					  tmpvar_47 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_44 = (albedo_45 * tmpvar_47);
					  tmpvar_41 = tmpvar_44;
					  mediump vec3 diffColor_48;
					  diffColor_48 = tmpvar_41;
					  mediump float alpha_49;
					  alpha_49 = tmpvar_12;
					  tmpvar_41 = diffColor_48;
					  mediump vec3 diffColor_50;
					  diffColor_50 = tmpvar_41;
					  mediump vec3 color_51;
					  mediump float surfaceReduction_52;
					  highp float specularTerm_53;
					  highp float a2_54;
					  mediump float roughness_55;
					  mediump float perceptualRoughness_56;
					  highp vec3 tmpvar_57;
					  highp vec3 inVec_58;
					  inVec_58 = (tmpvar_4 + worldViewDir_6);
					  tmpvar_57 = (inVec_58 * inversesqrt(max (0.001, 
					    dot (inVec_58, inVec_58)
					  )));
					  mediump float tmpvar_59;
					  highp float tmpvar_60;
					  tmpvar_60 = clamp (dot (tmpvar_43, tmpvar_4), 0.0, 1.0);
					  tmpvar_59 = tmpvar_60;
					  highp float tmpvar_61;
					  tmpvar_61 = clamp (dot (tmpvar_43, tmpvar_57), 0.0, 1.0);
					  mediump float tmpvar_62;
					  highp float tmpvar_63;
					  tmpvar_63 = clamp (dot (tmpvar_43, worldViewDir_6), 0.0, 1.0);
					  tmpvar_62 = tmpvar_63;
					  highp float tmpvar_64;
					  highp float smoothness_65;
					  smoothness_65 = _Glossiness;
					  tmpvar_64 = (1.0 - smoothness_65);
					  perceptualRoughness_56 = tmpvar_64;
					  highp float tmpvar_66;
					  highp float perceptualRoughness_67;
					  perceptualRoughness_67 = perceptualRoughness_56;
					  tmpvar_66 = (perceptualRoughness_67 * perceptualRoughness_67);
					  roughness_55 = tmpvar_66;
					  mediump float tmpvar_68;
					  tmpvar_68 = (roughness_55 * roughness_55);
					  a2_54 = tmpvar_68;
					  specularTerm_53 = ((roughness_55 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_57), 0.0, 1.0)) * (1.5 + roughness_55))
					   * 
					    (((tmpvar_61 * tmpvar_61) * (a2_54 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_69;
					  tmpvar_69 = clamp (specularTerm_53, 0.0, 100.0);
					  specularTerm_53 = tmpvar_69;
					  surfaceReduction_52 = (1.0 - ((roughness_55 * perceptualRoughness_56) * 0.28));
					  mediump float x_70;
					  x_70 = (1.0 - tmpvar_62);
					  mediump vec3 tmpvar_71;
					  tmpvar_71 = mix (tmpvar_46, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_47)
					  ), 0.0, 1.0)), vec3(((x_70 * x_70) * (x_70 * x_70))));
					  highp vec3 tmpvar_72;
					  tmpvar_72 = (((
					    ((diffColor_50 + (tmpvar_69 * tmpvar_46)) * tmpvar_3)
					   * tmpvar_59) + (tmpvar_28 * diffColor_50)) + ((surfaceReduction_52 * tmpvar_27) * tmpvar_71));
					  color_51 = tmpvar_72;
					  mediump vec4 tmpvar_73;
					  tmpvar_73.w = 1.0;
					  tmpvar_73.xyz = color_51;
					  c_42.xyz = tmpvar_73.xyz;
					  c_42.w = alpha_49;
					  c_5 = c_42;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 normalWorld_26;
					  normalWorld_26 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_27;
					  mediump vec3 tmpvar_28;
					  mediump vec3 ambient_29;
					  mediump vec4 tmpvar_30;
					  tmpvar_30.w = 1.0;
					  tmpvar_30.xyz = normalWorld_26;
					  mediump vec3 x_31;
					  x_31.x = dot (unity_SHAr, tmpvar_30);
					  x_31.y = dot (unity_SHAg, tmpvar_30);
					  x_31.z = dot (unity_SHAb, tmpvar_30);
					  mediump vec3 x1_32;
					  mediump vec4 tmpvar_33;
					  tmpvar_33 = (normalWorld_26.xyzz * normalWorld_26.yzzx);
					  x1_32.x = dot (unity_SHBr, tmpvar_33);
					  x1_32.y = dot (unity_SHBg, tmpvar_33);
					  x1_32.z = dot (unity_SHBb, tmpvar_33);
					  ambient_29 = max (vec3(0.0, 0.0, 0.0), (x_31 + (x1_32 + 
					    (unity_SHC.xyz * ((normalWorld_26.x * normalWorld_26.x) - (normalWorld_26.y * normalWorld_26.y)))
					  )));
					  mediump vec3 tmpvar_34;
					  tmpvar_34 = max (((1.055 * 
					    pow (max (ambient_29, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  ambient_29 = tmpvar_34;
					  mediump vec4 tmpvar_35;
					  tmpvar_35 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_36;
					  color_36 = tmpvar_35;
					  tmpvar_28 = (tmpvar_34 + (unity_Lightmap_HDR.x * color_36.xyz));
					  mediump vec4 hdr_37;
					  hdr_37 = tmpvar_2;
					  mediump vec4 tmpvar_38;
					  tmpvar_38.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_38.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_39;
					  tmpvar_39 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_38.xyz, tmpvar_38.w);
					  mediump vec4 tmpvar_40;
					  tmpvar_40 = tmpvar_39;
					  tmpvar_27 = ((hdr_37.x * (
					    (hdr_37.w * (tmpvar_40.w - 1.0))
					   + 1.0)) * tmpvar_40.xyz);
					  lowp vec3 tmpvar_41;
					  mediump vec4 c_42;
					  highp vec3 tmpvar_43;
					  tmpvar_43 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_44;
					  mediump vec3 albedo_45;
					  albedo_45 = tmpvar_10;
					  mediump vec3 tmpvar_46;
					  tmpvar_46 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_45, vec3(_Metallic));
					  mediump float tmpvar_47;
					  tmpvar_47 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_44 = (albedo_45 * tmpvar_47);
					  tmpvar_41 = tmpvar_44;
					  mediump vec3 diffColor_48;
					  diffColor_48 = tmpvar_41;
					  mediump float alpha_49;
					  alpha_49 = tmpvar_12;
					  tmpvar_41 = diffColor_48;
					  mediump vec3 diffColor_50;
					  diffColor_50 = tmpvar_41;
					  mediump vec3 color_51;
					  mediump float surfaceReduction_52;
					  highp float specularTerm_53;
					  highp float a2_54;
					  mediump float roughness_55;
					  mediump float perceptualRoughness_56;
					  highp vec3 tmpvar_57;
					  highp vec3 inVec_58;
					  inVec_58 = (tmpvar_4 + worldViewDir_6);
					  tmpvar_57 = (inVec_58 * inversesqrt(max (0.001, 
					    dot (inVec_58, inVec_58)
					  )));
					  mediump float tmpvar_59;
					  highp float tmpvar_60;
					  tmpvar_60 = clamp (dot (tmpvar_43, tmpvar_4), 0.0, 1.0);
					  tmpvar_59 = tmpvar_60;
					  highp float tmpvar_61;
					  tmpvar_61 = clamp (dot (tmpvar_43, tmpvar_57), 0.0, 1.0);
					  mediump float tmpvar_62;
					  highp float tmpvar_63;
					  tmpvar_63 = clamp (dot (tmpvar_43, worldViewDir_6), 0.0, 1.0);
					  tmpvar_62 = tmpvar_63;
					  highp float tmpvar_64;
					  highp float smoothness_65;
					  smoothness_65 = _Glossiness;
					  tmpvar_64 = (1.0 - smoothness_65);
					  perceptualRoughness_56 = tmpvar_64;
					  highp float tmpvar_66;
					  highp float perceptualRoughness_67;
					  perceptualRoughness_67 = perceptualRoughness_56;
					  tmpvar_66 = (perceptualRoughness_67 * perceptualRoughness_67);
					  roughness_55 = tmpvar_66;
					  mediump float tmpvar_68;
					  tmpvar_68 = (roughness_55 * roughness_55);
					  a2_54 = tmpvar_68;
					  specularTerm_53 = ((roughness_55 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_57), 0.0, 1.0)) * (1.5 + roughness_55))
					   * 
					    (((tmpvar_61 * tmpvar_61) * (a2_54 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_69;
					  tmpvar_69 = clamp (specularTerm_53, 0.0, 100.0);
					  specularTerm_53 = tmpvar_69;
					  surfaceReduction_52 = (1.0 - ((roughness_55 * perceptualRoughness_56) * 0.28));
					  mediump float x_70;
					  x_70 = (1.0 - tmpvar_62);
					  mediump vec3 tmpvar_71;
					  tmpvar_71 = mix (tmpvar_46, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_47)
					  ), 0.0, 1.0)), vec3(((x_70 * x_70) * (x_70 * x_70))));
					  highp vec3 tmpvar_72;
					  tmpvar_72 = (((
					    ((diffColor_50 + (tmpvar_69 * tmpvar_46)) * tmpvar_3)
					   * tmpvar_59) + (tmpvar_28 * diffColor_50)) + ((surfaceReduction_52 * tmpvar_27) * tmpvar_71));
					  color_51 = tmpvar_72;
					  mediump vec4 tmpvar_73;
					  tmpvar_73.w = 1.0;
					  tmpvar_73.xyz = color_51;
					  c_42.xyz = tmpvar_73.xyz;
					  c_42.w = alpha_49;
					  c_5 = c_42;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					lowp vec3 u_xlat10_4;
					vec3 u_xlat5;
					lowp vec3 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump float u_xlat16_13;
					float u_xlat14;
					mediump float u_xlat16_30;
					mediump float u_xlat16_32;
					float u_xlat33;
					void main()
					{
					    u_xlat16_0.x = vs_TEXCOORD1.y * vs_TEXCOORD1.y;
					    u_xlat16_0.x = vs_TEXCOORD1.x * vs_TEXCOORD1.x + (-u_xlat16_0.x);
					    u_xlat16_1 = vs_TEXCOORD1.yzzx * vs_TEXCOORD1.xyzz;
					    u_xlat16_2.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_2.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_2.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_0.xyz = unity_SHC.xyz * u_xlat16_0.xxx + u_xlat16_2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_3.xyz = log2(u_xlat16_0.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_0.xyz = unity_Lightmap_HDR.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
					    u_xlat16_30 = dot((-u_xlat3.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_30 = u_xlat16_30 + u_xlat16_30;
					    u_xlat16_2.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_30)) + (-u_xlat3.xyz);
					    u_xlat4.z = (-_Glossiness) + 1.0;
					    u_xlat16_30 = (-u_xlat4.z) * 0.699999988 + 1.70000005;
					    u_xlat16_30 = u_xlat16_30 * u_xlat4.z;
					    u_xlat16_30 = u_xlat16_30 * 6.0;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_30);
					    u_xlat16_30 = u_xlat10_1.w + -1.0;
					    u_xlat16_30 = unity_SpecCube0_HDR.w * u_xlat16_30 + 1.0;
					    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(u_xlat16_30);
					    u_xlat33 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * vs_TEXCOORD1.xyz;
					    u_xlat33 = dot(u_xlat3.xyz, u_xlat5.xyz);
					    u_xlat14 = u_xlat33;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
					#else
					    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
					#endif
					    u_xlat33 = u_xlat33 + u_xlat33;
					    u_xlat3.xyz = u_xlat5.xyz * (-vec3(u_xlat33)) + u_xlat3.xyz;
					    u_xlat33 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = vec3(u_xlat33) * _LightColor0.xyz;
					    u_xlat3.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat4.x = u_xlat3.x * u_xlat3.x;
					    u_xlat3.x = texture(unity_NHxRoughness, u_xlat4.xz).x;
					    u_xlat3.x = u_xlat3.x * 16.0;
					    u_xlat16_30 = (-u_xlat14) + 1.0;
					    u_xlat16_13 = u_xlat16_30 * u_xlat16_30;
					    u_xlat16_13 = u_xlat16_30 * u_xlat16_13;
					    u_xlat16_13 = u_xlat16_30 * u_xlat16_13;
					    u_xlat10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_5.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = u_xlat10_4.xyz + (-u_xlat10_5.xyz);
					    u_xlat4.xyz = vec3(_DayWeight) * u_xlat16_4.xyz + u_xlat10_5.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat16_7.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_32 = (-u_xlat16_30) + _Glossiness;
					    u_xlat16_8.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;
					    u_xlat16_30 = u_xlat16_32 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_30);
					    u_xlat16_9.xyz = vec3(u_xlat16_13) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat3.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;
					    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
					    u_xlat10_3.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.xyz = u_xlat10_3.xyz * _EmissionColor.xyz;
					    u_xlat33 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat3.xyz * vec3(u_xlat33) + u_xlat16_0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump float u_xlat16_12;
					mediump float u_xlat16_20;
					mediump float u_xlat16_24;
					mediump float u_xlat16_26;
					float u_xlat27;
					mediump float u_xlat16_28;
					void main()
					{
					    u_xlat16_0.x = vs_TEXCOORD1.y * vs_TEXCOORD1.y;
					    u_xlat16_0.x = vs_TEXCOORD1.x * vs_TEXCOORD1.x + (-u_xlat16_0.x);
					    u_xlat16_1 = vs_TEXCOORD1.yzzx * vs_TEXCOORD1.xyzz;
					    u_xlat16_2.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_2.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_2.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_0.xyz = unity_SHC.xyz * u_xlat16_0.xxx + u_xlat16_2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_3.xyz = log2(u_xlat16_0.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_0.xyz = unity_Lightmap_HDR.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_3.xyz + (-u_xlat10_4.xyz);
					    u_xlat3.xyz = vec3(_DayWeight) * u_xlat16_3.xyz + u_xlat10_4.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_24 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_5.xyz = vec3(u_xlat16_24) * u_xlat4.xyz;
					    u_xlat16_24 = (-u_xlat16_24) + _Glossiness;
					    u_xlat16_24 = u_xlat16_24 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
					#else
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_24);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat27 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat27 = max(u_xlat27, 0.319999993);
					    u_xlat16_28 = (-_Glossiness) + 1.0;
					    u_xlat16_7 = u_xlat16_28 * u_xlat16_28 + 1.5;
					    u_xlat27 = u_xlat27 * u_xlat16_7;
					    u_xlat7.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
					    u_xlat4.x = dot(u_xlat7.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat4.x = u_xlat4.x * u_xlat4.x;
					    u_xlat16_12 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_20 = u_xlat16_12 * u_xlat16_12 + -1.0;
					    u_xlat4.x = u_xlat4.x * u_xlat16_20 + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat4.x;
					    u_xlat27 = u_xlat16_12 / u_xlat27;
					    u_xlat16_24 = u_xlat16_28 * u_xlat16_12;
					    u_xlat16_24 = (-u_xlat16_24) * 0.280000001 + 1.0;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _LightColor0.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
					#else
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = (-u_xlat7.x) + 1.0;
					    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;
					    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;
					    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat16_2.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat27) + u_xlat16_0.xyz;
					    u_xlat16_0.x = (-u_xlat16_28) * 0.699999988 + 1.70000005;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_28;
					    u_xlat16_0.x = u_xlat16_0.x * 6.0;
					    u_xlat16_8 = dot((-u_xlat3.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_8 = u_xlat16_8 + u_xlat16_8;
					    u_xlat16_5.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_8)) + (-u_xlat3.xyz);
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat10_1.w + -1.0;
					    u_xlat16_0.x = unity_SpecCube0_HDR.w * u_xlat16_0.x + 1.0;
					    u_xlat16_0.x = u_xlat16_0.x * unity_SpecCube0_HDR.x;
					    u_xlat16_0.xyz = u_xlat10_1.xyz * u_xlat16_0.xxx;
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_24);
					    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
					    u_xlat10_4.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _EmissionColor.xyz;
					    u_xlat27 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat4.xyz * vec3(u_xlat27) + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump float u_xlat16_12;
					mediump float u_xlat16_20;
					mediump float u_xlat16_24;
					mediump float u_xlat16_26;
					float u_xlat27;
					mediump float u_xlat16_28;
					void main()
					{
					    u_xlat16_0.x = vs_TEXCOORD1.y * vs_TEXCOORD1.y;
					    u_xlat16_0.x = vs_TEXCOORD1.x * vs_TEXCOORD1.x + (-u_xlat16_0.x);
					    u_xlat16_1 = vs_TEXCOORD1.yzzx * vs_TEXCOORD1.xyzz;
					    u_xlat16_2.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_2.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_2.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_0.xyz = unity_SHC.xyz * u_xlat16_0.xxx + u_xlat16_2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_3.xyz = log2(u_xlat16_0.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_0.xyz = unity_Lightmap_HDR.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_3.xyz + (-u_xlat10_4.xyz);
					    u_xlat3.xyz = vec3(_DayWeight) * u_xlat16_3.xyz + u_xlat10_4.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_24 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_5.xyz = vec3(u_xlat16_24) * u_xlat4.xyz;
					    u_xlat16_24 = (-u_xlat16_24) + _Glossiness;
					    u_xlat16_24 = u_xlat16_24 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
					#else
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_24);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat27 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat27 = max(u_xlat27, 0.319999993);
					    u_xlat16_28 = (-_Glossiness) + 1.0;
					    u_xlat16_7 = u_xlat16_28 * u_xlat16_28 + 1.5;
					    u_xlat27 = u_xlat27 * u_xlat16_7;
					    u_xlat7.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
					    u_xlat4.x = dot(u_xlat7.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat4.x = u_xlat4.x * u_xlat4.x;
					    u_xlat16_12 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_20 = u_xlat16_12 * u_xlat16_12 + -1.0;
					    u_xlat4.x = u_xlat4.x * u_xlat16_20 + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat4.x;
					    u_xlat27 = u_xlat16_12 / u_xlat27;
					    u_xlat16_24 = u_xlat16_28 * u_xlat16_12;
					    u_xlat16_24 = (-u_xlat16_24) * 0.280000001 + 1.0;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _LightColor0.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
					#else
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = (-u_xlat7.x) + 1.0;
					    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;
					    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;
					    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat16_2.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat27) + u_xlat16_0.xyz;
					    u_xlat16_0.x = (-u_xlat16_28) * 0.699999988 + 1.70000005;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_28;
					    u_xlat16_0.x = u_xlat16_0.x * 6.0;
					    u_xlat16_8 = dot((-u_xlat3.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_8 = u_xlat16_8 + u_xlat16_8;
					    u_xlat16_5.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_8)) + (-u_xlat3.xyz);
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat10_1.w + -1.0;
					    u_xlat16_0.x = unity_SpecCube0_HDR.w * u_xlat16_0.x + 1.0;
					    u_xlat16_0.x = u_xlat16_0.x * unity_SpecCube0_HDR.x;
					    u_xlat16_0.xyz = u_xlat10_1.xyz * u_xlat16_0.xxx;
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_24);
					    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
					    u_xlat10_4.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _EmissionColor.xyz;
					    u_xlat27 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat4.xyz * vec3(u_xlat27) + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = tmpvar_2;
					  xlv_TEXCOORD6 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 normalWorld_26;
					  normalWorld_26 = xlv_TEXCOORD1;
					  mediump vec4 realtimeDirTex_27;
					  lowp vec4 tmpvar_28;
					  tmpvar_28 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
					  lowp vec4 tmpvar_29;
					  tmpvar_29 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
					  realtimeDirTex_27 = tmpvar_29;
					  lowp vec4 dirTex_30;
					  dirTex_30 = realtimeDirTex_27;
					  lowp vec3 y_31;
					  y_31 = (dirTex_30.xyz - 0.5);
					  lowp float tmpvar_32;
					  tmpvar_32 = max (0.0001, dirTex_30.w);
					  mediump vec4 hdr_33;
					  hdr_33 = tmpvar_2;
					  mediump vec4 tmpvar_34;
					  tmpvar_34.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_34.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_35;
					  tmpvar_35 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_34.xyz, tmpvar_34.w);
					  mediump vec4 tmpvar_36;
					  tmpvar_36 = tmpvar_35;
					  lowp vec3 tmpvar_37;
					  mediump vec4 c_38;
					  highp vec3 tmpvar_39;
					  tmpvar_39 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_40;
					  mediump vec3 albedo_41;
					  albedo_41 = tmpvar_10;
					  mediump vec3 tmpvar_42;
					  tmpvar_42 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_41, vec3(_Metallic));
					  mediump float tmpvar_43;
					  tmpvar_43 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_40 = (albedo_41 * tmpvar_43);
					  tmpvar_37 = tmpvar_40;
					  mediump vec3 diffColor_44;
					  diffColor_44 = tmpvar_37;
					  mediump float alpha_45;
					  alpha_45 = tmpvar_12;
					  tmpvar_37 = diffColor_44;
					  mediump vec3 diffColor_46;
					  diffColor_46 = tmpvar_37;
					  mediump vec3 color_47;
					  mediump vec2 rlPow4AndFresnelTerm_48;
					  mediump float tmpvar_49;
					  highp float tmpvar_50;
					  tmpvar_50 = clamp (dot (tmpvar_39, tmpvar_4), 0.0, 1.0);
					  tmpvar_49 = tmpvar_50;
					  mediump float tmpvar_51;
					  highp float tmpvar_52;
					  tmpvar_52 = clamp (dot (tmpvar_39, worldViewDir_6), 0.0, 1.0);
					  tmpvar_51 = tmpvar_52;
					  highp vec2 tmpvar_53;
					  tmpvar_53.x = dot ((worldViewDir_6 - (2.0 * 
					    (dot (tmpvar_39, worldViewDir_6) * tmpvar_39)
					  )), tmpvar_4);
					  tmpvar_53.y = (1.0 - tmpvar_51);
					  highp vec2 tmpvar_54;
					  tmpvar_54 = ((tmpvar_53 * tmpvar_53) * (tmpvar_53 * tmpvar_53));
					  rlPow4AndFresnelTerm_48 = tmpvar_54;
					  mediump float tmpvar_55;
					  tmpvar_55 = rlPow4AndFresnelTerm_48.x;
					  mediump float specular_56;
					  highp float smoothness_57;
					  smoothness_57 = _Glossiness;
					  highp vec2 tmpvar_58;
					  tmpvar_58.x = tmpvar_55;
					  tmpvar_58.y = (1.0 - smoothness_57);
					  highp float tmpvar_59;
					  tmpvar_59 = (texture2D (unity_NHxRoughness, tmpvar_58).x * 16.0);
					  specular_56 = tmpvar_59;
					  color_47 = ((diffColor_46 + (specular_56 * tmpvar_42)) * (tmpvar_3 * tmpvar_49));
					  color_47 = (color_47 + ((
					    ((pow ((
					      (unity_DynamicLightmap_HDR.x * tmpvar_28.w)
					     * tmpvar_28.xyz), unity_DynamicLightmap_HDR.yyy) * (dot (normalWorld_26, y_31) + 0.5)) / tmpvar_32)
					   * diffColor_46) + (
					    ((hdr_33.x * ((hdr_33.w * 
					      (tmpvar_36.w - 1.0)
					    ) + 1.0)) * tmpvar_36.xyz)
					   * 
					    mix (tmpvar_42, vec3(clamp ((_Glossiness + (1.0 - tmpvar_43)), 0.0, 1.0)), rlPow4AndFresnelTerm_48.yyy)
					  )));
					  mediump vec4 tmpvar_60;
					  tmpvar_60.w = 1.0;
					  tmpvar_60.xyz = color_47;
					  c_38.xyz = tmpvar_60.xyz;
					  c_38.w = alpha_45;
					  c_5 = c_38;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = tmpvar_2;
					  xlv_TEXCOORD6 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 normalWorld_26;
					  normalWorld_26 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_27;
					  mediump vec4 realtimeDirTex_28;
					  mediump vec3 tmpvar_29;
					  lowp vec4 tmpvar_30;
					  tmpvar_30 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
					  lowp vec4 tmpvar_31;
					  tmpvar_31 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
					  realtimeDirTex_28 = tmpvar_31;
					  lowp vec4 dirTex_32;
					  dirTex_32 = realtimeDirTex_28;
					  lowp vec3 y_33;
					  y_33 = (dirTex_32.xyz - 0.5);
					  lowp float tmpvar_34;
					  tmpvar_34 = max (0.0001, dirTex_32.w);
					  tmpvar_29 = ((pow (
					    ((unity_DynamicLightmap_HDR.x * tmpvar_30.w) * tmpvar_30.xyz)
					  , unity_DynamicLightmap_HDR.yyy) * (
					    dot (normalWorld_26, y_33)
					   + 0.5)) / tmpvar_34);
					  mediump vec4 hdr_35;
					  hdr_35 = tmpvar_2;
					  mediump vec4 tmpvar_36;
					  tmpvar_36.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_36.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_37;
					  tmpvar_37 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_36.xyz, tmpvar_36.w);
					  mediump vec4 tmpvar_38;
					  tmpvar_38 = tmpvar_37;
					  tmpvar_27 = ((hdr_35.x * (
					    (hdr_35.w * (tmpvar_38.w - 1.0))
					   + 1.0)) * tmpvar_38.xyz);
					  lowp vec3 tmpvar_39;
					  mediump vec4 c_40;
					  highp vec3 tmpvar_41;
					  tmpvar_41 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_42;
					  mediump vec3 albedo_43;
					  albedo_43 = tmpvar_10;
					  mediump vec3 tmpvar_44;
					  tmpvar_44 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_43, vec3(_Metallic));
					  mediump float tmpvar_45;
					  tmpvar_45 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_42 = (albedo_43 * tmpvar_45);
					  tmpvar_39 = tmpvar_42;
					  mediump vec3 diffColor_46;
					  diffColor_46 = tmpvar_39;
					  mediump float alpha_47;
					  alpha_47 = tmpvar_12;
					  tmpvar_39 = diffColor_46;
					  mediump vec3 diffColor_48;
					  diffColor_48 = tmpvar_39;
					  mediump vec3 color_49;
					  mediump float surfaceReduction_50;
					  highp float specularTerm_51;
					  highp float a2_52;
					  mediump float roughness_53;
					  mediump float perceptualRoughness_54;
					  highp vec3 tmpvar_55;
					  highp vec3 inVec_56;
					  inVec_56 = (tmpvar_4 + worldViewDir_6);
					  tmpvar_55 = (inVec_56 * inversesqrt(max (0.001, 
					    dot (inVec_56, inVec_56)
					  )));
					  mediump float tmpvar_57;
					  highp float tmpvar_58;
					  tmpvar_58 = clamp (dot (tmpvar_41, tmpvar_4), 0.0, 1.0);
					  tmpvar_57 = tmpvar_58;
					  highp float tmpvar_59;
					  tmpvar_59 = clamp (dot (tmpvar_41, tmpvar_55), 0.0, 1.0);
					  mediump float tmpvar_60;
					  highp float tmpvar_61;
					  tmpvar_61 = clamp (dot (tmpvar_41, worldViewDir_6), 0.0, 1.0);
					  tmpvar_60 = tmpvar_61;
					  highp float tmpvar_62;
					  highp float smoothness_63;
					  smoothness_63 = _Glossiness;
					  tmpvar_62 = (1.0 - smoothness_63);
					  perceptualRoughness_54 = tmpvar_62;
					  highp float tmpvar_64;
					  highp float perceptualRoughness_65;
					  perceptualRoughness_65 = perceptualRoughness_54;
					  tmpvar_64 = (perceptualRoughness_65 * perceptualRoughness_65);
					  roughness_53 = tmpvar_64;
					  mediump float tmpvar_66;
					  tmpvar_66 = (roughness_53 * roughness_53);
					  a2_52 = tmpvar_66;
					  specularTerm_51 = ((roughness_53 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_55), 0.0, 1.0)) * (1.5 + roughness_53))
					   * 
					    (((tmpvar_59 * tmpvar_59) * (a2_52 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (specularTerm_51, 0.0, 100.0);
					  specularTerm_51 = tmpvar_67;
					  surfaceReduction_50 = (1.0 - ((roughness_53 * perceptualRoughness_54) * 0.28));
					  mediump float x_68;
					  x_68 = (1.0 - tmpvar_60);
					  mediump vec3 tmpvar_69;
					  tmpvar_69 = mix (tmpvar_44, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_45)
					  ), 0.0, 1.0)), vec3(((x_68 * x_68) * (x_68 * x_68))));
					  highp vec3 tmpvar_70;
					  tmpvar_70 = (((
					    ((diffColor_48 + (tmpvar_67 * tmpvar_44)) * tmpvar_3)
					   * tmpvar_57) + (tmpvar_29 * diffColor_48)) + ((surfaceReduction_50 * tmpvar_27) * tmpvar_69));
					  color_49 = tmpvar_70;
					  mediump vec4 tmpvar_71;
					  tmpvar_71.w = 1.0;
					  tmpvar_71.xyz = color_49;
					  c_40.xyz = tmpvar_71.xyz;
					  c_40.w = alpha_47;
					  c_5 = c_40;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = tmpvar_2;
					  xlv_TEXCOORD6 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 normalWorld_26;
					  normalWorld_26 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_27;
					  mediump vec4 realtimeDirTex_28;
					  mediump vec3 tmpvar_29;
					  lowp vec4 tmpvar_30;
					  tmpvar_30 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
					  lowp vec4 tmpvar_31;
					  tmpvar_31 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
					  realtimeDirTex_28 = tmpvar_31;
					  lowp vec4 dirTex_32;
					  dirTex_32 = realtimeDirTex_28;
					  lowp vec3 y_33;
					  y_33 = (dirTex_32.xyz - 0.5);
					  lowp float tmpvar_34;
					  tmpvar_34 = max (0.0001, dirTex_32.w);
					  tmpvar_29 = ((pow (
					    ((unity_DynamicLightmap_HDR.x * tmpvar_30.w) * tmpvar_30.xyz)
					  , unity_DynamicLightmap_HDR.yyy) * (
					    dot (normalWorld_26, y_33)
					   + 0.5)) / tmpvar_34);
					  mediump vec4 hdr_35;
					  hdr_35 = tmpvar_2;
					  mediump vec4 tmpvar_36;
					  tmpvar_36.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_36.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_37;
					  tmpvar_37 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_36.xyz, tmpvar_36.w);
					  mediump vec4 tmpvar_38;
					  tmpvar_38 = tmpvar_37;
					  tmpvar_27 = ((hdr_35.x * (
					    (hdr_35.w * (tmpvar_38.w - 1.0))
					   + 1.0)) * tmpvar_38.xyz);
					  lowp vec3 tmpvar_39;
					  mediump vec4 c_40;
					  highp vec3 tmpvar_41;
					  tmpvar_41 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_42;
					  mediump vec3 albedo_43;
					  albedo_43 = tmpvar_10;
					  mediump vec3 tmpvar_44;
					  tmpvar_44 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_43, vec3(_Metallic));
					  mediump float tmpvar_45;
					  tmpvar_45 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_42 = (albedo_43 * tmpvar_45);
					  tmpvar_39 = tmpvar_42;
					  mediump vec3 diffColor_46;
					  diffColor_46 = tmpvar_39;
					  mediump float alpha_47;
					  alpha_47 = tmpvar_12;
					  tmpvar_39 = diffColor_46;
					  mediump vec3 diffColor_48;
					  diffColor_48 = tmpvar_39;
					  mediump vec3 color_49;
					  mediump float surfaceReduction_50;
					  highp float specularTerm_51;
					  highp float a2_52;
					  mediump float roughness_53;
					  mediump float perceptualRoughness_54;
					  highp vec3 tmpvar_55;
					  highp vec3 inVec_56;
					  inVec_56 = (tmpvar_4 + worldViewDir_6);
					  tmpvar_55 = (inVec_56 * inversesqrt(max (0.001, 
					    dot (inVec_56, inVec_56)
					  )));
					  mediump float tmpvar_57;
					  highp float tmpvar_58;
					  tmpvar_58 = clamp (dot (tmpvar_41, tmpvar_4), 0.0, 1.0);
					  tmpvar_57 = tmpvar_58;
					  highp float tmpvar_59;
					  tmpvar_59 = clamp (dot (tmpvar_41, tmpvar_55), 0.0, 1.0);
					  mediump float tmpvar_60;
					  highp float tmpvar_61;
					  tmpvar_61 = clamp (dot (tmpvar_41, worldViewDir_6), 0.0, 1.0);
					  tmpvar_60 = tmpvar_61;
					  highp float tmpvar_62;
					  highp float smoothness_63;
					  smoothness_63 = _Glossiness;
					  tmpvar_62 = (1.0 - smoothness_63);
					  perceptualRoughness_54 = tmpvar_62;
					  highp float tmpvar_64;
					  highp float perceptualRoughness_65;
					  perceptualRoughness_65 = perceptualRoughness_54;
					  tmpvar_64 = (perceptualRoughness_65 * perceptualRoughness_65);
					  roughness_53 = tmpvar_64;
					  mediump float tmpvar_66;
					  tmpvar_66 = (roughness_53 * roughness_53);
					  a2_52 = tmpvar_66;
					  specularTerm_51 = ((roughness_53 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_55), 0.0, 1.0)) * (1.5 + roughness_53))
					   * 
					    (((tmpvar_59 * tmpvar_59) * (a2_52 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (specularTerm_51, 0.0, 100.0);
					  specularTerm_51 = tmpvar_67;
					  surfaceReduction_50 = (1.0 - ((roughness_53 * perceptualRoughness_54) * 0.28));
					  mediump float x_68;
					  x_68 = (1.0 - tmpvar_60);
					  mediump vec3 tmpvar_69;
					  tmpvar_69 = mix (tmpvar_44, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_45)
					  ), 0.0, 1.0)), vec3(((x_68 * x_68) * (x_68 * x_68))));
					  highp vec3 tmpvar_70;
					  tmpvar_70 = (((
					    ((diffColor_48 + (tmpvar_67 * tmpvar_44)) * tmpvar_3)
					   * tmpvar_57) + (tmpvar_29 * diffColor_48)) + ((surfaceReduction_50 * tmpvar_27) * tmpvar_69));
					  color_49 = tmpvar_70;
					  mediump vec4 tmpvar_71;
					  tmpvar_71.w = 1.0;
					  tmpvar_71.xyz = color_49;
					  c_40.xyz = tmpvar_71.xyz;
					  c_40.w = alpha_47;
					  c_5 = c_40;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					vec3 u_xlat4;
					lowp vec3 u_xlat10_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat13;
					mediump vec3 u_xlat16_13;
					lowp vec3 u_xlat10_13;
					float u_xlat30;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					float u_xlat33;
					mediump float u_xlat16_36;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat16_31 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_31 = u_xlat16_31 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
					    u_xlat16_1.x = dot((-u_xlat3.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_1.xxx) + (-u_xlat3.xyz);
					    u_xlat4.z = (-_Glossiness) + 1.0;
					    u_xlat16_31 = (-u_xlat4.z) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat16_31 * u_xlat4.z;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_31);
					    u_xlat16_2.x = u_xlat10_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_1.xyz * u_xlat16_2.xxx;
					    u_xlat30 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat5.xyz = vec3(u_xlat30) * vs_TEXCOORD1.xyz;
					    u_xlat30 = dot(u_xlat3.xyz, u_xlat5.xyz);
					    u_xlat33 = u_xlat30;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat3.xyz = u_xlat5.xyz * (-vec3(u_xlat30)) + u_xlat3.xyz;
					    u_xlat30 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = vec3(u_xlat30) * _LightColor0.xyz;
					    u_xlat30 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat4.x = u_xlat30 * u_xlat30;
					    u_xlat30 = texture(unity_NHxRoughness, u_xlat4.xz).x;
					    u_xlat30 = u_xlat30 * 16.0;
					    u_xlat16_32 = (-u_xlat33) + 1.0;
					    u_xlat16_3 = u_xlat16_32 * u_xlat16_32;
					    u_xlat16_3 = u_xlat16_32 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_32 * u_xlat16_3;
					    u_xlat10_13.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_13.xyz = u_xlat10_13.xyz + (-u_xlat10_4.xyz);
					    u_xlat13.xyz = vec3(_DayWeight) * u_xlat16_13.xyz + u_xlat10_4.xyz;
					    u_xlat13.xyz = u_xlat13.xyz * _Color.xyz;
					    u_xlat16_7.xyz = u_xlat13.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat13.xyz = u_xlat13.xyz * vs_COLOR0.xyz;
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_36 = (-u_xlat16_32) + _Glossiness;
					    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat13.xyz;
					    u_xlat16_32 = u_xlat16_36 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
					#else
					    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_32);
					    u_xlat16_9.xyz = vec3(u_xlat16_3) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = vec3(u_xlat30) * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_2.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat30 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					vec3 u_xlat4;
					mediump float u_xlat16_4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_17;
					float u_xlat21;
					mediump float u_xlat16_22;
					mediump float u_xlat16_24;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat16_22 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_22 = u_xlat16_22 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
					    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_3.xyz + (-u_xlat10_4.xyz);
					    u_xlat3.xyz = vec3(_DayWeight) * u_xlat16_3.xyz + u_xlat10_4.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat16_1.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat16_22) * u_xlat4.xyz;
					    u_xlat16_22 = (-u_xlat16_22) + _Glossiness;
					    u_xlat16_22 = u_xlat16_22 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
					#else
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + vec3(u_xlat16_22);
					    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat21 = max(u_xlat21, 0.319999993);
					    u_xlat16_24 = (-_Glossiness) + 1.0;
					    u_xlat16_4 = u_xlat16_24 * u_xlat16_24 + 1.5;
					    u_xlat21 = u_xlat21 * u_xlat16_4;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = inversesqrt(u_xlat4.x);
					    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat3.x = dot(u_xlat4.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16_10 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_17 = u_xlat16_10 * u_xlat16_10 + -1.0;
					    u_xlat3.x = u_xlat3.x * u_xlat16_17 + 1.00001001;
					    u_xlat21 = u_xlat21 * u_xlat3.x;
					    u_xlat21 = u_xlat16_10 / u_xlat21;
					    u_xlat16_22 = u_xlat16_24 * u_xlat16_10;
					    u_xlat16_22 = (-u_xlat16_22) * 0.280000001 + 1.0;
					    u_xlat21 = u_xlat21 + -9.99999975e-05;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = min(u_xlat21, 100.0);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _LightColor0.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_1.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_6.xyz;
					    u_xlat16_2.x = (-u_xlat16_24) * 0.699999988 + 1.70000005;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_24;
					    u_xlat16_2.x = u_xlat16_2.x * 6.0;
					    u_xlat16_9.x = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_9.x = u_xlat16_9.x + u_xlat16_9.x;
					    u_xlat16_9.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_9.xxx) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat10_0.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
					    u_xlat16_2.xyz = vec3(u_xlat16_22) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat3.xyz;
					    u_xlat10_3.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.xyz = u_xlat10_3.xyz * _EmissionColor.xyz;
					    u_xlat21 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					vec3 u_xlat4;
					mediump float u_xlat16_4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_17;
					float u_xlat21;
					mediump float u_xlat16_22;
					mediump float u_xlat16_24;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat16_22 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_22 = u_xlat16_22 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
					    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_3.xyz + (-u_xlat10_4.xyz);
					    u_xlat3.xyz = vec3(_DayWeight) * u_xlat16_3.xyz + u_xlat10_4.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat16_1.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat16_22) * u_xlat4.xyz;
					    u_xlat16_22 = (-u_xlat16_22) + _Glossiness;
					    u_xlat16_22 = u_xlat16_22 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
					#else
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + vec3(u_xlat16_22);
					    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat21 = max(u_xlat21, 0.319999993);
					    u_xlat16_24 = (-_Glossiness) + 1.0;
					    u_xlat16_4 = u_xlat16_24 * u_xlat16_24 + 1.5;
					    u_xlat21 = u_xlat21 * u_xlat16_4;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = inversesqrt(u_xlat4.x);
					    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat3.x = dot(u_xlat4.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16_10 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_17 = u_xlat16_10 * u_xlat16_10 + -1.0;
					    u_xlat3.x = u_xlat3.x * u_xlat16_17 + 1.00001001;
					    u_xlat21 = u_xlat21 * u_xlat3.x;
					    u_xlat21 = u_xlat16_10 / u_xlat21;
					    u_xlat16_22 = u_xlat16_24 * u_xlat16_10;
					    u_xlat16_22 = (-u_xlat16_22) * 0.280000001 + 1.0;
					    u_xlat21 = u_xlat21 + -9.99999975e-05;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = min(u_xlat21, 100.0);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _LightColor0.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_1.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_6.xyz;
					    u_xlat16_2.x = (-u_xlat16_24) * 0.699999988 + 1.70000005;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_24;
					    u_xlat16_2.x = u_xlat16_2.x * 6.0;
					    u_xlat16_9.x = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_9.x = u_xlat16_9.x + u_xlat16_9.x;
					    u_xlat16_9.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_9.xxx) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat10_0.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
					    u_xlat16_2.xyz = vec3(u_xlat16_22) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat3.xyz;
					    u_xlat10_3.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.xyz = u_xlat10_3.xyz * _EmissionColor.xyz;
					    u_xlat21 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 normalWorld_26;
					  normalWorld_26 = xlv_TEXCOORD1;
					  lowp vec4 bakedDirTex_27;
					  mediump vec4 tmpvar_28;
					  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_29;
					  color_29 = tmpvar_28;
					  mediump vec4 tmpvar_30;
					  tmpvar_30 = texture2D (unity_LightmapInd, xlv_TEXCOORD3.xy);
					  bakedDirTex_27 = tmpvar_30;
					  lowp vec3 y_31;
					  y_31 = (bakedDirTex_27.xyz - 0.5);
					  lowp float tmpvar_32;
					  tmpvar_32 = max (0.0001, bakedDirTex_27.w);
					  mediump vec4 hdr_33;
					  hdr_33 = tmpvar_2;
					  mediump vec4 tmpvar_34;
					  tmpvar_34.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_34.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_35;
					  tmpvar_35 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_34.xyz, tmpvar_34.w);
					  mediump vec4 tmpvar_36;
					  tmpvar_36 = tmpvar_35;
					  lowp vec3 tmpvar_37;
					  mediump vec4 c_38;
					  highp vec3 tmpvar_39;
					  tmpvar_39 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_40;
					  mediump vec3 albedo_41;
					  albedo_41 = tmpvar_10;
					  mediump vec3 tmpvar_42;
					  tmpvar_42 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_41, vec3(_Metallic));
					  mediump float tmpvar_43;
					  tmpvar_43 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_40 = (albedo_41 * tmpvar_43);
					  tmpvar_37 = tmpvar_40;
					  mediump vec3 diffColor_44;
					  diffColor_44 = tmpvar_37;
					  mediump float alpha_45;
					  alpha_45 = tmpvar_12;
					  tmpvar_37 = diffColor_44;
					  mediump vec3 diffColor_46;
					  diffColor_46 = tmpvar_37;
					  mediump vec3 color_47;
					  mediump vec2 rlPow4AndFresnelTerm_48;
					  mediump float tmpvar_49;
					  highp float tmpvar_50;
					  tmpvar_50 = clamp (dot (tmpvar_39, tmpvar_4), 0.0, 1.0);
					  tmpvar_49 = tmpvar_50;
					  mediump float tmpvar_51;
					  highp float tmpvar_52;
					  tmpvar_52 = clamp (dot (tmpvar_39, worldViewDir_6), 0.0, 1.0);
					  tmpvar_51 = tmpvar_52;
					  highp vec2 tmpvar_53;
					  tmpvar_53.x = dot ((worldViewDir_6 - (2.0 * 
					    (dot (tmpvar_39, worldViewDir_6) * tmpvar_39)
					  )), tmpvar_4);
					  tmpvar_53.y = (1.0 - tmpvar_51);
					  highp vec2 tmpvar_54;
					  tmpvar_54 = ((tmpvar_53 * tmpvar_53) * (tmpvar_53 * tmpvar_53));
					  rlPow4AndFresnelTerm_48 = tmpvar_54;
					  mediump float tmpvar_55;
					  tmpvar_55 = rlPow4AndFresnelTerm_48.x;
					  mediump float specular_56;
					  highp float smoothness_57;
					  smoothness_57 = _Glossiness;
					  highp vec2 tmpvar_58;
					  tmpvar_58.x = tmpvar_55;
					  tmpvar_58.y = (1.0 - smoothness_57);
					  highp float tmpvar_59;
					  tmpvar_59 = (texture2D (unity_NHxRoughness, tmpvar_58).x * 16.0);
					  specular_56 = tmpvar_59;
					  color_47 = ((diffColor_46 + (specular_56 * tmpvar_42)) * (tmpvar_3 * tmpvar_49));
					  color_47 = (color_47 + ((
					    (((unity_Lightmap_HDR.x * color_29.xyz) * (dot (normalWorld_26, y_31) + 0.5)) / tmpvar_32)
					   * diffColor_46) + (
					    ((hdr_33.x * ((hdr_33.w * 
					      (tmpvar_36.w - 1.0)
					    ) + 1.0)) * tmpvar_36.xyz)
					   * 
					    mix (tmpvar_42, vec3(clamp ((_Glossiness + (1.0 - tmpvar_43)), 0.0, 1.0)), rlPow4AndFresnelTerm_48.yyy)
					  )));
					  mediump vec4 tmpvar_60;
					  tmpvar_60.w = 1.0;
					  tmpvar_60.xyz = color_47;
					  c_38.xyz = tmpvar_60.xyz;
					  c_38.w = alpha_45;
					  c_5 = c_38;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 normalWorld_26;
					  normalWorld_26 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_27;
					  lowp vec4 bakedDirTex_28;
					  mediump vec3 tmpvar_29;
					  mediump vec4 tmpvar_30;
					  tmpvar_30 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_31;
					  color_31 = tmpvar_30;
					  mediump vec4 tmpvar_32;
					  tmpvar_32 = texture2D (unity_LightmapInd, xlv_TEXCOORD3.xy);
					  bakedDirTex_28 = tmpvar_32;
					  lowp vec3 y_33;
					  y_33 = (bakedDirTex_28.xyz - 0.5);
					  lowp float tmpvar_34;
					  tmpvar_34 = max (0.0001, bakedDirTex_28.w);
					  tmpvar_29 = (((unity_Lightmap_HDR.x * color_31.xyz) * (
					    dot (normalWorld_26, y_33)
					   + 0.5)) / tmpvar_34);
					  mediump vec4 hdr_35;
					  hdr_35 = tmpvar_2;
					  mediump vec4 tmpvar_36;
					  tmpvar_36.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_36.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_37;
					  tmpvar_37 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_36.xyz, tmpvar_36.w);
					  mediump vec4 tmpvar_38;
					  tmpvar_38 = tmpvar_37;
					  tmpvar_27 = ((hdr_35.x * (
					    (hdr_35.w * (tmpvar_38.w - 1.0))
					   + 1.0)) * tmpvar_38.xyz);
					  lowp vec3 tmpvar_39;
					  mediump vec4 c_40;
					  highp vec3 tmpvar_41;
					  tmpvar_41 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_42;
					  mediump vec3 albedo_43;
					  albedo_43 = tmpvar_10;
					  mediump vec3 tmpvar_44;
					  tmpvar_44 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_43, vec3(_Metallic));
					  mediump float tmpvar_45;
					  tmpvar_45 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_42 = (albedo_43 * tmpvar_45);
					  tmpvar_39 = tmpvar_42;
					  mediump vec3 diffColor_46;
					  diffColor_46 = tmpvar_39;
					  mediump float alpha_47;
					  alpha_47 = tmpvar_12;
					  tmpvar_39 = diffColor_46;
					  mediump vec3 diffColor_48;
					  diffColor_48 = tmpvar_39;
					  mediump vec3 color_49;
					  mediump float surfaceReduction_50;
					  highp float specularTerm_51;
					  highp float a2_52;
					  mediump float roughness_53;
					  mediump float perceptualRoughness_54;
					  highp vec3 tmpvar_55;
					  highp vec3 inVec_56;
					  inVec_56 = (tmpvar_4 + worldViewDir_6);
					  tmpvar_55 = (inVec_56 * inversesqrt(max (0.001, 
					    dot (inVec_56, inVec_56)
					  )));
					  mediump float tmpvar_57;
					  highp float tmpvar_58;
					  tmpvar_58 = clamp (dot (tmpvar_41, tmpvar_4), 0.0, 1.0);
					  tmpvar_57 = tmpvar_58;
					  highp float tmpvar_59;
					  tmpvar_59 = clamp (dot (tmpvar_41, tmpvar_55), 0.0, 1.0);
					  mediump float tmpvar_60;
					  highp float tmpvar_61;
					  tmpvar_61 = clamp (dot (tmpvar_41, worldViewDir_6), 0.0, 1.0);
					  tmpvar_60 = tmpvar_61;
					  highp float tmpvar_62;
					  highp float smoothness_63;
					  smoothness_63 = _Glossiness;
					  tmpvar_62 = (1.0 - smoothness_63);
					  perceptualRoughness_54 = tmpvar_62;
					  highp float tmpvar_64;
					  highp float perceptualRoughness_65;
					  perceptualRoughness_65 = perceptualRoughness_54;
					  tmpvar_64 = (perceptualRoughness_65 * perceptualRoughness_65);
					  roughness_53 = tmpvar_64;
					  mediump float tmpvar_66;
					  tmpvar_66 = (roughness_53 * roughness_53);
					  a2_52 = tmpvar_66;
					  specularTerm_51 = ((roughness_53 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_55), 0.0, 1.0)) * (1.5 + roughness_53))
					   * 
					    (((tmpvar_59 * tmpvar_59) * (a2_52 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (specularTerm_51, 0.0, 100.0);
					  specularTerm_51 = tmpvar_67;
					  surfaceReduction_50 = (1.0 - ((roughness_53 * perceptualRoughness_54) * 0.28));
					  mediump float x_68;
					  x_68 = (1.0 - tmpvar_60);
					  mediump vec3 tmpvar_69;
					  tmpvar_69 = mix (tmpvar_44, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_45)
					  ), 0.0, 1.0)), vec3(((x_68 * x_68) * (x_68 * x_68))));
					  highp vec3 tmpvar_70;
					  tmpvar_70 = (((
					    ((diffColor_48 + (tmpvar_67 * tmpvar_44)) * tmpvar_3)
					   * tmpvar_57) + (tmpvar_29 * diffColor_48)) + ((surfaceReduction_50 * tmpvar_27) * tmpvar_69));
					  color_49 = tmpvar_70;
					  mediump vec4 tmpvar_71;
					  tmpvar_71.w = 1.0;
					  tmpvar_71.xyz = color_49;
					  c_40.xyz = tmpvar_71.xyz;
					  c_40.w = alpha_47;
					  c_5 = c_40;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 normalWorld_26;
					  normalWorld_26 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_27;
					  lowp vec4 bakedDirTex_28;
					  mediump vec3 tmpvar_29;
					  mediump vec4 tmpvar_30;
					  tmpvar_30 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_31;
					  color_31 = tmpvar_30;
					  mediump vec4 tmpvar_32;
					  tmpvar_32 = texture2D (unity_LightmapInd, xlv_TEXCOORD3.xy);
					  bakedDirTex_28 = tmpvar_32;
					  lowp vec3 y_33;
					  y_33 = (bakedDirTex_28.xyz - 0.5);
					  lowp float tmpvar_34;
					  tmpvar_34 = max (0.0001, bakedDirTex_28.w);
					  tmpvar_29 = (((unity_Lightmap_HDR.x * color_31.xyz) * (
					    dot (normalWorld_26, y_33)
					   + 0.5)) / tmpvar_34);
					  mediump vec4 hdr_35;
					  hdr_35 = tmpvar_2;
					  mediump vec4 tmpvar_36;
					  tmpvar_36.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_36.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_37;
					  tmpvar_37 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_36.xyz, tmpvar_36.w);
					  mediump vec4 tmpvar_38;
					  tmpvar_38 = tmpvar_37;
					  tmpvar_27 = ((hdr_35.x * (
					    (hdr_35.w * (tmpvar_38.w - 1.0))
					   + 1.0)) * tmpvar_38.xyz);
					  lowp vec3 tmpvar_39;
					  mediump vec4 c_40;
					  highp vec3 tmpvar_41;
					  tmpvar_41 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_42;
					  mediump vec3 albedo_43;
					  albedo_43 = tmpvar_10;
					  mediump vec3 tmpvar_44;
					  tmpvar_44 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_43, vec3(_Metallic));
					  mediump float tmpvar_45;
					  tmpvar_45 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_42 = (albedo_43 * tmpvar_45);
					  tmpvar_39 = tmpvar_42;
					  mediump vec3 diffColor_46;
					  diffColor_46 = tmpvar_39;
					  mediump float alpha_47;
					  alpha_47 = tmpvar_12;
					  tmpvar_39 = diffColor_46;
					  mediump vec3 diffColor_48;
					  diffColor_48 = tmpvar_39;
					  mediump vec3 color_49;
					  mediump float surfaceReduction_50;
					  highp float specularTerm_51;
					  highp float a2_52;
					  mediump float roughness_53;
					  mediump float perceptualRoughness_54;
					  highp vec3 tmpvar_55;
					  highp vec3 inVec_56;
					  inVec_56 = (tmpvar_4 + worldViewDir_6);
					  tmpvar_55 = (inVec_56 * inversesqrt(max (0.001, 
					    dot (inVec_56, inVec_56)
					  )));
					  mediump float tmpvar_57;
					  highp float tmpvar_58;
					  tmpvar_58 = clamp (dot (tmpvar_41, tmpvar_4), 0.0, 1.0);
					  tmpvar_57 = tmpvar_58;
					  highp float tmpvar_59;
					  tmpvar_59 = clamp (dot (tmpvar_41, tmpvar_55), 0.0, 1.0);
					  mediump float tmpvar_60;
					  highp float tmpvar_61;
					  tmpvar_61 = clamp (dot (tmpvar_41, worldViewDir_6), 0.0, 1.0);
					  tmpvar_60 = tmpvar_61;
					  highp float tmpvar_62;
					  highp float smoothness_63;
					  smoothness_63 = _Glossiness;
					  tmpvar_62 = (1.0 - smoothness_63);
					  perceptualRoughness_54 = tmpvar_62;
					  highp float tmpvar_64;
					  highp float perceptualRoughness_65;
					  perceptualRoughness_65 = perceptualRoughness_54;
					  tmpvar_64 = (perceptualRoughness_65 * perceptualRoughness_65);
					  roughness_53 = tmpvar_64;
					  mediump float tmpvar_66;
					  tmpvar_66 = (roughness_53 * roughness_53);
					  a2_52 = tmpvar_66;
					  specularTerm_51 = ((roughness_53 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_55), 0.0, 1.0)) * (1.5 + roughness_53))
					   * 
					    (((tmpvar_59 * tmpvar_59) * (a2_52 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (specularTerm_51, 0.0, 100.0);
					  specularTerm_51 = tmpvar_67;
					  surfaceReduction_50 = (1.0 - ((roughness_53 * perceptualRoughness_54) * 0.28));
					  mediump float x_68;
					  x_68 = (1.0 - tmpvar_60);
					  mediump vec3 tmpvar_69;
					  tmpvar_69 = mix (tmpvar_44, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_45)
					  ), 0.0, 1.0)), vec3(((x_68 * x_68) * (x_68 * x_68))));
					  highp vec3 tmpvar_70;
					  tmpvar_70 = (((
					    ((diffColor_48 + (tmpvar_67 * tmpvar_44)) * tmpvar_3)
					   * tmpvar_57) + (tmpvar_29 * diffColor_48)) + ((surfaceReduction_50 * tmpvar_27) * tmpvar_69));
					  color_49 = tmpvar_70;
					  mediump vec4 tmpvar_71;
					  tmpvar_71.w = 1.0;
					  tmpvar_71.xyz = color_49;
					  c_40.xyz = tmpvar_71.xyz;
					  c_40.w = alpha_47;
					  c_5 = c_40;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD6;
					out highp vec3 vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD6.y = u_xlat2.x;
					    vs_TEXCOORD6.z = u_xlat0.x;
					    vs_TEXCOORD6.x = u_xlat1.z;
					    vs_TEXCOORD7.x = u_xlat1.x;
					    vs_TEXCOORD8.x = u_xlat1.y;
					    vs_TEXCOORD7.z = u_xlat0.y;
					    vs_TEXCOORD8.z = u_xlat0.z;
					    vs_TEXCOORD7.y = u_xlat2.y;
					    vs_TEXCOORD8.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					vec3 u_xlat4;
					lowp vec3 u_xlat10_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat13;
					mediump vec3 u_xlat16_13;
					lowp vec3 u_xlat10_13;
					float u_xlat30;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					float u_xlat33;
					mediump float u_xlat16_36;
					void main()
					{
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_0 = texture(unity_LightmapInd, vs_TEXCOORD3.xy);
					    u_xlat16_2.xyz = u_xlat16_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat16_0.w, 9.99999975e-05);
					    u_xlat16_31 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_31 = u_xlat16_31 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
					    u_xlat16_1.x = dot((-u_xlat3.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_1.xxx) + (-u_xlat3.xyz);
					    u_xlat4.z = (-_Glossiness) + 1.0;
					    u_xlat16_31 = (-u_xlat4.z) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat16_31 * u_xlat4.z;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_31);
					    u_xlat16_2.x = u_xlat10_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_1.xyz * u_xlat16_2.xxx;
					    u_xlat30 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat5.xyz = vec3(u_xlat30) * vs_TEXCOORD1.xyz;
					    u_xlat30 = dot(u_xlat3.xyz, u_xlat5.xyz);
					    u_xlat33 = u_xlat30;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat3.xyz = u_xlat5.xyz * (-vec3(u_xlat30)) + u_xlat3.xyz;
					    u_xlat30 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = vec3(u_xlat30) * _LightColor0.xyz;
					    u_xlat30 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat4.x = u_xlat30 * u_xlat30;
					    u_xlat30 = texture(unity_NHxRoughness, u_xlat4.xz).x;
					    u_xlat30 = u_xlat30 * 16.0;
					    u_xlat16_32 = (-u_xlat33) + 1.0;
					    u_xlat16_3 = u_xlat16_32 * u_xlat16_32;
					    u_xlat16_3 = u_xlat16_32 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_32 * u_xlat16_3;
					    u_xlat10_13.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_13.xyz = u_xlat10_13.xyz + (-u_xlat10_4.xyz);
					    u_xlat13.xyz = vec3(_DayWeight) * u_xlat16_13.xyz + u_xlat10_4.xyz;
					    u_xlat13.xyz = u_xlat13.xyz * _Color.xyz;
					    u_xlat16_7.xyz = u_xlat13.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat13.xyz = u_xlat13.xyz * vs_COLOR0.xyz;
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_36 = (-u_xlat16_32) + _Glossiness;
					    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat13.xyz;
					    u_xlat16_32 = u_xlat16_36 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
					#else
					    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_32);
					    u_xlat16_9.xyz = vec3(u_xlat16_3) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = vec3(u_xlat30) * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_2.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat30 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD6;
					out highp vec3 vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD6.y = u_xlat2.x;
					    vs_TEXCOORD6.z = u_xlat0.x;
					    vs_TEXCOORD6.x = u_xlat1.z;
					    vs_TEXCOORD7.x = u_xlat1.x;
					    vs_TEXCOORD8.x = u_xlat1.y;
					    vs_TEXCOORD7.z = u_xlat0.y;
					    vs_TEXCOORD8.z = u_xlat0.z;
					    vs_TEXCOORD7.y = u_xlat2.y;
					    vs_TEXCOORD8.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					vec3 u_xlat4;
					mediump float u_xlat16_4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_17;
					float u_xlat21;
					mediump float u_xlat16_22;
					mediump float u_xlat16_24;
					void main()
					{
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_0 = texture(unity_LightmapInd, vs_TEXCOORD3.xy);
					    u_xlat16_2.xyz = u_xlat16_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat16_0.w, 9.99999975e-05);
					    u_xlat16_22 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_22 = u_xlat16_22 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
					    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_3.xyz + (-u_xlat10_4.xyz);
					    u_xlat3.xyz = vec3(_DayWeight) * u_xlat16_3.xyz + u_xlat10_4.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat16_1.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat16_22) * u_xlat4.xyz;
					    u_xlat16_22 = (-u_xlat16_22) + _Glossiness;
					    u_xlat16_22 = u_xlat16_22 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
					#else
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + vec3(u_xlat16_22);
					    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat21 = max(u_xlat21, 0.319999993);
					    u_xlat16_24 = (-_Glossiness) + 1.0;
					    u_xlat16_4 = u_xlat16_24 * u_xlat16_24 + 1.5;
					    u_xlat21 = u_xlat21 * u_xlat16_4;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = inversesqrt(u_xlat4.x);
					    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat3.x = dot(u_xlat4.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16_10 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_17 = u_xlat16_10 * u_xlat16_10 + -1.0;
					    u_xlat3.x = u_xlat3.x * u_xlat16_17 + 1.00001001;
					    u_xlat21 = u_xlat21 * u_xlat3.x;
					    u_xlat21 = u_xlat16_10 / u_xlat21;
					    u_xlat16_22 = u_xlat16_24 * u_xlat16_10;
					    u_xlat16_22 = (-u_xlat16_22) * 0.280000001 + 1.0;
					    u_xlat21 = u_xlat21 + -9.99999975e-05;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = min(u_xlat21, 100.0);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _LightColor0.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_1.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_6.xyz;
					    u_xlat16_2.x = (-u_xlat16_24) * 0.699999988 + 1.70000005;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_24;
					    u_xlat16_2.x = u_xlat16_2.x * 6.0;
					    u_xlat16_9.x = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_9.x = u_xlat16_9.x + u_xlat16_9.x;
					    u_xlat16_9.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_9.xxx) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat10_0.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
					    u_xlat16_2.xyz = vec3(u_xlat16_22) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat3.xyz;
					    u_xlat10_3.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.xyz = u_xlat10_3.xyz * _EmissionColor.xyz;
					    u_xlat21 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD6;
					out highp vec3 vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD6.y = u_xlat2.x;
					    vs_TEXCOORD6.z = u_xlat0.x;
					    vs_TEXCOORD6.x = u_xlat1.z;
					    vs_TEXCOORD7.x = u_xlat1.x;
					    vs_TEXCOORD8.x = u_xlat1.y;
					    vs_TEXCOORD7.z = u_xlat0.y;
					    vs_TEXCOORD8.z = u_xlat0.z;
					    vs_TEXCOORD7.y = u_xlat2.y;
					    vs_TEXCOORD8.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					vec3 u_xlat4;
					mediump float u_xlat16_4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_17;
					float u_xlat21;
					mediump float u_xlat16_22;
					mediump float u_xlat16_24;
					void main()
					{
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_0 = texture(unity_LightmapInd, vs_TEXCOORD3.xy);
					    u_xlat16_2.xyz = u_xlat16_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat16_0.w, 9.99999975e-05);
					    u_xlat16_22 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_22 = u_xlat16_22 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
					    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_3.xyz + (-u_xlat10_4.xyz);
					    u_xlat3.xyz = vec3(_DayWeight) * u_xlat16_3.xyz + u_xlat10_4.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat16_1.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat16_22) * u_xlat4.xyz;
					    u_xlat16_22 = (-u_xlat16_22) + _Glossiness;
					    u_xlat16_22 = u_xlat16_22 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
					#else
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + vec3(u_xlat16_22);
					    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat21 = max(u_xlat21, 0.319999993);
					    u_xlat16_24 = (-_Glossiness) + 1.0;
					    u_xlat16_4 = u_xlat16_24 * u_xlat16_24 + 1.5;
					    u_xlat21 = u_xlat21 * u_xlat16_4;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = inversesqrt(u_xlat4.x);
					    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat3.x = dot(u_xlat4.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16_10 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_17 = u_xlat16_10 * u_xlat16_10 + -1.0;
					    u_xlat3.x = u_xlat3.x * u_xlat16_17 + 1.00001001;
					    u_xlat21 = u_xlat21 * u_xlat3.x;
					    u_xlat21 = u_xlat16_10 / u_xlat21;
					    u_xlat16_22 = u_xlat16_24 * u_xlat16_10;
					    u_xlat16_22 = (-u_xlat16_22) * 0.280000001 + 1.0;
					    u_xlat21 = u_xlat21 + -9.99999975e-05;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = min(u_xlat21, 100.0);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _LightColor0.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_1.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_6.xyz;
					    u_xlat16_2.x = (-u_xlat16_24) * 0.699999988 + 1.70000005;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_24;
					    u_xlat16_2.x = u_xlat16_2.x * 6.0;
					    u_xlat16_9.x = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_9.x = u_xlat16_9.x + u_xlat16_9.x;
					    u_xlat16_9.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_9.xxx) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat10_0.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
					    u_xlat16_2.xyz = vec3(u_xlat16_22) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat3.xyz;
					    u_xlat10_3.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.xyz = u_xlat10_3.xyz * _EmissionColor.xyz;
					    u_xlat21 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 normalWorld_26;
					  normalWorld_26 = xlv_TEXCOORD1;
					  lowp vec4 bakedDirTex_27;
					  mediump vec3 ambient_28;
					  mediump vec4 tmpvar_29;
					  tmpvar_29.w = 1.0;
					  tmpvar_29.xyz = normalWorld_26;
					  mediump vec3 x_30;
					  x_30.x = dot (unity_SHAr, tmpvar_29);
					  x_30.y = dot (unity_SHAg, tmpvar_29);
					  x_30.z = dot (unity_SHAb, tmpvar_29);
					  mediump vec3 x1_31;
					  mediump vec4 tmpvar_32;
					  tmpvar_32 = (normalWorld_26.xyzz * normalWorld_26.yzzx);
					  x1_31.x = dot (unity_SHBr, tmpvar_32);
					  x1_31.y = dot (unity_SHBg, tmpvar_32);
					  x1_31.z = dot (unity_SHBb, tmpvar_32);
					  ambient_28 = max (vec3(0.0, 0.0, 0.0), (x_30 + (x1_31 + 
					    (unity_SHC.xyz * ((normalWorld_26.x * normalWorld_26.x) - (normalWorld_26.y * normalWorld_26.y)))
					  )));
					  mediump vec3 tmpvar_33;
					  tmpvar_33 = max (((1.055 * 
					    pow (max (ambient_28, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  ambient_28 = tmpvar_33;
					  mediump vec4 tmpvar_34;
					  tmpvar_34 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_35;
					  color_35 = tmpvar_34;
					  mediump vec4 tmpvar_36;
					  tmpvar_36 = texture2D (unity_LightmapInd, xlv_TEXCOORD3.xy);
					  bakedDirTex_27 = tmpvar_36;
					  lowp vec3 y_37;
					  y_37 = (bakedDirTex_27.xyz - 0.5);
					  lowp float tmpvar_38;
					  tmpvar_38 = max (0.0001, bakedDirTex_27.w);
					  mediump vec4 hdr_39;
					  hdr_39 = tmpvar_2;
					  mediump vec4 tmpvar_40;
					  tmpvar_40.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_40.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_41;
					  tmpvar_41 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_40.xyz, tmpvar_40.w);
					  mediump vec4 tmpvar_42;
					  tmpvar_42 = tmpvar_41;
					  lowp vec3 tmpvar_43;
					  mediump vec4 c_44;
					  highp vec3 tmpvar_45;
					  tmpvar_45 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_46;
					  mediump vec3 albedo_47;
					  albedo_47 = tmpvar_10;
					  mediump vec3 tmpvar_48;
					  tmpvar_48 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_47, vec3(_Metallic));
					  mediump float tmpvar_49;
					  tmpvar_49 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_46 = (albedo_47 * tmpvar_49);
					  tmpvar_43 = tmpvar_46;
					  mediump vec3 diffColor_50;
					  diffColor_50 = tmpvar_43;
					  mediump float alpha_51;
					  alpha_51 = tmpvar_12;
					  tmpvar_43 = diffColor_50;
					  mediump vec3 diffColor_52;
					  diffColor_52 = tmpvar_43;
					  mediump vec3 color_53;
					  mediump vec2 rlPow4AndFresnelTerm_54;
					  mediump float tmpvar_55;
					  highp float tmpvar_56;
					  tmpvar_56 = clamp (dot (tmpvar_45, tmpvar_4), 0.0, 1.0);
					  tmpvar_55 = tmpvar_56;
					  mediump float tmpvar_57;
					  highp float tmpvar_58;
					  tmpvar_58 = clamp (dot (tmpvar_45, worldViewDir_6), 0.0, 1.0);
					  tmpvar_57 = tmpvar_58;
					  highp vec2 tmpvar_59;
					  tmpvar_59.x = dot ((worldViewDir_6 - (2.0 * 
					    (dot (tmpvar_45, worldViewDir_6) * tmpvar_45)
					  )), tmpvar_4);
					  tmpvar_59.y = (1.0 - tmpvar_57);
					  highp vec2 tmpvar_60;
					  tmpvar_60 = ((tmpvar_59 * tmpvar_59) * (tmpvar_59 * tmpvar_59));
					  rlPow4AndFresnelTerm_54 = tmpvar_60;
					  mediump float tmpvar_61;
					  tmpvar_61 = rlPow4AndFresnelTerm_54.x;
					  mediump float specular_62;
					  highp float smoothness_63;
					  smoothness_63 = _Glossiness;
					  highp vec2 tmpvar_64;
					  tmpvar_64.x = tmpvar_61;
					  tmpvar_64.y = (1.0 - smoothness_63);
					  highp float tmpvar_65;
					  tmpvar_65 = (texture2D (unity_NHxRoughness, tmpvar_64).x * 16.0);
					  specular_62 = tmpvar_65;
					  color_53 = ((diffColor_52 + (specular_62 * tmpvar_48)) * (tmpvar_3 * tmpvar_55));
					  color_53 = (color_53 + ((
					    (tmpvar_33 + (((unity_Lightmap_HDR.x * color_35.xyz) * (
					      dot (normalWorld_26, y_37)
					     + 0.5)) / tmpvar_38))
					   * diffColor_52) + (
					    ((hdr_39.x * ((hdr_39.w * 
					      (tmpvar_42.w - 1.0)
					    ) + 1.0)) * tmpvar_42.xyz)
					   * 
					    mix (tmpvar_48, vec3(clamp ((_Glossiness + (1.0 - tmpvar_49)), 0.0, 1.0)), rlPow4AndFresnelTerm_54.yyy)
					  )));
					  mediump vec4 tmpvar_66;
					  tmpvar_66.w = 1.0;
					  tmpvar_66.xyz = color_53;
					  c_44.xyz = tmpvar_66.xyz;
					  c_44.w = alpha_51;
					  c_5 = c_44;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 normalWorld_26;
					  normalWorld_26 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_27;
					  lowp vec4 bakedDirTex_28;
					  mediump vec3 tmpvar_29;
					  mediump vec3 ambient_30;
					  mediump vec4 tmpvar_31;
					  tmpvar_31.w = 1.0;
					  tmpvar_31.xyz = normalWorld_26;
					  mediump vec3 x_32;
					  x_32.x = dot (unity_SHAr, tmpvar_31);
					  x_32.y = dot (unity_SHAg, tmpvar_31);
					  x_32.z = dot (unity_SHAb, tmpvar_31);
					  mediump vec3 x1_33;
					  mediump vec4 tmpvar_34;
					  tmpvar_34 = (normalWorld_26.xyzz * normalWorld_26.yzzx);
					  x1_33.x = dot (unity_SHBr, tmpvar_34);
					  x1_33.y = dot (unity_SHBg, tmpvar_34);
					  x1_33.z = dot (unity_SHBb, tmpvar_34);
					  ambient_30 = max (vec3(0.0, 0.0, 0.0), (x_32 + (x1_33 + 
					    (unity_SHC.xyz * ((normalWorld_26.x * normalWorld_26.x) - (normalWorld_26.y * normalWorld_26.y)))
					  )));
					  mediump vec3 tmpvar_35;
					  tmpvar_35 = max (((1.055 * 
					    pow (max (ambient_30, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  ambient_30 = tmpvar_35;
					  mediump vec4 tmpvar_36;
					  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_37;
					  color_37 = tmpvar_36;
					  mediump vec4 tmpvar_38;
					  tmpvar_38 = texture2D (unity_LightmapInd, xlv_TEXCOORD3.xy);
					  bakedDirTex_28 = tmpvar_38;
					  lowp vec3 y_39;
					  y_39 = (bakedDirTex_28.xyz - 0.5);
					  lowp float tmpvar_40;
					  tmpvar_40 = max (0.0001, bakedDirTex_28.w);
					  tmpvar_29 = (tmpvar_35 + ((
					    (unity_Lightmap_HDR.x * color_37.xyz)
					   * 
					    (dot (normalWorld_26, y_39) + 0.5)
					  ) / tmpvar_40));
					  mediump vec4 hdr_41;
					  hdr_41 = tmpvar_2;
					  mediump vec4 tmpvar_42;
					  tmpvar_42.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_42.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_43;
					  tmpvar_43 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42.xyz, tmpvar_42.w);
					  mediump vec4 tmpvar_44;
					  tmpvar_44 = tmpvar_43;
					  tmpvar_27 = ((hdr_41.x * (
					    (hdr_41.w * (tmpvar_44.w - 1.0))
					   + 1.0)) * tmpvar_44.xyz);
					  lowp vec3 tmpvar_45;
					  mediump vec4 c_46;
					  highp vec3 tmpvar_47;
					  tmpvar_47 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_48;
					  mediump vec3 albedo_49;
					  albedo_49 = tmpvar_10;
					  mediump vec3 tmpvar_50;
					  tmpvar_50 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_49, vec3(_Metallic));
					  mediump float tmpvar_51;
					  tmpvar_51 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_48 = (albedo_49 * tmpvar_51);
					  tmpvar_45 = tmpvar_48;
					  mediump vec3 diffColor_52;
					  diffColor_52 = tmpvar_45;
					  mediump float alpha_53;
					  alpha_53 = tmpvar_12;
					  tmpvar_45 = diffColor_52;
					  mediump vec3 diffColor_54;
					  diffColor_54 = tmpvar_45;
					  mediump vec3 color_55;
					  mediump float surfaceReduction_56;
					  highp float specularTerm_57;
					  highp float a2_58;
					  mediump float roughness_59;
					  mediump float perceptualRoughness_60;
					  highp vec3 tmpvar_61;
					  highp vec3 inVec_62;
					  inVec_62 = (tmpvar_4 + worldViewDir_6);
					  tmpvar_61 = (inVec_62 * inversesqrt(max (0.001, 
					    dot (inVec_62, inVec_62)
					  )));
					  mediump float tmpvar_63;
					  highp float tmpvar_64;
					  tmpvar_64 = clamp (dot (tmpvar_47, tmpvar_4), 0.0, 1.0);
					  tmpvar_63 = tmpvar_64;
					  highp float tmpvar_65;
					  tmpvar_65 = clamp (dot (tmpvar_47, tmpvar_61), 0.0, 1.0);
					  mediump float tmpvar_66;
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (dot (tmpvar_47, worldViewDir_6), 0.0, 1.0);
					  tmpvar_66 = tmpvar_67;
					  highp float tmpvar_68;
					  highp float smoothness_69;
					  smoothness_69 = _Glossiness;
					  tmpvar_68 = (1.0 - smoothness_69);
					  perceptualRoughness_60 = tmpvar_68;
					  highp float tmpvar_70;
					  highp float perceptualRoughness_71;
					  perceptualRoughness_71 = perceptualRoughness_60;
					  tmpvar_70 = (perceptualRoughness_71 * perceptualRoughness_71);
					  roughness_59 = tmpvar_70;
					  mediump float tmpvar_72;
					  tmpvar_72 = (roughness_59 * roughness_59);
					  a2_58 = tmpvar_72;
					  specularTerm_57 = ((roughness_59 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_61), 0.0, 1.0)) * (1.5 + roughness_59))
					   * 
					    (((tmpvar_65 * tmpvar_65) * (a2_58 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_73;
					  tmpvar_73 = clamp (specularTerm_57, 0.0, 100.0);
					  specularTerm_57 = tmpvar_73;
					  surfaceReduction_56 = (1.0 - ((roughness_59 * perceptualRoughness_60) * 0.28));
					  mediump float x_74;
					  x_74 = (1.0 - tmpvar_66);
					  mediump vec3 tmpvar_75;
					  tmpvar_75 = mix (tmpvar_50, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_51)
					  ), 0.0, 1.0)), vec3(((x_74 * x_74) * (x_74 * x_74))));
					  highp vec3 tmpvar_76;
					  tmpvar_76 = (((
					    ((diffColor_54 + (tmpvar_73 * tmpvar_50)) * tmpvar_3)
					   * tmpvar_63) + (tmpvar_29 * diffColor_54)) + ((surfaceReduction_56 * tmpvar_27) * tmpvar_75));
					  color_55 = tmpvar_76;
					  mediump vec4 tmpvar_77;
					  tmpvar_77.w = 1.0;
					  tmpvar_77.xyz = color_55;
					  c_46.xyz = tmpvar_77.xyz;
					  c_46.w = alpha_53;
					  c_5 = c_46;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 normalWorld_26;
					  normalWorld_26 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_27;
					  lowp vec4 bakedDirTex_28;
					  mediump vec3 tmpvar_29;
					  mediump vec3 ambient_30;
					  mediump vec4 tmpvar_31;
					  tmpvar_31.w = 1.0;
					  tmpvar_31.xyz = normalWorld_26;
					  mediump vec3 x_32;
					  x_32.x = dot (unity_SHAr, tmpvar_31);
					  x_32.y = dot (unity_SHAg, tmpvar_31);
					  x_32.z = dot (unity_SHAb, tmpvar_31);
					  mediump vec3 x1_33;
					  mediump vec4 tmpvar_34;
					  tmpvar_34 = (normalWorld_26.xyzz * normalWorld_26.yzzx);
					  x1_33.x = dot (unity_SHBr, tmpvar_34);
					  x1_33.y = dot (unity_SHBg, tmpvar_34);
					  x1_33.z = dot (unity_SHBb, tmpvar_34);
					  ambient_30 = max (vec3(0.0, 0.0, 0.0), (x_32 + (x1_33 + 
					    (unity_SHC.xyz * ((normalWorld_26.x * normalWorld_26.x) - (normalWorld_26.y * normalWorld_26.y)))
					  )));
					  mediump vec3 tmpvar_35;
					  tmpvar_35 = max (((1.055 * 
					    pow (max (ambient_30, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  ambient_30 = tmpvar_35;
					  mediump vec4 tmpvar_36;
					  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_37;
					  color_37 = tmpvar_36;
					  mediump vec4 tmpvar_38;
					  tmpvar_38 = texture2D (unity_LightmapInd, xlv_TEXCOORD3.xy);
					  bakedDirTex_28 = tmpvar_38;
					  lowp vec3 y_39;
					  y_39 = (bakedDirTex_28.xyz - 0.5);
					  lowp float tmpvar_40;
					  tmpvar_40 = max (0.0001, bakedDirTex_28.w);
					  tmpvar_29 = (tmpvar_35 + ((
					    (unity_Lightmap_HDR.x * color_37.xyz)
					   * 
					    (dot (normalWorld_26, y_39) + 0.5)
					  ) / tmpvar_40));
					  mediump vec4 hdr_41;
					  hdr_41 = tmpvar_2;
					  mediump vec4 tmpvar_42;
					  tmpvar_42.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_42.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_43;
					  tmpvar_43 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42.xyz, tmpvar_42.w);
					  mediump vec4 tmpvar_44;
					  tmpvar_44 = tmpvar_43;
					  tmpvar_27 = ((hdr_41.x * (
					    (hdr_41.w * (tmpvar_44.w - 1.0))
					   + 1.0)) * tmpvar_44.xyz);
					  lowp vec3 tmpvar_45;
					  mediump vec4 c_46;
					  highp vec3 tmpvar_47;
					  tmpvar_47 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_48;
					  mediump vec3 albedo_49;
					  albedo_49 = tmpvar_10;
					  mediump vec3 tmpvar_50;
					  tmpvar_50 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_49, vec3(_Metallic));
					  mediump float tmpvar_51;
					  tmpvar_51 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_48 = (albedo_49 * tmpvar_51);
					  tmpvar_45 = tmpvar_48;
					  mediump vec3 diffColor_52;
					  diffColor_52 = tmpvar_45;
					  mediump float alpha_53;
					  alpha_53 = tmpvar_12;
					  tmpvar_45 = diffColor_52;
					  mediump vec3 diffColor_54;
					  diffColor_54 = tmpvar_45;
					  mediump vec3 color_55;
					  mediump float surfaceReduction_56;
					  highp float specularTerm_57;
					  highp float a2_58;
					  mediump float roughness_59;
					  mediump float perceptualRoughness_60;
					  highp vec3 tmpvar_61;
					  highp vec3 inVec_62;
					  inVec_62 = (tmpvar_4 + worldViewDir_6);
					  tmpvar_61 = (inVec_62 * inversesqrt(max (0.001, 
					    dot (inVec_62, inVec_62)
					  )));
					  mediump float tmpvar_63;
					  highp float tmpvar_64;
					  tmpvar_64 = clamp (dot (tmpvar_47, tmpvar_4), 0.0, 1.0);
					  tmpvar_63 = tmpvar_64;
					  highp float tmpvar_65;
					  tmpvar_65 = clamp (dot (tmpvar_47, tmpvar_61), 0.0, 1.0);
					  mediump float tmpvar_66;
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (dot (tmpvar_47, worldViewDir_6), 0.0, 1.0);
					  tmpvar_66 = tmpvar_67;
					  highp float tmpvar_68;
					  highp float smoothness_69;
					  smoothness_69 = _Glossiness;
					  tmpvar_68 = (1.0 - smoothness_69);
					  perceptualRoughness_60 = tmpvar_68;
					  highp float tmpvar_70;
					  highp float perceptualRoughness_71;
					  perceptualRoughness_71 = perceptualRoughness_60;
					  tmpvar_70 = (perceptualRoughness_71 * perceptualRoughness_71);
					  roughness_59 = tmpvar_70;
					  mediump float tmpvar_72;
					  tmpvar_72 = (roughness_59 * roughness_59);
					  a2_58 = tmpvar_72;
					  specularTerm_57 = ((roughness_59 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_61), 0.0, 1.0)) * (1.5 + roughness_59))
					   * 
					    (((tmpvar_65 * tmpvar_65) * (a2_58 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_73;
					  tmpvar_73 = clamp (specularTerm_57, 0.0, 100.0);
					  specularTerm_57 = tmpvar_73;
					  surfaceReduction_56 = (1.0 - ((roughness_59 * perceptualRoughness_60) * 0.28));
					  mediump float x_74;
					  x_74 = (1.0 - tmpvar_66);
					  mediump vec3 tmpvar_75;
					  tmpvar_75 = mix (tmpvar_50, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_51)
					  ), 0.0, 1.0)), vec3(((x_74 * x_74) * (x_74 * x_74))));
					  highp vec3 tmpvar_76;
					  tmpvar_76 = (((
					    ((diffColor_54 + (tmpvar_73 * tmpvar_50)) * tmpvar_3)
					   * tmpvar_63) + (tmpvar_29 * diffColor_54)) + ((surfaceReduction_56 * tmpvar_27) * tmpvar_75));
					  color_55 = tmpvar_76;
					  mediump vec4 tmpvar_77;
					  tmpvar_77.w = 1.0;
					  tmpvar_77.xyz = color_55;
					  c_46.xyz = tmpvar_77.xyz;
					  c_46.w = alpha_53;
					  c_5 = c_46;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD6;
					out highp vec3 vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD6.y = u_xlat2.x;
					    vs_TEXCOORD6.z = u_xlat0.x;
					    vs_TEXCOORD6.x = u_xlat1.z;
					    vs_TEXCOORD7.x = u_xlat1.x;
					    vs_TEXCOORD8.x = u_xlat1.y;
					    vs_TEXCOORD7.z = u_xlat0.y;
					    vs_TEXCOORD8.z = u_xlat0.z;
					    vs_TEXCOORD7.y = u_xlat2.y;
					    vs_TEXCOORD8.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					lowp vec3 u_xlat10_4;
					vec3 u_xlat5;
					lowp vec3 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump float u_xlat16_13;
					float u_xlat14;
					mediump float u_xlat16_30;
					mediump float u_xlat16_32;
					float u_xlat33;
					mediump float u_xlat16_33;
					void main()
					{
					    u_xlat16_0.x = vs_TEXCOORD1.y * vs_TEXCOORD1.y;
					    u_xlat16_0.x = vs_TEXCOORD1.x * vs_TEXCOORD1.x + (-u_xlat16_0.x);
					    u_xlat16_1 = vs_TEXCOORD1.yzzx * vs_TEXCOORD1.xyzz;
					    u_xlat16_2.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_2.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_2.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_0.xyz = unity_SHC.xyz * u_xlat16_0.xxx + u_xlat16_2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_3.xyz = log2(u_xlat16_0.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_0.xyz = u_xlat16_4.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1 = texture(unity_LightmapInd, vs_TEXCOORD3.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_33 = max(u_xlat16_1.w, 9.99999975e-05);
					    u_xlat16_30 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_30 = u_xlat16_30 + 0.5;
					    u_xlat16_0.xyz = vec3(u_xlat16_30) * u_xlat16_0.xyz;
					    u_xlat16_4.xyz = u_xlat16_0.xyz / vec3(u_xlat16_33);
					    u_xlat16_0.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
					    u_xlat16_30 = dot((-u_xlat3.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_30 = u_xlat16_30 + u_xlat16_30;
					    u_xlat16_2.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_30)) + (-u_xlat3.xyz);
					    u_xlat4.z = (-_Glossiness) + 1.0;
					    u_xlat16_30 = (-u_xlat4.z) * 0.699999988 + 1.70000005;
					    u_xlat16_30 = u_xlat16_30 * u_xlat4.z;
					    u_xlat16_30 = u_xlat16_30 * 6.0;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_30);
					    u_xlat16_30 = u_xlat10_1.w + -1.0;
					    u_xlat16_30 = unity_SpecCube0_HDR.w * u_xlat16_30 + 1.0;
					    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(u_xlat16_30);
					    u_xlat33 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * vs_TEXCOORD1.xyz;
					    u_xlat33 = dot(u_xlat3.xyz, u_xlat5.xyz);
					    u_xlat14 = u_xlat33;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
					#else
					    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
					#endif
					    u_xlat33 = u_xlat33 + u_xlat33;
					    u_xlat3.xyz = u_xlat5.xyz * (-vec3(u_xlat33)) + u_xlat3.xyz;
					    u_xlat33 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = vec3(u_xlat33) * _LightColor0.xyz;
					    u_xlat3.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat4.x = u_xlat3.x * u_xlat3.x;
					    u_xlat3.x = texture(unity_NHxRoughness, u_xlat4.xz).x;
					    u_xlat3.x = u_xlat3.x * 16.0;
					    u_xlat16_30 = (-u_xlat14) + 1.0;
					    u_xlat16_13 = u_xlat16_30 * u_xlat16_30;
					    u_xlat16_13 = u_xlat16_30 * u_xlat16_13;
					    u_xlat16_13 = u_xlat16_30 * u_xlat16_13;
					    u_xlat10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_5.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = u_xlat10_4.xyz + (-u_xlat10_5.xyz);
					    u_xlat4.xyz = vec3(_DayWeight) * u_xlat16_4.xyz + u_xlat10_5.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat16_7.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_32 = (-u_xlat16_30) + _Glossiness;
					    u_xlat16_8.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;
					    u_xlat16_30 = u_xlat16_32 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_30);
					    u_xlat16_9.xyz = vec3(u_xlat16_13) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat3.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;
					    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
					    u_xlat10_3.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.xyz = u_xlat10_3.xyz * _EmissionColor.xyz;
					    u_xlat33 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat3.xyz * vec3(u_xlat33) + u_xlat16_0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD6;
					out highp vec3 vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD6.y = u_xlat2.x;
					    vs_TEXCOORD6.z = u_xlat0.x;
					    vs_TEXCOORD6.x = u_xlat1.z;
					    vs_TEXCOORD7.x = u_xlat1.x;
					    vs_TEXCOORD8.x = u_xlat1.y;
					    vs_TEXCOORD7.z = u_xlat0.y;
					    vs_TEXCOORD8.z = u_xlat0.z;
					    vs_TEXCOORD7.y = u_xlat2.y;
					    vs_TEXCOORD8.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump float u_xlat16_12;
					mediump float u_xlat16_20;
					mediump float u_xlat16_24;
					mediump float u_xlat16_26;
					float u_xlat27;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					void main()
					{
					    u_xlat16_0.x = vs_TEXCOORD1.y * vs_TEXCOORD1.y;
					    u_xlat16_0.x = vs_TEXCOORD1.x * vs_TEXCOORD1.x + (-u_xlat16_0.x);
					    u_xlat16_1 = vs_TEXCOORD1.yzzx * vs_TEXCOORD1.xyzz;
					    u_xlat16_2.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_2.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_2.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_0.xyz = unity_SHC.xyz * u_xlat16_0.xxx + u_xlat16_2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_3.xyz = log2(u_xlat16_0.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_0.xyz = u_xlat16_4.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1 = texture(unity_LightmapInd, vs_TEXCOORD3.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_27 = max(u_xlat16_1.w, 9.99999975e-05);
					    u_xlat16_24 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_24 = u_xlat16_24 + 0.5;
					    u_xlat16_0.xyz = vec3(u_xlat16_24) * u_xlat16_0.xyz;
					    u_xlat16_4.xyz = u_xlat16_0.xyz / vec3(u_xlat16_27);
					    u_xlat16_0.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_3.xyz + (-u_xlat10_4.xyz);
					    u_xlat3.xyz = vec3(_DayWeight) * u_xlat16_3.xyz + u_xlat10_4.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_24 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_5.xyz = vec3(u_xlat16_24) * u_xlat4.xyz;
					    u_xlat16_24 = (-u_xlat16_24) + _Glossiness;
					    u_xlat16_24 = u_xlat16_24 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
					#else
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_24);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat27 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat27 = max(u_xlat27, 0.319999993);
					    u_xlat16_28 = (-_Glossiness) + 1.0;
					    u_xlat16_7 = u_xlat16_28 * u_xlat16_28 + 1.5;
					    u_xlat27 = u_xlat27 * u_xlat16_7;
					    u_xlat7.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
					    u_xlat4.x = dot(u_xlat7.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat4.x = u_xlat4.x * u_xlat4.x;
					    u_xlat16_12 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_20 = u_xlat16_12 * u_xlat16_12 + -1.0;
					    u_xlat4.x = u_xlat4.x * u_xlat16_20 + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat4.x;
					    u_xlat27 = u_xlat16_12 / u_xlat27;
					    u_xlat16_24 = u_xlat16_28 * u_xlat16_12;
					    u_xlat16_24 = (-u_xlat16_24) * 0.280000001 + 1.0;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _LightColor0.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
					#else
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = (-u_xlat7.x) + 1.0;
					    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;
					    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;
					    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat16_2.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat27) + u_xlat16_0.xyz;
					    u_xlat16_0.x = (-u_xlat16_28) * 0.699999988 + 1.70000005;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_28;
					    u_xlat16_0.x = u_xlat16_0.x * 6.0;
					    u_xlat16_8 = dot((-u_xlat3.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_8 = u_xlat16_8 + u_xlat16_8;
					    u_xlat16_5.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_8)) + (-u_xlat3.xyz);
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat10_1.w + -1.0;
					    u_xlat16_0.x = unity_SpecCube0_HDR.w * u_xlat16_0.x + 1.0;
					    u_xlat16_0.x = u_xlat16_0.x * unity_SpecCube0_HDR.x;
					    u_xlat16_0.xyz = u_xlat10_1.xyz * u_xlat16_0.xxx;
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_24);
					    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
					    u_xlat10_4.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _EmissionColor.xyz;
					    u_xlat27 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat4.xyz * vec3(u_xlat27) + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD6;
					out highp vec3 vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD6.y = u_xlat2.x;
					    vs_TEXCOORD6.z = u_xlat0.x;
					    vs_TEXCOORD6.x = u_xlat1.z;
					    vs_TEXCOORD7.x = u_xlat1.x;
					    vs_TEXCOORD8.x = u_xlat1.y;
					    vs_TEXCOORD7.z = u_xlat0.y;
					    vs_TEXCOORD8.z = u_xlat0.z;
					    vs_TEXCOORD7.y = u_xlat2.y;
					    vs_TEXCOORD8.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump float u_xlat16_12;
					mediump float u_xlat16_20;
					mediump float u_xlat16_24;
					mediump float u_xlat16_26;
					float u_xlat27;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					void main()
					{
					    u_xlat16_0.x = vs_TEXCOORD1.y * vs_TEXCOORD1.y;
					    u_xlat16_0.x = vs_TEXCOORD1.x * vs_TEXCOORD1.x + (-u_xlat16_0.x);
					    u_xlat16_1 = vs_TEXCOORD1.yzzx * vs_TEXCOORD1.xyzz;
					    u_xlat16_2.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_2.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_2.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_0.xyz = unity_SHC.xyz * u_xlat16_0.xxx + u_xlat16_2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_3.xyz = log2(u_xlat16_0.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_0.xyz = u_xlat16_4.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1 = texture(unity_LightmapInd, vs_TEXCOORD3.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_27 = max(u_xlat16_1.w, 9.99999975e-05);
					    u_xlat16_24 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_24 = u_xlat16_24 + 0.5;
					    u_xlat16_0.xyz = vec3(u_xlat16_24) * u_xlat16_0.xyz;
					    u_xlat16_4.xyz = u_xlat16_0.xyz / vec3(u_xlat16_27);
					    u_xlat16_0.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_3.xyz + (-u_xlat10_4.xyz);
					    u_xlat3.xyz = vec3(_DayWeight) * u_xlat16_3.xyz + u_xlat10_4.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_24 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_5.xyz = vec3(u_xlat16_24) * u_xlat4.xyz;
					    u_xlat16_24 = (-u_xlat16_24) + _Glossiness;
					    u_xlat16_24 = u_xlat16_24 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
					#else
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_24);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat27 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat27 = max(u_xlat27, 0.319999993);
					    u_xlat16_28 = (-_Glossiness) + 1.0;
					    u_xlat16_7 = u_xlat16_28 * u_xlat16_28 + 1.5;
					    u_xlat27 = u_xlat27 * u_xlat16_7;
					    u_xlat7.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
					    u_xlat4.x = dot(u_xlat7.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat4.x = u_xlat4.x * u_xlat4.x;
					    u_xlat16_12 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_20 = u_xlat16_12 * u_xlat16_12 + -1.0;
					    u_xlat4.x = u_xlat4.x * u_xlat16_20 + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat4.x;
					    u_xlat27 = u_xlat16_12 / u_xlat27;
					    u_xlat16_24 = u_xlat16_28 * u_xlat16_12;
					    u_xlat16_24 = (-u_xlat16_24) * 0.280000001 + 1.0;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _LightColor0.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
					#else
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = (-u_xlat7.x) + 1.0;
					    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;
					    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;
					    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat16_2.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat27) + u_xlat16_0.xyz;
					    u_xlat16_0.x = (-u_xlat16_28) * 0.699999988 + 1.70000005;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_28;
					    u_xlat16_0.x = u_xlat16_0.x * 6.0;
					    u_xlat16_8 = dot((-u_xlat3.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_8 = u_xlat16_8 + u_xlat16_8;
					    u_xlat16_5.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_8)) + (-u_xlat3.xyz);
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat10_1.w + -1.0;
					    u_xlat16_0.x = unity_SpecCube0_HDR.w * u_xlat16_0.x + 1.0;
					    u_xlat16_0.x = u_xlat16_0.x * unity_SpecCube0_HDR.x;
					    u_xlat16_0.xyz = u_xlat10_1.xyz * u_xlat16_0.xxx;
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_24);
					    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
					    u_xlat10_4.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _EmissionColor.xyz;
					    u_xlat27 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat4.xyz * vec3(u_xlat27) + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 normalWorld_26;
					  normalWorld_26 = xlv_TEXCOORD1;
					  mediump vec4 realtimeDirTex_27;
					  lowp vec4 bakedDirTex_28;
					  mediump vec3 tmpvar_29;
					  mediump vec4 tmpvar_30;
					  tmpvar_30 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_31;
					  color_31 = tmpvar_30;
					  mediump vec4 tmpvar_32;
					  tmpvar_32 = texture2D (unity_LightmapInd, xlv_TEXCOORD3.xy);
					  bakedDirTex_28 = tmpvar_32;
					  lowp vec3 y_33;
					  y_33 = (bakedDirTex_28.xyz - 0.5);
					  lowp float tmpvar_34;
					  tmpvar_34 = max (0.0001, bakedDirTex_28.w);
					  tmpvar_29 = (((unity_Lightmap_HDR.x * color_31.xyz) * (
					    dot (normalWorld_26, y_33)
					   + 0.5)) / tmpvar_34);
					  lowp vec4 tmpvar_35;
					  tmpvar_35 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
					  lowp vec4 tmpvar_36;
					  tmpvar_36 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD3.zw);
					  realtimeDirTex_27 = tmpvar_36;
					  lowp vec4 dirTex_37;
					  dirTex_37 = realtimeDirTex_27;
					  lowp vec3 y_38;
					  y_38 = (dirTex_37.xyz - 0.5);
					  lowp float tmpvar_39;
					  tmpvar_39 = max (0.0001, dirTex_37.w);
					  tmpvar_29 = (tmpvar_29 + ((
					    pow (((unity_DynamicLightmap_HDR.x * tmpvar_35.w) * tmpvar_35.xyz), unity_DynamicLightmap_HDR.yyy)
					   * 
					    (dot (normalWorld_26, y_38) + 0.5)
					  ) / tmpvar_39));
					  mediump vec4 hdr_40;
					  hdr_40 = tmpvar_2;
					  mediump vec4 tmpvar_41;
					  tmpvar_41.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_41.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_42;
					  tmpvar_42 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_41.xyz, tmpvar_41.w);
					  mediump vec4 tmpvar_43;
					  tmpvar_43 = tmpvar_42;
					  lowp vec3 tmpvar_44;
					  mediump vec4 c_45;
					  highp vec3 tmpvar_46;
					  tmpvar_46 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_47;
					  mediump vec3 albedo_48;
					  albedo_48 = tmpvar_10;
					  mediump vec3 tmpvar_49;
					  tmpvar_49 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_48, vec3(_Metallic));
					  mediump float tmpvar_50;
					  tmpvar_50 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_47 = (albedo_48 * tmpvar_50);
					  tmpvar_44 = tmpvar_47;
					  mediump vec3 diffColor_51;
					  diffColor_51 = tmpvar_44;
					  mediump float alpha_52;
					  alpha_52 = tmpvar_12;
					  tmpvar_44 = diffColor_51;
					  mediump vec3 diffColor_53;
					  diffColor_53 = tmpvar_44;
					  mediump vec3 color_54;
					  mediump vec2 rlPow4AndFresnelTerm_55;
					  mediump float tmpvar_56;
					  highp float tmpvar_57;
					  tmpvar_57 = clamp (dot (tmpvar_46, tmpvar_4), 0.0, 1.0);
					  tmpvar_56 = tmpvar_57;
					  mediump float tmpvar_58;
					  highp float tmpvar_59;
					  tmpvar_59 = clamp (dot (tmpvar_46, worldViewDir_6), 0.0, 1.0);
					  tmpvar_58 = tmpvar_59;
					  highp vec2 tmpvar_60;
					  tmpvar_60.x = dot ((worldViewDir_6 - (2.0 * 
					    (dot (tmpvar_46, worldViewDir_6) * tmpvar_46)
					  )), tmpvar_4);
					  tmpvar_60.y = (1.0 - tmpvar_58);
					  highp vec2 tmpvar_61;
					  tmpvar_61 = ((tmpvar_60 * tmpvar_60) * (tmpvar_60 * tmpvar_60));
					  rlPow4AndFresnelTerm_55 = tmpvar_61;
					  mediump float tmpvar_62;
					  tmpvar_62 = rlPow4AndFresnelTerm_55.x;
					  mediump float specular_63;
					  highp float smoothness_64;
					  smoothness_64 = _Glossiness;
					  highp vec2 tmpvar_65;
					  tmpvar_65.x = tmpvar_62;
					  tmpvar_65.y = (1.0 - smoothness_64);
					  highp float tmpvar_66;
					  tmpvar_66 = (texture2D (unity_NHxRoughness, tmpvar_65).x * 16.0);
					  specular_63 = tmpvar_66;
					  color_54 = ((diffColor_53 + (specular_63 * tmpvar_49)) * (tmpvar_3 * tmpvar_56));
					  color_54 = (color_54 + ((tmpvar_29 * diffColor_53) + (
					    ((hdr_40.x * ((hdr_40.w * 
					      (tmpvar_43.w - 1.0)
					    ) + 1.0)) * tmpvar_43.xyz)
					   * 
					    mix (tmpvar_49, vec3(clamp ((_Glossiness + (1.0 - tmpvar_50)), 0.0, 1.0)), rlPow4AndFresnelTerm_55.yyy)
					  )));
					  mediump vec4 tmpvar_67;
					  tmpvar_67.w = 1.0;
					  tmpvar_67.xyz = color_54;
					  c_45.xyz = tmpvar_67.xyz;
					  c_45.w = alpha_52;
					  c_5 = c_45;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 normalWorld_26;
					  normalWorld_26 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_27;
					  mediump vec4 realtimeDirTex_28;
					  lowp vec4 bakedDirTex_29;
					  mediump vec3 tmpvar_30;
					  mediump vec4 tmpvar_31;
					  tmpvar_31 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_32;
					  color_32 = tmpvar_31;
					  mediump vec4 tmpvar_33;
					  tmpvar_33 = texture2D (unity_LightmapInd, xlv_TEXCOORD3.xy);
					  bakedDirTex_29 = tmpvar_33;
					  lowp vec3 y_34;
					  y_34 = (bakedDirTex_29.xyz - 0.5);
					  lowp float tmpvar_35;
					  tmpvar_35 = max (0.0001, bakedDirTex_29.w);
					  tmpvar_30 = (((unity_Lightmap_HDR.x * color_32.xyz) * (
					    dot (normalWorld_26, y_34)
					   + 0.5)) / tmpvar_35);
					  lowp vec4 tmpvar_36;
					  tmpvar_36 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
					  lowp vec4 tmpvar_37;
					  tmpvar_37 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD3.zw);
					  realtimeDirTex_28 = tmpvar_37;
					  lowp vec4 dirTex_38;
					  dirTex_38 = realtimeDirTex_28;
					  lowp vec3 y_39;
					  y_39 = (dirTex_38.xyz - 0.5);
					  lowp float tmpvar_40;
					  tmpvar_40 = max (0.0001, dirTex_38.w);
					  tmpvar_30 = (tmpvar_30 + ((
					    pow (((unity_DynamicLightmap_HDR.x * tmpvar_36.w) * tmpvar_36.xyz), unity_DynamicLightmap_HDR.yyy)
					   * 
					    (dot (normalWorld_26, y_39) + 0.5)
					  ) / tmpvar_40));
					  mediump vec4 hdr_41;
					  hdr_41 = tmpvar_2;
					  mediump vec4 tmpvar_42;
					  tmpvar_42.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_42.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_43;
					  tmpvar_43 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42.xyz, tmpvar_42.w);
					  mediump vec4 tmpvar_44;
					  tmpvar_44 = tmpvar_43;
					  tmpvar_27 = ((hdr_41.x * (
					    (hdr_41.w * (tmpvar_44.w - 1.0))
					   + 1.0)) * tmpvar_44.xyz);
					  lowp vec3 tmpvar_45;
					  mediump vec4 c_46;
					  highp vec3 tmpvar_47;
					  tmpvar_47 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_48;
					  mediump vec3 albedo_49;
					  albedo_49 = tmpvar_10;
					  mediump vec3 tmpvar_50;
					  tmpvar_50 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_49, vec3(_Metallic));
					  mediump float tmpvar_51;
					  tmpvar_51 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_48 = (albedo_49 * tmpvar_51);
					  tmpvar_45 = tmpvar_48;
					  mediump vec3 diffColor_52;
					  diffColor_52 = tmpvar_45;
					  mediump float alpha_53;
					  alpha_53 = tmpvar_12;
					  tmpvar_45 = diffColor_52;
					  mediump vec3 diffColor_54;
					  diffColor_54 = tmpvar_45;
					  mediump vec3 color_55;
					  mediump float surfaceReduction_56;
					  highp float specularTerm_57;
					  highp float a2_58;
					  mediump float roughness_59;
					  mediump float perceptualRoughness_60;
					  highp vec3 tmpvar_61;
					  highp vec3 inVec_62;
					  inVec_62 = (tmpvar_4 + worldViewDir_6);
					  tmpvar_61 = (inVec_62 * inversesqrt(max (0.001, 
					    dot (inVec_62, inVec_62)
					  )));
					  mediump float tmpvar_63;
					  highp float tmpvar_64;
					  tmpvar_64 = clamp (dot (tmpvar_47, tmpvar_4), 0.0, 1.0);
					  tmpvar_63 = tmpvar_64;
					  highp float tmpvar_65;
					  tmpvar_65 = clamp (dot (tmpvar_47, tmpvar_61), 0.0, 1.0);
					  mediump float tmpvar_66;
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (dot (tmpvar_47, worldViewDir_6), 0.0, 1.0);
					  tmpvar_66 = tmpvar_67;
					  highp float tmpvar_68;
					  highp float smoothness_69;
					  smoothness_69 = _Glossiness;
					  tmpvar_68 = (1.0 - smoothness_69);
					  perceptualRoughness_60 = tmpvar_68;
					  highp float tmpvar_70;
					  highp float perceptualRoughness_71;
					  perceptualRoughness_71 = perceptualRoughness_60;
					  tmpvar_70 = (perceptualRoughness_71 * perceptualRoughness_71);
					  roughness_59 = tmpvar_70;
					  mediump float tmpvar_72;
					  tmpvar_72 = (roughness_59 * roughness_59);
					  a2_58 = tmpvar_72;
					  specularTerm_57 = ((roughness_59 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_61), 0.0, 1.0)) * (1.5 + roughness_59))
					   * 
					    (((tmpvar_65 * tmpvar_65) * (a2_58 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_73;
					  tmpvar_73 = clamp (specularTerm_57, 0.0, 100.0);
					  specularTerm_57 = tmpvar_73;
					  surfaceReduction_56 = (1.0 - ((roughness_59 * perceptualRoughness_60) * 0.28));
					  mediump float x_74;
					  x_74 = (1.0 - tmpvar_66);
					  mediump vec3 tmpvar_75;
					  tmpvar_75 = mix (tmpvar_50, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_51)
					  ), 0.0, 1.0)), vec3(((x_74 * x_74) * (x_74 * x_74))));
					  highp vec3 tmpvar_76;
					  tmpvar_76 = (((
					    ((diffColor_54 + (tmpvar_73 * tmpvar_50)) * tmpvar_3)
					   * tmpvar_63) + (tmpvar_30 * diffColor_54)) + ((surfaceReduction_56 * tmpvar_27) * tmpvar_75));
					  color_55 = tmpvar_76;
					  mediump vec4 tmpvar_77;
					  tmpvar_77.w = 1.0;
					  tmpvar_77.xyz = color_55;
					  c_46.xyz = tmpvar_77.xyz;
					  c_46.w = alpha_53;
					  c_5 = c_46;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 normalWorld_26;
					  normalWorld_26 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_27;
					  mediump vec4 realtimeDirTex_28;
					  lowp vec4 bakedDirTex_29;
					  mediump vec3 tmpvar_30;
					  mediump vec4 tmpvar_31;
					  tmpvar_31 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_32;
					  color_32 = tmpvar_31;
					  mediump vec4 tmpvar_33;
					  tmpvar_33 = texture2D (unity_LightmapInd, xlv_TEXCOORD3.xy);
					  bakedDirTex_29 = tmpvar_33;
					  lowp vec3 y_34;
					  y_34 = (bakedDirTex_29.xyz - 0.5);
					  lowp float tmpvar_35;
					  tmpvar_35 = max (0.0001, bakedDirTex_29.w);
					  tmpvar_30 = (((unity_Lightmap_HDR.x * color_32.xyz) * (
					    dot (normalWorld_26, y_34)
					   + 0.5)) / tmpvar_35);
					  lowp vec4 tmpvar_36;
					  tmpvar_36 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
					  lowp vec4 tmpvar_37;
					  tmpvar_37 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD3.zw);
					  realtimeDirTex_28 = tmpvar_37;
					  lowp vec4 dirTex_38;
					  dirTex_38 = realtimeDirTex_28;
					  lowp vec3 y_39;
					  y_39 = (dirTex_38.xyz - 0.5);
					  lowp float tmpvar_40;
					  tmpvar_40 = max (0.0001, dirTex_38.w);
					  tmpvar_30 = (tmpvar_30 + ((
					    pow (((unity_DynamicLightmap_HDR.x * tmpvar_36.w) * tmpvar_36.xyz), unity_DynamicLightmap_HDR.yyy)
					   * 
					    (dot (normalWorld_26, y_39) + 0.5)
					  ) / tmpvar_40));
					  mediump vec4 hdr_41;
					  hdr_41 = tmpvar_2;
					  mediump vec4 tmpvar_42;
					  tmpvar_42.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_42.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_43;
					  tmpvar_43 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42.xyz, tmpvar_42.w);
					  mediump vec4 tmpvar_44;
					  tmpvar_44 = tmpvar_43;
					  tmpvar_27 = ((hdr_41.x * (
					    (hdr_41.w * (tmpvar_44.w - 1.0))
					   + 1.0)) * tmpvar_44.xyz);
					  lowp vec3 tmpvar_45;
					  mediump vec4 c_46;
					  highp vec3 tmpvar_47;
					  tmpvar_47 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_48;
					  mediump vec3 albedo_49;
					  albedo_49 = tmpvar_10;
					  mediump vec3 tmpvar_50;
					  tmpvar_50 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_49, vec3(_Metallic));
					  mediump float tmpvar_51;
					  tmpvar_51 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_48 = (albedo_49 * tmpvar_51);
					  tmpvar_45 = tmpvar_48;
					  mediump vec3 diffColor_52;
					  diffColor_52 = tmpvar_45;
					  mediump float alpha_53;
					  alpha_53 = tmpvar_12;
					  tmpvar_45 = diffColor_52;
					  mediump vec3 diffColor_54;
					  diffColor_54 = tmpvar_45;
					  mediump vec3 color_55;
					  mediump float surfaceReduction_56;
					  highp float specularTerm_57;
					  highp float a2_58;
					  mediump float roughness_59;
					  mediump float perceptualRoughness_60;
					  highp vec3 tmpvar_61;
					  highp vec3 inVec_62;
					  inVec_62 = (tmpvar_4 + worldViewDir_6);
					  tmpvar_61 = (inVec_62 * inversesqrt(max (0.001, 
					    dot (inVec_62, inVec_62)
					  )));
					  mediump float tmpvar_63;
					  highp float tmpvar_64;
					  tmpvar_64 = clamp (dot (tmpvar_47, tmpvar_4), 0.0, 1.0);
					  tmpvar_63 = tmpvar_64;
					  highp float tmpvar_65;
					  tmpvar_65 = clamp (dot (tmpvar_47, tmpvar_61), 0.0, 1.0);
					  mediump float tmpvar_66;
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (dot (tmpvar_47, worldViewDir_6), 0.0, 1.0);
					  tmpvar_66 = tmpvar_67;
					  highp float tmpvar_68;
					  highp float smoothness_69;
					  smoothness_69 = _Glossiness;
					  tmpvar_68 = (1.0 - smoothness_69);
					  perceptualRoughness_60 = tmpvar_68;
					  highp float tmpvar_70;
					  highp float perceptualRoughness_71;
					  perceptualRoughness_71 = perceptualRoughness_60;
					  tmpvar_70 = (perceptualRoughness_71 * perceptualRoughness_71);
					  roughness_59 = tmpvar_70;
					  mediump float tmpvar_72;
					  tmpvar_72 = (roughness_59 * roughness_59);
					  a2_58 = tmpvar_72;
					  specularTerm_57 = ((roughness_59 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_61), 0.0, 1.0)) * (1.5 + roughness_59))
					   * 
					    (((tmpvar_65 * tmpvar_65) * (a2_58 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_73;
					  tmpvar_73 = clamp (specularTerm_57, 0.0, 100.0);
					  specularTerm_57 = tmpvar_73;
					  surfaceReduction_56 = (1.0 - ((roughness_59 * perceptualRoughness_60) * 0.28));
					  mediump float x_74;
					  x_74 = (1.0 - tmpvar_66);
					  mediump vec3 tmpvar_75;
					  tmpvar_75 = mix (tmpvar_50, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_51)
					  ), 0.0, 1.0)), vec3(((x_74 * x_74) * (x_74 * x_74))));
					  highp vec3 tmpvar_76;
					  tmpvar_76 = (((
					    ((diffColor_54 + (tmpvar_73 * tmpvar_50)) * tmpvar_3)
					   * tmpvar_63) + (tmpvar_30 * diffColor_54)) + ((surfaceReduction_56 * tmpvar_27) * tmpvar_75));
					  color_55 = tmpvar_76;
					  mediump vec4 tmpvar_77;
					  tmpvar_77.w = 1.0;
					  tmpvar_77.xyz = color_55;
					  c_46.xyz = tmpvar_77.xyz;
					  c_46.w = alpha_53;
					  c_5 = c_46;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD6;
					out highp vec3 vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD6.y = u_xlat2.x;
					    vs_TEXCOORD6.z = u_xlat0.x;
					    vs_TEXCOORD6.x = u_xlat1.z;
					    vs_TEXCOORD7.x = u_xlat1.x;
					    vs_TEXCOORD8.x = u_xlat1.y;
					    vs_TEXCOORD7.z = u_xlat0.y;
					    vs_TEXCOORD8.z = u_xlat0.z;
					    vs_TEXCOORD7.y = u_xlat2.y;
					    vs_TEXCOORD8.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					lowp vec3 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump float u_xlat16_10;
					float u_xlat13;
					float u_xlat30;
					mediump float u_xlat16_30;
					mediump float u_xlat16_31;
					mediump float u_xlat16_34;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD3.zw);
					    u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat16_31 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_31 = u_xlat16_31 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
					    u_xlat16_3.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_2 = texture(unity_LightmapInd, vs_TEXCOORD3.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_30 = max(u_xlat16_2.w, 9.99999975e-05);
					    u_xlat16_31 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_31 = u_xlat16_31 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz / vec3(u_xlat16_30);
					    u_xlat16_1.xyz = u_xlat16_0.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat16_31 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
					    u_xlat16_4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat0.xyz);
					    u_xlat3.z = (-_Glossiness) + 1.0;
					    u_xlat16_31 = (-u_xlat3.z) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat16_31 * u_xlat3.z;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_31);
					    u_xlat16_31 = u_xlat10_2.w + -1.0;
					    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;
					    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(u_xlat16_31);
					    u_xlat30 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat5.xyz = vec3(u_xlat30) * vs_TEXCOORD1.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat5.xyz);
					    u_xlat13 = u_xlat30;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
					#else
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					#endif
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat0.xyz = u_xlat5.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
					    u_xlat30 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = vec3(u_xlat30) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat3.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_31 = (-u_xlat13) + 1.0;
					    u_xlat16_10 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_10 = u_xlat16_31 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_31 * u_xlat16_10;
					    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_5.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_3.xyz + (-u_xlat10_5.xyz);
					    u_xlat3.xyz = vec3(_DayWeight) * u_xlat16_3.xyz + u_xlat10_5.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat16_7.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_34 = (-u_xlat16_31) + _Glossiness;
					    u_xlat16_8.xyz = vec3(u_xlat16_31) * u_xlat3.xyz;
					    u_xlat16_31 = u_xlat16_34 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_31);
					    u_xlat16_9.xyz = vec3(u_xlat16_10) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_9.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_1.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat30 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD6;
					out highp vec3 vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD6.y = u_xlat2.x;
					    vs_TEXCOORD6.z = u_xlat0.x;
					    vs_TEXCOORD6.x = u_xlat1.z;
					    vs_TEXCOORD7.x = u_xlat1.x;
					    vs_TEXCOORD8.x = u_xlat1.y;
					    vs_TEXCOORD7.z = u_xlat0.y;
					    vs_TEXCOORD8.z = u_xlat0.z;
					    vs_TEXCOORD7.y = u_xlat2.y;
					    vs_TEXCOORD8.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_11;
					mediump float u_xlat16_19;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD3.zw);
					    u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_25 = u_xlat16_25 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_25) * u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
					    u_xlat16_3.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_2 = texture(unity_LightmapInd, vs_TEXCOORD3.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_24 = max(u_xlat16_2.w, 9.99999975e-05);
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_25 = u_xlat16_25 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_25) * u_xlat16_1.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz / vec3(u_xlat16_24);
					    u_xlat16_1.xyz = u_xlat16_0.xyz + u_xlat16_3.xyz;
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_3.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_3.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_4.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat3.xyz;
					    u_xlat16_25 = (-u_xlat16_25) + _Glossiness;
					    u_xlat16_25 = u_xlat16_25 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + vec3(u_xlat16_25);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_27 = (-_Glossiness) + 1.0;
					    u_xlat16_7 = u_xlat16_27 * u_xlat16_27 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_7;
					    u_xlat7.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
					    u_xlat3.x = dot(u_xlat7.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16_11 = u_xlat16_27 * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_11 * u_xlat16_11 + -1.0;
					    u_xlat3.x = u_xlat3.x * u_xlat16_19 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat3.x;
					    u_xlat24 = u_xlat16_11 / u_xlat24;
					    u_xlat16_25 = u_xlat16_27 * u_xlat16_11;
					    u_xlat16_25 = (-u_xlat16_25) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat3.xyz = vec3(u_xlat24) * u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _LightColor0.xyz;
					    u_xlat24 = dot(u_xlat7.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
					#else
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					#endif
					    u_xlat16_28 = (-u_xlat7.x) + 1.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_4.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-u_xlat16_27) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat16_9 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
					    u_xlat16_5.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_9)) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat10_0.w + -1.0;
					    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_25);
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz + u_xlat3.xyz;
					    u_xlat10_3.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.xyz = u_xlat10_3.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD6;
					out highp vec3 vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD6.y = u_xlat2.x;
					    vs_TEXCOORD6.z = u_xlat0.x;
					    vs_TEXCOORD6.x = u_xlat1.z;
					    vs_TEXCOORD7.x = u_xlat1.x;
					    vs_TEXCOORD8.x = u_xlat1.y;
					    vs_TEXCOORD7.z = u_xlat0.y;
					    vs_TEXCOORD8.z = u_xlat0.z;
					    vs_TEXCOORD7.y = u_xlat2.y;
					    vs_TEXCOORD8.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_11;
					mediump float u_xlat16_19;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD3.zw);
					    u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_25 = u_xlat16_25 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_25) * u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
					    u_xlat16_3.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_2 = texture(unity_LightmapInd, vs_TEXCOORD3.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_24 = max(u_xlat16_2.w, 9.99999975e-05);
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_25 = u_xlat16_25 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_25) * u_xlat16_1.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz / vec3(u_xlat16_24);
					    u_xlat16_1.xyz = u_xlat16_0.xyz + u_xlat16_3.xyz;
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_3.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_3.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_4.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat3.xyz;
					    u_xlat16_25 = (-u_xlat16_25) + _Glossiness;
					    u_xlat16_25 = u_xlat16_25 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + vec3(u_xlat16_25);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_27 = (-_Glossiness) + 1.0;
					    u_xlat16_7 = u_xlat16_27 * u_xlat16_27 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_7;
					    u_xlat7.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
					    u_xlat3.x = dot(u_xlat7.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16_11 = u_xlat16_27 * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_11 * u_xlat16_11 + -1.0;
					    u_xlat3.x = u_xlat3.x * u_xlat16_19 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat3.x;
					    u_xlat24 = u_xlat16_11 / u_xlat24;
					    u_xlat16_25 = u_xlat16_27 * u_xlat16_11;
					    u_xlat16_25 = (-u_xlat16_25) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat3.xyz = vec3(u_xlat24) * u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _LightColor0.xyz;
					    u_xlat24 = dot(u_xlat7.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
					#else
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					#endif
					    u_xlat16_28 = (-u_xlat7.x) + 1.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_4.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-u_xlat16_27) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat16_9 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
					    u_xlat16_5.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_9)) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat10_0.w + -1.0;
					    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_25);
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz + u_xlat3.xyz;
					    u_xlat10_3.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.xyz = u_xlat10_3.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					  xlv_TEXCOORD6 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp float atten_7;
					  lowp vec3 lightDir_8;
					  highp vec4 tmpvar_9;
					  mediump vec3 tmpvar_10;
					  tmpvar_10 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_11 = normalize(tmpvar_12);
					  tmpvar_9 = xlv_COLOR0;
					  lowp vec3 tmpvar_13;
					  mediump vec3 tmpvar_14;
					  lowp float tmpvar_15;
					  highp vec4 emissionSample_16;
					  highp vec4 diffuseSample_17;
					  highp vec4 nightSample_18;
					  highp vec4 daySample_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_19 = tmpvar_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_18 = tmpvar_21;
					  diffuseSample_17 = (mix (nightSample_18, daySample_19, vec4(_DayWeight)) * _Color);
					  diffuseSample_17.xyz = (diffuseSample_17.xyz * tmpvar_9.xyz);
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_16 = tmpvar_22;
					  highp vec3 tmpvar_23;
					  tmpvar_23 = ((emissionSample_16.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_13 = diffuseSample_17.xyz;
					  tmpvar_14 = tmpvar_23;
					  tmpvar_15 = diffuseSample_17.w;
					  mediump float realtimeShadowAttenuation_24;
					  highp vec4 v_25;
					  v_25.x = unity_MatrixV[0].z;
					  v_25.y = unity_MatrixV[1].z;
					  v_25.z = unity_MatrixV[2].z;
					  v_25.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_27;
					  highp float tmpvar_28;
					  tmpvar_28 = clamp (((
					    mix (dot (tmpvar_12, v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_27 = tmpvar_28;
					  lowp float tmpvar_29;
					  highp float lightShadowDataX_30;
					  mediump float tmpvar_31;
					  tmpvar_31 = _LightShadowData.x;
					  lightShadowDataX_30 = tmpvar_31;
					  highp float tmpvar_32;
					  tmpvar_32 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_30);
					  tmpvar_29 = tmpvar_32;
					  realtimeShadowAttenuation_24 = tmpvar_29;
					  mediump float tmpvar_33;
					  tmpvar_33 = mix (realtimeShadowAttenuation_24, 1.0, tmpvar_27);
					  atten_7 = tmpvar_33;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_8;
					  tmpvar_1 = tmpvar_11;
					  tmpvar_2 = atten_7;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_34;
					  Normal_34 = xlv_TEXCOORD1;
					  mediump float tmpvar_35;
					  highp float tmpvar_36;
					  highp float smoothness_37;
					  smoothness_37 = _Glossiness;
					  tmpvar_36 = (1.0 - smoothness_37);
					  tmpvar_35 = tmpvar_36;
					  mediump vec3 I_38;
					  I_38 = -(tmpvar_1);
					  mediump vec3 tmpvar_39;
					  tmpvar_39 = (tmpvar_4 * tmpvar_2);
					  mediump vec4 hdr_40;
					  hdr_40 = tmpvar_3;
					  mediump vec4 tmpvar_41;
					  tmpvar_41.xyz = (I_38 - (2.0 * (
					    dot (Normal_34, I_38)
					   * Normal_34)));
					  tmpvar_41.w = ((tmpvar_35 * (1.7 - 
					    (0.7 * tmpvar_35)
					  )) * 6.0);
					  lowp vec4 tmpvar_42;
					  tmpvar_42 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_41.xyz, tmpvar_41.w);
					  mediump vec4 tmpvar_43;
					  tmpvar_43 = tmpvar_42;
					  tmpvar_4 = tmpvar_39;
					  lowp vec3 tmpvar_44;
					  mediump vec4 c_45;
					  highp vec3 tmpvar_46;
					  tmpvar_46 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_47;
					  mediump vec3 albedo_48;
					  albedo_48 = tmpvar_13;
					  mediump vec3 tmpvar_49;
					  tmpvar_49 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_48, vec3(_Metallic));
					  mediump float tmpvar_50;
					  tmpvar_50 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_47 = (albedo_48 * tmpvar_50);
					  tmpvar_44 = tmpvar_47;
					  mediump vec3 diffColor_51;
					  diffColor_51 = tmpvar_44;
					  mediump float alpha_52;
					  alpha_52 = tmpvar_15;
					  tmpvar_44 = diffColor_51;
					  mediump vec3 diffColor_53;
					  diffColor_53 = tmpvar_44;
					  mediump vec3 color_54;
					  mediump vec2 rlPow4AndFresnelTerm_55;
					  mediump float tmpvar_56;
					  highp float tmpvar_57;
					  tmpvar_57 = clamp (dot (tmpvar_46, tmpvar_5), 0.0, 1.0);
					  tmpvar_56 = tmpvar_57;
					  mediump float tmpvar_58;
					  highp float tmpvar_59;
					  tmpvar_59 = clamp (dot (tmpvar_46, tmpvar_11), 0.0, 1.0);
					  tmpvar_58 = tmpvar_59;
					  highp vec2 tmpvar_60;
					  tmpvar_60.x = dot ((tmpvar_11 - (2.0 * 
					    (dot (tmpvar_46, tmpvar_11) * tmpvar_46)
					  )), tmpvar_5);
					  tmpvar_60.y = (1.0 - tmpvar_58);
					  highp vec2 tmpvar_61;
					  tmpvar_61 = ((tmpvar_60 * tmpvar_60) * (tmpvar_60 * tmpvar_60));
					  rlPow4AndFresnelTerm_55 = tmpvar_61;
					  mediump float tmpvar_62;
					  tmpvar_62 = rlPow4AndFresnelTerm_55.x;
					  mediump float specular_63;
					  highp float smoothness_64;
					  smoothness_64 = _Glossiness;
					  highp vec2 tmpvar_65;
					  tmpvar_65.x = tmpvar_62;
					  tmpvar_65.y = (1.0 - smoothness_64);
					  highp float tmpvar_66;
					  tmpvar_66 = (texture2D (unity_NHxRoughness, tmpvar_65).x * 16.0);
					  specular_63 = tmpvar_66;
					  color_54 = ((diffColor_53 + (specular_63 * tmpvar_49)) * (tmpvar_39 * tmpvar_56));
					  color_54 = (color_54 + ((
					    (hdr_40.x * ((hdr_40.w * (tmpvar_43.w - 1.0)) + 1.0))
					   * tmpvar_43.xyz) * mix (tmpvar_49, vec3(
					    clamp ((_Glossiness + (1.0 - tmpvar_50)), 0.0, 1.0)
					  ), rlPow4AndFresnelTerm_55.yyy)));
					  mediump vec4 tmpvar_67;
					  tmpvar_67.w = 1.0;
					  tmpvar_67.xyz = color_54;
					  c_45.xyz = tmpvar_67.xyz;
					  c_45.w = alpha_52;
					  c_6 = c_45;
					  c_6.xyz = (c_6.xyz + tmpvar_14);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					  xlv_TEXCOORD6 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp float atten_7;
					  lowp vec3 lightDir_8;
					  highp vec4 tmpvar_9;
					  mediump vec3 tmpvar_10;
					  tmpvar_10 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_11 = normalize(tmpvar_12);
					  tmpvar_9 = xlv_COLOR0;
					  lowp vec3 tmpvar_13;
					  mediump vec3 tmpvar_14;
					  lowp float tmpvar_15;
					  highp vec4 emissionSample_16;
					  highp vec4 diffuseSample_17;
					  highp vec4 nightSample_18;
					  highp vec4 daySample_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_19 = tmpvar_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_18 = tmpvar_21;
					  diffuseSample_17 = (mix (nightSample_18, daySample_19, vec4(_DayWeight)) * _Color);
					  diffuseSample_17.xyz = (diffuseSample_17.xyz * tmpvar_9.xyz);
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_16 = tmpvar_22;
					  highp vec3 tmpvar_23;
					  tmpvar_23 = ((emissionSample_16.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_13 = diffuseSample_17.xyz;
					  tmpvar_14 = tmpvar_23;
					  tmpvar_15 = diffuseSample_17.w;
					  mediump float realtimeShadowAttenuation_24;
					  highp vec4 v_25;
					  v_25.x = unity_MatrixV[0].z;
					  v_25.y = unity_MatrixV[1].z;
					  v_25.z = unity_MatrixV[2].z;
					  v_25.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_27;
					  highp float tmpvar_28;
					  tmpvar_28 = clamp (((
					    mix (dot (tmpvar_12, v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_27 = tmpvar_28;
					  lowp float tmpvar_29;
					  highp float lightShadowDataX_30;
					  mediump float tmpvar_31;
					  tmpvar_31 = _LightShadowData.x;
					  lightShadowDataX_30 = tmpvar_31;
					  highp float tmpvar_32;
					  tmpvar_32 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_30);
					  tmpvar_29 = tmpvar_32;
					  realtimeShadowAttenuation_24 = tmpvar_29;
					  mediump float tmpvar_33;
					  tmpvar_33 = mix (realtimeShadowAttenuation_24, 1.0, tmpvar_27);
					  atten_7 = tmpvar_33;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_8;
					  tmpvar_1 = tmpvar_11;
					  tmpvar_2 = atten_7;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_34;
					  Normal_34 = xlv_TEXCOORD1;
					  mediump float tmpvar_35;
					  highp float tmpvar_36;
					  highp float smoothness_37;
					  smoothness_37 = _Glossiness;
					  tmpvar_36 = (1.0 - smoothness_37);
					  tmpvar_35 = tmpvar_36;
					  mediump vec3 I_38;
					  I_38 = -(tmpvar_1);
					  mediump vec3 tmpvar_39;
					  mediump vec3 tmpvar_40;
					  tmpvar_40 = (tmpvar_4 * tmpvar_2);
					  mediump vec4 hdr_41;
					  hdr_41 = tmpvar_3;
					  mediump vec4 tmpvar_42;
					  tmpvar_42.xyz = (I_38 - (2.0 * (
					    dot (Normal_34, I_38)
					   * Normal_34)));
					  tmpvar_42.w = ((tmpvar_35 * (1.7 - 
					    (0.7 * tmpvar_35)
					  )) * 6.0);
					  lowp vec4 tmpvar_43;
					  tmpvar_43 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42.xyz, tmpvar_42.w);
					  mediump vec4 tmpvar_44;
					  tmpvar_44 = tmpvar_43;
					  tmpvar_39 = ((hdr_41.x * (
					    (hdr_41.w * (tmpvar_44.w - 1.0))
					   + 1.0)) * tmpvar_44.xyz);
					  tmpvar_4 = tmpvar_40;
					  lowp vec3 tmpvar_45;
					  mediump vec4 c_46;
					  highp vec3 tmpvar_47;
					  tmpvar_47 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_48;
					  mediump vec3 albedo_49;
					  albedo_49 = tmpvar_13;
					  mediump vec3 tmpvar_50;
					  tmpvar_50 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_49, vec3(_Metallic));
					  mediump float tmpvar_51;
					  tmpvar_51 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_48 = (albedo_49 * tmpvar_51);
					  tmpvar_45 = tmpvar_48;
					  mediump vec3 diffColor_52;
					  diffColor_52 = tmpvar_45;
					  mediump float alpha_53;
					  alpha_53 = tmpvar_15;
					  tmpvar_45 = diffColor_52;
					  mediump vec3 diffColor_54;
					  diffColor_54 = tmpvar_45;
					  mediump vec3 color_55;
					  mediump float surfaceReduction_56;
					  highp float specularTerm_57;
					  highp float a2_58;
					  mediump float roughness_59;
					  mediump float perceptualRoughness_60;
					  highp vec3 tmpvar_61;
					  highp vec3 inVec_62;
					  inVec_62 = (tmpvar_5 + tmpvar_11);
					  tmpvar_61 = (inVec_62 * inversesqrt(max (0.001, 
					    dot (inVec_62, inVec_62)
					  )));
					  mediump float tmpvar_63;
					  highp float tmpvar_64;
					  tmpvar_64 = clamp (dot (tmpvar_47, tmpvar_5), 0.0, 1.0);
					  tmpvar_63 = tmpvar_64;
					  highp float tmpvar_65;
					  tmpvar_65 = clamp (dot (tmpvar_47, tmpvar_61), 0.0, 1.0);
					  mediump float tmpvar_66;
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (dot (tmpvar_47, tmpvar_11), 0.0, 1.0);
					  tmpvar_66 = tmpvar_67;
					  highp float tmpvar_68;
					  highp float smoothness_69;
					  smoothness_69 = _Glossiness;
					  tmpvar_68 = (1.0 - smoothness_69);
					  perceptualRoughness_60 = tmpvar_68;
					  highp float tmpvar_70;
					  highp float perceptualRoughness_71;
					  perceptualRoughness_71 = perceptualRoughness_60;
					  tmpvar_70 = (perceptualRoughness_71 * perceptualRoughness_71);
					  roughness_59 = tmpvar_70;
					  mediump float tmpvar_72;
					  tmpvar_72 = (roughness_59 * roughness_59);
					  a2_58 = tmpvar_72;
					  specularTerm_57 = ((roughness_59 / (
					    (max (0.32, clamp (dot (tmpvar_5, tmpvar_61), 0.0, 1.0)) * (1.5 + roughness_59))
					   * 
					    (((tmpvar_65 * tmpvar_65) * (a2_58 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_73;
					  tmpvar_73 = clamp (specularTerm_57, 0.0, 100.0);
					  specularTerm_57 = tmpvar_73;
					  surfaceReduction_56 = (1.0 - ((roughness_59 * perceptualRoughness_60) * 0.28));
					  mediump float x_74;
					  x_74 = (1.0 - tmpvar_66);
					  mediump vec3 tmpvar_75;
					  tmpvar_75 = mix (tmpvar_50, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_51)
					  ), 0.0, 1.0)), vec3(((x_74 * x_74) * (x_74 * x_74))));
					  highp vec3 tmpvar_76;
					  tmpvar_76 = (((
					    (diffColor_54 + (tmpvar_73 * tmpvar_50))
					   * tmpvar_40) * tmpvar_63) + ((surfaceReduction_56 * tmpvar_39) * tmpvar_75));
					  color_55 = tmpvar_76;
					  mediump vec4 tmpvar_77;
					  tmpvar_77.w = 1.0;
					  tmpvar_77.xyz = color_55;
					  c_46.xyz = tmpvar_77.xyz;
					  c_46.w = alpha_53;
					  c_6 = c_46;
					  c_6.xyz = (c_6.xyz + tmpvar_14);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					  xlv_TEXCOORD6 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp float atten_7;
					  lowp vec3 lightDir_8;
					  highp vec4 tmpvar_9;
					  mediump vec3 tmpvar_10;
					  tmpvar_10 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_11 = normalize(tmpvar_12);
					  tmpvar_9 = xlv_COLOR0;
					  lowp vec3 tmpvar_13;
					  mediump vec3 tmpvar_14;
					  lowp float tmpvar_15;
					  highp vec4 emissionSample_16;
					  highp vec4 diffuseSample_17;
					  highp vec4 nightSample_18;
					  highp vec4 daySample_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_19 = tmpvar_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_18 = tmpvar_21;
					  diffuseSample_17 = (mix (nightSample_18, daySample_19, vec4(_DayWeight)) * _Color);
					  diffuseSample_17.xyz = (diffuseSample_17.xyz * tmpvar_9.xyz);
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_16 = tmpvar_22;
					  highp vec3 tmpvar_23;
					  tmpvar_23 = ((emissionSample_16.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_13 = diffuseSample_17.xyz;
					  tmpvar_14 = tmpvar_23;
					  tmpvar_15 = diffuseSample_17.w;
					  mediump float realtimeShadowAttenuation_24;
					  highp vec4 v_25;
					  v_25.x = unity_MatrixV[0].z;
					  v_25.y = unity_MatrixV[1].z;
					  v_25.z = unity_MatrixV[2].z;
					  v_25.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_27;
					  highp float tmpvar_28;
					  tmpvar_28 = clamp (((
					    mix (dot (tmpvar_12, v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_27 = tmpvar_28;
					  lowp float tmpvar_29;
					  highp float lightShadowDataX_30;
					  mediump float tmpvar_31;
					  tmpvar_31 = _LightShadowData.x;
					  lightShadowDataX_30 = tmpvar_31;
					  highp float tmpvar_32;
					  tmpvar_32 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_30);
					  tmpvar_29 = tmpvar_32;
					  realtimeShadowAttenuation_24 = tmpvar_29;
					  mediump float tmpvar_33;
					  tmpvar_33 = mix (realtimeShadowAttenuation_24, 1.0, tmpvar_27);
					  atten_7 = tmpvar_33;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_8;
					  tmpvar_1 = tmpvar_11;
					  tmpvar_2 = atten_7;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_34;
					  Normal_34 = xlv_TEXCOORD1;
					  mediump float tmpvar_35;
					  highp float tmpvar_36;
					  highp float smoothness_37;
					  smoothness_37 = _Glossiness;
					  tmpvar_36 = (1.0 - smoothness_37);
					  tmpvar_35 = tmpvar_36;
					  mediump vec3 I_38;
					  I_38 = -(tmpvar_1);
					  mediump vec3 tmpvar_39;
					  mediump vec3 tmpvar_40;
					  tmpvar_40 = (tmpvar_4 * tmpvar_2);
					  mediump vec4 hdr_41;
					  hdr_41 = tmpvar_3;
					  mediump vec4 tmpvar_42;
					  tmpvar_42.xyz = (I_38 - (2.0 * (
					    dot (Normal_34, I_38)
					   * Normal_34)));
					  tmpvar_42.w = ((tmpvar_35 * (1.7 - 
					    (0.7 * tmpvar_35)
					  )) * 6.0);
					  lowp vec4 tmpvar_43;
					  tmpvar_43 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42.xyz, tmpvar_42.w);
					  mediump vec4 tmpvar_44;
					  tmpvar_44 = tmpvar_43;
					  tmpvar_39 = ((hdr_41.x * (
					    (hdr_41.w * (tmpvar_44.w - 1.0))
					   + 1.0)) * tmpvar_44.xyz);
					  tmpvar_4 = tmpvar_40;
					  lowp vec3 tmpvar_45;
					  mediump vec4 c_46;
					  highp vec3 tmpvar_47;
					  tmpvar_47 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_48;
					  mediump vec3 albedo_49;
					  albedo_49 = tmpvar_13;
					  mediump vec3 tmpvar_50;
					  tmpvar_50 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_49, vec3(_Metallic));
					  mediump float tmpvar_51;
					  tmpvar_51 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_48 = (albedo_49 * tmpvar_51);
					  tmpvar_45 = tmpvar_48;
					  mediump vec3 diffColor_52;
					  diffColor_52 = tmpvar_45;
					  mediump float alpha_53;
					  alpha_53 = tmpvar_15;
					  tmpvar_45 = diffColor_52;
					  mediump vec3 diffColor_54;
					  diffColor_54 = tmpvar_45;
					  mediump vec3 color_55;
					  mediump float surfaceReduction_56;
					  highp float specularTerm_57;
					  highp float a2_58;
					  mediump float roughness_59;
					  mediump float perceptualRoughness_60;
					  highp vec3 tmpvar_61;
					  highp vec3 inVec_62;
					  inVec_62 = (tmpvar_5 + tmpvar_11);
					  tmpvar_61 = (inVec_62 * inversesqrt(max (0.001, 
					    dot (inVec_62, inVec_62)
					  )));
					  mediump float tmpvar_63;
					  highp float tmpvar_64;
					  tmpvar_64 = clamp (dot (tmpvar_47, tmpvar_5), 0.0, 1.0);
					  tmpvar_63 = tmpvar_64;
					  highp float tmpvar_65;
					  tmpvar_65 = clamp (dot (tmpvar_47, tmpvar_61), 0.0, 1.0);
					  mediump float tmpvar_66;
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (dot (tmpvar_47, tmpvar_11), 0.0, 1.0);
					  tmpvar_66 = tmpvar_67;
					  highp float tmpvar_68;
					  highp float smoothness_69;
					  smoothness_69 = _Glossiness;
					  tmpvar_68 = (1.0 - smoothness_69);
					  perceptualRoughness_60 = tmpvar_68;
					  highp float tmpvar_70;
					  highp float perceptualRoughness_71;
					  perceptualRoughness_71 = perceptualRoughness_60;
					  tmpvar_70 = (perceptualRoughness_71 * perceptualRoughness_71);
					  roughness_59 = tmpvar_70;
					  mediump float tmpvar_72;
					  tmpvar_72 = (roughness_59 * roughness_59);
					  a2_58 = tmpvar_72;
					  specularTerm_57 = ((roughness_59 / (
					    (max (0.32, clamp (dot (tmpvar_5, tmpvar_61), 0.0, 1.0)) * (1.5 + roughness_59))
					   * 
					    (((tmpvar_65 * tmpvar_65) * (a2_58 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_73;
					  tmpvar_73 = clamp (specularTerm_57, 0.0, 100.0);
					  specularTerm_57 = tmpvar_73;
					  surfaceReduction_56 = (1.0 - ((roughness_59 * perceptualRoughness_60) * 0.28));
					  mediump float x_74;
					  x_74 = (1.0 - tmpvar_66);
					  mediump vec3 tmpvar_75;
					  tmpvar_75 = mix (tmpvar_50, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_51)
					  ), 0.0, 1.0)), vec3(((x_74 * x_74) * (x_74 * x_74))));
					  highp vec3 tmpvar_76;
					  tmpvar_76 = (((
					    (diffColor_54 + (tmpvar_73 * tmpvar_50))
					   * tmpvar_40) * tmpvar_63) + ((surfaceReduction_56 * tmpvar_39) * tmpvar_75));
					  color_55 = tmpvar_76;
					  mediump vec4 tmpvar_77;
					  tmpvar_77.w = 1.0;
					  tmpvar_77.xyz = color_55;
					  c_46.xyz = tmpvar_77.xyz;
					  c_46.w = alpha_53;
					  c_6 = c_46;
					  c_6.xyz = (c_6.xyz + tmpvar_14);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					float u_xlat24;
					mediump float u_xlat16_25;
					float u_xlat26;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat10_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat10_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_9 = (-u_xlat16_1.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat8.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_9 + u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat16_25 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
					    u_xlat16_3.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_25)) + (-u_xlat0.xyz);
					    u_xlat4.z = (-_Glossiness) + 1.0;
					    u_xlat16_25 = (-u_xlat4.z) * 0.699999988 + 1.70000005;
					    u_xlat16_25 = u_xlat16_25 * u_xlat4.z;
					    u_xlat16_25 = u_xlat16_25 * 6.0;
					    u_xlat10_3 = textureLod(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_25);
					    u_xlat16_25 = u_xlat10_3.w + -1.0;
					    u_xlat16_25 = unity_SpecCube0_HDR.w * u_xlat16_25 + 1.0;
					    u_xlat16_25 = u_xlat16_25 * unity_SpecCube0_HDR.x;
					    u_xlat16_5.xyz = u_xlat10_3.xyz * vec3(u_xlat16_25);
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat26 = u_xlat24;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
					#else
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					#endif
					    u_xlat24 = u_xlat24 + u_xlat24;
					    u_xlat0.xyz = u_xlat2.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat4.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat4.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_25 = (-u_xlat26) + 1.0;
					    u_xlat16_8 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_8 = u_xlat16_25 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_25 * u_xlat16_8;
					    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_2.xyz + (-u_xlat10_4.xyz);
					    u_xlat2.xyz = vec3(_DayWeight) * u_xlat16_2.xyz + u_xlat10_4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_29 = (-u_xlat16_25) + _Glossiness;
					    u_xlat16_29 = u_xlat16_29 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
					#else
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_29);
					    u_xlat16_7.xyz = vec3(u_xlat16_8) * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_5.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp float u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_2;
					vec3 u_xlat3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_18;
					float u_xlat24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					float u_xlat27;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_9 = (-u_xlat16_1.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat8.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_9 + u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_3.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_2.xyz + (-u_xlat10_3.xyz);
					    u_xlat2.xyz = vec3(_DayWeight) * u_xlat16_2.xyz + u_xlat10_3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat16_4.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat8.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_26 = (-_Glossiness) + 1.0;
					    u_xlat16_27 = u_xlat16_26 * u_xlat16_26 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_27;
					    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat5.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat16_10 = u_xlat16_26 * u_xlat16_26;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_10 + -1.0;
					    u_xlat2.x = u_xlat2.x * u_xlat16_18 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat2.x;
					    u_xlat24 = u_xlat16_10 / u_xlat24;
					    u_xlat16_25 = u_xlat16_26 * u_xlat16_10;
					    u_xlat16_25 = (-u_xlat16_25) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat2.xyz = u_xlat16_4.xyz * vec3(u_xlat24);
					    u_xlat16_28 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat16_28) + u_xlat2.xyz;
					    u_xlat16_28 = (-u_xlat16_28) + _Glossiness;
					    u_xlat16_28 = u_xlat16_28 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
					#else
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + vec3(u_xlat16_28);
					    u_xlat2.xyz = u_xlat16_1.xyz * u_xlat2.xyz;
					    u_xlat16_1.x = (-u_xlat16_26) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_26;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat16_9 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
					    u_xlat16_7.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_9)) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat8.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
					#else
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = (-u_xlat0.x) + 1.0;
					    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
					    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
					    u_xlat16_4.xyz = vec3(u_xlat16_9) * u_xlat16_6.xyz + u_xlat16_4.xyz;
					    u_xlat10_3 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat10_3.w + -1.0;
					    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_3.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_25);
					    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat8.xxx + u_xlat16_1.xyz;
					    u_xlat10_2.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.xyz = u_xlat10_2.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp float u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_2;
					vec3 u_xlat3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_18;
					float u_xlat24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					float u_xlat27;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_9 = (-u_xlat16_1.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat8.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_9 + u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_3.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_2.xyz + (-u_xlat10_3.xyz);
					    u_xlat2.xyz = vec3(_DayWeight) * u_xlat16_2.xyz + u_xlat10_3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat16_4.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat8.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_26 = (-_Glossiness) + 1.0;
					    u_xlat16_27 = u_xlat16_26 * u_xlat16_26 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_27;
					    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat5.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat16_10 = u_xlat16_26 * u_xlat16_26;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_10 + -1.0;
					    u_xlat2.x = u_xlat2.x * u_xlat16_18 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat2.x;
					    u_xlat24 = u_xlat16_10 / u_xlat24;
					    u_xlat16_25 = u_xlat16_26 * u_xlat16_10;
					    u_xlat16_25 = (-u_xlat16_25) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat2.xyz = u_xlat16_4.xyz * vec3(u_xlat24);
					    u_xlat16_28 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat16_28) + u_xlat2.xyz;
					    u_xlat16_28 = (-u_xlat16_28) + _Glossiness;
					    u_xlat16_28 = u_xlat16_28 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
					#else
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + vec3(u_xlat16_28);
					    u_xlat2.xyz = u_xlat16_1.xyz * u_xlat2.xyz;
					    u_xlat16_1.x = (-u_xlat16_26) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_26;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat16_9 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
					    u_xlat16_7.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_9)) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat8.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
					#else
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = (-u_xlat0.x) + 1.0;
					    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
					    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
					    u_xlat16_4.xyz = vec3(u_xlat16_9) * u_xlat16_6.xyz + u_xlat16_4.xyz;
					    u_xlat10_3 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat10_3.w + -1.0;
					    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_3.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_25);
					    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat8.xxx + u_xlat16_1.xyz;
					    u_xlat10_2.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.xyz = u_xlat10_2.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_5;
					  tmpvar_5 = normalize((_glesNormal * tmpvar_4));
					  highp vec4 tmpvar_6;
					  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_6.xyz;
					  mediump vec3 normal_7;
					  normal_7 = tmpvar_5;
					  mediump vec3 x1_8;
					  mediump vec4 tmpvar_9;
					  tmpvar_9 = (normal_7.xyzz * normal_7.yzzx);
					  x1_8.x = dot (unity_SHBr, tmpvar_9);
					  x1_8.y = dot (unity_SHBg, tmpvar_9);
					  x1_8.z = dot (unity_SHBb, tmpvar_9);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_5;
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (x1_8 + (unity_SHC.xyz * (
					    (normal_7.x * normal_7.x)
					   - 
					    (normal_7.y * normal_7.y)
					  )));
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_6);
					  xlv_TEXCOORD6 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp float atten_7;
					  lowp vec3 lightDir_8;
					  highp vec4 tmpvar_9;
					  mediump vec3 tmpvar_10;
					  tmpvar_10 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_11 = normalize(tmpvar_12);
					  tmpvar_9 = xlv_COLOR0;
					  lowp vec3 tmpvar_13;
					  mediump vec3 tmpvar_14;
					  lowp float tmpvar_15;
					  highp vec4 emissionSample_16;
					  highp vec4 diffuseSample_17;
					  highp vec4 nightSample_18;
					  highp vec4 daySample_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_19 = tmpvar_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_18 = tmpvar_21;
					  diffuseSample_17 = (mix (nightSample_18, daySample_19, vec4(_DayWeight)) * _Color);
					  diffuseSample_17.xyz = (diffuseSample_17.xyz * tmpvar_9.xyz);
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_16 = tmpvar_22;
					  highp vec3 tmpvar_23;
					  tmpvar_23 = ((emissionSample_16.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_13 = diffuseSample_17.xyz;
					  tmpvar_14 = tmpvar_23;
					  tmpvar_15 = diffuseSample_17.w;
					  mediump float realtimeShadowAttenuation_24;
					  highp vec4 v_25;
					  v_25.x = unity_MatrixV[0].z;
					  v_25.y = unity_MatrixV[1].z;
					  v_25.z = unity_MatrixV[2].z;
					  v_25.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_27;
					  highp float tmpvar_28;
					  tmpvar_28 = clamp (((
					    mix (dot (tmpvar_12, v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_27 = tmpvar_28;
					  lowp float tmpvar_29;
					  highp float lightShadowDataX_30;
					  mediump float tmpvar_31;
					  tmpvar_31 = _LightShadowData.x;
					  lightShadowDataX_30 = tmpvar_31;
					  highp float tmpvar_32;
					  tmpvar_32 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_30);
					  tmpvar_29 = tmpvar_32;
					  realtimeShadowAttenuation_24 = tmpvar_29;
					  mediump float tmpvar_33;
					  tmpvar_33 = mix (realtimeShadowAttenuation_24, 1.0, tmpvar_27);
					  atten_7 = tmpvar_33;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_8;
					  tmpvar_1 = tmpvar_11;
					  tmpvar_2 = atten_7;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_34;
					  Normal_34 = xlv_TEXCOORD1;
					  mediump float tmpvar_35;
					  highp float tmpvar_36;
					  highp float smoothness_37;
					  smoothness_37 = _Glossiness;
					  tmpvar_36 = (1.0 - smoothness_37);
					  tmpvar_35 = tmpvar_36;
					  mediump vec3 I_38;
					  I_38 = -(tmpvar_1);
					  mediump vec3 normalWorld_39;
					  normalWorld_39 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_40;
					  tmpvar_40 = (tmpvar_4 * tmpvar_2);
					  mediump vec4 tmpvar_41;
					  tmpvar_41.w = 1.0;
					  tmpvar_41.xyz = normalWorld_39;
					  mediump vec3 x_42;
					  x_42.x = dot (unity_SHAr, tmpvar_41);
					  x_42.y = dot (unity_SHAg, tmpvar_41);
					  x_42.z = dot (unity_SHAb, tmpvar_41);
					  mediump vec4 hdr_43;
					  hdr_43 = tmpvar_3;
					  mediump vec4 tmpvar_44;
					  tmpvar_44.xyz = (I_38 - (2.0 * (
					    dot (Normal_34, I_38)
					   * Normal_34)));
					  tmpvar_44.w = ((tmpvar_35 * (1.7 - 
					    (0.7 * tmpvar_35)
					  )) * 6.0);
					  lowp vec4 tmpvar_45;
					  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_44.xyz, tmpvar_44.w);
					  mediump vec4 tmpvar_46;
					  tmpvar_46 = tmpvar_45;
					  tmpvar_4 = tmpvar_40;
					  lowp vec3 tmpvar_47;
					  mediump vec4 c_48;
					  highp vec3 tmpvar_49;
					  tmpvar_49 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_50;
					  mediump vec3 albedo_51;
					  albedo_51 = tmpvar_13;
					  mediump vec3 tmpvar_52;
					  tmpvar_52 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_51, vec3(_Metallic));
					  mediump float tmpvar_53;
					  tmpvar_53 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_50 = (albedo_51 * tmpvar_53);
					  tmpvar_47 = tmpvar_50;
					  mediump vec3 diffColor_54;
					  diffColor_54 = tmpvar_47;
					  mediump float alpha_55;
					  alpha_55 = tmpvar_15;
					  tmpvar_47 = diffColor_54;
					  mediump vec3 diffColor_56;
					  diffColor_56 = tmpvar_47;
					  mediump vec3 color_57;
					  mediump vec2 rlPow4AndFresnelTerm_58;
					  mediump float tmpvar_59;
					  highp float tmpvar_60;
					  tmpvar_60 = clamp (dot (tmpvar_49, tmpvar_5), 0.0, 1.0);
					  tmpvar_59 = tmpvar_60;
					  mediump float tmpvar_61;
					  highp float tmpvar_62;
					  tmpvar_62 = clamp (dot (tmpvar_49, tmpvar_11), 0.0, 1.0);
					  tmpvar_61 = tmpvar_62;
					  highp vec2 tmpvar_63;
					  tmpvar_63.x = dot ((tmpvar_11 - (2.0 * 
					    (dot (tmpvar_49, tmpvar_11) * tmpvar_49)
					  )), tmpvar_5);
					  tmpvar_63.y = (1.0 - tmpvar_61);
					  highp vec2 tmpvar_64;
					  tmpvar_64 = ((tmpvar_63 * tmpvar_63) * (tmpvar_63 * tmpvar_63));
					  rlPow4AndFresnelTerm_58 = tmpvar_64;
					  mediump float tmpvar_65;
					  tmpvar_65 = rlPow4AndFresnelTerm_58.x;
					  mediump float specular_66;
					  highp float smoothness_67;
					  smoothness_67 = _Glossiness;
					  highp vec2 tmpvar_68;
					  tmpvar_68.x = tmpvar_65;
					  tmpvar_68.y = (1.0 - smoothness_67);
					  highp float tmpvar_69;
					  tmpvar_69 = (texture2D (unity_NHxRoughness, tmpvar_68).x * 16.0);
					  specular_66 = tmpvar_69;
					  color_57 = ((diffColor_56 + (specular_66 * tmpvar_52)) * (tmpvar_40 * tmpvar_59));
					  color_57 = (color_57 + ((
					    max (((1.055 * pow (
					      max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_42))
					    , vec3(0.4166667, 0.4166667, 0.4166667))) - 0.055), vec3(0.0, 0.0, 0.0))
					   * diffColor_56) + (
					    ((hdr_43.x * ((hdr_43.w * 
					      (tmpvar_46.w - 1.0)
					    ) + 1.0)) * tmpvar_46.xyz)
					   * 
					    mix (tmpvar_52, vec3(clamp ((_Glossiness + (1.0 - tmpvar_53)), 0.0, 1.0)), rlPow4AndFresnelTerm_58.yyy)
					  )));
					  mediump vec4 tmpvar_70;
					  tmpvar_70.w = 1.0;
					  tmpvar_70.xyz = color_57;
					  c_48.xyz = tmpvar_70.xyz;
					  c_48.w = alpha_55;
					  c_6 = c_48;
					  c_6.xyz = (c_6.xyz + tmpvar_14);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_5;
					  tmpvar_5 = normalize((_glesNormal * tmpvar_4));
					  highp vec4 tmpvar_6;
					  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_6.xyz;
					  mediump vec3 normal_7;
					  normal_7 = tmpvar_5;
					  mediump vec3 x1_8;
					  mediump vec4 tmpvar_9;
					  tmpvar_9 = (normal_7.xyzz * normal_7.yzzx);
					  x1_8.x = dot (unity_SHBr, tmpvar_9);
					  x1_8.y = dot (unity_SHBg, tmpvar_9);
					  x1_8.z = dot (unity_SHBb, tmpvar_9);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_5;
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (x1_8 + (unity_SHC.xyz * (
					    (normal_7.x * normal_7.x)
					   - 
					    (normal_7.y * normal_7.y)
					  )));
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_6);
					  xlv_TEXCOORD6 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp float atten_7;
					  lowp vec3 lightDir_8;
					  highp vec4 tmpvar_9;
					  mediump vec3 tmpvar_10;
					  tmpvar_10 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_11 = normalize(tmpvar_12);
					  tmpvar_9 = xlv_COLOR0;
					  lowp vec3 tmpvar_13;
					  mediump vec3 tmpvar_14;
					  lowp float tmpvar_15;
					  highp vec4 emissionSample_16;
					  highp vec4 diffuseSample_17;
					  highp vec4 nightSample_18;
					  highp vec4 daySample_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_19 = tmpvar_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_18 = tmpvar_21;
					  diffuseSample_17 = (mix (nightSample_18, daySample_19, vec4(_DayWeight)) * _Color);
					  diffuseSample_17.xyz = (diffuseSample_17.xyz * tmpvar_9.xyz);
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_16 = tmpvar_22;
					  highp vec3 tmpvar_23;
					  tmpvar_23 = ((emissionSample_16.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_13 = diffuseSample_17.xyz;
					  tmpvar_14 = tmpvar_23;
					  tmpvar_15 = diffuseSample_17.w;
					  mediump float realtimeShadowAttenuation_24;
					  highp vec4 v_25;
					  v_25.x = unity_MatrixV[0].z;
					  v_25.y = unity_MatrixV[1].z;
					  v_25.z = unity_MatrixV[2].z;
					  v_25.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_27;
					  highp float tmpvar_28;
					  tmpvar_28 = clamp (((
					    mix (dot (tmpvar_12, v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_27 = tmpvar_28;
					  lowp float tmpvar_29;
					  highp float lightShadowDataX_30;
					  mediump float tmpvar_31;
					  tmpvar_31 = _LightShadowData.x;
					  lightShadowDataX_30 = tmpvar_31;
					  highp float tmpvar_32;
					  tmpvar_32 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_30);
					  tmpvar_29 = tmpvar_32;
					  realtimeShadowAttenuation_24 = tmpvar_29;
					  mediump float tmpvar_33;
					  tmpvar_33 = mix (realtimeShadowAttenuation_24, 1.0, tmpvar_27);
					  atten_7 = tmpvar_33;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_8;
					  tmpvar_1 = tmpvar_11;
					  tmpvar_2 = atten_7;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_34;
					  Normal_34 = xlv_TEXCOORD1;
					  mediump float tmpvar_35;
					  highp float tmpvar_36;
					  highp float smoothness_37;
					  smoothness_37 = _Glossiness;
					  tmpvar_36 = (1.0 - smoothness_37);
					  tmpvar_35 = tmpvar_36;
					  mediump vec3 I_38;
					  I_38 = -(tmpvar_1);
					  mediump vec3 normalWorld_39;
					  normalWorld_39 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_40;
					  mediump vec3 tmpvar_41;
					  mediump vec3 tmpvar_42;
					  tmpvar_41 = (tmpvar_4 * tmpvar_2);
					  mediump vec4 tmpvar_43;
					  tmpvar_43.w = 1.0;
					  tmpvar_43.xyz = normalWorld_39;
					  mediump vec3 x_44;
					  x_44.x = dot (unity_SHAr, tmpvar_43);
					  x_44.y = dot (unity_SHAg, tmpvar_43);
					  x_44.z = dot (unity_SHAb, tmpvar_43);
					  tmpvar_42 = max (((1.055 * 
					    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_44)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  mediump vec4 hdr_45;
					  hdr_45 = tmpvar_3;
					  mediump vec4 tmpvar_46;
					  tmpvar_46.xyz = (I_38 - (2.0 * (
					    dot (Normal_34, I_38)
					   * Normal_34)));
					  tmpvar_46.w = ((tmpvar_35 * (1.7 - 
					    (0.7 * tmpvar_35)
					  )) * 6.0);
					  lowp vec4 tmpvar_47;
					  tmpvar_47 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_46.xyz, tmpvar_46.w);
					  mediump vec4 tmpvar_48;
					  tmpvar_48 = tmpvar_47;
					  tmpvar_40 = ((hdr_45.x * (
					    (hdr_45.w * (tmpvar_48.w - 1.0))
					   + 1.0)) * tmpvar_48.xyz);
					  tmpvar_4 = tmpvar_41;
					  lowp vec3 tmpvar_49;
					  mediump vec4 c_50;
					  highp vec3 tmpvar_51;
					  tmpvar_51 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_52;
					  mediump vec3 albedo_53;
					  albedo_53 = tmpvar_13;
					  mediump vec3 tmpvar_54;
					  tmpvar_54 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_53, vec3(_Metallic));
					  mediump float tmpvar_55;
					  tmpvar_55 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_52 = (albedo_53 * tmpvar_55);
					  tmpvar_49 = tmpvar_52;
					  mediump vec3 diffColor_56;
					  diffColor_56 = tmpvar_49;
					  mediump float alpha_57;
					  alpha_57 = tmpvar_15;
					  tmpvar_49 = diffColor_56;
					  mediump vec3 diffColor_58;
					  diffColor_58 = tmpvar_49;
					  mediump vec3 color_59;
					  mediump float surfaceReduction_60;
					  highp float specularTerm_61;
					  highp float a2_62;
					  mediump float roughness_63;
					  mediump float perceptualRoughness_64;
					  highp vec3 tmpvar_65;
					  highp vec3 inVec_66;
					  inVec_66 = (tmpvar_5 + tmpvar_11);
					  tmpvar_65 = (inVec_66 * inversesqrt(max (0.001, 
					    dot (inVec_66, inVec_66)
					  )));
					  mediump float tmpvar_67;
					  highp float tmpvar_68;
					  tmpvar_68 = clamp (dot (tmpvar_51, tmpvar_5), 0.0, 1.0);
					  tmpvar_67 = tmpvar_68;
					  highp float tmpvar_69;
					  tmpvar_69 = clamp (dot (tmpvar_51, tmpvar_65), 0.0, 1.0);
					  mediump float tmpvar_70;
					  highp float tmpvar_71;
					  tmpvar_71 = clamp (dot (tmpvar_51, tmpvar_11), 0.0, 1.0);
					  tmpvar_70 = tmpvar_71;
					  highp float tmpvar_72;
					  highp float smoothness_73;
					  smoothness_73 = _Glossiness;
					  tmpvar_72 = (1.0 - smoothness_73);
					  perceptualRoughness_64 = tmpvar_72;
					  highp float tmpvar_74;
					  highp float perceptualRoughness_75;
					  perceptualRoughness_75 = perceptualRoughness_64;
					  tmpvar_74 = (perceptualRoughness_75 * perceptualRoughness_75);
					  roughness_63 = tmpvar_74;
					  mediump float tmpvar_76;
					  tmpvar_76 = (roughness_63 * roughness_63);
					  a2_62 = tmpvar_76;
					  specularTerm_61 = ((roughness_63 / (
					    (max (0.32, clamp (dot (tmpvar_5, tmpvar_65), 0.0, 1.0)) * (1.5 + roughness_63))
					   * 
					    (((tmpvar_69 * tmpvar_69) * (a2_62 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_77;
					  tmpvar_77 = clamp (specularTerm_61, 0.0, 100.0);
					  specularTerm_61 = tmpvar_77;
					  surfaceReduction_60 = (1.0 - ((roughness_63 * perceptualRoughness_64) * 0.28));
					  mediump float x_78;
					  x_78 = (1.0 - tmpvar_70);
					  mediump vec3 tmpvar_79;
					  tmpvar_79 = mix (tmpvar_54, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_55)
					  ), 0.0, 1.0)), vec3(((x_78 * x_78) * (x_78 * x_78))));
					  highp vec3 tmpvar_80;
					  tmpvar_80 = (((
					    ((diffColor_58 + (tmpvar_77 * tmpvar_54)) * tmpvar_41)
					   * tmpvar_67) + (tmpvar_42 * diffColor_58)) + ((surfaceReduction_60 * tmpvar_40) * tmpvar_79));
					  color_59 = tmpvar_80;
					  mediump vec4 tmpvar_81;
					  tmpvar_81.w = 1.0;
					  tmpvar_81.xyz = color_59;
					  c_50.xyz = tmpvar_81.xyz;
					  c_50.w = alpha_57;
					  c_6 = c_50;
					  c_6.xyz = (c_6.xyz + tmpvar_14);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_5;
					  tmpvar_5 = normalize((_glesNormal * tmpvar_4));
					  highp vec4 tmpvar_6;
					  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_6.xyz;
					  mediump vec3 normal_7;
					  normal_7 = tmpvar_5;
					  mediump vec3 x1_8;
					  mediump vec4 tmpvar_9;
					  tmpvar_9 = (normal_7.xyzz * normal_7.yzzx);
					  x1_8.x = dot (unity_SHBr, tmpvar_9);
					  x1_8.y = dot (unity_SHBg, tmpvar_9);
					  x1_8.z = dot (unity_SHBb, tmpvar_9);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_5;
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (x1_8 + (unity_SHC.xyz * (
					    (normal_7.x * normal_7.x)
					   - 
					    (normal_7.y * normal_7.y)
					  )));
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_6);
					  xlv_TEXCOORD6 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp float atten_7;
					  lowp vec3 lightDir_8;
					  highp vec4 tmpvar_9;
					  mediump vec3 tmpvar_10;
					  tmpvar_10 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_11 = normalize(tmpvar_12);
					  tmpvar_9 = xlv_COLOR0;
					  lowp vec3 tmpvar_13;
					  mediump vec3 tmpvar_14;
					  lowp float tmpvar_15;
					  highp vec4 emissionSample_16;
					  highp vec4 diffuseSample_17;
					  highp vec4 nightSample_18;
					  highp vec4 daySample_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_19 = tmpvar_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_18 = tmpvar_21;
					  diffuseSample_17 = (mix (nightSample_18, daySample_19, vec4(_DayWeight)) * _Color);
					  diffuseSample_17.xyz = (diffuseSample_17.xyz * tmpvar_9.xyz);
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_16 = tmpvar_22;
					  highp vec3 tmpvar_23;
					  tmpvar_23 = ((emissionSample_16.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_13 = diffuseSample_17.xyz;
					  tmpvar_14 = tmpvar_23;
					  tmpvar_15 = diffuseSample_17.w;
					  mediump float realtimeShadowAttenuation_24;
					  highp vec4 v_25;
					  v_25.x = unity_MatrixV[0].z;
					  v_25.y = unity_MatrixV[1].z;
					  v_25.z = unity_MatrixV[2].z;
					  v_25.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_27;
					  highp float tmpvar_28;
					  tmpvar_28 = clamp (((
					    mix (dot (tmpvar_12, v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_27 = tmpvar_28;
					  lowp float tmpvar_29;
					  highp float lightShadowDataX_30;
					  mediump float tmpvar_31;
					  tmpvar_31 = _LightShadowData.x;
					  lightShadowDataX_30 = tmpvar_31;
					  highp float tmpvar_32;
					  tmpvar_32 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_30);
					  tmpvar_29 = tmpvar_32;
					  realtimeShadowAttenuation_24 = tmpvar_29;
					  mediump float tmpvar_33;
					  tmpvar_33 = mix (realtimeShadowAttenuation_24, 1.0, tmpvar_27);
					  atten_7 = tmpvar_33;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_8;
					  tmpvar_1 = tmpvar_11;
					  tmpvar_2 = atten_7;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_34;
					  Normal_34 = xlv_TEXCOORD1;
					  mediump float tmpvar_35;
					  highp float tmpvar_36;
					  highp float smoothness_37;
					  smoothness_37 = _Glossiness;
					  tmpvar_36 = (1.0 - smoothness_37);
					  tmpvar_35 = tmpvar_36;
					  mediump vec3 I_38;
					  I_38 = -(tmpvar_1);
					  mediump vec3 normalWorld_39;
					  normalWorld_39 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_40;
					  mediump vec3 tmpvar_41;
					  mediump vec3 tmpvar_42;
					  tmpvar_41 = (tmpvar_4 * tmpvar_2);
					  mediump vec4 tmpvar_43;
					  tmpvar_43.w = 1.0;
					  tmpvar_43.xyz = normalWorld_39;
					  mediump vec3 x_44;
					  x_44.x = dot (unity_SHAr, tmpvar_43);
					  x_44.y = dot (unity_SHAg, tmpvar_43);
					  x_44.z = dot (unity_SHAb, tmpvar_43);
					  tmpvar_42 = max (((1.055 * 
					    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_44)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  mediump vec4 hdr_45;
					  hdr_45 = tmpvar_3;
					  mediump vec4 tmpvar_46;
					  tmpvar_46.xyz = (I_38 - (2.0 * (
					    dot (Normal_34, I_38)
					   * Normal_34)));
					  tmpvar_46.w = ((tmpvar_35 * (1.7 - 
					    (0.7 * tmpvar_35)
					  )) * 6.0);
					  lowp vec4 tmpvar_47;
					  tmpvar_47 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_46.xyz, tmpvar_46.w);
					  mediump vec4 tmpvar_48;
					  tmpvar_48 = tmpvar_47;
					  tmpvar_40 = ((hdr_45.x * (
					    (hdr_45.w * (tmpvar_48.w - 1.0))
					   + 1.0)) * tmpvar_48.xyz);
					  tmpvar_4 = tmpvar_41;
					  lowp vec3 tmpvar_49;
					  mediump vec4 c_50;
					  highp vec3 tmpvar_51;
					  tmpvar_51 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_52;
					  mediump vec3 albedo_53;
					  albedo_53 = tmpvar_13;
					  mediump vec3 tmpvar_54;
					  tmpvar_54 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_53, vec3(_Metallic));
					  mediump float tmpvar_55;
					  tmpvar_55 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_52 = (albedo_53 * tmpvar_55);
					  tmpvar_49 = tmpvar_52;
					  mediump vec3 diffColor_56;
					  diffColor_56 = tmpvar_49;
					  mediump float alpha_57;
					  alpha_57 = tmpvar_15;
					  tmpvar_49 = diffColor_56;
					  mediump vec3 diffColor_58;
					  diffColor_58 = tmpvar_49;
					  mediump vec3 color_59;
					  mediump float surfaceReduction_60;
					  highp float specularTerm_61;
					  highp float a2_62;
					  mediump float roughness_63;
					  mediump float perceptualRoughness_64;
					  highp vec3 tmpvar_65;
					  highp vec3 inVec_66;
					  inVec_66 = (tmpvar_5 + tmpvar_11);
					  tmpvar_65 = (inVec_66 * inversesqrt(max (0.001, 
					    dot (inVec_66, inVec_66)
					  )));
					  mediump float tmpvar_67;
					  highp float tmpvar_68;
					  tmpvar_68 = clamp (dot (tmpvar_51, tmpvar_5), 0.0, 1.0);
					  tmpvar_67 = tmpvar_68;
					  highp float tmpvar_69;
					  tmpvar_69 = clamp (dot (tmpvar_51, tmpvar_65), 0.0, 1.0);
					  mediump float tmpvar_70;
					  highp float tmpvar_71;
					  tmpvar_71 = clamp (dot (tmpvar_51, tmpvar_11), 0.0, 1.0);
					  tmpvar_70 = tmpvar_71;
					  highp float tmpvar_72;
					  highp float smoothness_73;
					  smoothness_73 = _Glossiness;
					  tmpvar_72 = (1.0 - smoothness_73);
					  perceptualRoughness_64 = tmpvar_72;
					  highp float tmpvar_74;
					  highp float perceptualRoughness_75;
					  perceptualRoughness_75 = perceptualRoughness_64;
					  tmpvar_74 = (perceptualRoughness_75 * perceptualRoughness_75);
					  roughness_63 = tmpvar_74;
					  mediump float tmpvar_76;
					  tmpvar_76 = (roughness_63 * roughness_63);
					  a2_62 = tmpvar_76;
					  specularTerm_61 = ((roughness_63 / (
					    (max (0.32, clamp (dot (tmpvar_5, tmpvar_65), 0.0, 1.0)) * (1.5 + roughness_63))
					   * 
					    (((tmpvar_69 * tmpvar_69) * (a2_62 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_77;
					  tmpvar_77 = clamp (specularTerm_61, 0.0, 100.0);
					  specularTerm_61 = tmpvar_77;
					  surfaceReduction_60 = (1.0 - ((roughness_63 * perceptualRoughness_64) * 0.28));
					  mediump float x_78;
					  x_78 = (1.0 - tmpvar_70);
					  mediump vec3 tmpvar_79;
					  tmpvar_79 = mix (tmpvar_54, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_55)
					  ), 0.0, 1.0)), vec3(((x_78 * x_78) * (x_78 * x_78))));
					  highp vec3 tmpvar_80;
					  tmpvar_80 = (((
					    ((diffColor_58 + (tmpvar_77 * tmpvar_54)) * tmpvar_41)
					   * tmpvar_67) + (tmpvar_42 * diffColor_58)) + ((surfaceReduction_60 * tmpvar_40) * tmpvar_79));
					  color_59 = tmpvar_80;
					  mediump vec4 tmpvar_81;
					  tmpvar_81.w = 1.0;
					  tmpvar_81.xyz = color_59;
					  c_50.xyz = tmpvar_81.xyz;
					  c_50.w = alpha_57;
					  c_6 = c_50;
					  c_6.xyz = (c_6.xyz + tmpvar_14);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					lowp vec3 u_xlat10_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					float u_xlat10;
					lowp float u_xlat10_10;
					mediump vec3 u_xlat16_11;
					float u_xlat12;
					mediump float u_xlat16_12;
					float u_xlat30;
					float u_xlat32;
					mediump float u_xlat16_35;
					mediump float u_xlat16_37;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.z = (-_Glossiness) + 1.0;
					    u_xlat16_1.x = (-u_xlat2.z) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2.z;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat3.xyz;
					    u_xlat16_11.x = dot((-u_xlat4.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;
					    u_xlat16_11.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_11.xxx) + (-u_xlat4.xyz);
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_1.x);
					    u_xlat16_5.x = u_xlat10_1.w + -1.0;
					    u_xlat16_5.x = unity_SpecCube0_HDR.w * u_xlat16_5.x + 1.0;
					    u_xlat16_5.x = u_xlat16_5.x * unity_SpecCube0_HDR.x;
					    u_xlat16_5.xyz = u_xlat10_1.xyz * u_xlat16_5.xxx;
					    u_xlat30 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat6.xyz = vec3(u_xlat30) * vs_TEXCOORD1.xyz;
					    u_xlat30 = dot(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat12 = u_xlat30;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat4.xyz = u_xlat6.xyz * (-vec3(u_xlat30)) + u_xlat4.xyz;
					    u_xlat30 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat32 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat2.x = u_xlat32 * u_xlat32;
					    u_xlat2.x = texture(unity_NHxRoughness, u_xlat2.xz).x;
					    u_xlat2.x = u_xlat2.x * 16.0;
					    u_xlat16_35 = (-u_xlat12) + 1.0;
					    u_xlat16_12 = u_xlat16_35 * u_xlat16_35;
					    u_xlat16_12 = u_xlat16_35 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_35 * u_xlat16_12;
					    u_xlat10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_6.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = u_xlat10_4.xyz + (-u_xlat10_6.xyz);
					    u_xlat4.xyz = vec3(_DayWeight) * u_xlat16_4.xyz + u_xlat10_6.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat16_7.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_35 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_37 = (-u_xlat16_35) + _Glossiness;
					    u_xlat16_8.xyz = u_xlat4.xyz * vec3(u_xlat16_35);
					    u_xlat16_35 = u_xlat16_37 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_35);
					    u_xlat16_9.xyz = vec3(u_xlat16_12) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat2.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_9.xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_8.xyz + u_xlat16_5.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat10 = (-u_xlat0.x) + u_xlat10;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat10 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat10_10 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_35 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_35 = u_xlat10_10 * u_xlat16_35 + _LightShadowData.x;
					    u_xlat16_37 = (-u_xlat16_35) + 1.0;
					    u_xlat16_35 = u_xlat0.x * u_xlat16_37 + u_xlat16_35;
					    u_xlat16_8.xyz = vec3(u_xlat16_35) * _LightColor0.xyz;
					    u_xlat16_8.xyz = vec3(u_xlat30) * u_xlat16_8.xyz;
					    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz + u_xlat16_5.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat30 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat16_5.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					mediump vec3 u_xlat16_12;
					mediump float u_xlat16_18;
					float u_xlat24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_28;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_3.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_2.xyz + (-u_xlat10_3.xyz);
					    u_xlat2.xyz = vec3(_DayWeight) * u_xlat16_2.xyz + u_xlat10_3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat16_1.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat3.xyz;
					    u_xlat16_25 = (-u_xlat16_25) + _Glossiness;
					    u_xlat16_25 = u_xlat16_25 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + vec3(u_xlat16_25);
					    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat10_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_25 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_25 = u_xlat10_0.x * u_xlat16_25 + _LightShadowData.x;
					    u_xlat16_28 = (-u_xlat16_25) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat8.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat0.x * u_xlat16_28 + u_xlat16_25;
					    u_xlat16_7.xyz = vec3(u_xlat16_25) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat8.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_26 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_26 * u_xlat16_26 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_3;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat16_10 = u_xlat16_26 * u_xlat16_26;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_10 + -1.0;
					    u_xlat2.x = u_xlat2.x * u_xlat16_18 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat2.x;
					    u_xlat24 = u_xlat16_10 / u_xlat24;
					    u_xlat16_25 = u_xlat16_26 * u_xlat16_10;
					    u_xlat16_25 = (-u_xlat16_25) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat2.xyz = u_xlat16_7.xyz * u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat3.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = (-u_xlat3.x) + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat16_6.xyz;
					    u_xlat16_4.x = (-u_xlat16_26) * 0.699999988 + 1.70000005;
					    u_xlat16_4.x = u_xlat16_26 * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * 6.0;
					    u_xlat16_12.x = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_12.x = u_xlat16_12.x + u_xlat16_12.x;
					    u_xlat16_12.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_12.xxx) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_12.xyz, u_xlat16_4.x);
					    u_xlat16_4.x = u_xlat10_0.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_0.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat2.xyz;
					    u_xlat10_2.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.xyz = u_xlat10_2.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					mediump vec3 u_xlat16_12;
					mediump float u_xlat16_18;
					float u_xlat24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_28;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_3.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_2.xyz + (-u_xlat10_3.xyz);
					    u_xlat2.xyz = vec3(_DayWeight) * u_xlat16_2.xyz + u_xlat10_3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat16_1.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat3.xyz;
					    u_xlat16_25 = (-u_xlat16_25) + _Glossiness;
					    u_xlat16_25 = u_xlat16_25 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + vec3(u_xlat16_25);
					    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat10_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_25 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_25 = u_xlat10_0.x * u_xlat16_25 + _LightShadowData.x;
					    u_xlat16_28 = (-u_xlat16_25) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat8.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat0.x * u_xlat16_28 + u_xlat16_25;
					    u_xlat16_7.xyz = vec3(u_xlat16_25) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat8.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_26 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_26 * u_xlat16_26 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_3;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat16_10 = u_xlat16_26 * u_xlat16_26;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_10 + -1.0;
					    u_xlat2.x = u_xlat2.x * u_xlat16_18 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat2.x;
					    u_xlat24 = u_xlat16_10 / u_xlat24;
					    u_xlat16_25 = u_xlat16_26 * u_xlat16_10;
					    u_xlat16_25 = (-u_xlat16_25) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat2.xyz = u_xlat16_7.xyz * u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat3.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = (-u_xlat3.x) + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat16_6.xyz;
					    u_xlat16_4.x = (-u_xlat16_26) * 0.699999988 + 1.70000005;
					    u_xlat16_4.x = u_xlat16_26 * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * 6.0;
					    u_xlat16_12.x = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_12.x = u_xlat16_12.x + u_xlat16_12.x;
					    u_xlat16_12.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_12.xxx) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_12.xyz, u_xlat16_4.x);
					    u_xlat16_4.x = u_xlat10_0.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_0.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat2.xyz;
					    u_xlat10_2.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.xyz = u_xlat10_2.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					  xlv_TEXCOORD6 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp float atten_7;
					  lowp vec3 lightDir_8;
					  highp vec4 tmpvar_9;
					  mediump vec3 tmpvar_10;
					  tmpvar_10 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_11 = normalize(tmpvar_12);
					  tmpvar_9 = xlv_COLOR0;
					  lowp vec3 tmpvar_13;
					  mediump vec3 tmpvar_14;
					  lowp float tmpvar_15;
					  highp vec4 emissionSample_16;
					  highp vec4 diffuseSample_17;
					  highp vec4 nightSample_18;
					  highp vec4 daySample_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_19 = tmpvar_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_18 = tmpvar_21;
					  diffuseSample_17 = (mix (nightSample_18, daySample_19, vec4(_DayWeight)) * _Color);
					  diffuseSample_17.xyz = (diffuseSample_17.xyz * tmpvar_9.xyz);
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_16 = tmpvar_22;
					  highp vec3 tmpvar_23;
					  tmpvar_23 = ((emissionSample_16.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_13 = diffuseSample_17.xyz;
					  tmpvar_14 = tmpvar_23;
					  tmpvar_15 = diffuseSample_17.w;
					  mediump float realtimeShadowAttenuation_24;
					  highp vec4 v_25;
					  v_25.x = unity_MatrixV[0].z;
					  v_25.y = unity_MatrixV[1].z;
					  v_25.z = unity_MatrixV[2].z;
					  v_25.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_27;
					  highp float tmpvar_28;
					  tmpvar_28 = clamp (((
					    mix (dot (tmpvar_12, v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_27 = tmpvar_28;
					  lowp float tmpvar_29;
					  highp float lightShadowDataX_30;
					  mediump float tmpvar_31;
					  tmpvar_31 = _LightShadowData.x;
					  lightShadowDataX_30 = tmpvar_31;
					  highp float tmpvar_32;
					  tmpvar_32 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_30);
					  tmpvar_29 = tmpvar_32;
					  realtimeShadowAttenuation_24 = tmpvar_29;
					  mediump float tmpvar_33;
					  tmpvar_33 = mix (realtimeShadowAttenuation_24, 1.0, tmpvar_27);
					  atten_7 = tmpvar_33;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_8;
					  tmpvar_1 = tmpvar_11;
					  tmpvar_2 = atten_7;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_34;
					  Normal_34 = xlv_TEXCOORD1;
					  mediump float tmpvar_35;
					  highp float tmpvar_36;
					  highp float smoothness_37;
					  smoothness_37 = _Glossiness;
					  tmpvar_36 = (1.0 - smoothness_37);
					  tmpvar_35 = tmpvar_36;
					  mediump vec3 I_38;
					  I_38 = -(tmpvar_1);
					  mediump vec3 tmpvar_39;
					  tmpvar_39 = (tmpvar_4 * tmpvar_2);
					  lowp vec4 tmpvar_40;
					  tmpvar_40 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
					  mediump vec4 hdr_41;
					  hdr_41 = tmpvar_3;
					  mediump vec4 tmpvar_42;
					  tmpvar_42.xyz = (I_38 - (2.0 * (
					    dot (Normal_34, I_38)
					   * Normal_34)));
					  tmpvar_42.w = ((tmpvar_35 * (1.7 - 
					    (0.7 * tmpvar_35)
					  )) * 6.0);
					  lowp vec4 tmpvar_43;
					  tmpvar_43 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42.xyz, tmpvar_42.w);
					  mediump vec4 tmpvar_44;
					  tmpvar_44 = tmpvar_43;
					  tmpvar_4 = tmpvar_39;
					  lowp vec3 tmpvar_45;
					  mediump vec4 c_46;
					  highp vec3 tmpvar_47;
					  tmpvar_47 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_48;
					  mediump vec3 albedo_49;
					  albedo_49 = tmpvar_13;
					  mediump vec3 tmpvar_50;
					  tmpvar_50 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_49, vec3(_Metallic));
					  mediump float tmpvar_51;
					  tmpvar_51 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_48 = (albedo_49 * tmpvar_51);
					  tmpvar_45 = tmpvar_48;
					  mediump vec3 diffColor_52;
					  diffColor_52 = tmpvar_45;
					  mediump float alpha_53;
					  alpha_53 = tmpvar_15;
					  tmpvar_45 = diffColor_52;
					  mediump vec3 diffColor_54;
					  diffColor_54 = tmpvar_45;
					  mediump vec3 color_55;
					  mediump vec2 rlPow4AndFresnelTerm_56;
					  mediump float tmpvar_57;
					  highp float tmpvar_58;
					  tmpvar_58 = clamp (dot (tmpvar_47, tmpvar_5), 0.0, 1.0);
					  tmpvar_57 = tmpvar_58;
					  mediump float tmpvar_59;
					  highp float tmpvar_60;
					  tmpvar_60 = clamp (dot (tmpvar_47, tmpvar_11), 0.0, 1.0);
					  tmpvar_59 = tmpvar_60;
					  highp vec2 tmpvar_61;
					  tmpvar_61.x = dot ((tmpvar_11 - (2.0 * 
					    (dot (tmpvar_47, tmpvar_11) * tmpvar_47)
					  )), tmpvar_5);
					  tmpvar_61.y = (1.0 - tmpvar_59);
					  highp vec2 tmpvar_62;
					  tmpvar_62 = ((tmpvar_61 * tmpvar_61) * (tmpvar_61 * tmpvar_61));
					  rlPow4AndFresnelTerm_56 = tmpvar_62;
					  mediump float tmpvar_63;
					  tmpvar_63 = rlPow4AndFresnelTerm_56.x;
					  mediump float specular_64;
					  highp float smoothness_65;
					  smoothness_65 = _Glossiness;
					  highp vec2 tmpvar_66;
					  tmpvar_66.x = tmpvar_63;
					  tmpvar_66.y = (1.0 - smoothness_65);
					  highp float tmpvar_67;
					  tmpvar_67 = (texture2D (unity_NHxRoughness, tmpvar_66).x * 16.0);
					  specular_64 = tmpvar_67;
					  color_55 = ((diffColor_54 + (specular_64 * tmpvar_50)) * (tmpvar_39 * tmpvar_57));
					  color_55 = (color_55 + ((
					    pow (((unity_DynamicLightmap_HDR.x * tmpvar_40.w) * tmpvar_40.xyz), unity_DynamicLightmap_HDR.yyy)
					   * diffColor_54) + (
					    ((hdr_41.x * ((hdr_41.w * 
					      (tmpvar_44.w - 1.0)
					    ) + 1.0)) * tmpvar_44.xyz)
					   * 
					    mix (tmpvar_50, vec3(clamp ((_Glossiness + (1.0 - tmpvar_51)), 0.0, 1.0)), rlPow4AndFresnelTerm_56.yyy)
					  )));
					  mediump vec4 tmpvar_68;
					  tmpvar_68.w = 1.0;
					  tmpvar_68.xyz = color_55;
					  c_46.xyz = tmpvar_68.xyz;
					  c_46.w = alpha_53;
					  c_6 = c_46;
					  c_6.xyz = (c_6.xyz + tmpvar_14);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					  xlv_TEXCOORD6 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp float atten_7;
					  lowp vec3 lightDir_8;
					  highp vec4 tmpvar_9;
					  mediump vec3 tmpvar_10;
					  tmpvar_10 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_11 = normalize(tmpvar_12);
					  tmpvar_9 = xlv_COLOR0;
					  lowp vec3 tmpvar_13;
					  mediump vec3 tmpvar_14;
					  lowp float tmpvar_15;
					  highp vec4 emissionSample_16;
					  highp vec4 diffuseSample_17;
					  highp vec4 nightSample_18;
					  highp vec4 daySample_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_19 = tmpvar_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_18 = tmpvar_21;
					  diffuseSample_17 = (mix (nightSample_18, daySample_19, vec4(_DayWeight)) * _Color);
					  diffuseSample_17.xyz = (diffuseSample_17.xyz * tmpvar_9.xyz);
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_16 = tmpvar_22;
					  highp vec3 tmpvar_23;
					  tmpvar_23 = ((emissionSample_16.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_13 = diffuseSample_17.xyz;
					  tmpvar_14 = tmpvar_23;
					  tmpvar_15 = diffuseSample_17.w;
					  mediump float realtimeShadowAttenuation_24;
					  highp vec4 v_25;
					  v_25.x = unity_MatrixV[0].z;
					  v_25.y = unity_MatrixV[1].z;
					  v_25.z = unity_MatrixV[2].z;
					  v_25.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_27;
					  highp float tmpvar_28;
					  tmpvar_28 = clamp (((
					    mix (dot (tmpvar_12, v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_27 = tmpvar_28;
					  lowp float tmpvar_29;
					  highp float lightShadowDataX_30;
					  mediump float tmpvar_31;
					  tmpvar_31 = _LightShadowData.x;
					  lightShadowDataX_30 = tmpvar_31;
					  highp float tmpvar_32;
					  tmpvar_32 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_30);
					  tmpvar_29 = tmpvar_32;
					  realtimeShadowAttenuation_24 = tmpvar_29;
					  mediump float tmpvar_33;
					  tmpvar_33 = mix (realtimeShadowAttenuation_24, 1.0, tmpvar_27);
					  atten_7 = tmpvar_33;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_8;
					  tmpvar_1 = tmpvar_11;
					  tmpvar_2 = atten_7;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_34;
					  Normal_34 = xlv_TEXCOORD1;
					  mediump float tmpvar_35;
					  highp float tmpvar_36;
					  highp float smoothness_37;
					  smoothness_37 = _Glossiness;
					  tmpvar_36 = (1.0 - smoothness_37);
					  tmpvar_35 = tmpvar_36;
					  mediump vec3 I_38;
					  I_38 = -(tmpvar_1);
					  mediump vec3 tmpvar_39;
					  mediump vec3 tmpvar_40;
					  mediump vec3 tmpvar_41;
					  tmpvar_40 = (tmpvar_4 * tmpvar_2);
					  lowp vec4 tmpvar_42;
					  tmpvar_42 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
					  tmpvar_41 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_42.w) * tmpvar_42.xyz), unity_DynamicLightmap_HDR.yyy);
					  mediump vec4 hdr_43;
					  hdr_43 = tmpvar_3;
					  mediump vec4 tmpvar_44;
					  tmpvar_44.xyz = (I_38 - (2.0 * (
					    dot (Normal_34, I_38)
					   * Normal_34)));
					  tmpvar_44.w = ((tmpvar_35 * (1.7 - 
					    (0.7 * tmpvar_35)
					  )) * 6.0);
					  lowp vec4 tmpvar_45;
					  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_44.xyz, tmpvar_44.w);
					  mediump vec4 tmpvar_46;
					  tmpvar_46 = tmpvar_45;
					  tmpvar_39 = ((hdr_43.x * (
					    (hdr_43.w * (tmpvar_46.w - 1.0))
					   + 1.0)) * tmpvar_46.xyz);
					  tmpvar_4 = tmpvar_40;
					  lowp vec3 tmpvar_47;
					  mediump vec4 c_48;
					  highp vec3 tmpvar_49;
					  tmpvar_49 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_50;
					  mediump vec3 albedo_51;
					  albedo_51 = tmpvar_13;
					  mediump vec3 tmpvar_52;
					  tmpvar_52 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_51, vec3(_Metallic));
					  mediump float tmpvar_53;
					  tmpvar_53 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_50 = (albedo_51 * tmpvar_53);
					  tmpvar_47 = tmpvar_50;
					  mediump vec3 diffColor_54;
					  diffColor_54 = tmpvar_47;
					  mediump float alpha_55;
					  alpha_55 = tmpvar_15;
					  tmpvar_47 = diffColor_54;
					  mediump vec3 diffColor_56;
					  diffColor_56 = tmpvar_47;
					  mediump vec3 color_57;
					  mediump float surfaceReduction_58;
					  highp float specularTerm_59;
					  highp float a2_60;
					  mediump float roughness_61;
					  mediump float perceptualRoughness_62;
					  highp vec3 tmpvar_63;
					  highp vec3 inVec_64;
					  inVec_64 = (tmpvar_5 + tmpvar_11);
					  tmpvar_63 = (inVec_64 * inversesqrt(max (0.001, 
					    dot (inVec_64, inVec_64)
					  )));
					  mediump float tmpvar_65;
					  highp float tmpvar_66;
					  tmpvar_66 = clamp (dot (tmpvar_49, tmpvar_5), 0.0, 1.0);
					  tmpvar_65 = tmpvar_66;
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (dot (tmpvar_49, tmpvar_63), 0.0, 1.0);
					  mediump float tmpvar_68;
					  highp float tmpvar_69;
					  tmpvar_69 = clamp (dot (tmpvar_49, tmpvar_11), 0.0, 1.0);
					  tmpvar_68 = tmpvar_69;
					  highp float tmpvar_70;
					  highp float smoothness_71;
					  smoothness_71 = _Glossiness;
					  tmpvar_70 = (1.0 - smoothness_71);
					  perceptualRoughness_62 = tmpvar_70;
					  highp float tmpvar_72;
					  highp float perceptualRoughness_73;
					  perceptualRoughness_73 = perceptualRoughness_62;
					  tmpvar_72 = (perceptualRoughness_73 * perceptualRoughness_73);
					  roughness_61 = tmpvar_72;
					  mediump float tmpvar_74;
					  tmpvar_74 = (roughness_61 * roughness_61);
					  a2_60 = tmpvar_74;
					  specularTerm_59 = ((roughness_61 / (
					    (max (0.32, clamp (dot (tmpvar_5, tmpvar_63), 0.0, 1.0)) * (1.5 + roughness_61))
					   * 
					    (((tmpvar_67 * tmpvar_67) * (a2_60 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_75;
					  tmpvar_75 = clamp (specularTerm_59, 0.0, 100.0);
					  specularTerm_59 = tmpvar_75;
					  surfaceReduction_58 = (1.0 - ((roughness_61 * perceptualRoughness_62) * 0.28));
					  mediump float x_76;
					  x_76 = (1.0 - tmpvar_68);
					  mediump vec3 tmpvar_77;
					  tmpvar_77 = mix (tmpvar_52, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_53)
					  ), 0.0, 1.0)), vec3(((x_76 * x_76) * (x_76 * x_76))));
					  highp vec3 tmpvar_78;
					  tmpvar_78 = (((
					    ((diffColor_56 + (tmpvar_75 * tmpvar_52)) * tmpvar_40)
					   * tmpvar_65) + (tmpvar_41 * diffColor_56)) + ((surfaceReduction_58 * tmpvar_39) * tmpvar_77));
					  color_57 = tmpvar_78;
					  mediump vec4 tmpvar_79;
					  tmpvar_79.w = 1.0;
					  tmpvar_79.xyz = color_57;
					  c_48.xyz = tmpvar_79.xyz;
					  c_48.w = alpha_55;
					  c_6 = c_48;
					  c_6.xyz = (c_6.xyz + tmpvar_14);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					  xlv_TEXCOORD6 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp float atten_7;
					  lowp vec3 lightDir_8;
					  highp vec4 tmpvar_9;
					  mediump vec3 tmpvar_10;
					  tmpvar_10 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_11 = normalize(tmpvar_12);
					  tmpvar_9 = xlv_COLOR0;
					  lowp vec3 tmpvar_13;
					  mediump vec3 tmpvar_14;
					  lowp float tmpvar_15;
					  highp vec4 emissionSample_16;
					  highp vec4 diffuseSample_17;
					  highp vec4 nightSample_18;
					  highp vec4 daySample_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_19 = tmpvar_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_18 = tmpvar_21;
					  diffuseSample_17 = (mix (nightSample_18, daySample_19, vec4(_DayWeight)) * _Color);
					  diffuseSample_17.xyz = (diffuseSample_17.xyz * tmpvar_9.xyz);
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_16 = tmpvar_22;
					  highp vec3 tmpvar_23;
					  tmpvar_23 = ((emissionSample_16.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_13 = diffuseSample_17.xyz;
					  tmpvar_14 = tmpvar_23;
					  tmpvar_15 = diffuseSample_17.w;
					  mediump float realtimeShadowAttenuation_24;
					  highp vec4 v_25;
					  v_25.x = unity_MatrixV[0].z;
					  v_25.y = unity_MatrixV[1].z;
					  v_25.z = unity_MatrixV[2].z;
					  v_25.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_27;
					  highp float tmpvar_28;
					  tmpvar_28 = clamp (((
					    mix (dot (tmpvar_12, v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_27 = tmpvar_28;
					  lowp float tmpvar_29;
					  highp float lightShadowDataX_30;
					  mediump float tmpvar_31;
					  tmpvar_31 = _LightShadowData.x;
					  lightShadowDataX_30 = tmpvar_31;
					  highp float tmpvar_32;
					  tmpvar_32 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_30);
					  tmpvar_29 = tmpvar_32;
					  realtimeShadowAttenuation_24 = tmpvar_29;
					  mediump float tmpvar_33;
					  tmpvar_33 = mix (realtimeShadowAttenuation_24, 1.0, tmpvar_27);
					  atten_7 = tmpvar_33;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_8;
					  tmpvar_1 = tmpvar_11;
					  tmpvar_2 = atten_7;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_34;
					  Normal_34 = xlv_TEXCOORD1;
					  mediump float tmpvar_35;
					  highp float tmpvar_36;
					  highp float smoothness_37;
					  smoothness_37 = _Glossiness;
					  tmpvar_36 = (1.0 - smoothness_37);
					  tmpvar_35 = tmpvar_36;
					  mediump vec3 I_38;
					  I_38 = -(tmpvar_1);
					  mediump vec3 tmpvar_39;
					  mediump vec3 tmpvar_40;
					  mediump vec3 tmpvar_41;
					  tmpvar_40 = (tmpvar_4 * tmpvar_2);
					  lowp vec4 tmpvar_42;
					  tmpvar_42 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
					  tmpvar_41 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_42.w) * tmpvar_42.xyz), unity_DynamicLightmap_HDR.yyy);
					  mediump vec4 hdr_43;
					  hdr_43 = tmpvar_3;
					  mediump vec4 tmpvar_44;
					  tmpvar_44.xyz = (I_38 - (2.0 * (
					    dot (Normal_34, I_38)
					   * Normal_34)));
					  tmpvar_44.w = ((tmpvar_35 * (1.7 - 
					    (0.7 * tmpvar_35)
					  )) * 6.0);
					  lowp vec4 tmpvar_45;
					  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_44.xyz, tmpvar_44.w);
					  mediump vec4 tmpvar_46;
					  tmpvar_46 = tmpvar_45;
					  tmpvar_39 = ((hdr_43.x * (
					    (hdr_43.w * (tmpvar_46.w - 1.0))
					   + 1.0)) * tmpvar_46.xyz);
					  tmpvar_4 = tmpvar_40;
					  lowp vec3 tmpvar_47;
					  mediump vec4 c_48;
					  highp vec3 tmpvar_49;
					  tmpvar_49 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_50;
					  mediump vec3 albedo_51;
					  albedo_51 = tmpvar_13;
					  mediump vec3 tmpvar_52;
					  tmpvar_52 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_51, vec3(_Metallic));
					  mediump float tmpvar_53;
					  tmpvar_53 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_50 = (albedo_51 * tmpvar_53);
					  tmpvar_47 = tmpvar_50;
					  mediump vec3 diffColor_54;
					  diffColor_54 = tmpvar_47;
					  mediump float alpha_55;
					  alpha_55 = tmpvar_15;
					  tmpvar_47 = diffColor_54;
					  mediump vec3 diffColor_56;
					  diffColor_56 = tmpvar_47;
					  mediump vec3 color_57;
					  mediump float surfaceReduction_58;
					  highp float specularTerm_59;
					  highp float a2_60;
					  mediump float roughness_61;
					  mediump float perceptualRoughness_62;
					  highp vec3 tmpvar_63;
					  highp vec3 inVec_64;
					  inVec_64 = (tmpvar_5 + tmpvar_11);
					  tmpvar_63 = (inVec_64 * inversesqrt(max (0.001, 
					    dot (inVec_64, inVec_64)
					  )));
					  mediump float tmpvar_65;
					  highp float tmpvar_66;
					  tmpvar_66 = clamp (dot (tmpvar_49, tmpvar_5), 0.0, 1.0);
					  tmpvar_65 = tmpvar_66;
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (dot (tmpvar_49, tmpvar_63), 0.0, 1.0);
					  mediump float tmpvar_68;
					  highp float tmpvar_69;
					  tmpvar_69 = clamp (dot (tmpvar_49, tmpvar_11), 0.0, 1.0);
					  tmpvar_68 = tmpvar_69;
					  highp float tmpvar_70;
					  highp float smoothness_71;
					  smoothness_71 = _Glossiness;
					  tmpvar_70 = (1.0 - smoothness_71);
					  perceptualRoughness_62 = tmpvar_70;
					  highp float tmpvar_72;
					  highp float perceptualRoughness_73;
					  perceptualRoughness_73 = perceptualRoughness_62;
					  tmpvar_72 = (perceptualRoughness_73 * perceptualRoughness_73);
					  roughness_61 = tmpvar_72;
					  mediump float tmpvar_74;
					  tmpvar_74 = (roughness_61 * roughness_61);
					  a2_60 = tmpvar_74;
					  specularTerm_59 = ((roughness_61 / (
					    (max (0.32, clamp (dot (tmpvar_5, tmpvar_63), 0.0, 1.0)) * (1.5 + roughness_61))
					   * 
					    (((tmpvar_67 * tmpvar_67) * (a2_60 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_75;
					  tmpvar_75 = clamp (specularTerm_59, 0.0, 100.0);
					  specularTerm_59 = tmpvar_75;
					  surfaceReduction_58 = (1.0 - ((roughness_61 * perceptualRoughness_62) * 0.28));
					  mediump float x_76;
					  x_76 = (1.0 - tmpvar_68);
					  mediump vec3 tmpvar_77;
					  tmpvar_77 = mix (tmpvar_52, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_53)
					  ), 0.0, 1.0)), vec3(((x_76 * x_76) * (x_76 * x_76))));
					  highp vec3 tmpvar_78;
					  tmpvar_78 = (((
					    ((diffColor_56 + (tmpvar_75 * tmpvar_52)) * tmpvar_40)
					   * tmpvar_65) + (tmpvar_41 * diffColor_56)) + ((surfaceReduction_58 * tmpvar_39) * tmpvar_77));
					  color_57 = tmpvar_78;
					  mediump vec4 tmpvar_79;
					  tmpvar_79.w = 1.0;
					  tmpvar_79.xyz = color_57;
					  c_48.xyz = tmpvar_79.xyz;
					  c_48.w = alpha_55;
					  c_6 = c_48;
					  c_6.xyz = (c_6.xyz + tmpvar_14);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					mediump float u_xlat16_9;
					mediump float u_xlat16_10;
					float u_xlat27;
					mediump float u_xlat16_28;
					float u_xlat29;
					mediump float u_xlat16_32;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat10_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat10_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_10 = (-u_xlat16_1.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat9.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_10 + u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat16_28 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
					    u_xlat16_3.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat0.xyz);
					    u_xlat4.z = (-_Glossiness) + 1.0;
					    u_xlat16_28 = (-u_xlat4.z) * 0.699999988 + 1.70000005;
					    u_xlat16_28 = u_xlat16_28 * u_xlat4.z;
					    u_xlat16_28 = u_xlat16_28 * 6.0;
					    u_xlat10_3 = textureLod(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_28);
					    u_xlat16_28 = u_xlat10_3.w + -1.0;
					    u_xlat16_28 = unity_SpecCube0_HDR.w * u_xlat16_28 + 1.0;
					    u_xlat16_28 = u_xlat16_28 * unity_SpecCube0_HDR.x;
					    u_xlat16_5.xyz = u_xlat10_3.xyz * vec3(u_xlat16_28);
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat29 = u_xlat27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat0.xyz = u_xlat2.xyz * (-vec3(u_xlat27)) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat4.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat4.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_28 = (-u_xlat29) + 1.0;
					    u_xlat16_9 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_9 = u_xlat16_28 * u_xlat16_9;
					    u_xlat16_9 = u_xlat16_28 * u_xlat16_9;
					    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_2.xyz + (-u_xlat10_4.xyz);
					    u_xlat2.xyz = vec3(_DayWeight) * u_xlat16_2.xyz + u_xlat10_4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_28 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_32 = (-u_xlat16_28) + _Glossiness;
					    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat2.xyz;
					    u_xlat16_28 = u_xlat16_32 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
					#else
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					#endif
					    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_28);
					    u_xlat16_8.xyz = vec3(u_xlat16_9) * u_xlat16_8.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_7.xyz;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_8.xyz;
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat16_28 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_8.xyz = u_xlat10_0.xyz * vec3(u_xlat16_28);
					    u_xlat16_8.xyz = log2(u_xlat16_8.xyz);
					    u_xlat16_8.xyz = u_xlat16_8.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
					    u_xlat16_5.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_5.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_5.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat27 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat27) + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					vec3 u_xlat4;
					lowp vec4 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_18;
					float u_xlat24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat10_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat10_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_9 = (-u_xlat16_1.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat8.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_9 + u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat8.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_26 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_26 * u_xlat16_26 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_3;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat16_10 = u_xlat16_26 * u_xlat16_26;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_10 + -1.0;
					    u_xlat2.x = u_xlat2.x * u_xlat16_18 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat2.x;
					    u_xlat24 = u_xlat16_10 / u_xlat24;
					    u_xlat16_25 = u_xlat16_26 * u_xlat16_10;
					    u_xlat16_25 = (-u_xlat16_25) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_2.xyz + (-u_xlat10_4.xyz);
					    u_xlat2.xyz = vec3(_DayWeight) * u_xlat16_2.xyz + u_xlat10_4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat16_5.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_6.xyz = u_xlat4.xyz * vec3(u_xlat16_29);
					    u_xlat16_29 = (-u_xlat16_29) + _Glossiness;
					    u_xlat16_29 = u_xlat16_29 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
					#else
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_29);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat16_5.xyz + u_xlat16_6.xyz;
					    u_xlat2.xyz = u_xlat16_1.xyz * u_xlat2.xyz;
					    u_xlat10_4 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat16_1.x = u_xlat10_4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_4.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat3.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat16_29 = (-u_xlat3.x) + 1.0;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-u_xlat16_26) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_26;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat16_9 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
					    u_xlat16_6.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_9)) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat10_0.w + -1.0;
					    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_25);
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz + u_xlat2.xyz;
					    u_xlat10_2.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.xyz = u_xlat10_2.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					vec3 u_xlat4;
					lowp vec4 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_18;
					float u_xlat24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat10_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat10_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_9 = (-u_xlat16_1.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat8.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_9 + u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat8.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_26 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_26 * u_xlat16_26 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_3;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat16_10 = u_xlat16_26 * u_xlat16_26;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_10 + -1.0;
					    u_xlat2.x = u_xlat2.x * u_xlat16_18 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat2.x;
					    u_xlat24 = u_xlat16_10 / u_xlat24;
					    u_xlat16_25 = u_xlat16_26 * u_xlat16_10;
					    u_xlat16_25 = (-u_xlat16_25) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_2.xyz + (-u_xlat10_4.xyz);
					    u_xlat2.xyz = vec3(_DayWeight) * u_xlat16_2.xyz + u_xlat10_4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat16_5.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_6.xyz = u_xlat4.xyz * vec3(u_xlat16_29);
					    u_xlat16_29 = (-u_xlat16_29) + _Glossiness;
					    u_xlat16_29 = u_xlat16_29 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
					#else
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_29);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat16_5.xyz + u_xlat16_6.xyz;
					    u_xlat2.xyz = u_xlat16_1.xyz * u_xlat2.xyz;
					    u_xlat10_4 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat16_1.x = u_xlat10_4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_4.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat3.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat16_29 = (-u_xlat3.x) + 1.0;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-u_xlat16_26) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_26;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat16_9 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
					    u_xlat16_6.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_9)) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat10_0.w + -1.0;
					    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_25);
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz + u_xlat2.xyz;
					    u_xlat10_2.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.xyz = u_xlat10_2.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  highp vec3 tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_10 = normalize(tmpvar_11);
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_12;
					  mediump vec3 tmpvar_13;
					  lowp float tmpvar_14;
					  highp vec4 emissionSample_15;
					  highp vec4 diffuseSample_16;
					  highp vec4 nightSample_17;
					  highp vec4 daySample_18;
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_18 = tmpvar_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_17 = tmpvar_20;
					  diffuseSample_16 = (mix (nightSample_17, daySample_18, vec4(_DayWeight)) * _Color);
					  diffuseSample_16.xyz = (diffuseSample_16.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_15 = tmpvar_21;
					  highp vec3 tmpvar_22;
					  tmpvar_22 = ((emissionSample_15.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_12 = diffuseSample_16.xyz;
					  tmpvar_13 = tmpvar_22;
					  tmpvar_14 = diffuseSample_16.w;
					  lowp float tmpvar_23;
					  highp float lightShadowDataX_24;
					  mediump float tmpvar_25;
					  tmpvar_25 = _LightShadowData.x;
					  lightShadowDataX_24 = tmpvar_25;
					  highp float tmpvar_26;
					  tmpvar_26 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_24);
					  tmpvar_23 = tmpvar_26;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_7;
					  tmpvar_1 = tmpvar_10;
					  tmpvar_2 = tmpvar_23;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = xlv_TEXCOORD1;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 tmpvar_32;
					  highp vec4 v_33;
					  v_33.x = unity_MatrixV[0].z;
					  v_33.y = unity_MatrixV[1].z;
					  v_33.z = unity_MatrixV[2].z;
					  v_33.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_34;
					  tmpvar_34 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_35;
					  highp float tmpvar_36;
					  tmpvar_36 = clamp (((
					    mix (dot (tmpvar_11, v_33.xyz), sqrt(dot (tmpvar_34, tmpvar_34)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_35 = tmpvar_36;
					  tmpvar_32 = (tmpvar_4 * mix (tmpvar_2, 1.0, tmpvar_35));
					  mediump vec4 tmpvar_37;
					  tmpvar_37 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_38;
					  color_38 = tmpvar_37;
					  mediump vec4 hdr_39;
					  hdr_39 = tmpvar_3;
					  mediump vec4 tmpvar_40;
					  tmpvar_40.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_40.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_41;
					  tmpvar_41 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_40.xyz, tmpvar_40.w);
					  mediump vec4 tmpvar_42;
					  tmpvar_42 = tmpvar_41;
					  tmpvar_4 = tmpvar_32;
					  lowp vec3 tmpvar_43;
					  mediump vec4 c_44;
					  highp vec3 tmpvar_45;
					  tmpvar_45 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_46;
					  mediump vec3 albedo_47;
					  albedo_47 = tmpvar_12;
					  mediump vec3 tmpvar_48;
					  tmpvar_48 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_47, vec3(_Metallic));
					  mediump float tmpvar_49;
					  tmpvar_49 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_46 = (albedo_47 * tmpvar_49);
					  tmpvar_43 = tmpvar_46;
					  mediump vec3 diffColor_50;
					  diffColor_50 = tmpvar_43;
					  mediump float alpha_51;
					  alpha_51 = tmpvar_14;
					  tmpvar_43 = diffColor_50;
					  mediump vec3 diffColor_52;
					  diffColor_52 = tmpvar_43;
					  mediump vec3 color_53;
					  mediump vec2 rlPow4AndFresnelTerm_54;
					  mediump float tmpvar_55;
					  highp float tmpvar_56;
					  tmpvar_56 = clamp (dot (tmpvar_45, tmpvar_5), 0.0, 1.0);
					  tmpvar_55 = tmpvar_56;
					  mediump float tmpvar_57;
					  highp float tmpvar_58;
					  tmpvar_58 = clamp (dot (tmpvar_45, tmpvar_10), 0.0, 1.0);
					  tmpvar_57 = tmpvar_58;
					  highp vec2 tmpvar_59;
					  tmpvar_59.x = dot ((tmpvar_10 - (2.0 * 
					    (dot (tmpvar_45, tmpvar_10) * tmpvar_45)
					  )), tmpvar_5);
					  tmpvar_59.y = (1.0 - tmpvar_57);
					  highp vec2 tmpvar_60;
					  tmpvar_60 = ((tmpvar_59 * tmpvar_59) * (tmpvar_59 * tmpvar_59));
					  rlPow4AndFresnelTerm_54 = tmpvar_60;
					  mediump float tmpvar_61;
					  tmpvar_61 = rlPow4AndFresnelTerm_54.x;
					  mediump float specular_62;
					  highp float smoothness_63;
					  smoothness_63 = _Glossiness;
					  highp vec2 tmpvar_64;
					  tmpvar_64.x = tmpvar_61;
					  tmpvar_64.y = (1.0 - smoothness_63);
					  highp float tmpvar_65;
					  tmpvar_65 = (texture2D (unity_NHxRoughness, tmpvar_64).x * 16.0);
					  specular_62 = tmpvar_65;
					  color_53 = ((diffColor_52 + (specular_62 * tmpvar_48)) * (tmpvar_32 * tmpvar_55));
					  color_53 = (color_53 + ((
					    (unity_Lightmap_HDR.x * color_38.xyz)
					   * diffColor_52) + (
					    ((hdr_39.x * ((hdr_39.w * 
					      (tmpvar_42.w - 1.0)
					    ) + 1.0)) * tmpvar_42.xyz)
					   * 
					    mix (tmpvar_48, vec3(clamp ((_Glossiness + (1.0 - tmpvar_49)), 0.0, 1.0)), rlPow4AndFresnelTerm_54.yyy)
					  )));
					  mediump vec4 tmpvar_66;
					  tmpvar_66.w = 1.0;
					  tmpvar_66.xyz = color_53;
					  c_44.xyz = tmpvar_66.xyz;
					  c_44.w = alpha_51;
					  c_6 = c_44;
					  c_6.xyz = (c_6.xyz + tmpvar_13);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  highp vec3 tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_10 = normalize(tmpvar_11);
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_12;
					  mediump vec3 tmpvar_13;
					  lowp float tmpvar_14;
					  highp vec4 emissionSample_15;
					  highp vec4 diffuseSample_16;
					  highp vec4 nightSample_17;
					  highp vec4 daySample_18;
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_18 = tmpvar_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_17 = tmpvar_20;
					  diffuseSample_16 = (mix (nightSample_17, daySample_18, vec4(_DayWeight)) * _Color);
					  diffuseSample_16.xyz = (diffuseSample_16.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_15 = tmpvar_21;
					  highp vec3 tmpvar_22;
					  tmpvar_22 = ((emissionSample_15.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_12 = diffuseSample_16.xyz;
					  tmpvar_13 = tmpvar_22;
					  tmpvar_14 = diffuseSample_16.w;
					  lowp float tmpvar_23;
					  highp float lightShadowDataX_24;
					  mediump float tmpvar_25;
					  tmpvar_25 = _LightShadowData.x;
					  lightShadowDataX_24 = tmpvar_25;
					  highp float tmpvar_26;
					  tmpvar_26 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_24);
					  tmpvar_23 = tmpvar_26;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_7;
					  tmpvar_1 = tmpvar_10;
					  tmpvar_2 = tmpvar_23;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = xlv_TEXCOORD1;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 tmpvar_32;
					  mediump vec3 tmpvar_33;
					  mediump vec3 tmpvar_34;
					  highp vec4 v_35;
					  v_35.x = unity_MatrixV[0].z;
					  v_35.y = unity_MatrixV[1].z;
					  v_35.z = unity_MatrixV[2].z;
					  v_35.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_36;
					  tmpvar_36 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_37;
					  highp float tmpvar_38;
					  tmpvar_38 = clamp (((
					    mix (dot (tmpvar_11, v_35.xyz), sqrt(dot (tmpvar_36, tmpvar_36)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_37 = tmpvar_38;
					  tmpvar_33 = (tmpvar_4 * mix (tmpvar_2, 1.0, tmpvar_37));
					  mediump vec4 tmpvar_39;
					  tmpvar_39 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_40;
					  color_40 = tmpvar_39;
					  tmpvar_34 = (unity_Lightmap_HDR.x * color_40.xyz);
					  mediump vec4 hdr_41;
					  hdr_41 = tmpvar_3;
					  mediump vec4 tmpvar_42;
					  tmpvar_42.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_42.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_43;
					  tmpvar_43 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42.xyz, tmpvar_42.w);
					  mediump vec4 tmpvar_44;
					  tmpvar_44 = tmpvar_43;
					  tmpvar_32 = ((hdr_41.x * (
					    (hdr_41.w * (tmpvar_44.w - 1.0))
					   + 1.0)) * tmpvar_44.xyz);
					  tmpvar_4 = tmpvar_33;
					  lowp vec3 tmpvar_45;
					  mediump vec4 c_46;
					  highp vec3 tmpvar_47;
					  tmpvar_47 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_48;
					  mediump vec3 albedo_49;
					  albedo_49 = tmpvar_12;
					  mediump vec3 tmpvar_50;
					  tmpvar_50 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_49, vec3(_Metallic));
					  mediump float tmpvar_51;
					  tmpvar_51 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_48 = (albedo_49 * tmpvar_51);
					  tmpvar_45 = tmpvar_48;
					  mediump vec3 diffColor_52;
					  diffColor_52 = tmpvar_45;
					  mediump float alpha_53;
					  alpha_53 = tmpvar_14;
					  tmpvar_45 = diffColor_52;
					  mediump vec3 diffColor_54;
					  diffColor_54 = tmpvar_45;
					  mediump vec3 color_55;
					  mediump float surfaceReduction_56;
					  highp float specularTerm_57;
					  highp float a2_58;
					  mediump float roughness_59;
					  mediump float perceptualRoughness_60;
					  highp vec3 tmpvar_61;
					  highp vec3 inVec_62;
					  inVec_62 = (tmpvar_5 + tmpvar_10);
					  tmpvar_61 = (inVec_62 * inversesqrt(max (0.001, 
					    dot (inVec_62, inVec_62)
					  )));
					  mediump float tmpvar_63;
					  highp float tmpvar_64;
					  tmpvar_64 = clamp (dot (tmpvar_47, tmpvar_5), 0.0, 1.0);
					  tmpvar_63 = tmpvar_64;
					  highp float tmpvar_65;
					  tmpvar_65 = clamp (dot (tmpvar_47, tmpvar_61), 0.0, 1.0);
					  mediump float tmpvar_66;
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (dot (tmpvar_47, tmpvar_10), 0.0, 1.0);
					  tmpvar_66 = tmpvar_67;
					  highp float tmpvar_68;
					  highp float smoothness_69;
					  smoothness_69 = _Glossiness;
					  tmpvar_68 = (1.0 - smoothness_69);
					  perceptualRoughness_60 = tmpvar_68;
					  highp float tmpvar_70;
					  highp float perceptualRoughness_71;
					  perceptualRoughness_71 = perceptualRoughness_60;
					  tmpvar_70 = (perceptualRoughness_71 * perceptualRoughness_71);
					  roughness_59 = tmpvar_70;
					  mediump float tmpvar_72;
					  tmpvar_72 = (roughness_59 * roughness_59);
					  a2_58 = tmpvar_72;
					  specularTerm_57 = ((roughness_59 / (
					    (max (0.32, clamp (dot (tmpvar_5, tmpvar_61), 0.0, 1.0)) * (1.5 + roughness_59))
					   * 
					    (((tmpvar_65 * tmpvar_65) * (a2_58 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_73;
					  tmpvar_73 = clamp (specularTerm_57, 0.0, 100.0);
					  specularTerm_57 = tmpvar_73;
					  surfaceReduction_56 = (1.0 - ((roughness_59 * perceptualRoughness_60) * 0.28));
					  mediump float x_74;
					  x_74 = (1.0 - tmpvar_66);
					  mediump vec3 tmpvar_75;
					  tmpvar_75 = mix (tmpvar_50, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_51)
					  ), 0.0, 1.0)), vec3(((x_74 * x_74) * (x_74 * x_74))));
					  highp vec3 tmpvar_76;
					  tmpvar_76 = (((
					    ((diffColor_54 + (tmpvar_73 * tmpvar_50)) * tmpvar_33)
					   * tmpvar_63) + (tmpvar_34 * diffColor_54)) + ((surfaceReduction_56 * tmpvar_32) * tmpvar_75));
					  color_55 = tmpvar_76;
					  mediump vec4 tmpvar_77;
					  tmpvar_77.w = 1.0;
					  tmpvar_77.xyz = color_55;
					  c_46.xyz = tmpvar_77.xyz;
					  c_46.w = alpha_53;
					  c_6 = c_46;
					  c_6.xyz = (c_6.xyz + tmpvar_13);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  highp vec3 tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_10 = normalize(tmpvar_11);
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_12;
					  mediump vec3 tmpvar_13;
					  lowp float tmpvar_14;
					  highp vec4 emissionSample_15;
					  highp vec4 diffuseSample_16;
					  highp vec4 nightSample_17;
					  highp vec4 daySample_18;
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_18 = tmpvar_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_17 = tmpvar_20;
					  diffuseSample_16 = (mix (nightSample_17, daySample_18, vec4(_DayWeight)) * _Color);
					  diffuseSample_16.xyz = (diffuseSample_16.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_15 = tmpvar_21;
					  highp vec3 tmpvar_22;
					  tmpvar_22 = ((emissionSample_15.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_12 = diffuseSample_16.xyz;
					  tmpvar_13 = tmpvar_22;
					  tmpvar_14 = diffuseSample_16.w;
					  lowp float tmpvar_23;
					  highp float lightShadowDataX_24;
					  mediump float tmpvar_25;
					  tmpvar_25 = _LightShadowData.x;
					  lightShadowDataX_24 = tmpvar_25;
					  highp float tmpvar_26;
					  tmpvar_26 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_24);
					  tmpvar_23 = tmpvar_26;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_7;
					  tmpvar_1 = tmpvar_10;
					  tmpvar_2 = tmpvar_23;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = xlv_TEXCOORD1;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 tmpvar_32;
					  mediump vec3 tmpvar_33;
					  mediump vec3 tmpvar_34;
					  highp vec4 v_35;
					  v_35.x = unity_MatrixV[0].z;
					  v_35.y = unity_MatrixV[1].z;
					  v_35.z = unity_MatrixV[2].z;
					  v_35.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_36;
					  tmpvar_36 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_37;
					  highp float tmpvar_38;
					  tmpvar_38 = clamp (((
					    mix (dot (tmpvar_11, v_35.xyz), sqrt(dot (tmpvar_36, tmpvar_36)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_37 = tmpvar_38;
					  tmpvar_33 = (tmpvar_4 * mix (tmpvar_2, 1.0, tmpvar_37));
					  mediump vec4 tmpvar_39;
					  tmpvar_39 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_40;
					  color_40 = tmpvar_39;
					  tmpvar_34 = (unity_Lightmap_HDR.x * color_40.xyz);
					  mediump vec4 hdr_41;
					  hdr_41 = tmpvar_3;
					  mediump vec4 tmpvar_42;
					  tmpvar_42.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_42.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_43;
					  tmpvar_43 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42.xyz, tmpvar_42.w);
					  mediump vec4 tmpvar_44;
					  tmpvar_44 = tmpvar_43;
					  tmpvar_32 = ((hdr_41.x * (
					    (hdr_41.w * (tmpvar_44.w - 1.0))
					   + 1.0)) * tmpvar_44.xyz);
					  tmpvar_4 = tmpvar_33;
					  lowp vec3 tmpvar_45;
					  mediump vec4 c_46;
					  highp vec3 tmpvar_47;
					  tmpvar_47 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_48;
					  mediump vec3 albedo_49;
					  albedo_49 = tmpvar_12;
					  mediump vec3 tmpvar_50;
					  tmpvar_50 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_49, vec3(_Metallic));
					  mediump float tmpvar_51;
					  tmpvar_51 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_48 = (albedo_49 * tmpvar_51);
					  tmpvar_45 = tmpvar_48;
					  mediump vec3 diffColor_52;
					  diffColor_52 = tmpvar_45;
					  mediump float alpha_53;
					  alpha_53 = tmpvar_14;
					  tmpvar_45 = diffColor_52;
					  mediump vec3 diffColor_54;
					  diffColor_54 = tmpvar_45;
					  mediump vec3 color_55;
					  mediump float surfaceReduction_56;
					  highp float specularTerm_57;
					  highp float a2_58;
					  mediump float roughness_59;
					  mediump float perceptualRoughness_60;
					  highp vec3 tmpvar_61;
					  highp vec3 inVec_62;
					  inVec_62 = (tmpvar_5 + tmpvar_10);
					  tmpvar_61 = (inVec_62 * inversesqrt(max (0.001, 
					    dot (inVec_62, inVec_62)
					  )));
					  mediump float tmpvar_63;
					  highp float tmpvar_64;
					  tmpvar_64 = clamp (dot (tmpvar_47, tmpvar_5), 0.0, 1.0);
					  tmpvar_63 = tmpvar_64;
					  highp float tmpvar_65;
					  tmpvar_65 = clamp (dot (tmpvar_47, tmpvar_61), 0.0, 1.0);
					  mediump float tmpvar_66;
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (dot (tmpvar_47, tmpvar_10), 0.0, 1.0);
					  tmpvar_66 = tmpvar_67;
					  highp float tmpvar_68;
					  highp float smoothness_69;
					  smoothness_69 = _Glossiness;
					  tmpvar_68 = (1.0 - smoothness_69);
					  perceptualRoughness_60 = tmpvar_68;
					  highp float tmpvar_70;
					  highp float perceptualRoughness_71;
					  perceptualRoughness_71 = perceptualRoughness_60;
					  tmpvar_70 = (perceptualRoughness_71 * perceptualRoughness_71);
					  roughness_59 = tmpvar_70;
					  mediump float tmpvar_72;
					  tmpvar_72 = (roughness_59 * roughness_59);
					  a2_58 = tmpvar_72;
					  specularTerm_57 = ((roughness_59 / (
					    (max (0.32, clamp (dot (tmpvar_5, tmpvar_61), 0.0, 1.0)) * (1.5 + roughness_59))
					   * 
					    (((tmpvar_65 * tmpvar_65) * (a2_58 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_73;
					  tmpvar_73 = clamp (specularTerm_57, 0.0, 100.0);
					  specularTerm_57 = tmpvar_73;
					  surfaceReduction_56 = (1.0 - ((roughness_59 * perceptualRoughness_60) * 0.28));
					  mediump float x_74;
					  x_74 = (1.0 - tmpvar_66);
					  mediump vec3 tmpvar_75;
					  tmpvar_75 = mix (tmpvar_50, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_51)
					  ), 0.0, 1.0)), vec3(((x_74 * x_74) * (x_74 * x_74))));
					  highp vec3 tmpvar_76;
					  tmpvar_76 = (((
					    ((diffColor_54 + (tmpvar_73 * tmpvar_50)) * tmpvar_33)
					   * tmpvar_63) + (tmpvar_34 * diffColor_54)) + ((surfaceReduction_56 * tmpvar_32) * tmpvar_75));
					  color_55 = tmpvar_76;
					  mediump vec4 tmpvar_77;
					  tmpvar_77.w = 1.0;
					  tmpvar_77.xyz = color_55;
					  c_46.xyz = tmpvar_77.xyz;
					  c_46.w = alpha_53;
					  c_6 = c_46;
					  c_6.xyz = (c_6.xyz + tmpvar_13);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					lowp vec3 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat9;
					mediump vec3 u_xlat16_10;
					float u_xlat18;
					mediump float u_xlat16_18;
					lowp float u_xlat10_18;
					float u_xlat27;
					float u_xlat29;
					mediump float u_xlat16_31;
					mediump float u_xlat16_33;
					void main()
					{
					    u_xlat0.z = (-_Glossiness) + 1.0;
					    u_xlat16_1 = (-u_xlat0.z) * 0.699999988 + 1.70000005;
					    u_xlat16_1 = u_xlat0.z * u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * 6.0;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat3.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat16_10.x = dot((-u_xlat3.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_10.x = u_xlat16_10.x + u_xlat16_10.x;
					    u_xlat16_10.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_10.xxx) + (-u_xlat3.xyz);
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_1);
					    u_xlat16_4.x = u_xlat10_1.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_1.xyz * u_xlat16_4.xxx;
					    u_xlat9 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat5.xyz = vec3(u_xlat9) * vs_TEXCOORD1.xyz;
					    u_xlat9 = dot(u_xlat3.xyz, u_xlat5.xyz);
					    u_xlat27 = u_xlat9;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat3.xyz = u_xlat5.xyz * (-vec3(u_xlat9)) + u_xlat3.xyz;
					    u_xlat9 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat29 = u_xlat29 * u_xlat29;
					    u_xlat0.x = u_xlat29 * u_xlat29;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_31 = (-u_xlat27) + 1.0;
					    u_xlat16_18 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_18 = u_xlat16_31 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_31 * u_xlat16_18;
					    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_5.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_3.xyz + (-u_xlat10_5.xyz);
					    u_xlat3.xyz = vec3(_DayWeight) * u_xlat16_3.xyz + u_xlat10_5.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_33 = (-u_xlat16_31) + _Glossiness;
					    u_xlat16_7.xyz = u_xlat3.xyz * vec3(u_xlat16_31);
					    u_xlat16_31 = u_xlat16_33 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_31);
					    u_xlat16_8.xyz = vec3(u_xlat16_18) * u_xlat16_8.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_7.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz;
					    u_xlat16_0.xzw = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_8.xyz = u_xlat16_0.xzw * unity_Lightmap_HDR.xxx;
					    u_xlat16_4.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_4.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = (-u_xlat0.x) + u_xlat18;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    vec3 txVec0 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
					    u_xlat10_18 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_31 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_31 = u_xlat10_18 * u_xlat16_31 + _LightShadowData.x;
					    u_xlat16_33 = (-u_xlat16_31) + 1.0;
					    u_xlat16_31 = u_xlat0.x * u_xlat16_33 + u_xlat16_31;
					    u_xlat16_7.xyz = vec3(u_xlat16_31) * _LightColor0.xyz;
					    u_xlat16_7.xyz = vec3(u_xlat9) * u_xlat16_7.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz + u_xlat16_4.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat27 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat27) + u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat8.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    vec3 txVec0 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
					    u_xlat10_1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_2.x = u_xlat10_1.x * u_xlat16_2.x + _LightShadowData.x;
					    u_xlat16_10 = (-u_xlat16_2.x) + 1.0;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_10 + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat8.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_25 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_25 * u_xlat16_25 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_3;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat16_9 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_17 = u_xlat16_9 * u_xlat16_9 + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_17 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat16_9 / u_xlat24;
					    u_xlat16_26 = u_xlat16_25 * u_xlat16_9;
					    u_xlat16_26 = (-u_xlat16_26) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz + (-u_xlat10_4.xyz);
					    u_xlat1.xyz = vec3(_DayWeight) * u_xlat16_1.xyz + u_xlat10_4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    u_xlat16_5.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_6.xyz = u_xlat4.xyz * vec3(u_xlat16_29);
					    u_xlat16_29 = (-u_xlat16_29) + _Glossiness;
					    u_xlat16_29 = u_xlat16_29 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
					#else
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_29);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat16_5.xyz + u_xlat16_6.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz * u_xlat1.xyz;
					    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_4.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat3.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat16_29 = (-u_xlat3.x) + 1.0;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_2.xyz;
					    u_xlat16_2.x = (-u_xlat16_25) * 0.699999988 + 1.70000005;
					    u_xlat16_2.x = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * 6.0;
					    u_xlat16_10 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_10 = u_xlat16_10 + u_xlat16_10;
					    u_xlat16_6.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_10)) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat10_0.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_26);
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat8.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    vec3 txVec0 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
					    u_xlat10_1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_2.x = u_xlat10_1.x * u_xlat16_2.x + _LightShadowData.x;
					    u_xlat16_10 = (-u_xlat16_2.x) + 1.0;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_10 + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat8.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_25 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_25 * u_xlat16_25 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_3;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat16_9 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_17 = u_xlat16_9 * u_xlat16_9 + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_17 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat16_9 / u_xlat24;
					    u_xlat16_26 = u_xlat16_25 * u_xlat16_9;
					    u_xlat16_26 = (-u_xlat16_26) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz + (-u_xlat10_4.xyz);
					    u_xlat1.xyz = vec3(_DayWeight) * u_xlat16_1.xyz + u_xlat10_4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    u_xlat16_5.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_6.xyz = u_xlat4.xyz * vec3(u_xlat16_29);
					    u_xlat16_29 = (-u_xlat16_29) + _Glossiness;
					    u_xlat16_29 = u_xlat16_29 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
					#else
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_29);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat16_5.xyz + u_xlat16_6.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz * u_xlat1.xyz;
					    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_4.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat3.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat16_29 = (-u_xlat3.x) + 1.0;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_2.xyz;
					    u_xlat16_2.x = (-u_xlat16_25) * 0.699999988 + 1.70000005;
					    u_xlat16_2.x = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * 6.0;
					    u_xlat16_10 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_10 = u_xlat16_10 + u_xlat16_10;
					    u_xlat16_6.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_10)) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat10_0.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_26);
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform mediump sampler2D unity_Lightmap;
					uniform sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  highp vec3 tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_10 = normalize(tmpvar_11);
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_12;
					  mediump vec3 tmpvar_13;
					  lowp float tmpvar_14;
					  highp vec4 emissionSample_15;
					  highp vec4 diffuseSample_16;
					  highp vec4 nightSample_17;
					  highp vec4 daySample_18;
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_18 = tmpvar_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_17 = tmpvar_20;
					  diffuseSample_16 = (mix (nightSample_17, daySample_18, vec4(_DayWeight)) * _Color);
					  diffuseSample_16.xyz = (diffuseSample_16.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_15 = tmpvar_21;
					  highp vec3 tmpvar_22;
					  tmpvar_22 = ((emissionSample_15.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_12 = diffuseSample_16.xyz;
					  tmpvar_13 = tmpvar_22;
					  tmpvar_14 = diffuseSample_16.w;
					  lowp float tmpvar_23;
					  highp float lightShadowDataX_24;
					  mediump float tmpvar_25;
					  tmpvar_25 = _LightShadowData.x;
					  lightShadowDataX_24 = tmpvar_25;
					  highp float tmpvar_26;
					  tmpvar_26 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_24);
					  tmpvar_23 = tmpvar_26;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_7;
					  tmpvar_1 = tmpvar_10;
					  tmpvar_2 = tmpvar_23;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = xlv_TEXCOORD1;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 tmpvar_32;
					  mediump vec3 tmpvar_33;
					  highp vec4 v_34;
					  v_34.x = unity_MatrixV[0].z;
					  v_34.y = unity_MatrixV[1].z;
					  v_34.z = unity_MatrixV[2].z;
					  v_34.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_35;
					  tmpvar_35 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_36;
					  highp float tmpvar_37;
					  tmpvar_37 = clamp (((
					    mix (dot (tmpvar_11, v_34.xyz), sqrt(dot (tmpvar_35, tmpvar_35)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_36 = tmpvar_37;
					  tmpvar_32 = (tmpvar_4 * mix (tmpvar_2, 1.0, tmpvar_36));
					  mediump vec4 tmpvar_38;
					  tmpvar_38 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_39;
					  color_39 = tmpvar_38;
					  tmpvar_33 = (unity_Lightmap_HDR.x * color_39.xyz);
					  lowp vec4 tmpvar_40;
					  tmpvar_40 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
					  tmpvar_33 = (tmpvar_33 + pow ((
					    (unity_DynamicLightmap_HDR.x * tmpvar_40.w)
					   * tmpvar_40.xyz), unity_DynamicLightmap_HDR.yyy));
					  mediump vec4 hdr_41;
					  hdr_41 = tmpvar_3;
					  mediump vec4 tmpvar_42;
					  tmpvar_42.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_42.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_43;
					  tmpvar_43 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42.xyz, tmpvar_42.w);
					  mediump vec4 tmpvar_44;
					  tmpvar_44 = tmpvar_43;
					  tmpvar_4 = tmpvar_32;
					  lowp vec3 tmpvar_45;
					  mediump vec4 c_46;
					  highp vec3 tmpvar_47;
					  tmpvar_47 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_48;
					  mediump vec3 albedo_49;
					  albedo_49 = tmpvar_12;
					  mediump vec3 tmpvar_50;
					  tmpvar_50 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_49, vec3(_Metallic));
					  mediump float tmpvar_51;
					  tmpvar_51 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_48 = (albedo_49 * tmpvar_51);
					  tmpvar_45 = tmpvar_48;
					  mediump vec3 diffColor_52;
					  diffColor_52 = tmpvar_45;
					  mediump float alpha_53;
					  alpha_53 = tmpvar_14;
					  tmpvar_45 = diffColor_52;
					  mediump vec3 diffColor_54;
					  diffColor_54 = tmpvar_45;
					  mediump vec3 color_55;
					  mediump vec2 rlPow4AndFresnelTerm_56;
					  mediump float tmpvar_57;
					  highp float tmpvar_58;
					  tmpvar_58 = clamp (dot (tmpvar_47, tmpvar_5), 0.0, 1.0);
					  tmpvar_57 = tmpvar_58;
					  mediump float tmpvar_59;
					  highp float tmpvar_60;
					  tmpvar_60 = clamp (dot (tmpvar_47, tmpvar_10), 0.0, 1.0);
					  tmpvar_59 = tmpvar_60;
					  highp vec2 tmpvar_61;
					  tmpvar_61.x = dot ((tmpvar_10 - (2.0 * 
					    (dot (tmpvar_47, tmpvar_10) * tmpvar_47)
					  )), tmpvar_5);
					  tmpvar_61.y = (1.0 - tmpvar_59);
					  highp vec2 tmpvar_62;
					  tmpvar_62 = ((tmpvar_61 * tmpvar_61) * (tmpvar_61 * tmpvar_61));
					  rlPow4AndFresnelTerm_56 = tmpvar_62;
					  mediump float tmpvar_63;
					  tmpvar_63 = rlPow4AndFresnelTerm_56.x;
					  mediump float specular_64;
					  highp float smoothness_65;
					  smoothness_65 = _Glossiness;
					  highp vec2 tmpvar_66;
					  tmpvar_66.x = tmpvar_63;
					  tmpvar_66.y = (1.0 - smoothness_65);
					  highp float tmpvar_67;
					  tmpvar_67 = (texture2D (unity_NHxRoughness, tmpvar_66).x * 16.0);
					  specular_64 = tmpvar_67;
					  color_55 = ((diffColor_54 + (specular_64 * tmpvar_50)) * (tmpvar_32 * tmpvar_57));
					  color_55 = (color_55 + ((tmpvar_33 * diffColor_54) + (
					    ((hdr_41.x * ((hdr_41.w * 
					      (tmpvar_44.w - 1.0)
					    ) + 1.0)) * tmpvar_44.xyz)
					   * 
					    mix (tmpvar_50, vec3(clamp ((_Glossiness + (1.0 - tmpvar_51)), 0.0, 1.0)), rlPow4AndFresnelTerm_56.yyy)
					  )));
					  mediump vec4 tmpvar_68;
					  tmpvar_68.w = 1.0;
					  tmpvar_68.xyz = color_55;
					  c_46.xyz = tmpvar_68.xyz;
					  c_46.w = alpha_53;
					  c_6 = c_46;
					  c_6.xyz = (c_6.xyz + tmpvar_13);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform mediump sampler2D unity_Lightmap;
					uniform sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  highp vec3 tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_10 = normalize(tmpvar_11);
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_12;
					  mediump vec3 tmpvar_13;
					  lowp float tmpvar_14;
					  highp vec4 emissionSample_15;
					  highp vec4 diffuseSample_16;
					  highp vec4 nightSample_17;
					  highp vec4 daySample_18;
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_18 = tmpvar_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_17 = tmpvar_20;
					  diffuseSample_16 = (mix (nightSample_17, daySample_18, vec4(_DayWeight)) * _Color);
					  diffuseSample_16.xyz = (diffuseSample_16.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_15 = tmpvar_21;
					  highp vec3 tmpvar_22;
					  tmpvar_22 = ((emissionSample_15.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_12 = diffuseSample_16.xyz;
					  tmpvar_13 = tmpvar_22;
					  tmpvar_14 = diffuseSample_16.w;
					  lowp float tmpvar_23;
					  highp float lightShadowDataX_24;
					  mediump float tmpvar_25;
					  tmpvar_25 = _LightShadowData.x;
					  lightShadowDataX_24 = tmpvar_25;
					  highp float tmpvar_26;
					  tmpvar_26 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_24);
					  tmpvar_23 = tmpvar_26;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_7;
					  tmpvar_1 = tmpvar_10;
					  tmpvar_2 = tmpvar_23;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = xlv_TEXCOORD1;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 tmpvar_32;
					  mediump vec3 tmpvar_33;
					  mediump vec3 tmpvar_34;
					  highp vec4 v_35;
					  v_35.x = unity_MatrixV[0].z;
					  v_35.y = unity_MatrixV[1].z;
					  v_35.z = unity_MatrixV[2].z;
					  v_35.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_36;
					  tmpvar_36 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_37;
					  highp float tmpvar_38;
					  tmpvar_38 = clamp (((
					    mix (dot (tmpvar_11, v_35.xyz), sqrt(dot (tmpvar_36, tmpvar_36)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_37 = tmpvar_38;
					  tmpvar_33 = (tmpvar_4 * mix (tmpvar_2, 1.0, tmpvar_37));
					  mediump vec4 tmpvar_39;
					  tmpvar_39 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_40;
					  color_40 = tmpvar_39;
					  tmpvar_34 = (unity_Lightmap_HDR.x * color_40.xyz);
					  lowp vec4 tmpvar_41;
					  tmpvar_41 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
					  tmpvar_34 = (tmpvar_34 + pow ((
					    (unity_DynamicLightmap_HDR.x * tmpvar_41.w)
					   * tmpvar_41.xyz), unity_DynamicLightmap_HDR.yyy));
					  mediump vec4 hdr_42;
					  hdr_42 = tmpvar_3;
					  mediump vec4 tmpvar_43;
					  tmpvar_43.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_43.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_44;
					  tmpvar_44 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_43.xyz, tmpvar_43.w);
					  mediump vec4 tmpvar_45;
					  tmpvar_45 = tmpvar_44;
					  tmpvar_32 = ((hdr_42.x * (
					    (hdr_42.w * (tmpvar_45.w - 1.0))
					   + 1.0)) * tmpvar_45.xyz);
					  tmpvar_4 = tmpvar_33;
					  lowp vec3 tmpvar_46;
					  mediump vec4 c_47;
					  highp vec3 tmpvar_48;
					  tmpvar_48 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_49;
					  mediump vec3 albedo_50;
					  albedo_50 = tmpvar_12;
					  mediump vec3 tmpvar_51;
					  tmpvar_51 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_50, vec3(_Metallic));
					  mediump float tmpvar_52;
					  tmpvar_52 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_49 = (albedo_50 * tmpvar_52);
					  tmpvar_46 = tmpvar_49;
					  mediump vec3 diffColor_53;
					  diffColor_53 = tmpvar_46;
					  mediump float alpha_54;
					  alpha_54 = tmpvar_14;
					  tmpvar_46 = diffColor_53;
					  mediump vec3 diffColor_55;
					  diffColor_55 = tmpvar_46;
					  mediump vec3 color_56;
					  mediump float surfaceReduction_57;
					  highp float specularTerm_58;
					  highp float a2_59;
					  mediump float roughness_60;
					  mediump float perceptualRoughness_61;
					  highp vec3 tmpvar_62;
					  highp vec3 inVec_63;
					  inVec_63 = (tmpvar_5 + tmpvar_10);
					  tmpvar_62 = (inVec_63 * inversesqrt(max (0.001, 
					    dot (inVec_63, inVec_63)
					  )));
					  mediump float tmpvar_64;
					  highp float tmpvar_65;
					  tmpvar_65 = clamp (dot (tmpvar_48, tmpvar_5), 0.0, 1.0);
					  tmpvar_64 = tmpvar_65;
					  highp float tmpvar_66;
					  tmpvar_66 = clamp (dot (tmpvar_48, tmpvar_62), 0.0, 1.0);
					  mediump float tmpvar_67;
					  highp float tmpvar_68;
					  tmpvar_68 = clamp (dot (tmpvar_48, tmpvar_10), 0.0, 1.0);
					  tmpvar_67 = tmpvar_68;
					  highp float tmpvar_69;
					  highp float smoothness_70;
					  smoothness_70 = _Glossiness;
					  tmpvar_69 = (1.0 - smoothness_70);
					  perceptualRoughness_61 = tmpvar_69;
					  highp float tmpvar_71;
					  highp float perceptualRoughness_72;
					  perceptualRoughness_72 = perceptualRoughness_61;
					  tmpvar_71 = (perceptualRoughness_72 * perceptualRoughness_72);
					  roughness_60 = tmpvar_71;
					  mediump float tmpvar_73;
					  tmpvar_73 = (roughness_60 * roughness_60);
					  a2_59 = tmpvar_73;
					  specularTerm_58 = ((roughness_60 / (
					    (max (0.32, clamp (dot (tmpvar_5, tmpvar_62), 0.0, 1.0)) * (1.5 + roughness_60))
					   * 
					    (((tmpvar_66 * tmpvar_66) * (a2_59 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_74;
					  tmpvar_74 = clamp (specularTerm_58, 0.0, 100.0);
					  specularTerm_58 = tmpvar_74;
					  surfaceReduction_57 = (1.0 - ((roughness_60 * perceptualRoughness_61) * 0.28));
					  mediump float x_75;
					  x_75 = (1.0 - tmpvar_67);
					  mediump vec3 tmpvar_76;
					  tmpvar_76 = mix (tmpvar_51, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_52)
					  ), 0.0, 1.0)), vec3(((x_75 * x_75) * (x_75 * x_75))));
					  highp vec3 tmpvar_77;
					  tmpvar_77 = (((
					    ((diffColor_55 + (tmpvar_74 * tmpvar_51)) * tmpvar_33)
					   * tmpvar_64) + (tmpvar_34 * diffColor_55)) + ((surfaceReduction_57 * tmpvar_32) * tmpvar_76));
					  color_56 = tmpvar_77;
					  mediump vec4 tmpvar_78;
					  tmpvar_78.w = 1.0;
					  tmpvar_78.xyz = color_56;
					  c_47.xyz = tmpvar_78.xyz;
					  c_47.w = alpha_54;
					  c_6 = c_47;
					  c_6.xyz = (c_6.xyz + tmpvar_13);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform mediump sampler2D unity_Lightmap;
					uniform sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  highp vec3 tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_10 = normalize(tmpvar_11);
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_12;
					  mediump vec3 tmpvar_13;
					  lowp float tmpvar_14;
					  highp vec4 emissionSample_15;
					  highp vec4 diffuseSample_16;
					  highp vec4 nightSample_17;
					  highp vec4 daySample_18;
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_18 = tmpvar_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_17 = tmpvar_20;
					  diffuseSample_16 = (mix (nightSample_17, daySample_18, vec4(_DayWeight)) * _Color);
					  diffuseSample_16.xyz = (diffuseSample_16.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_15 = tmpvar_21;
					  highp vec3 tmpvar_22;
					  tmpvar_22 = ((emissionSample_15.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_12 = diffuseSample_16.xyz;
					  tmpvar_13 = tmpvar_22;
					  tmpvar_14 = diffuseSample_16.w;
					  lowp float tmpvar_23;
					  highp float lightShadowDataX_24;
					  mediump float tmpvar_25;
					  tmpvar_25 = _LightShadowData.x;
					  lightShadowDataX_24 = tmpvar_25;
					  highp float tmpvar_26;
					  tmpvar_26 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_24);
					  tmpvar_23 = tmpvar_26;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_7;
					  tmpvar_1 = tmpvar_10;
					  tmpvar_2 = tmpvar_23;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = xlv_TEXCOORD1;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 tmpvar_32;
					  mediump vec3 tmpvar_33;
					  mediump vec3 tmpvar_34;
					  highp vec4 v_35;
					  v_35.x = unity_MatrixV[0].z;
					  v_35.y = unity_MatrixV[1].z;
					  v_35.z = unity_MatrixV[2].z;
					  v_35.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_36;
					  tmpvar_36 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_37;
					  highp float tmpvar_38;
					  tmpvar_38 = clamp (((
					    mix (dot (tmpvar_11, v_35.xyz), sqrt(dot (tmpvar_36, tmpvar_36)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_37 = tmpvar_38;
					  tmpvar_33 = (tmpvar_4 * mix (tmpvar_2, 1.0, tmpvar_37));
					  mediump vec4 tmpvar_39;
					  tmpvar_39 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_40;
					  color_40 = tmpvar_39;
					  tmpvar_34 = (unity_Lightmap_HDR.x * color_40.xyz);
					  lowp vec4 tmpvar_41;
					  tmpvar_41 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
					  tmpvar_34 = (tmpvar_34 + pow ((
					    (unity_DynamicLightmap_HDR.x * tmpvar_41.w)
					   * tmpvar_41.xyz), unity_DynamicLightmap_HDR.yyy));
					  mediump vec4 hdr_42;
					  hdr_42 = tmpvar_3;
					  mediump vec4 tmpvar_43;
					  tmpvar_43.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_43.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_44;
					  tmpvar_44 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_43.xyz, tmpvar_43.w);
					  mediump vec4 tmpvar_45;
					  tmpvar_45 = tmpvar_44;
					  tmpvar_32 = ((hdr_42.x * (
					    (hdr_42.w * (tmpvar_45.w - 1.0))
					   + 1.0)) * tmpvar_45.xyz);
					  tmpvar_4 = tmpvar_33;
					  lowp vec3 tmpvar_46;
					  mediump vec4 c_47;
					  highp vec3 tmpvar_48;
					  tmpvar_48 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_49;
					  mediump vec3 albedo_50;
					  albedo_50 = tmpvar_12;
					  mediump vec3 tmpvar_51;
					  tmpvar_51 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_50, vec3(_Metallic));
					  mediump float tmpvar_52;
					  tmpvar_52 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_49 = (albedo_50 * tmpvar_52);
					  tmpvar_46 = tmpvar_49;
					  mediump vec3 diffColor_53;
					  diffColor_53 = tmpvar_46;
					  mediump float alpha_54;
					  alpha_54 = tmpvar_14;
					  tmpvar_46 = diffColor_53;
					  mediump vec3 diffColor_55;
					  diffColor_55 = tmpvar_46;
					  mediump vec3 color_56;
					  mediump float surfaceReduction_57;
					  highp float specularTerm_58;
					  highp float a2_59;
					  mediump float roughness_60;
					  mediump float perceptualRoughness_61;
					  highp vec3 tmpvar_62;
					  highp vec3 inVec_63;
					  inVec_63 = (tmpvar_5 + tmpvar_10);
					  tmpvar_62 = (inVec_63 * inversesqrt(max (0.001, 
					    dot (inVec_63, inVec_63)
					  )));
					  mediump float tmpvar_64;
					  highp float tmpvar_65;
					  tmpvar_65 = clamp (dot (tmpvar_48, tmpvar_5), 0.0, 1.0);
					  tmpvar_64 = tmpvar_65;
					  highp float tmpvar_66;
					  tmpvar_66 = clamp (dot (tmpvar_48, tmpvar_62), 0.0, 1.0);
					  mediump float tmpvar_67;
					  highp float tmpvar_68;
					  tmpvar_68 = clamp (dot (tmpvar_48, tmpvar_10), 0.0, 1.0);
					  tmpvar_67 = tmpvar_68;
					  highp float tmpvar_69;
					  highp float smoothness_70;
					  smoothness_70 = _Glossiness;
					  tmpvar_69 = (1.0 - smoothness_70);
					  perceptualRoughness_61 = tmpvar_69;
					  highp float tmpvar_71;
					  highp float perceptualRoughness_72;
					  perceptualRoughness_72 = perceptualRoughness_61;
					  tmpvar_71 = (perceptualRoughness_72 * perceptualRoughness_72);
					  roughness_60 = tmpvar_71;
					  mediump float tmpvar_73;
					  tmpvar_73 = (roughness_60 * roughness_60);
					  a2_59 = tmpvar_73;
					  specularTerm_58 = ((roughness_60 / (
					    (max (0.32, clamp (dot (tmpvar_5, tmpvar_62), 0.0, 1.0)) * (1.5 + roughness_60))
					   * 
					    (((tmpvar_66 * tmpvar_66) * (a2_59 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_74;
					  tmpvar_74 = clamp (specularTerm_58, 0.0, 100.0);
					  specularTerm_58 = tmpvar_74;
					  surfaceReduction_57 = (1.0 - ((roughness_60 * perceptualRoughness_61) * 0.28));
					  mediump float x_75;
					  x_75 = (1.0 - tmpvar_67);
					  mediump vec3 tmpvar_76;
					  tmpvar_76 = mix (tmpvar_51, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_52)
					  ), 0.0, 1.0)), vec3(((x_75 * x_75) * (x_75 * x_75))));
					  highp vec3 tmpvar_77;
					  tmpvar_77 = (((
					    ((diffColor_55 + (tmpvar_74 * tmpvar_51)) * tmpvar_33)
					   * tmpvar_64) + (tmpvar_34 * diffColor_55)) + ((surfaceReduction_57 * tmpvar_32) * tmpvar_76));
					  color_56 = tmpvar_77;
					  mediump vec4 tmpvar_78;
					  tmpvar_78.w = 1.0;
					  tmpvar_78.xyz = color_56;
					  c_47.xyz = tmpvar_78.xyz;
					  c_47.w = alpha_54;
					  c_6 = c_47;
					  c_6.xyz = (c_6.xyz + tmpvar_13);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					lowp vec3 u_xlat10_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					float u_xlat10;
					float u_xlat20;
					mediump float u_xlat16_20;
					lowp float u_xlat10_20;
					float u_xlat30;
					mediump float u_xlat16_31;
					float u_xlat32;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_1.xyz = unity_Lightmap_HDR.xxx * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat0.z = (-_Glossiness) + 1.0;
					    u_xlat16_31 = (-u_xlat0.z) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat0.z * u_xlat16_31;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat16_4.x = dot((-u_xlat3.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;
					    u_xlat16_4.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_4.xxx) + (-u_xlat3.xyz);
					    u_xlat10_4 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_31);
					    u_xlat16_31 = u_xlat10_4.w + -1.0;
					    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;
					    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;
					    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(u_xlat16_31);
					    u_xlat10 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat6.xyz = vec3(u_xlat10) * vs_TEXCOORD1.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat6.xyz);
					    u_xlat30 = u_xlat10;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat10 = u_xlat10 + u_xlat10;
					    u_xlat3.xyz = u_xlat6.xyz * (-vec3(u_xlat10)) + u_xlat3.xyz;
					    u_xlat10 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
					#else
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					#endif
					    u_xlat32 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat0.x = u_xlat32 * u_xlat32;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_31 = (-u_xlat30) + 1.0;
					    u_xlat16_20 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_20 = u_xlat16_31 * u_xlat16_20;
					    u_xlat16_20 = u_xlat16_31 * u_xlat16_20;
					    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_6.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_3.xyz + (-u_xlat10_6.xyz);
					    u_xlat3.xyz = vec3(_DayWeight) * u_xlat16_3.xyz + u_xlat10_6.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat16_7.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_35 = (-u_xlat16_31) + _Glossiness;
					    u_xlat16_8.xyz = vec3(u_xlat16_31) * u_xlat3.xyz;
					    u_xlat16_31 = u_xlat16_35 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_31);
					    u_xlat16_9.xyz = vec3(u_xlat16_20) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_9.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_5.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = sqrt(u_xlat20);
					    u_xlat20 = (-u_xlat0.x) + u_xlat20;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat20 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    vec3 txVec0 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
					    u_xlat10_20 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_31 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_31 = u_xlat10_20 * u_xlat16_31 + _LightShadowData.x;
					    u_xlat16_5.x = (-u_xlat16_31) + 1.0;
					    u_xlat16_31 = u_xlat0.x * u_xlat16_5.x + u_xlat16_31;
					    u_xlat16_5.xyz = vec3(u_xlat16_31) * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat10) * u_xlat16_5.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz + u_xlat16_1.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat30 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_18;
					float u_xlat24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_1.xyz = unity_Lightmap_HDR.xxx * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_2.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat2.xyz;
					    u_xlat16_25 = (-u_xlat16_25) + _Glossiness;
					    u_xlat16_25 = u_xlat16_25 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_25);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat8.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    vec3 txVec0 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
					    u_xlat10_2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_25 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_25 = u_xlat10_2.x * u_xlat16_25 + _LightShadowData.x;
					    u_xlat16_27 = (-u_xlat16_25) + 1.0;
					    u_xlat16_25 = u_xlat0.x * u_xlat16_27 + u_xlat16_25;
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat8.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_26 = (-_Glossiness) + 1.0;
					    u_xlat16_7 = u_xlat16_26 * u_xlat16_26 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_7;
					    u_xlat7.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
					    u_xlat2.x = dot(u_xlat7.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat16_10 = u_xlat16_26 * u_xlat16_26;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_10 + -1.0;
					    u_xlat2.x = u_xlat2.x * u_xlat16_18 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat2.x;
					    u_xlat24 = u_xlat16_10 / u_xlat24;
					    u_xlat16_25 = u_xlat16_26 * u_xlat16_10;
					    u_xlat16_25 = (-u_xlat16_25) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat2.xyz = u_xlat16_6.xyz * u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat7.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
					#else
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					#endif
					    u_xlat16_27 = (-u_xlat7.x) + 1.0;
					    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
					    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
					    u_xlat16_3.xyz = vec3(u_xlat16_27) * u_xlat16_5.xyz + u_xlat16_3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-u_xlat16_26) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_26;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat16_9 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
					    u_xlat16_4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_9)) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat10_0.w + -1.0;
					    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_25);
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat2.xyz;
					    u_xlat10_2.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.xyz = u_xlat10_2.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_18;
					float u_xlat24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_1.xyz = unity_Lightmap_HDR.xxx * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_2.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat2.xyz;
					    u_xlat16_25 = (-u_xlat16_25) + _Glossiness;
					    u_xlat16_25 = u_xlat16_25 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_25);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat8.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    vec3 txVec0 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
					    u_xlat10_2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_25 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_25 = u_xlat10_2.x * u_xlat16_25 + _LightShadowData.x;
					    u_xlat16_27 = (-u_xlat16_25) + 1.0;
					    u_xlat16_25 = u_xlat0.x * u_xlat16_27 + u_xlat16_25;
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat8.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_26 = (-_Glossiness) + 1.0;
					    u_xlat16_7 = u_xlat16_26 * u_xlat16_26 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_7;
					    u_xlat7.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
					    u_xlat2.x = dot(u_xlat7.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat16_10 = u_xlat16_26 * u_xlat16_26;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_10 + -1.0;
					    u_xlat2.x = u_xlat2.x * u_xlat16_18 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat2.x;
					    u_xlat24 = u_xlat16_10 / u_xlat24;
					    u_xlat16_25 = u_xlat16_26 * u_xlat16_10;
					    u_xlat16_25 = (-u_xlat16_25) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat2.xyz = u_xlat16_6.xyz * u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat7.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
					#else
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					#endif
					    u_xlat16_27 = (-u_xlat7.x) + 1.0;
					    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
					    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
					    u_xlat16_3.xyz = vec3(u_xlat16_27) * u_xlat16_5.xyz + u_xlat16_3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-u_xlat16_26) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_26;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat16_9 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
					    u_xlat16_4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_9)) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat10_0.w + -1.0;
					    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_25);
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat2.xyz;
					    u_xlat10_2.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.xyz = u_xlat10_2.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  highp vec3 tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_10 = normalize(tmpvar_11);
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_12;
					  mediump vec3 tmpvar_13;
					  lowp float tmpvar_14;
					  highp vec4 emissionSample_15;
					  highp vec4 diffuseSample_16;
					  highp vec4 nightSample_17;
					  highp vec4 daySample_18;
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_18 = tmpvar_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_17 = tmpvar_20;
					  diffuseSample_16 = (mix (nightSample_17, daySample_18, vec4(_DayWeight)) * _Color);
					  diffuseSample_16.xyz = (diffuseSample_16.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_15 = tmpvar_21;
					  highp vec3 tmpvar_22;
					  tmpvar_22 = ((emissionSample_15.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_12 = diffuseSample_16.xyz;
					  tmpvar_13 = tmpvar_22;
					  tmpvar_14 = diffuseSample_16.w;
					  lowp float tmpvar_23;
					  highp float lightShadowDataX_24;
					  mediump float tmpvar_25;
					  tmpvar_25 = _LightShadowData.x;
					  lightShadowDataX_24 = tmpvar_25;
					  highp float tmpvar_26;
					  tmpvar_26 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_24);
					  tmpvar_23 = tmpvar_26;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_7;
					  tmpvar_1 = tmpvar_10;
					  tmpvar_2 = tmpvar_23;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = xlv_TEXCOORD1;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_33;
					  highp vec4 v_34;
					  v_34.x = unity_MatrixV[0].z;
					  v_34.y = unity_MatrixV[1].z;
					  v_34.z = unity_MatrixV[2].z;
					  v_34.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_35;
					  tmpvar_35 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_36;
					  highp float tmpvar_37;
					  tmpvar_37 = clamp (((
					    mix (dot (tmpvar_11, v_34.xyz), sqrt(dot (tmpvar_35, tmpvar_35)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_36 = tmpvar_37;
					  tmpvar_33 = (tmpvar_4 * mix (tmpvar_2, 1.0, tmpvar_36));
					  mediump vec3 ambient_38;
					  mediump vec4 tmpvar_39;
					  tmpvar_39.w = 1.0;
					  tmpvar_39.xyz = normalWorld_32;
					  mediump vec3 x_40;
					  x_40.x = dot (unity_SHAr, tmpvar_39);
					  x_40.y = dot (unity_SHAg, tmpvar_39);
					  x_40.z = dot (unity_SHAb, tmpvar_39);
					  mediump vec3 x1_41;
					  mediump vec4 tmpvar_42;
					  tmpvar_42 = (normalWorld_32.xyzz * normalWorld_32.yzzx);
					  x1_41.x = dot (unity_SHBr, tmpvar_42);
					  x1_41.y = dot (unity_SHBg, tmpvar_42);
					  x1_41.z = dot (unity_SHBb, tmpvar_42);
					  ambient_38 = max (vec3(0.0, 0.0, 0.0), (x_40 + (x1_41 + 
					    (unity_SHC.xyz * ((normalWorld_32.x * normalWorld_32.x) - (normalWorld_32.y * normalWorld_32.y)))
					  )));
					  mediump vec3 tmpvar_43;
					  tmpvar_43 = max (((1.055 * 
					    pow (max (ambient_38, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  ambient_38 = tmpvar_43;
					  mediump vec4 tmpvar_44;
					  tmpvar_44 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_45;
					  color_45 = tmpvar_44;
					  mediump vec4 hdr_46;
					  hdr_46 = tmpvar_3;
					  mediump vec4 tmpvar_47;
					  tmpvar_47.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_47.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_48;
					  tmpvar_48 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_47.xyz, tmpvar_47.w);
					  mediump vec4 tmpvar_49;
					  tmpvar_49 = tmpvar_48;
					  tmpvar_4 = tmpvar_33;
					  lowp vec3 tmpvar_50;
					  mediump vec4 c_51;
					  highp vec3 tmpvar_52;
					  tmpvar_52 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_53;
					  mediump vec3 albedo_54;
					  albedo_54 = tmpvar_12;
					  mediump vec3 tmpvar_55;
					  tmpvar_55 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_54, vec3(_Metallic));
					  mediump float tmpvar_56;
					  tmpvar_56 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_53 = (albedo_54 * tmpvar_56);
					  tmpvar_50 = tmpvar_53;
					  mediump vec3 diffColor_57;
					  diffColor_57 = tmpvar_50;
					  mediump float alpha_58;
					  alpha_58 = tmpvar_14;
					  tmpvar_50 = diffColor_57;
					  mediump vec3 diffColor_59;
					  diffColor_59 = tmpvar_50;
					  mediump vec3 color_60;
					  mediump vec2 rlPow4AndFresnelTerm_61;
					  mediump float tmpvar_62;
					  highp float tmpvar_63;
					  tmpvar_63 = clamp (dot (tmpvar_52, tmpvar_5), 0.0, 1.0);
					  tmpvar_62 = tmpvar_63;
					  mediump float tmpvar_64;
					  highp float tmpvar_65;
					  tmpvar_65 = clamp (dot (tmpvar_52, tmpvar_10), 0.0, 1.0);
					  tmpvar_64 = tmpvar_65;
					  highp vec2 tmpvar_66;
					  tmpvar_66.x = dot ((tmpvar_10 - (2.0 * 
					    (dot (tmpvar_52, tmpvar_10) * tmpvar_52)
					  )), tmpvar_5);
					  tmpvar_66.y = (1.0 - tmpvar_64);
					  highp vec2 tmpvar_67;
					  tmpvar_67 = ((tmpvar_66 * tmpvar_66) * (tmpvar_66 * tmpvar_66));
					  rlPow4AndFresnelTerm_61 = tmpvar_67;
					  mediump float tmpvar_68;
					  tmpvar_68 = rlPow4AndFresnelTerm_61.x;
					  mediump float specular_69;
					  highp float smoothness_70;
					  smoothness_70 = _Glossiness;
					  highp vec2 tmpvar_71;
					  tmpvar_71.x = tmpvar_68;
					  tmpvar_71.y = (1.0 - smoothness_70);
					  highp float tmpvar_72;
					  tmpvar_72 = (texture2D (unity_NHxRoughness, tmpvar_71).x * 16.0);
					  specular_69 = tmpvar_72;
					  color_60 = ((diffColor_59 + (specular_69 * tmpvar_55)) * (tmpvar_33 * tmpvar_62));
					  color_60 = (color_60 + ((
					    (tmpvar_43 + (unity_Lightmap_HDR.x * color_45.xyz))
					   * diffColor_59) + (
					    ((hdr_46.x * ((hdr_46.w * 
					      (tmpvar_49.w - 1.0)
					    ) + 1.0)) * tmpvar_49.xyz)
					   * 
					    mix (tmpvar_55, vec3(clamp ((_Glossiness + (1.0 - tmpvar_56)), 0.0, 1.0)), rlPow4AndFresnelTerm_61.yyy)
					  )));
					  mediump vec4 tmpvar_73;
					  tmpvar_73.w = 1.0;
					  tmpvar_73.xyz = color_60;
					  c_51.xyz = tmpvar_73.xyz;
					  c_51.w = alpha_58;
					  c_6 = c_51;
					  c_6.xyz = (c_6.xyz + tmpvar_13);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  highp vec3 tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_10 = normalize(tmpvar_11);
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_12;
					  mediump vec3 tmpvar_13;
					  lowp float tmpvar_14;
					  highp vec4 emissionSample_15;
					  highp vec4 diffuseSample_16;
					  highp vec4 nightSample_17;
					  highp vec4 daySample_18;
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_18 = tmpvar_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_17 = tmpvar_20;
					  diffuseSample_16 = (mix (nightSample_17, daySample_18, vec4(_DayWeight)) * _Color);
					  diffuseSample_16.xyz = (diffuseSample_16.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_15 = tmpvar_21;
					  highp vec3 tmpvar_22;
					  tmpvar_22 = ((emissionSample_15.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_12 = diffuseSample_16.xyz;
					  tmpvar_13 = tmpvar_22;
					  tmpvar_14 = diffuseSample_16.w;
					  lowp float tmpvar_23;
					  highp float lightShadowDataX_24;
					  mediump float tmpvar_25;
					  tmpvar_25 = _LightShadowData.x;
					  lightShadowDataX_24 = tmpvar_25;
					  highp float tmpvar_26;
					  tmpvar_26 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_24);
					  tmpvar_23 = tmpvar_26;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_7;
					  tmpvar_1 = tmpvar_10;
					  tmpvar_2 = tmpvar_23;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = xlv_TEXCOORD1;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_33;
					  mediump vec3 tmpvar_34;
					  mediump vec3 tmpvar_35;
					  highp vec4 v_36;
					  v_36.x = unity_MatrixV[0].z;
					  v_36.y = unity_MatrixV[1].z;
					  v_36.z = unity_MatrixV[2].z;
					  v_36.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_37;
					  tmpvar_37 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_38;
					  highp float tmpvar_39;
					  tmpvar_39 = clamp (((
					    mix (dot (tmpvar_11, v_36.xyz), sqrt(dot (tmpvar_37, tmpvar_37)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_38 = tmpvar_39;
					  tmpvar_34 = (tmpvar_4 * mix (tmpvar_2, 1.0, tmpvar_38));
					  mediump vec3 ambient_40;
					  mediump vec4 tmpvar_41;
					  tmpvar_41.w = 1.0;
					  tmpvar_41.xyz = normalWorld_32;
					  mediump vec3 x_42;
					  x_42.x = dot (unity_SHAr, tmpvar_41);
					  x_42.y = dot (unity_SHAg, tmpvar_41);
					  x_42.z = dot (unity_SHAb, tmpvar_41);
					  mediump vec3 x1_43;
					  mediump vec4 tmpvar_44;
					  tmpvar_44 = (normalWorld_32.xyzz * normalWorld_32.yzzx);
					  x1_43.x = dot (unity_SHBr, tmpvar_44);
					  x1_43.y = dot (unity_SHBg, tmpvar_44);
					  x1_43.z = dot (unity_SHBb, tmpvar_44);
					  ambient_40 = max (vec3(0.0, 0.0, 0.0), (x_42 + (x1_43 + 
					    (unity_SHC.xyz * ((normalWorld_32.x * normalWorld_32.x) - (normalWorld_32.y * normalWorld_32.y)))
					  )));
					  mediump vec3 tmpvar_45;
					  tmpvar_45 = max (((1.055 * 
					    pow (max (ambient_40, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  ambient_40 = tmpvar_45;
					  mediump vec4 tmpvar_46;
					  tmpvar_46 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_47;
					  color_47 = tmpvar_46;
					  tmpvar_35 = (tmpvar_45 + (unity_Lightmap_HDR.x * color_47.xyz));
					  mediump vec4 hdr_48;
					  hdr_48 = tmpvar_3;
					  mediump vec4 tmpvar_49;
					  tmpvar_49.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_49.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_50;
					  tmpvar_50 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_49.xyz, tmpvar_49.w);
					  mediump vec4 tmpvar_51;
					  tmpvar_51 = tmpvar_50;
					  tmpvar_33 = ((hdr_48.x * (
					    (hdr_48.w * (tmpvar_51.w - 1.0))
					   + 1.0)) * tmpvar_51.xyz);
					  tmpvar_4 = tmpvar_34;
					  lowp vec3 tmpvar_52;
					  mediump vec4 c_53;
					  highp vec3 tmpvar_54;
					  tmpvar_54 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_55;
					  mediump vec3 albedo_56;
					  albedo_56 = tmpvar_12;
					  mediump vec3 tmpvar_57;
					  tmpvar_57 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_56, vec3(_Metallic));
					  mediump float tmpvar_58;
					  tmpvar_58 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_55 = (albedo_56 * tmpvar_58);
					  tmpvar_52 = tmpvar_55;
					  mediump vec3 diffColor_59;
					  diffColor_59 = tmpvar_52;
					  mediump float alpha_60;
					  alpha_60 = tmpvar_14;
					  tmpvar_52 = diffColor_59;
					  mediump vec3 diffColor_61;
					  diffColor_61 = tmpvar_52;
					  mediump vec3 color_62;
					  mediump float surfaceReduction_63;
					  highp float specularTerm_64;
					  highp float a2_65;
					  mediump float roughness_66;
					  mediump float perceptualRoughness_67;
					  highp vec3 tmpvar_68;
					  highp vec3 inVec_69;
					  inVec_69 = (tmpvar_5 + tmpvar_10);
					  tmpvar_68 = (inVec_69 * inversesqrt(max (0.001, 
					    dot (inVec_69, inVec_69)
					  )));
					  mediump float tmpvar_70;
					  highp float tmpvar_71;
					  tmpvar_71 = clamp (dot (tmpvar_54, tmpvar_5), 0.0, 1.0);
					  tmpvar_70 = tmpvar_71;
					  highp float tmpvar_72;
					  tmpvar_72 = clamp (dot (tmpvar_54, tmpvar_68), 0.0, 1.0);
					  mediump float tmpvar_73;
					  highp float tmpvar_74;
					  tmpvar_74 = clamp (dot (tmpvar_54, tmpvar_10), 0.0, 1.0);
					  tmpvar_73 = tmpvar_74;
					  highp float tmpvar_75;
					  highp float smoothness_76;
					  smoothness_76 = _Glossiness;
					  tmpvar_75 = (1.0 - smoothness_76);
					  perceptualRoughness_67 = tmpvar_75;
					  highp float tmpvar_77;
					  highp float perceptualRoughness_78;
					  perceptualRoughness_78 = perceptualRoughness_67;
					  tmpvar_77 = (perceptualRoughness_78 * perceptualRoughness_78);
					  roughness_66 = tmpvar_77;
					  mediump float tmpvar_79;
					  tmpvar_79 = (roughness_66 * roughness_66);
					  a2_65 = tmpvar_79;
					  specularTerm_64 = ((roughness_66 / (
					    (max (0.32, clamp (dot (tmpvar_5, tmpvar_68), 0.0, 1.0)) * (1.5 + roughness_66))
					   * 
					    (((tmpvar_72 * tmpvar_72) * (a2_65 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_80;
					  tmpvar_80 = clamp (specularTerm_64, 0.0, 100.0);
					  specularTerm_64 = tmpvar_80;
					  surfaceReduction_63 = (1.0 - ((roughness_66 * perceptualRoughness_67) * 0.28));
					  mediump float x_81;
					  x_81 = (1.0 - tmpvar_73);
					  mediump vec3 tmpvar_82;
					  tmpvar_82 = mix (tmpvar_57, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_58)
					  ), 0.0, 1.0)), vec3(((x_81 * x_81) * (x_81 * x_81))));
					  highp vec3 tmpvar_83;
					  tmpvar_83 = (((
					    ((diffColor_61 + (tmpvar_80 * tmpvar_57)) * tmpvar_34)
					   * tmpvar_70) + (tmpvar_35 * diffColor_61)) + ((surfaceReduction_63 * tmpvar_33) * tmpvar_82));
					  color_62 = tmpvar_83;
					  mediump vec4 tmpvar_84;
					  tmpvar_84.w = 1.0;
					  tmpvar_84.xyz = color_62;
					  c_53.xyz = tmpvar_84.xyz;
					  c_53.w = alpha_60;
					  c_6 = c_53;
					  c_6.xyz = (c_6.xyz + tmpvar_13);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  highp vec3 tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_10 = normalize(tmpvar_11);
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_12;
					  mediump vec3 tmpvar_13;
					  lowp float tmpvar_14;
					  highp vec4 emissionSample_15;
					  highp vec4 diffuseSample_16;
					  highp vec4 nightSample_17;
					  highp vec4 daySample_18;
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_18 = tmpvar_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_17 = tmpvar_20;
					  diffuseSample_16 = (mix (nightSample_17, daySample_18, vec4(_DayWeight)) * _Color);
					  diffuseSample_16.xyz = (diffuseSample_16.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_15 = tmpvar_21;
					  highp vec3 tmpvar_22;
					  tmpvar_22 = ((emissionSample_15.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_12 = diffuseSample_16.xyz;
					  tmpvar_13 = tmpvar_22;
					  tmpvar_14 = diffuseSample_16.w;
					  lowp float tmpvar_23;
					  highp float lightShadowDataX_24;
					  mediump float tmpvar_25;
					  tmpvar_25 = _LightShadowData.x;
					  lightShadowDataX_24 = tmpvar_25;
					  highp float tmpvar_26;
					  tmpvar_26 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_24);
					  tmpvar_23 = tmpvar_26;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_7;
					  tmpvar_1 = tmpvar_10;
					  tmpvar_2 = tmpvar_23;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = xlv_TEXCOORD1;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_33;
					  mediump vec3 tmpvar_34;
					  mediump vec3 tmpvar_35;
					  highp vec4 v_36;
					  v_36.x = unity_MatrixV[0].z;
					  v_36.y = unity_MatrixV[1].z;
					  v_36.z = unity_MatrixV[2].z;
					  v_36.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_37;
					  tmpvar_37 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_38;
					  highp float tmpvar_39;
					  tmpvar_39 = clamp (((
					    mix (dot (tmpvar_11, v_36.xyz), sqrt(dot (tmpvar_37, tmpvar_37)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_38 = tmpvar_39;
					  tmpvar_34 = (tmpvar_4 * mix (tmpvar_2, 1.0, tmpvar_38));
					  mediump vec3 ambient_40;
					  mediump vec4 tmpvar_41;
					  tmpvar_41.w = 1.0;
					  tmpvar_41.xyz = normalWorld_32;
					  mediump vec3 x_42;
					  x_42.x = dot (unity_SHAr, tmpvar_41);
					  x_42.y = dot (unity_SHAg, tmpvar_41);
					  x_42.z = dot (unity_SHAb, tmpvar_41);
					  mediump vec3 x1_43;
					  mediump vec4 tmpvar_44;
					  tmpvar_44 = (normalWorld_32.xyzz * normalWorld_32.yzzx);
					  x1_43.x = dot (unity_SHBr, tmpvar_44);
					  x1_43.y = dot (unity_SHBg, tmpvar_44);
					  x1_43.z = dot (unity_SHBb, tmpvar_44);
					  ambient_40 = max (vec3(0.0, 0.0, 0.0), (x_42 + (x1_43 + 
					    (unity_SHC.xyz * ((normalWorld_32.x * normalWorld_32.x) - (normalWorld_32.y * normalWorld_32.y)))
					  )));
					  mediump vec3 tmpvar_45;
					  tmpvar_45 = max (((1.055 * 
					    pow (max (ambient_40, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  ambient_40 = tmpvar_45;
					  mediump vec4 tmpvar_46;
					  tmpvar_46 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_47;
					  color_47 = tmpvar_46;
					  tmpvar_35 = (tmpvar_45 + (unity_Lightmap_HDR.x * color_47.xyz));
					  mediump vec4 hdr_48;
					  hdr_48 = tmpvar_3;
					  mediump vec4 tmpvar_49;
					  tmpvar_49.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_49.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_50;
					  tmpvar_50 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_49.xyz, tmpvar_49.w);
					  mediump vec4 tmpvar_51;
					  tmpvar_51 = tmpvar_50;
					  tmpvar_33 = ((hdr_48.x * (
					    (hdr_48.w * (tmpvar_51.w - 1.0))
					   + 1.0)) * tmpvar_51.xyz);
					  tmpvar_4 = tmpvar_34;
					  lowp vec3 tmpvar_52;
					  mediump vec4 c_53;
					  highp vec3 tmpvar_54;
					  tmpvar_54 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_55;
					  mediump vec3 albedo_56;
					  albedo_56 = tmpvar_12;
					  mediump vec3 tmpvar_57;
					  tmpvar_57 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_56, vec3(_Metallic));
					  mediump float tmpvar_58;
					  tmpvar_58 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_55 = (albedo_56 * tmpvar_58);
					  tmpvar_52 = tmpvar_55;
					  mediump vec3 diffColor_59;
					  diffColor_59 = tmpvar_52;
					  mediump float alpha_60;
					  alpha_60 = tmpvar_14;
					  tmpvar_52 = diffColor_59;
					  mediump vec3 diffColor_61;
					  diffColor_61 = tmpvar_52;
					  mediump vec3 color_62;
					  mediump float surfaceReduction_63;
					  highp float specularTerm_64;
					  highp float a2_65;
					  mediump float roughness_66;
					  mediump float perceptualRoughness_67;
					  highp vec3 tmpvar_68;
					  highp vec3 inVec_69;
					  inVec_69 = (tmpvar_5 + tmpvar_10);
					  tmpvar_68 = (inVec_69 * inversesqrt(max (0.001, 
					    dot (inVec_69, inVec_69)
					  )));
					  mediump float tmpvar_70;
					  highp float tmpvar_71;
					  tmpvar_71 = clamp (dot (tmpvar_54, tmpvar_5), 0.0, 1.0);
					  tmpvar_70 = tmpvar_71;
					  highp float tmpvar_72;
					  tmpvar_72 = clamp (dot (tmpvar_54, tmpvar_68), 0.0, 1.0);
					  mediump float tmpvar_73;
					  highp float tmpvar_74;
					  tmpvar_74 = clamp (dot (tmpvar_54, tmpvar_10), 0.0, 1.0);
					  tmpvar_73 = tmpvar_74;
					  highp float tmpvar_75;
					  highp float smoothness_76;
					  smoothness_76 = _Glossiness;
					  tmpvar_75 = (1.0 - smoothness_76);
					  perceptualRoughness_67 = tmpvar_75;
					  highp float tmpvar_77;
					  highp float perceptualRoughness_78;
					  perceptualRoughness_78 = perceptualRoughness_67;
					  tmpvar_77 = (perceptualRoughness_78 * perceptualRoughness_78);
					  roughness_66 = tmpvar_77;
					  mediump float tmpvar_79;
					  tmpvar_79 = (roughness_66 * roughness_66);
					  a2_65 = tmpvar_79;
					  specularTerm_64 = ((roughness_66 / (
					    (max (0.32, clamp (dot (tmpvar_5, tmpvar_68), 0.0, 1.0)) * (1.5 + roughness_66))
					   * 
					    (((tmpvar_72 * tmpvar_72) * (a2_65 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_80;
					  tmpvar_80 = clamp (specularTerm_64, 0.0, 100.0);
					  specularTerm_64 = tmpvar_80;
					  surfaceReduction_63 = (1.0 - ((roughness_66 * perceptualRoughness_67) * 0.28));
					  mediump float x_81;
					  x_81 = (1.0 - tmpvar_73);
					  mediump vec3 tmpvar_82;
					  tmpvar_82 = mix (tmpvar_57, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_58)
					  ), 0.0, 1.0)), vec3(((x_81 * x_81) * (x_81 * x_81))));
					  highp vec3 tmpvar_83;
					  tmpvar_83 = (((
					    ((diffColor_61 + (tmpvar_80 * tmpvar_57)) * tmpvar_34)
					   * tmpvar_70) + (tmpvar_35 * diffColor_61)) + ((surfaceReduction_63 * tmpvar_33) * tmpvar_82));
					  color_62 = tmpvar_83;
					  mediump vec4 tmpvar_84;
					  tmpvar_84.w = 1.0;
					  tmpvar_84.xyz = color_62;
					  c_53.xyz = tmpvar_84.xyz;
					  c_53.w = alpha_60;
					  c_6 = c_53;
					  c_6.xyz = (c_6.xyz + tmpvar_13);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					lowp vec3 u_xlat10_5;
					vec3 u_xlat6;
					lowp vec3 u_xlat10_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					float u_xlat13;
					float u_xlat23;
					mediump float u_xlat16_23;
					lowp float u_xlat10_23;
					mediump float u_xlat16_30;
					mediump float u_xlat16_32;
					float u_xlat33;
					float u_xlat34;
					void main()
					{
					    u_xlat16_0.x = vs_TEXCOORD1.y * vs_TEXCOORD1.y;
					    u_xlat16_0.x = vs_TEXCOORD1.x * vs_TEXCOORD1.x + (-u_xlat16_0.x);
					    u_xlat16_1 = vs_TEXCOORD1.yzzx * vs_TEXCOORD1.xyzz;
					    u_xlat16_2.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_2.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_2.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_0.xyz = unity_SHC.xyz * u_xlat16_0.xxx + u_xlat16_2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_3.xyz = log2(u_xlat16_0.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_0.xyz = unity_Lightmap_HDR.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat3.z = (-_Glossiness) + 1.0;
					    u_xlat16_30 = (-u_xlat3.z) * 0.699999988 + 1.70000005;
					    u_xlat16_30 = u_xlat16_30 * u_xlat3.z;
					    u_xlat16_30 = u_xlat16_30 * 6.0;
					    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat13 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat5.xyz = vec3(u_xlat13) * u_xlat4.xyz;
					    u_xlat16_2.x = dot((-u_xlat5.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_2.xxx) + (-u_xlat5.xyz);
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_30);
					    u_xlat16_30 = u_xlat10_1.w + -1.0;
					    u_xlat16_30 = unity_SpecCube0_HDR.w * u_xlat16_30 + 1.0;
					    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(u_xlat16_30);
					    u_xlat13 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat6.xyz = vec3(u_xlat13) * vs_TEXCOORD1.xyz;
					    u_xlat13 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat33 = u_xlat13;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat13 = u_xlat13 + u_xlat13;
					    u_xlat5.xyz = u_xlat6.xyz * (-vec3(u_xlat13)) + u_xlat5.xyz;
					    u_xlat13 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
					#else
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					#endif
					    u_xlat34 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat3.x = u_xlat34 * u_xlat34;
					    u_xlat3.x = texture(unity_NHxRoughness, u_xlat3.xz).x;
					    u_xlat3.x = u_xlat3.x * 16.0;
					    u_xlat16_30 = (-u_xlat33) + 1.0;
					    u_xlat16_23 = u_xlat16_30 * u_xlat16_30;
					    u_xlat16_23 = u_xlat16_30 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_30 * u_xlat16_23;
					    u_xlat10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_6.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_5.xyz = u_xlat10_5.xyz + (-u_xlat10_6.xyz);
					    u_xlat5.xyz = vec3(_DayWeight) * u_xlat16_5.xyz + u_xlat10_6.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat16_7.xyz = u_xlat5.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat5.xyz = u_xlat5.xyz * vs_COLOR0.xyz;
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_32 = (-u_xlat16_30) + _Glossiness;
					    u_xlat16_8.xyz = vec3(u_xlat16_30) * u_xlat5.xyz;
					    u_xlat16_30 = u_xlat16_32 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_30);
					    u_xlat16_9.xyz = vec3(u_xlat16_23) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat3.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;
					    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.x = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat23 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat23 = sqrt(u_xlat23);
					    u_xlat23 = (-u_xlat3.x) + u_xlat23;
					    u_xlat3.x = unity_ShadowFadeCenterAndType.w * u_xlat23 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    vec3 txVec0 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
					    u_xlat10_23 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_30 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_30 = u_xlat10_23 * u_xlat16_30 + _LightShadowData.x;
					    u_xlat16_2.x = (-u_xlat16_30) + 1.0;
					    u_xlat16_30 = u_xlat3.x * u_xlat16_2.x + u_xlat16_30;
					    u_xlat16_2.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;
					    u_xlat16_2.xyz = vec3(u_xlat13) * u_xlat16_2.xyz;
					    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
					    u_xlat10_3.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.xyz = u_xlat10_3.xyz * _EmissionColor.xyz;
					    u_xlat33 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat3.xyz * vec3(u_xlat33) + u_xlat16_0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					vec3 u_xlat12;
					mediump float u_xlat16_13;
					mediump float u_xlat16_22;
					mediump float u_xlat16_27;
					mediump float u_xlat16_29;
					float u_xlat30;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat16_0.x = vs_TEXCOORD1.y * vs_TEXCOORD1.y;
					    u_xlat16_0.x = vs_TEXCOORD1.x * vs_TEXCOORD1.x + (-u_xlat16_0.x);
					    u_xlat16_1 = vs_TEXCOORD1.yzzx * vs_TEXCOORD1.xyzz;
					    u_xlat16_2.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_2.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_2.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_0.xyz = unity_SHC.xyz * u_xlat16_0.xxx + u_xlat16_2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_3.xyz = log2(u_xlat16_0.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_0.xyz = unity_Lightmap_HDR.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_3.xyz + (-u_xlat10_4.xyz);
					    u_xlat3.xyz = vec3(_DayWeight) * u_xlat16_3.xyz + u_xlat10_4.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_27 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_5.xyz = vec3(u_xlat16_27) * u_xlat4.xyz;
					    u_xlat16_27 = (-u_xlat16_27) + _Glossiness;
					    u_xlat16_27 = u_xlat16_27 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_27);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
					    u_xlat3.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat12.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat4.x = dot(u_xlat12.xyz, u_xlat4.xyz);
					    u_xlat3.x = u_xlat3.x + (-u_xlat4.x);
					    u_xlat3.x = unity_ShadowFadeCenterAndType.w * u_xlat3.x + u_xlat4.x;
					    u_xlat3.x = u_xlat3.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    vec3 txVec0 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
					    u_xlat10_4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_27 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_27 = u_xlat10_4.x * u_xlat16_27 + _LightShadowData.x;
					    u_xlat16_29 = (-u_xlat16_27) + 1.0;
					    u_xlat16_27 = u_xlat3.x * u_xlat16_29 + u_xlat16_27;
					    u_xlat16_7.xyz = vec3(u_xlat16_27) * _LightColor0.xyz;
					    u_xlat3.x = dot(u_xlat12.xyz, u_xlat12.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat4.xyz = u_xlat12.xyz * u_xlat3.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat12.xyz;
					    u_xlat30 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat30 = max(u_xlat30, 0.00100000005);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.xyz;
					    u_xlat30 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat16_31 = (-_Glossiness) + 1.0;
					    u_xlat16_8 = u_xlat16_31 * u_xlat16_31 + 1.5;
					    u_xlat30 = u_xlat30 * u_xlat16_8;
					    u_xlat8.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
					    u_xlat4.x = dot(u_xlat8.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat4.x = u_xlat4.x * u_xlat4.x;
					    u_xlat16_13 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_22 = u_xlat16_13 * u_xlat16_13 + -1.0;
					    u_xlat4.x = u_xlat4.x * u_xlat16_22 + 1.00001001;
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat30 = u_xlat16_13 / u_xlat30;
					    u_xlat16_27 = u_xlat16_31 * u_xlat16_13;
					    u_xlat16_27 = (-u_xlat16_27) * 0.280000001 + 1.0;
					    u_xlat30 = u_xlat30 + -9.99999975e-05;
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat30 = min(u_xlat30, 100.0);
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat4.xyz = u_xlat16_7.xyz * u_xlat4.xyz;
					    u_xlat30 = dot(u_xlat8.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat8.x = dot(u_xlat8.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
					#else
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					#endif
					    u_xlat16_29 = (-u_xlat8.x) + 1.0;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_2.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz + u_xlat16_2.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat30) + u_xlat16_0.xyz;
					    u_xlat16_0.x = (-u_xlat16_31) * 0.699999988 + 1.70000005;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_31;
					    u_xlat16_0.x = u_xlat16_0.x * 6.0;
					    u_xlat16_9 = dot((-u_xlat3.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
					    u_xlat16_5.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_9)) + (-u_xlat3.xyz);
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat10_1.w + -1.0;
					    u_xlat16_0.x = unity_SpecCube0_HDR.w * u_xlat16_0.x + 1.0;
					    u_xlat16_0.x = u_xlat16_0.x * unity_SpecCube0_HDR.x;
					    u_xlat16_0.xyz = u_xlat10_1.xyz * u_xlat16_0.xxx;
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_27);
					    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
					    u_xlat10_4.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _EmissionColor.xyz;
					    u_xlat30 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat4.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					vec3 u_xlat12;
					mediump float u_xlat16_13;
					mediump float u_xlat16_22;
					mediump float u_xlat16_27;
					mediump float u_xlat16_29;
					float u_xlat30;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat16_0.x = vs_TEXCOORD1.y * vs_TEXCOORD1.y;
					    u_xlat16_0.x = vs_TEXCOORD1.x * vs_TEXCOORD1.x + (-u_xlat16_0.x);
					    u_xlat16_1 = vs_TEXCOORD1.yzzx * vs_TEXCOORD1.xyzz;
					    u_xlat16_2.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_2.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_2.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_0.xyz = unity_SHC.xyz * u_xlat16_0.xxx + u_xlat16_2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_3.xyz = log2(u_xlat16_0.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_0.xyz = unity_Lightmap_HDR.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_3.xyz + (-u_xlat10_4.xyz);
					    u_xlat3.xyz = vec3(_DayWeight) * u_xlat16_3.xyz + u_xlat10_4.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_27 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_5.xyz = vec3(u_xlat16_27) * u_xlat4.xyz;
					    u_xlat16_27 = (-u_xlat16_27) + _Glossiness;
					    u_xlat16_27 = u_xlat16_27 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_27);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
					    u_xlat3.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat12.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat4.x = dot(u_xlat12.xyz, u_xlat4.xyz);
					    u_xlat3.x = u_xlat3.x + (-u_xlat4.x);
					    u_xlat3.x = unity_ShadowFadeCenterAndType.w * u_xlat3.x + u_xlat4.x;
					    u_xlat3.x = u_xlat3.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    vec3 txVec0 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
					    u_xlat10_4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_27 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_27 = u_xlat10_4.x * u_xlat16_27 + _LightShadowData.x;
					    u_xlat16_29 = (-u_xlat16_27) + 1.0;
					    u_xlat16_27 = u_xlat3.x * u_xlat16_29 + u_xlat16_27;
					    u_xlat16_7.xyz = vec3(u_xlat16_27) * _LightColor0.xyz;
					    u_xlat3.x = dot(u_xlat12.xyz, u_xlat12.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat4.xyz = u_xlat12.xyz * u_xlat3.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat12.xyz;
					    u_xlat30 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat30 = max(u_xlat30, 0.00100000005);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.xyz;
					    u_xlat30 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat16_31 = (-_Glossiness) + 1.0;
					    u_xlat16_8 = u_xlat16_31 * u_xlat16_31 + 1.5;
					    u_xlat30 = u_xlat30 * u_xlat16_8;
					    u_xlat8.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
					    u_xlat4.x = dot(u_xlat8.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat4.x = u_xlat4.x * u_xlat4.x;
					    u_xlat16_13 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_22 = u_xlat16_13 * u_xlat16_13 + -1.0;
					    u_xlat4.x = u_xlat4.x * u_xlat16_22 + 1.00001001;
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat30 = u_xlat16_13 / u_xlat30;
					    u_xlat16_27 = u_xlat16_31 * u_xlat16_13;
					    u_xlat16_27 = (-u_xlat16_27) * 0.280000001 + 1.0;
					    u_xlat30 = u_xlat30 + -9.99999975e-05;
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat30 = min(u_xlat30, 100.0);
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat4.xyz = u_xlat16_7.xyz * u_xlat4.xyz;
					    u_xlat30 = dot(u_xlat8.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat8.x = dot(u_xlat8.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
					#else
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					#endif
					    u_xlat16_29 = (-u_xlat8.x) + 1.0;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_2.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz + u_xlat16_2.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat30) + u_xlat16_0.xyz;
					    u_xlat16_0.x = (-u_xlat16_31) * 0.699999988 + 1.70000005;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_31;
					    u_xlat16_0.x = u_xlat16_0.x * 6.0;
					    u_xlat16_9 = dot((-u_xlat3.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
					    u_xlat16_5.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_9)) + (-u_xlat3.xyz);
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat10_1.w + -1.0;
					    u_xlat16_0.x = unity_SpecCube0_HDR.w * u_xlat16_0.x + 1.0;
					    u_xlat16_0.x = u_xlat16_0.x * unity_SpecCube0_HDR.x;
					    u_xlat16_0.xyz = u_xlat10_1.xyz * u_xlat16_0.xxx;
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_27);
					    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
					    u_xlat10_4.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _EmissionColor.xyz;
					    u_xlat30 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat4.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					  xlv_TEXCOORD6 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp float atten_7;
					  lowp vec3 lightDir_8;
					  highp vec4 tmpvar_9;
					  mediump vec3 tmpvar_10;
					  tmpvar_10 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_11 = normalize(tmpvar_12);
					  tmpvar_9 = xlv_COLOR0;
					  lowp vec3 tmpvar_13;
					  mediump vec3 tmpvar_14;
					  lowp float tmpvar_15;
					  highp vec4 emissionSample_16;
					  highp vec4 diffuseSample_17;
					  highp vec4 nightSample_18;
					  highp vec4 daySample_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_19 = tmpvar_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_18 = tmpvar_21;
					  diffuseSample_17 = (mix (nightSample_18, daySample_19, vec4(_DayWeight)) * _Color);
					  diffuseSample_17.xyz = (diffuseSample_17.xyz * tmpvar_9.xyz);
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_16 = tmpvar_22;
					  highp vec3 tmpvar_23;
					  tmpvar_23 = ((emissionSample_16.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_13 = diffuseSample_17.xyz;
					  tmpvar_14 = tmpvar_23;
					  tmpvar_15 = diffuseSample_17.w;
					  mediump float realtimeShadowAttenuation_24;
					  highp vec4 v_25;
					  v_25.x = unity_MatrixV[0].z;
					  v_25.y = unity_MatrixV[1].z;
					  v_25.z = unity_MatrixV[2].z;
					  v_25.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_27;
					  highp float tmpvar_28;
					  tmpvar_28 = clamp (((
					    mix (dot (tmpvar_12, v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_27 = tmpvar_28;
					  lowp float tmpvar_29;
					  highp float lightShadowDataX_30;
					  mediump float tmpvar_31;
					  tmpvar_31 = _LightShadowData.x;
					  lightShadowDataX_30 = tmpvar_31;
					  highp float tmpvar_32;
					  tmpvar_32 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_30);
					  tmpvar_29 = tmpvar_32;
					  realtimeShadowAttenuation_24 = tmpvar_29;
					  mediump float tmpvar_33;
					  tmpvar_33 = mix (realtimeShadowAttenuation_24, 1.0, tmpvar_27);
					  atten_7 = tmpvar_33;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_8;
					  tmpvar_1 = tmpvar_11;
					  tmpvar_2 = atten_7;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_34;
					  Normal_34 = xlv_TEXCOORD1;
					  mediump float tmpvar_35;
					  highp float tmpvar_36;
					  highp float smoothness_37;
					  smoothness_37 = _Glossiness;
					  tmpvar_36 = (1.0 - smoothness_37);
					  tmpvar_35 = tmpvar_36;
					  mediump vec3 I_38;
					  I_38 = -(tmpvar_1);
					  mediump vec3 normalWorld_39;
					  normalWorld_39 = xlv_TEXCOORD1;
					  mediump vec4 realtimeDirTex_40;
					  mediump vec3 tmpvar_41;
					  tmpvar_41 = (tmpvar_4 * tmpvar_2);
					  lowp vec4 tmpvar_42;
					  tmpvar_42 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
					  lowp vec4 tmpvar_43;
					  tmpvar_43 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
					  realtimeDirTex_40 = tmpvar_43;
					  lowp vec4 dirTex_44;
					  dirTex_44 = realtimeDirTex_40;
					  lowp vec3 y_45;
					  y_45 = (dirTex_44.xyz - 0.5);
					  lowp float tmpvar_46;
					  tmpvar_46 = max (0.0001, dirTex_44.w);
					  mediump vec4 hdr_47;
					  hdr_47 = tmpvar_3;
					  mediump vec4 tmpvar_48;
					  tmpvar_48.xyz = (I_38 - (2.0 * (
					    dot (Normal_34, I_38)
					   * Normal_34)));
					  tmpvar_48.w = ((tmpvar_35 * (1.7 - 
					    (0.7 * tmpvar_35)
					  )) * 6.0);
					  lowp vec4 tmpvar_49;
					  tmpvar_49 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_48.xyz, tmpvar_48.w);
					  mediump vec4 tmpvar_50;
					  tmpvar_50 = tmpvar_49;
					  tmpvar_4 = tmpvar_41;
					  lowp vec3 tmpvar_51;
					  mediump vec4 c_52;
					  highp vec3 tmpvar_53;
					  tmpvar_53 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_54;
					  mediump vec3 albedo_55;
					  albedo_55 = tmpvar_13;
					  mediump vec3 tmpvar_56;
					  tmpvar_56 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_55, vec3(_Metallic));
					  mediump float tmpvar_57;
					  tmpvar_57 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_54 = (albedo_55 * tmpvar_57);
					  tmpvar_51 = tmpvar_54;
					  mediump vec3 diffColor_58;
					  diffColor_58 = tmpvar_51;
					  mediump float alpha_59;
					  alpha_59 = tmpvar_15;
					  tmpvar_51 = diffColor_58;
					  mediump vec3 diffColor_60;
					  diffColor_60 = tmpvar_51;
					  mediump vec3 color_61;
					  mediump vec2 rlPow4AndFresnelTerm_62;
					  mediump float tmpvar_63;
					  highp float tmpvar_64;
					  tmpvar_64 = clamp (dot (tmpvar_53, tmpvar_5), 0.0, 1.0);
					  tmpvar_63 = tmpvar_64;
					  mediump float tmpvar_65;
					  highp float tmpvar_66;
					  tmpvar_66 = clamp (dot (tmpvar_53, tmpvar_11), 0.0, 1.0);
					  tmpvar_65 = tmpvar_66;
					  highp vec2 tmpvar_67;
					  tmpvar_67.x = dot ((tmpvar_11 - (2.0 * 
					    (dot (tmpvar_53, tmpvar_11) * tmpvar_53)
					  )), tmpvar_5);
					  tmpvar_67.y = (1.0 - tmpvar_65);
					  highp vec2 tmpvar_68;
					  tmpvar_68 = ((tmpvar_67 * tmpvar_67) * (tmpvar_67 * tmpvar_67));
					  rlPow4AndFresnelTerm_62 = tmpvar_68;
					  mediump float tmpvar_69;
					  tmpvar_69 = rlPow4AndFresnelTerm_62.x;
					  mediump float specular_70;
					  highp float smoothness_71;
					  smoothness_71 = _Glossiness;
					  highp vec2 tmpvar_72;
					  tmpvar_72.x = tmpvar_69;
					  tmpvar_72.y = (1.0 - smoothness_71);
					  highp float tmpvar_73;
					  tmpvar_73 = (texture2D (unity_NHxRoughness, tmpvar_72).x * 16.0);
					  specular_70 = tmpvar_73;
					  color_61 = ((diffColor_60 + (specular_70 * tmpvar_56)) * (tmpvar_41 * tmpvar_63));
					  color_61 = (color_61 + ((
					    ((pow ((
					      (unity_DynamicLightmap_HDR.x * tmpvar_42.w)
					     * tmpvar_42.xyz), unity_DynamicLightmap_HDR.yyy) * (dot (normalWorld_39, y_45) + 0.5)) / tmpvar_46)
					   * diffColor_60) + (
					    ((hdr_47.x * ((hdr_47.w * 
					      (tmpvar_50.w - 1.0)
					    ) + 1.0)) * tmpvar_50.xyz)
					   * 
					    mix (tmpvar_56, vec3(clamp ((_Glossiness + (1.0 - tmpvar_57)), 0.0, 1.0)), rlPow4AndFresnelTerm_62.yyy)
					  )));
					  mediump vec4 tmpvar_74;
					  tmpvar_74.w = 1.0;
					  tmpvar_74.xyz = color_61;
					  c_52.xyz = tmpvar_74.xyz;
					  c_52.w = alpha_59;
					  c_6 = c_52;
					  c_6.xyz = (c_6.xyz + tmpvar_14);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					  xlv_TEXCOORD6 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp float atten_7;
					  lowp vec3 lightDir_8;
					  highp vec4 tmpvar_9;
					  mediump vec3 tmpvar_10;
					  tmpvar_10 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_11 = normalize(tmpvar_12);
					  tmpvar_9 = xlv_COLOR0;
					  lowp vec3 tmpvar_13;
					  mediump vec3 tmpvar_14;
					  lowp float tmpvar_15;
					  highp vec4 emissionSample_16;
					  highp vec4 diffuseSample_17;
					  highp vec4 nightSample_18;
					  highp vec4 daySample_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_19 = tmpvar_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_18 = tmpvar_21;
					  diffuseSample_17 = (mix (nightSample_18, daySample_19, vec4(_DayWeight)) * _Color);
					  diffuseSample_17.xyz = (diffuseSample_17.xyz * tmpvar_9.xyz);
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_16 = tmpvar_22;
					  highp vec3 tmpvar_23;
					  tmpvar_23 = ((emissionSample_16.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_13 = diffuseSample_17.xyz;
					  tmpvar_14 = tmpvar_23;
					  tmpvar_15 = diffuseSample_17.w;
					  mediump float realtimeShadowAttenuation_24;
					  highp vec4 v_25;
					  v_25.x = unity_MatrixV[0].z;
					  v_25.y = unity_MatrixV[1].z;
					  v_25.z = unity_MatrixV[2].z;
					  v_25.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_27;
					  highp float tmpvar_28;
					  tmpvar_28 = clamp (((
					    mix (dot (tmpvar_12, v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_27 = tmpvar_28;
					  lowp float tmpvar_29;
					  highp float lightShadowDataX_30;
					  mediump float tmpvar_31;
					  tmpvar_31 = _LightShadowData.x;
					  lightShadowDataX_30 = tmpvar_31;
					  highp float tmpvar_32;
					  tmpvar_32 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_30);
					  tmpvar_29 = tmpvar_32;
					  realtimeShadowAttenuation_24 = tmpvar_29;
					  mediump float tmpvar_33;
					  tmpvar_33 = mix (realtimeShadowAttenuation_24, 1.0, tmpvar_27);
					  atten_7 = tmpvar_33;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_8;
					  tmpvar_1 = tmpvar_11;
					  tmpvar_2 = atten_7;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_34;
					  Normal_34 = xlv_TEXCOORD1;
					  mediump float tmpvar_35;
					  highp float tmpvar_36;
					  highp float smoothness_37;
					  smoothness_37 = _Glossiness;
					  tmpvar_36 = (1.0 - smoothness_37);
					  tmpvar_35 = tmpvar_36;
					  mediump vec3 I_38;
					  I_38 = -(tmpvar_1);
					  mediump vec3 normalWorld_39;
					  normalWorld_39 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_40;
					  mediump vec4 realtimeDirTex_41;
					  mediump vec3 tmpvar_42;
					  mediump vec3 tmpvar_43;
					  tmpvar_42 = (tmpvar_4 * tmpvar_2);
					  lowp vec4 tmpvar_44;
					  tmpvar_44 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
					  lowp vec4 tmpvar_45;
					  tmpvar_45 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
					  realtimeDirTex_41 = tmpvar_45;
					  lowp vec4 dirTex_46;
					  dirTex_46 = realtimeDirTex_41;
					  lowp vec3 y_47;
					  y_47 = (dirTex_46.xyz - 0.5);
					  lowp float tmpvar_48;
					  tmpvar_48 = max (0.0001, dirTex_46.w);
					  tmpvar_43 = ((pow (
					    ((unity_DynamicLightmap_HDR.x * tmpvar_44.w) * tmpvar_44.xyz)
					  , unity_DynamicLightmap_HDR.yyy) * (
					    dot (normalWorld_39, y_47)
					   + 0.5)) / tmpvar_48);
					  mediump vec4 hdr_49;
					  hdr_49 = tmpvar_3;
					  mediump vec4 tmpvar_50;
					  tmpvar_50.xyz = (I_38 - (2.0 * (
					    dot (Normal_34, I_38)
					   * Normal_34)));
					  tmpvar_50.w = ((tmpvar_35 * (1.7 - 
					    (0.7 * tmpvar_35)
					  )) * 6.0);
					  lowp vec4 tmpvar_51;
					  tmpvar_51 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_50.xyz, tmpvar_50.w);
					  mediump vec4 tmpvar_52;
					  tmpvar_52 = tmpvar_51;
					  tmpvar_40 = ((hdr_49.x * (
					    (hdr_49.w * (tmpvar_52.w - 1.0))
					   + 1.0)) * tmpvar_52.xyz);
					  tmpvar_4 = tmpvar_42;
					  lowp vec3 tmpvar_53;
					  mediump vec4 c_54;
					  highp vec3 tmpvar_55;
					  tmpvar_55 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_56;
					  mediump vec3 albedo_57;
					  albedo_57 = tmpvar_13;
					  mediump vec3 tmpvar_58;
					  tmpvar_58 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_57, vec3(_Metallic));
					  mediump float tmpvar_59;
					  tmpvar_59 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_56 = (albedo_57 * tmpvar_59);
					  tmpvar_53 = tmpvar_56;
					  mediump vec3 diffColor_60;
					  diffColor_60 = tmpvar_53;
					  mediump float alpha_61;
					  alpha_61 = tmpvar_15;
					  tmpvar_53 = diffColor_60;
					  mediump vec3 diffColor_62;
					  diffColor_62 = tmpvar_53;
					  mediump vec3 color_63;
					  mediump float surfaceReduction_64;
					  highp float specularTerm_65;
					  highp float a2_66;
					  mediump float roughness_67;
					  mediump float perceptualRoughness_68;
					  highp vec3 tmpvar_69;
					  highp vec3 inVec_70;
					  inVec_70 = (tmpvar_5 + tmpvar_11);
					  tmpvar_69 = (inVec_70 * inversesqrt(max (0.001, 
					    dot (inVec_70, inVec_70)
					  )));
					  mediump float tmpvar_71;
					  highp float tmpvar_72;
					  tmpvar_72 = clamp (dot (tmpvar_55, tmpvar_5), 0.0, 1.0);
					  tmpvar_71 = tmpvar_72;
					  highp float tmpvar_73;
					  tmpvar_73 = clamp (dot (tmpvar_55, tmpvar_69), 0.0, 1.0);
					  mediump float tmpvar_74;
					  highp float tmpvar_75;
					  tmpvar_75 = clamp (dot (tmpvar_55, tmpvar_11), 0.0, 1.0);
					  tmpvar_74 = tmpvar_75;
					  highp float tmpvar_76;
					  highp float smoothness_77;
					  smoothness_77 = _Glossiness;
					  tmpvar_76 = (1.0 - smoothness_77);
					  perceptualRoughness_68 = tmpvar_76;
					  highp float tmpvar_78;
					  highp float perceptualRoughness_79;
					  perceptualRoughness_79 = perceptualRoughness_68;
					  tmpvar_78 = (perceptualRoughness_79 * perceptualRoughness_79);
					  roughness_67 = tmpvar_78;
					  mediump float tmpvar_80;
					  tmpvar_80 = (roughness_67 * roughness_67);
					  a2_66 = tmpvar_80;
					  specularTerm_65 = ((roughness_67 / (
					    (max (0.32, clamp (dot (tmpvar_5, tmpvar_69), 0.0, 1.0)) * (1.5 + roughness_67))
					   * 
					    (((tmpvar_73 * tmpvar_73) * (a2_66 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_81;
					  tmpvar_81 = clamp (specularTerm_65, 0.0, 100.0);
					  specularTerm_65 = tmpvar_81;
					  surfaceReduction_64 = (1.0 - ((roughness_67 * perceptualRoughness_68) * 0.28));
					  mediump float x_82;
					  x_82 = (1.0 - tmpvar_74);
					  mediump vec3 tmpvar_83;
					  tmpvar_83 = mix (tmpvar_58, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_59)
					  ), 0.0, 1.0)), vec3(((x_82 * x_82) * (x_82 * x_82))));
					  highp vec3 tmpvar_84;
					  tmpvar_84 = (((
					    ((diffColor_62 + (tmpvar_81 * tmpvar_58)) * tmpvar_42)
					   * tmpvar_71) + (tmpvar_43 * diffColor_62)) + ((surfaceReduction_64 * tmpvar_40) * tmpvar_83));
					  color_63 = tmpvar_84;
					  mediump vec4 tmpvar_85;
					  tmpvar_85.w = 1.0;
					  tmpvar_85.xyz = color_63;
					  c_54.xyz = tmpvar_85.xyz;
					  c_54.w = alpha_61;
					  c_6 = c_54;
					  c_6.xyz = (c_6.xyz + tmpvar_14);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					  xlv_TEXCOORD6 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp float atten_7;
					  lowp vec3 lightDir_8;
					  highp vec4 tmpvar_9;
					  mediump vec3 tmpvar_10;
					  tmpvar_10 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_11 = normalize(tmpvar_12);
					  tmpvar_9 = xlv_COLOR0;
					  lowp vec3 tmpvar_13;
					  mediump vec3 tmpvar_14;
					  lowp float tmpvar_15;
					  highp vec4 emissionSample_16;
					  highp vec4 diffuseSample_17;
					  highp vec4 nightSample_18;
					  highp vec4 daySample_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_19 = tmpvar_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_18 = tmpvar_21;
					  diffuseSample_17 = (mix (nightSample_18, daySample_19, vec4(_DayWeight)) * _Color);
					  diffuseSample_17.xyz = (diffuseSample_17.xyz * tmpvar_9.xyz);
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_16 = tmpvar_22;
					  highp vec3 tmpvar_23;
					  tmpvar_23 = ((emissionSample_16.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_13 = diffuseSample_17.xyz;
					  tmpvar_14 = tmpvar_23;
					  tmpvar_15 = diffuseSample_17.w;
					  mediump float realtimeShadowAttenuation_24;
					  highp vec4 v_25;
					  v_25.x = unity_MatrixV[0].z;
					  v_25.y = unity_MatrixV[1].z;
					  v_25.z = unity_MatrixV[2].z;
					  v_25.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_27;
					  highp float tmpvar_28;
					  tmpvar_28 = clamp (((
					    mix (dot (tmpvar_12, v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_27 = tmpvar_28;
					  lowp float tmpvar_29;
					  highp float lightShadowDataX_30;
					  mediump float tmpvar_31;
					  tmpvar_31 = _LightShadowData.x;
					  lightShadowDataX_30 = tmpvar_31;
					  highp float tmpvar_32;
					  tmpvar_32 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_30);
					  tmpvar_29 = tmpvar_32;
					  realtimeShadowAttenuation_24 = tmpvar_29;
					  mediump float tmpvar_33;
					  tmpvar_33 = mix (realtimeShadowAttenuation_24, 1.0, tmpvar_27);
					  atten_7 = tmpvar_33;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_8;
					  tmpvar_1 = tmpvar_11;
					  tmpvar_2 = atten_7;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_34;
					  Normal_34 = xlv_TEXCOORD1;
					  mediump float tmpvar_35;
					  highp float tmpvar_36;
					  highp float smoothness_37;
					  smoothness_37 = _Glossiness;
					  tmpvar_36 = (1.0 - smoothness_37);
					  tmpvar_35 = tmpvar_36;
					  mediump vec3 I_38;
					  I_38 = -(tmpvar_1);
					  mediump vec3 normalWorld_39;
					  normalWorld_39 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_40;
					  mediump vec4 realtimeDirTex_41;
					  mediump vec3 tmpvar_42;
					  mediump vec3 tmpvar_43;
					  tmpvar_42 = (tmpvar_4 * tmpvar_2);
					  lowp vec4 tmpvar_44;
					  tmpvar_44 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
					  lowp vec4 tmpvar_45;
					  tmpvar_45 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
					  realtimeDirTex_41 = tmpvar_45;
					  lowp vec4 dirTex_46;
					  dirTex_46 = realtimeDirTex_41;
					  lowp vec3 y_47;
					  y_47 = (dirTex_46.xyz - 0.5);
					  lowp float tmpvar_48;
					  tmpvar_48 = max (0.0001, dirTex_46.w);
					  tmpvar_43 = ((pow (
					    ((unity_DynamicLightmap_HDR.x * tmpvar_44.w) * tmpvar_44.xyz)
					  , unity_DynamicLightmap_HDR.yyy) * (
					    dot (normalWorld_39, y_47)
					   + 0.5)) / tmpvar_48);
					  mediump vec4 hdr_49;
					  hdr_49 = tmpvar_3;
					  mediump vec4 tmpvar_50;
					  tmpvar_50.xyz = (I_38 - (2.0 * (
					    dot (Normal_34, I_38)
					   * Normal_34)));
					  tmpvar_50.w = ((tmpvar_35 * (1.7 - 
					    (0.7 * tmpvar_35)
					  )) * 6.0);
					  lowp vec4 tmpvar_51;
					  tmpvar_51 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_50.xyz, tmpvar_50.w);
					  mediump vec4 tmpvar_52;
					  tmpvar_52 = tmpvar_51;
					  tmpvar_40 = ((hdr_49.x * (
					    (hdr_49.w * (tmpvar_52.w - 1.0))
					   + 1.0)) * tmpvar_52.xyz);
					  tmpvar_4 = tmpvar_42;
					  lowp vec3 tmpvar_53;
					  mediump vec4 c_54;
					  highp vec3 tmpvar_55;
					  tmpvar_55 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_56;
					  mediump vec3 albedo_57;
					  albedo_57 = tmpvar_13;
					  mediump vec3 tmpvar_58;
					  tmpvar_58 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_57, vec3(_Metallic));
					  mediump float tmpvar_59;
					  tmpvar_59 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_56 = (albedo_57 * tmpvar_59);
					  tmpvar_53 = tmpvar_56;
					  mediump vec3 diffColor_60;
					  diffColor_60 = tmpvar_53;
					  mediump float alpha_61;
					  alpha_61 = tmpvar_15;
					  tmpvar_53 = diffColor_60;
					  mediump vec3 diffColor_62;
					  diffColor_62 = tmpvar_53;
					  mediump vec3 color_63;
					  mediump float surfaceReduction_64;
					  highp float specularTerm_65;
					  highp float a2_66;
					  mediump float roughness_67;
					  mediump float perceptualRoughness_68;
					  highp vec3 tmpvar_69;
					  highp vec3 inVec_70;
					  inVec_70 = (tmpvar_5 + tmpvar_11);
					  tmpvar_69 = (inVec_70 * inversesqrt(max (0.001, 
					    dot (inVec_70, inVec_70)
					  )));
					  mediump float tmpvar_71;
					  highp float tmpvar_72;
					  tmpvar_72 = clamp (dot (tmpvar_55, tmpvar_5), 0.0, 1.0);
					  tmpvar_71 = tmpvar_72;
					  highp float tmpvar_73;
					  tmpvar_73 = clamp (dot (tmpvar_55, tmpvar_69), 0.0, 1.0);
					  mediump float tmpvar_74;
					  highp float tmpvar_75;
					  tmpvar_75 = clamp (dot (tmpvar_55, tmpvar_11), 0.0, 1.0);
					  tmpvar_74 = tmpvar_75;
					  highp float tmpvar_76;
					  highp float smoothness_77;
					  smoothness_77 = _Glossiness;
					  tmpvar_76 = (1.0 - smoothness_77);
					  perceptualRoughness_68 = tmpvar_76;
					  highp float tmpvar_78;
					  highp float perceptualRoughness_79;
					  perceptualRoughness_79 = perceptualRoughness_68;
					  tmpvar_78 = (perceptualRoughness_79 * perceptualRoughness_79);
					  roughness_67 = tmpvar_78;
					  mediump float tmpvar_80;
					  tmpvar_80 = (roughness_67 * roughness_67);
					  a2_66 = tmpvar_80;
					  specularTerm_65 = ((roughness_67 / (
					    (max (0.32, clamp (dot (tmpvar_5, tmpvar_69), 0.0, 1.0)) * (1.5 + roughness_67))
					   * 
					    (((tmpvar_73 * tmpvar_73) * (a2_66 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_81;
					  tmpvar_81 = clamp (specularTerm_65, 0.0, 100.0);
					  specularTerm_65 = tmpvar_81;
					  surfaceReduction_64 = (1.0 - ((roughness_67 * perceptualRoughness_68) * 0.28));
					  mediump float x_82;
					  x_82 = (1.0 - tmpvar_74);
					  mediump vec3 tmpvar_83;
					  tmpvar_83 = mix (tmpvar_58, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_59)
					  ), 0.0, 1.0)), vec3(((x_82 * x_82) * (x_82 * x_82))));
					  highp vec3 tmpvar_84;
					  tmpvar_84 = (((
					    ((diffColor_62 + (tmpvar_81 * tmpvar_58)) * tmpvar_42)
					   * tmpvar_71) + (tmpvar_43 * diffColor_62)) + ((surfaceReduction_64 * tmpvar_40) * tmpvar_83));
					  color_63 = tmpvar_84;
					  mediump vec4 tmpvar_85;
					  tmpvar_85.w = 1.0;
					  tmpvar_85.xyz = color_63;
					  c_54.xyz = tmpvar_85.xyz;
					  c_54.w = alpha_61;
					  c_6 = c_54;
					  c_6.xyz = (c_6.xyz + tmpvar_14);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					lowp vec3 u_xlat10_5;
					vec3 u_xlat6;
					lowp vec3 u_xlat10_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					float u_xlat10;
					lowp float u_xlat10_10;
					mediump vec3 u_xlat16_11;
					float u_xlat13;
					mediump float u_xlat16_13;
					float u_xlat30;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					float u_xlat33;
					mediump float u_xlat16_37;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat16_31 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_31 = u_xlat16_31 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
					    u_xlat3.z = (-_Glossiness) + 1.0;
					    u_xlat16_1.x = (-u_xlat3.z) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat3.z;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat5.xyz = vec3(u_xlat30) * u_xlat4.xyz;
					    u_xlat16_11.x = dot((-u_xlat5.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;
					    u_xlat16_11.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_11.xxx) + (-u_xlat5.xyz);
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_1.x);
					    u_xlat16_2.x = u_xlat10_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_1.xyz * u_xlat16_2.xxx;
					    u_xlat30 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat6.xyz = vec3(u_xlat30) * vs_TEXCOORD1.xyz;
					    u_xlat30 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat13 = u_xlat30;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
					#else
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					#endif
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat5.xyz = u_xlat6.xyz * (-vec3(u_xlat30)) + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat33 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat33 = u_xlat33 * u_xlat33;
					    u_xlat3.x = u_xlat33 * u_xlat33;
					    u_xlat3.x = texture(unity_NHxRoughness, u_xlat3.xz).x;
					    u_xlat3.x = u_xlat3.x * 16.0;
					    u_xlat16_32 = (-u_xlat13) + 1.0;
					    u_xlat16_13 = u_xlat16_32 * u_xlat16_32;
					    u_xlat16_13 = u_xlat16_32 * u_xlat16_13;
					    u_xlat16_13 = u_xlat16_32 * u_xlat16_13;
					    u_xlat10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_6.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_5.xyz = u_xlat10_5.xyz + (-u_xlat10_6.xyz);
					    u_xlat5.xyz = vec3(_DayWeight) * u_xlat16_5.xyz + u_xlat10_6.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat16_7.xyz = u_xlat5.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat5.xyz = u_xlat5.xyz * vs_COLOR0.xyz;
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_37 = (-u_xlat16_32) + _Glossiness;
					    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat5.xyz;
					    u_xlat16_32 = u_xlat16_37 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
					#else
					    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_32);
					    u_xlat16_9.xyz = vec3(u_xlat16_13) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat3.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat10 = (-u_xlat0.x) + u_xlat10;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat10 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat10_10 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_32 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_32 = u_xlat10_10 * u_xlat16_32 + _LightShadowData.x;
					    u_xlat16_37 = (-u_xlat16_32) + 1.0;
					    u_xlat16_32 = u_xlat0.x * u_xlat16_37 + u_xlat16_32;
					    u_xlat16_8.xyz = vec3(u_xlat16_32) * _LightColor0.xyz;
					    u_xlat16_8.xyz = vec3(u_xlat30) * u_xlat16_8.xyz;
					    u_xlat16_2.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat30 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					vec3 u_xlat4;
					mediump float u_xlat16_4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump vec3 u_xlat16_10;
					mediump float u_xlat16_11;
					mediump float u_xlat16_19;
					float u_xlat24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_25 = u_xlat16_25 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_25) * u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
					    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_3.xyz + (-u_xlat10_4.xyz);
					    u_xlat3.xyz = vec3(_DayWeight) * u_xlat16_3.xyz + u_xlat10_4.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat16_1.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat4.xyz;
					    u_xlat16_25 = (-u_xlat16_25) + _Glossiness;
					    u_xlat16_25 = u_xlat16_25 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + vec3(u_xlat16_25);
					    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat10_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_25 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_25 = u_xlat10_0.x * u_xlat16_25 + _LightShadowData.x;
					    u_xlat16_26 = (-u_xlat16_25) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3.x = dot(u_xlat8.xyz, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat3.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat3.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat0.x * u_xlat16_26 + u_xlat16_25;
					    u_xlat16_7.xyz = vec3(u_xlat16_25) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat8.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_27 = (-_Glossiness) + 1.0;
					    u_xlat16_4 = u_xlat16_27 * u_xlat16_27 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_4;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = inversesqrt(u_xlat4.x);
					    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat3.x = dot(u_xlat4.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16_11 = u_xlat16_27 * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_11 * u_xlat16_11 + -1.0;
					    u_xlat3.x = u_xlat3.x * u_xlat16_19 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat3.x;
					    u_xlat24 = u_xlat16_11 / u_xlat24;
					    u_xlat16_25 = u_xlat16_27 * u_xlat16_11;
					    u_xlat16_25 = (-u_xlat16_25) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat3.xyz = vec3(u_xlat24) * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat3.xyz = u_xlat16_7.xyz * u_xlat3.xyz;
					    u_xlat24 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_1.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat16_6.xyz;
					    u_xlat16_2.x = (-u_xlat16_27) * 0.699999988 + 1.70000005;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_27;
					    u_xlat16_2.x = u_xlat16_2.x * 6.0;
					    u_xlat16_10.x = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_10.x = u_xlat16_10.x + u_xlat16_10.x;
					    u_xlat16_10.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_10.xxx) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat10_0.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat3.xyz;
					    u_xlat10_3.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.xyz = u_xlat10_3.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					vec3 u_xlat4;
					mediump float u_xlat16_4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump vec3 u_xlat16_10;
					mediump float u_xlat16_11;
					mediump float u_xlat16_19;
					float u_xlat24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_25 = u_xlat16_25 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_25) * u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
					    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_3.xyz + (-u_xlat10_4.xyz);
					    u_xlat3.xyz = vec3(_DayWeight) * u_xlat16_3.xyz + u_xlat10_4.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat16_1.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat4.xyz;
					    u_xlat16_25 = (-u_xlat16_25) + _Glossiness;
					    u_xlat16_25 = u_xlat16_25 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + vec3(u_xlat16_25);
					    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat10_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_25 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_25 = u_xlat10_0.x * u_xlat16_25 + _LightShadowData.x;
					    u_xlat16_26 = (-u_xlat16_25) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3.x = dot(u_xlat8.xyz, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat3.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat3.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat0.x * u_xlat16_26 + u_xlat16_25;
					    u_xlat16_7.xyz = vec3(u_xlat16_25) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat8.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_27 = (-_Glossiness) + 1.0;
					    u_xlat16_4 = u_xlat16_27 * u_xlat16_27 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_4;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = inversesqrt(u_xlat4.x);
					    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat3.x = dot(u_xlat4.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16_11 = u_xlat16_27 * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_11 * u_xlat16_11 + -1.0;
					    u_xlat3.x = u_xlat3.x * u_xlat16_19 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat3.x;
					    u_xlat24 = u_xlat16_11 / u_xlat24;
					    u_xlat16_25 = u_xlat16_27 * u_xlat16_11;
					    u_xlat16_25 = (-u_xlat16_25) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat3.xyz = vec3(u_xlat24) * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat3.xyz = u_xlat16_7.xyz * u_xlat3.xyz;
					    u_xlat24 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_1.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat16_6.xyz;
					    u_xlat16_2.x = (-u_xlat16_27) * 0.699999988 + 1.70000005;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_27;
					    u_xlat16_2.x = u_xlat16_2.x * 6.0;
					    u_xlat16_10.x = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_10.x = u_xlat16_10.x + u_xlat16_10.x;
					    u_xlat16_10.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_10.xxx) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat10_0.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat3.xyz;
					    u_xlat10_3.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.xyz = u_xlat10_3.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  highp vec3 tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_10 = normalize(tmpvar_11);
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_12;
					  mediump vec3 tmpvar_13;
					  lowp float tmpvar_14;
					  highp vec4 emissionSample_15;
					  highp vec4 diffuseSample_16;
					  highp vec4 nightSample_17;
					  highp vec4 daySample_18;
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_18 = tmpvar_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_17 = tmpvar_20;
					  diffuseSample_16 = (mix (nightSample_17, daySample_18, vec4(_DayWeight)) * _Color);
					  diffuseSample_16.xyz = (diffuseSample_16.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_15 = tmpvar_21;
					  highp vec3 tmpvar_22;
					  tmpvar_22 = ((emissionSample_15.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_12 = diffuseSample_16.xyz;
					  tmpvar_13 = tmpvar_22;
					  tmpvar_14 = diffuseSample_16.w;
					  lowp float tmpvar_23;
					  highp float lightShadowDataX_24;
					  mediump float tmpvar_25;
					  tmpvar_25 = _LightShadowData.x;
					  lightShadowDataX_24 = tmpvar_25;
					  highp float tmpvar_26;
					  tmpvar_26 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_24);
					  tmpvar_23 = tmpvar_26;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_7;
					  tmpvar_1 = tmpvar_10;
					  tmpvar_2 = tmpvar_23;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = xlv_TEXCOORD1;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = xlv_TEXCOORD1;
					  lowp vec4 bakedDirTex_33;
					  mediump vec3 tmpvar_34;
					  highp vec4 v_35;
					  v_35.x = unity_MatrixV[0].z;
					  v_35.y = unity_MatrixV[1].z;
					  v_35.z = unity_MatrixV[2].z;
					  v_35.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_36;
					  tmpvar_36 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_37;
					  highp float tmpvar_38;
					  tmpvar_38 = clamp (((
					    mix (dot (tmpvar_11, v_35.xyz), sqrt(dot (tmpvar_36, tmpvar_36)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_37 = tmpvar_38;
					  tmpvar_34 = (tmpvar_4 * mix (tmpvar_2, 1.0, tmpvar_37));
					  mediump vec4 tmpvar_39;
					  tmpvar_39 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_40;
					  color_40 = tmpvar_39;
					  mediump vec4 tmpvar_41;
					  tmpvar_41 = texture2D (unity_LightmapInd, xlv_TEXCOORD3.xy);
					  bakedDirTex_33 = tmpvar_41;
					  lowp vec3 y_42;
					  y_42 = (bakedDirTex_33.xyz - 0.5);
					  lowp float tmpvar_43;
					  tmpvar_43 = max (0.0001, bakedDirTex_33.w);
					  mediump vec4 hdr_44;
					  hdr_44 = tmpvar_3;
					  mediump vec4 tmpvar_45;
					  tmpvar_45.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_45.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_46;
					  tmpvar_46 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_45.xyz, tmpvar_45.w);
					  mediump vec4 tmpvar_47;
					  tmpvar_47 = tmpvar_46;
					  tmpvar_4 = tmpvar_34;
					  lowp vec3 tmpvar_48;
					  mediump vec4 c_49;
					  highp vec3 tmpvar_50;
					  tmpvar_50 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_51;
					  mediump vec3 albedo_52;
					  albedo_52 = tmpvar_12;
					  mediump vec3 tmpvar_53;
					  tmpvar_53 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_52, vec3(_Metallic));
					  mediump float tmpvar_54;
					  tmpvar_54 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_51 = (albedo_52 * tmpvar_54);
					  tmpvar_48 = tmpvar_51;
					  mediump vec3 diffColor_55;
					  diffColor_55 = tmpvar_48;
					  mediump float alpha_56;
					  alpha_56 = tmpvar_14;
					  tmpvar_48 = diffColor_55;
					  mediump vec3 diffColor_57;
					  diffColor_57 = tmpvar_48;
					  mediump vec3 color_58;
					  mediump vec2 rlPow4AndFresnelTerm_59;
					  mediump float tmpvar_60;
					  highp float tmpvar_61;
					  tmpvar_61 = clamp (dot (tmpvar_50, tmpvar_5), 0.0, 1.0);
					  tmpvar_60 = tmpvar_61;
					  mediump float tmpvar_62;
					  highp float tmpvar_63;
					  tmpvar_63 = clamp (dot (tmpvar_50, tmpvar_10), 0.0, 1.0);
					  tmpvar_62 = tmpvar_63;
					  highp vec2 tmpvar_64;
					  tmpvar_64.x = dot ((tmpvar_10 - (2.0 * 
					    (dot (tmpvar_50, tmpvar_10) * tmpvar_50)
					  )), tmpvar_5);
					  tmpvar_64.y = (1.0 - tmpvar_62);
					  highp vec2 tmpvar_65;
					  tmpvar_65 = ((tmpvar_64 * tmpvar_64) * (tmpvar_64 * tmpvar_64));
					  rlPow4AndFresnelTerm_59 = tmpvar_65;
					  mediump float tmpvar_66;
					  tmpvar_66 = rlPow4AndFresnelTerm_59.x;
					  mediump float specular_67;
					  highp float smoothness_68;
					  smoothness_68 = _Glossiness;
					  highp vec2 tmpvar_69;
					  tmpvar_69.x = tmpvar_66;
					  tmpvar_69.y = (1.0 - smoothness_68);
					  highp float tmpvar_70;
					  tmpvar_70 = (texture2D (unity_NHxRoughness, tmpvar_69).x * 16.0);
					  specular_67 = tmpvar_70;
					  color_58 = ((diffColor_57 + (specular_67 * tmpvar_53)) * (tmpvar_34 * tmpvar_60));
					  color_58 = (color_58 + ((
					    (((unity_Lightmap_HDR.x * color_40.xyz) * (dot (normalWorld_32, y_42) + 0.5)) / tmpvar_43)
					   * diffColor_57) + (
					    ((hdr_44.x * ((hdr_44.w * 
					      (tmpvar_47.w - 1.0)
					    ) + 1.0)) * tmpvar_47.xyz)
					   * 
					    mix (tmpvar_53, vec3(clamp ((_Glossiness + (1.0 - tmpvar_54)), 0.0, 1.0)), rlPow4AndFresnelTerm_59.yyy)
					  )));
					  mediump vec4 tmpvar_71;
					  tmpvar_71.w = 1.0;
					  tmpvar_71.xyz = color_58;
					  c_49.xyz = tmpvar_71.xyz;
					  c_49.w = alpha_56;
					  c_6 = c_49;
					  c_6.xyz = (c_6.xyz + tmpvar_13);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  highp vec3 tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_10 = normalize(tmpvar_11);
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_12;
					  mediump vec3 tmpvar_13;
					  lowp float tmpvar_14;
					  highp vec4 emissionSample_15;
					  highp vec4 diffuseSample_16;
					  highp vec4 nightSample_17;
					  highp vec4 daySample_18;
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_18 = tmpvar_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_17 = tmpvar_20;
					  diffuseSample_16 = (mix (nightSample_17, daySample_18, vec4(_DayWeight)) * _Color);
					  diffuseSample_16.xyz = (diffuseSample_16.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_15 = tmpvar_21;
					  highp vec3 tmpvar_22;
					  tmpvar_22 = ((emissionSample_15.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_12 = diffuseSample_16.xyz;
					  tmpvar_13 = tmpvar_22;
					  tmpvar_14 = diffuseSample_16.w;
					  lowp float tmpvar_23;
					  highp float lightShadowDataX_24;
					  mediump float tmpvar_25;
					  tmpvar_25 = _LightShadowData.x;
					  lightShadowDataX_24 = tmpvar_25;
					  highp float tmpvar_26;
					  tmpvar_26 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_24);
					  tmpvar_23 = tmpvar_26;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_7;
					  tmpvar_1 = tmpvar_10;
					  tmpvar_2 = tmpvar_23;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = xlv_TEXCOORD1;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_33;
					  lowp vec4 bakedDirTex_34;
					  mediump vec3 tmpvar_35;
					  mediump vec3 tmpvar_36;
					  highp vec4 v_37;
					  v_37.x = unity_MatrixV[0].z;
					  v_37.y = unity_MatrixV[1].z;
					  v_37.z = unity_MatrixV[2].z;
					  v_37.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_38;
					  tmpvar_38 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_39;
					  highp float tmpvar_40;
					  tmpvar_40 = clamp (((
					    mix (dot (tmpvar_11, v_37.xyz), sqrt(dot (tmpvar_38, tmpvar_38)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_39 = tmpvar_40;
					  tmpvar_35 = (tmpvar_4 * mix (tmpvar_2, 1.0, tmpvar_39));
					  mediump vec4 tmpvar_41;
					  tmpvar_41 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_42;
					  color_42 = tmpvar_41;
					  mediump vec4 tmpvar_43;
					  tmpvar_43 = texture2D (unity_LightmapInd, xlv_TEXCOORD3.xy);
					  bakedDirTex_34 = tmpvar_43;
					  lowp vec3 y_44;
					  y_44 = (bakedDirTex_34.xyz - 0.5);
					  lowp float tmpvar_45;
					  tmpvar_45 = max (0.0001, bakedDirTex_34.w);
					  tmpvar_36 = (((unity_Lightmap_HDR.x * color_42.xyz) * (
					    dot (normalWorld_32, y_44)
					   + 0.5)) / tmpvar_45);
					  mediump vec4 hdr_46;
					  hdr_46 = tmpvar_3;
					  mediump vec4 tmpvar_47;
					  tmpvar_47.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_47.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_48;
					  tmpvar_48 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_47.xyz, tmpvar_47.w);
					  mediump vec4 tmpvar_49;
					  tmpvar_49 = tmpvar_48;
					  tmpvar_33 = ((hdr_46.x * (
					    (hdr_46.w * (tmpvar_49.w - 1.0))
					   + 1.0)) * tmpvar_49.xyz);
					  tmpvar_4 = tmpvar_35;
					  lowp vec3 tmpvar_50;
					  mediump vec4 c_51;
					  highp vec3 tmpvar_52;
					  tmpvar_52 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_53;
					  mediump vec3 albedo_54;
					  albedo_54 = tmpvar_12;
					  mediump vec3 tmpvar_55;
					  tmpvar_55 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_54, vec3(_Metallic));
					  mediump float tmpvar_56;
					  tmpvar_56 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_53 = (albedo_54 * tmpvar_56);
					  tmpvar_50 = tmpvar_53;
					  mediump vec3 diffColor_57;
					  diffColor_57 = tmpvar_50;
					  mediump float alpha_58;
					  alpha_58 = tmpvar_14;
					  tmpvar_50 = diffColor_57;
					  mediump vec3 diffColor_59;
					  diffColor_59 = tmpvar_50;
					  mediump vec3 color_60;
					  mediump float surfaceReduction_61;
					  highp float specularTerm_62;
					  highp float a2_63;
					  mediump float roughness_64;
					  mediump float perceptualRoughness_65;
					  highp vec3 tmpvar_66;
					  highp vec3 inVec_67;
					  inVec_67 = (tmpvar_5 + tmpvar_10);
					  tmpvar_66 = (inVec_67 * inversesqrt(max (0.001, 
					    dot (inVec_67, inVec_67)
					  )));
					  mediump float tmpvar_68;
					  highp float tmpvar_69;
					  tmpvar_69 = clamp (dot (tmpvar_52, tmpvar_5), 0.0, 1.0);
					  tmpvar_68 = tmpvar_69;
					  highp float tmpvar_70;
					  tmpvar_70 = clamp (dot (tmpvar_52, tmpvar_66), 0.0, 1.0);
					  mediump float tmpvar_71;
					  highp float tmpvar_72;
					  tmpvar_72 = clamp (dot (tmpvar_52, tmpvar_10), 0.0, 1.0);
					  tmpvar_71 = tmpvar_72;
					  highp float tmpvar_73;
					  highp float smoothness_74;
					  smoothness_74 = _Glossiness;
					  tmpvar_73 = (1.0 - smoothness_74);
					  perceptualRoughness_65 = tmpvar_73;
					  highp float tmpvar_75;
					  highp float perceptualRoughness_76;
					  perceptualRoughness_76 = perceptualRoughness_65;
					  tmpvar_75 = (perceptualRoughness_76 * perceptualRoughness_76);
					  roughness_64 = tmpvar_75;
					  mediump float tmpvar_77;
					  tmpvar_77 = (roughness_64 * roughness_64);
					  a2_63 = tmpvar_77;
					  specularTerm_62 = ((roughness_64 / (
					    (max (0.32, clamp (dot (tmpvar_5, tmpvar_66), 0.0, 1.0)) * (1.5 + roughness_64))
					   * 
					    (((tmpvar_70 * tmpvar_70) * (a2_63 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_78;
					  tmpvar_78 = clamp (specularTerm_62, 0.0, 100.0);
					  specularTerm_62 = tmpvar_78;
					  surfaceReduction_61 = (1.0 - ((roughness_64 * perceptualRoughness_65) * 0.28));
					  mediump float x_79;
					  x_79 = (1.0 - tmpvar_71);
					  mediump vec3 tmpvar_80;
					  tmpvar_80 = mix (tmpvar_55, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_56)
					  ), 0.0, 1.0)), vec3(((x_79 * x_79) * (x_79 * x_79))));
					  highp vec3 tmpvar_81;
					  tmpvar_81 = (((
					    ((diffColor_59 + (tmpvar_78 * tmpvar_55)) * tmpvar_35)
					   * tmpvar_68) + (tmpvar_36 * diffColor_59)) + ((surfaceReduction_61 * tmpvar_33) * tmpvar_80));
					  color_60 = tmpvar_81;
					  mediump vec4 tmpvar_82;
					  tmpvar_82.w = 1.0;
					  tmpvar_82.xyz = color_60;
					  c_51.xyz = tmpvar_82.xyz;
					  c_51.w = alpha_58;
					  c_6 = c_51;
					  c_6.xyz = (c_6.xyz + tmpvar_13);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  highp vec3 tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_10 = normalize(tmpvar_11);
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_12;
					  mediump vec3 tmpvar_13;
					  lowp float tmpvar_14;
					  highp vec4 emissionSample_15;
					  highp vec4 diffuseSample_16;
					  highp vec4 nightSample_17;
					  highp vec4 daySample_18;
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_18 = tmpvar_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_17 = tmpvar_20;
					  diffuseSample_16 = (mix (nightSample_17, daySample_18, vec4(_DayWeight)) * _Color);
					  diffuseSample_16.xyz = (diffuseSample_16.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_15 = tmpvar_21;
					  highp vec3 tmpvar_22;
					  tmpvar_22 = ((emissionSample_15.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_12 = diffuseSample_16.xyz;
					  tmpvar_13 = tmpvar_22;
					  tmpvar_14 = diffuseSample_16.w;
					  lowp float tmpvar_23;
					  highp float lightShadowDataX_24;
					  mediump float tmpvar_25;
					  tmpvar_25 = _LightShadowData.x;
					  lightShadowDataX_24 = tmpvar_25;
					  highp float tmpvar_26;
					  tmpvar_26 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_24);
					  tmpvar_23 = tmpvar_26;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_7;
					  tmpvar_1 = tmpvar_10;
					  tmpvar_2 = tmpvar_23;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = xlv_TEXCOORD1;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_33;
					  lowp vec4 bakedDirTex_34;
					  mediump vec3 tmpvar_35;
					  mediump vec3 tmpvar_36;
					  highp vec4 v_37;
					  v_37.x = unity_MatrixV[0].z;
					  v_37.y = unity_MatrixV[1].z;
					  v_37.z = unity_MatrixV[2].z;
					  v_37.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_38;
					  tmpvar_38 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_39;
					  highp float tmpvar_40;
					  tmpvar_40 = clamp (((
					    mix (dot (tmpvar_11, v_37.xyz), sqrt(dot (tmpvar_38, tmpvar_38)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_39 = tmpvar_40;
					  tmpvar_35 = (tmpvar_4 * mix (tmpvar_2, 1.0, tmpvar_39));
					  mediump vec4 tmpvar_41;
					  tmpvar_41 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_42;
					  color_42 = tmpvar_41;
					  mediump vec4 tmpvar_43;
					  tmpvar_43 = texture2D (unity_LightmapInd, xlv_TEXCOORD3.xy);
					  bakedDirTex_34 = tmpvar_43;
					  lowp vec3 y_44;
					  y_44 = (bakedDirTex_34.xyz - 0.5);
					  lowp float tmpvar_45;
					  tmpvar_45 = max (0.0001, bakedDirTex_34.w);
					  tmpvar_36 = (((unity_Lightmap_HDR.x * color_42.xyz) * (
					    dot (normalWorld_32, y_44)
					   + 0.5)) / tmpvar_45);
					  mediump vec4 hdr_46;
					  hdr_46 = tmpvar_3;
					  mediump vec4 tmpvar_47;
					  tmpvar_47.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_47.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_48;
					  tmpvar_48 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_47.xyz, tmpvar_47.w);
					  mediump vec4 tmpvar_49;
					  tmpvar_49 = tmpvar_48;
					  tmpvar_33 = ((hdr_46.x * (
					    (hdr_46.w * (tmpvar_49.w - 1.0))
					   + 1.0)) * tmpvar_49.xyz);
					  tmpvar_4 = tmpvar_35;
					  lowp vec3 tmpvar_50;
					  mediump vec4 c_51;
					  highp vec3 tmpvar_52;
					  tmpvar_52 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_53;
					  mediump vec3 albedo_54;
					  albedo_54 = tmpvar_12;
					  mediump vec3 tmpvar_55;
					  tmpvar_55 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_54, vec3(_Metallic));
					  mediump float tmpvar_56;
					  tmpvar_56 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_53 = (albedo_54 * tmpvar_56);
					  tmpvar_50 = tmpvar_53;
					  mediump vec3 diffColor_57;
					  diffColor_57 = tmpvar_50;
					  mediump float alpha_58;
					  alpha_58 = tmpvar_14;
					  tmpvar_50 = diffColor_57;
					  mediump vec3 diffColor_59;
					  diffColor_59 = tmpvar_50;
					  mediump vec3 color_60;
					  mediump float surfaceReduction_61;
					  highp float specularTerm_62;
					  highp float a2_63;
					  mediump float roughness_64;
					  mediump float perceptualRoughness_65;
					  highp vec3 tmpvar_66;
					  highp vec3 inVec_67;
					  inVec_67 = (tmpvar_5 + tmpvar_10);
					  tmpvar_66 = (inVec_67 * inversesqrt(max (0.001, 
					    dot (inVec_67, inVec_67)
					  )));
					  mediump float tmpvar_68;
					  highp float tmpvar_69;
					  tmpvar_69 = clamp (dot (tmpvar_52, tmpvar_5), 0.0, 1.0);
					  tmpvar_68 = tmpvar_69;
					  highp float tmpvar_70;
					  tmpvar_70 = clamp (dot (tmpvar_52, tmpvar_66), 0.0, 1.0);
					  mediump float tmpvar_71;
					  highp float tmpvar_72;
					  tmpvar_72 = clamp (dot (tmpvar_52, tmpvar_10), 0.0, 1.0);
					  tmpvar_71 = tmpvar_72;
					  highp float tmpvar_73;
					  highp float smoothness_74;
					  smoothness_74 = _Glossiness;
					  tmpvar_73 = (1.0 - smoothness_74);
					  perceptualRoughness_65 = tmpvar_73;
					  highp float tmpvar_75;
					  highp float perceptualRoughness_76;
					  perceptualRoughness_76 = perceptualRoughness_65;
					  tmpvar_75 = (perceptualRoughness_76 * perceptualRoughness_76);
					  roughness_64 = tmpvar_75;
					  mediump float tmpvar_77;
					  tmpvar_77 = (roughness_64 * roughness_64);
					  a2_63 = tmpvar_77;
					  specularTerm_62 = ((roughness_64 / (
					    (max (0.32, clamp (dot (tmpvar_5, tmpvar_66), 0.0, 1.0)) * (1.5 + roughness_64))
					   * 
					    (((tmpvar_70 * tmpvar_70) * (a2_63 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_78;
					  tmpvar_78 = clamp (specularTerm_62, 0.0, 100.0);
					  specularTerm_62 = tmpvar_78;
					  surfaceReduction_61 = (1.0 - ((roughness_64 * perceptualRoughness_65) * 0.28));
					  mediump float x_79;
					  x_79 = (1.0 - tmpvar_71);
					  mediump vec3 tmpvar_80;
					  tmpvar_80 = mix (tmpvar_55, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_56)
					  ), 0.0, 1.0)), vec3(((x_79 * x_79) * (x_79 * x_79))));
					  highp vec3 tmpvar_81;
					  tmpvar_81 = (((
					    ((diffColor_59 + (tmpvar_78 * tmpvar_55)) * tmpvar_35)
					   * tmpvar_68) + (tmpvar_36 * diffColor_59)) + ((surfaceReduction_61 * tmpvar_33) * tmpvar_80));
					  color_60 = tmpvar_81;
					  mediump vec4 tmpvar_82;
					  tmpvar_82.w = 1.0;
					  tmpvar_82.xyz = color_60;
					  c_51.xyz = tmpvar_82.xyz;
					  c_51.w = alpha_58;
					  c_6 = c_51;
					  c_6.xyz = (c_6.xyz + tmpvar_13);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD6;
					out highp vec3 vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat2 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat2;
					    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.zxy;
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat0.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD6.y = u_xlat2.x;
					    vs_TEXCOORD6.z = u_xlat1.x;
					    vs_TEXCOORD6.x = u_xlat0.z;
					    vs_TEXCOORD7.x = u_xlat0.x;
					    vs_TEXCOORD8.x = u_xlat0.y;
					    vs_TEXCOORD7.z = u_xlat1.y;
					    vs_TEXCOORD8.z = u_xlat1.z;
					    vs_TEXCOORD7.y = u_xlat2.y;
					    vs_TEXCOORD8.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					lowp vec3 u_xlat10_5;
					vec3 u_xlat6;
					lowp vec3 u_xlat10_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					float u_xlat10;
					lowp float u_xlat10_10;
					mediump vec3 u_xlat16_11;
					float u_xlat13;
					mediump float u_xlat16_13;
					float u_xlat30;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					float u_xlat33;
					mediump float u_xlat16_37;
					void main()
					{
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_0 = texture(unity_LightmapInd, vs_TEXCOORD3.xy);
					    u_xlat16_2.xyz = u_xlat16_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat16_0.w, 9.99999975e-05);
					    u_xlat16_31 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_31 = u_xlat16_31 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
					    u_xlat3.z = (-_Glossiness) + 1.0;
					    u_xlat16_1.x = (-u_xlat3.z) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat3.z;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat5.xyz = vec3(u_xlat30) * u_xlat4.xyz;
					    u_xlat16_11.x = dot((-u_xlat5.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;
					    u_xlat16_11.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_11.xxx) + (-u_xlat5.xyz);
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_1.x);
					    u_xlat16_2.x = u_xlat10_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_1.xyz * u_xlat16_2.xxx;
					    u_xlat30 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat6.xyz = vec3(u_xlat30) * vs_TEXCOORD1.xyz;
					    u_xlat30 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat13 = u_xlat30;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
					#else
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					#endif
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat5.xyz = u_xlat6.xyz * (-vec3(u_xlat30)) + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat33 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat33 = u_xlat33 * u_xlat33;
					    u_xlat3.x = u_xlat33 * u_xlat33;
					    u_xlat3.x = texture(unity_NHxRoughness, u_xlat3.xz).x;
					    u_xlat3.x = u_xlat3.x * 16.0;
					    u_xlat16_32 = (-u_xlat13) + 1.0;
					    u_xlat16_13 = u_xlat16_32 * u_xlat16_32;
					    u_xlat16_13 = u_xlat16_32 * u_xlat16_13;
					    u_xlat16_13 = u_xlat16_32 * u_xlat16_13;
					    u_xlat10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_6.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_5.xyz = u_xlat10_5.xyz + (-u_xlat10_6.xyz);
					    u_xlat5.xyz = vec3(_DayWeight) * u_xlat16_5.xyz + u_xlat10_6.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat16_7.xyz = u_xlat5.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat5.xyz = u_xlat5.xyz * vs_COLOR0.xyz;
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_37 = (-u_xlat16_32) + _Glossiness;
					    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat5.xyz;
					    u_xlat16_32 = u_xlat16_37 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
					#else
					    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_32);
					    u_xlat16_9.xyz = vec3(u_xlat16_13) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat3.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat10 = (-u_xlat0.x) + u_xlat10;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat10 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    vec3 txVec0 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
					    u_xlat10_10 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_32 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_32 = u_xlat10_10 * u_xlat16_32 + _LightShadowData.x;
					    u_xlat16_37 = (-u_xlat16_32) + 1.0;
					    u_xlat16_32 = u_xlat0.x * u_xlat16_37 + u_xlat16_32;
					    u_xlat16_8.xyz = vec3(u_xlat16_32) * _LightColor0.xyz;
					    u_xlat16_8.xyz = vec3(u_xlat30) * u_xlat16_8.xyz;
					    u_xlat16_2.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat30 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD6;
					out highp vec3 vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat2 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat2;
					    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.zxy;
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat0.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD6.y = u_xlat2.x;
					    vs_TEXCOORD6.z = u_xlat1.x;
					    vs_TEXCOORD6.x = u_xlat0.z;
					    vs_TEXCOORD7.x = u_xlat0.x;
					    vs_TEXCOORD8.x = u_xlat0.y;
					    vs_TEXCOORD7.z = u_xlat1.y;
					    vs_TEXCOORD8.z = u_xlat1.z;
					    vs_TEXCOORD7.y = u_xlat2.y;
					    vs_TEXCOORD8.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					vec3 u_xlat4;
					mediump float u_xlat16_4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump vec3 u_xlat16_10;
					mediump float u_xlat16_11;
					mediump float u_xlat16_19;
					float u_xlat24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_0 = texture(unity_LightmapInd, vs_TEXCOORD3.xy);
					    u_xlat16_2.xyz = u_xlat16_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat16_0.w, 9.99999975e-05);
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_25 = u_xlat16_25 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_25) * u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
					    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_3.xyz + (-u_xlat10_4.xyz);
					    u_xlat3.xyz = vec3(_DayWeight) * u_xlat16_3.xyz + u_xlat10_4.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat16_1.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat4.xyz;
					    u_xlat16_25 = (-u_xlat16_25) + _Glossiness;
					    u_xlat16_25 = u_xlat16_25 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + vec3(u_xlat16_25);
					    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3.x = dot(u_xlat8.xyz, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat3.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat3.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    vec3 txVec0 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
					    u_xlat10_3.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_25 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_25 = u_xlat10_3.x * u_xlat16_25 + _LightShadowData.x;
					    u_xlat16_26 = (-u_xlat16_25) + 1.0;
					    u_xlat16_25 = u_xlat0.x * u_xlat16_26 + u_xlat16_25;
					    u_xlat16_7.xyz = vec3(u_xlat16_25) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat8.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_27 = (-_Glossiness) + 1.0;
					    u_xlat16_4 = u_xlat16_27 * u_xlat16_27 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_4;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = inversesqrt(u_xlat4.x);
					    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat3.x = dot(u_xlat4.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16_11 = u_xlat16_27 * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_11 * u_xlat16_11 + -1.0;
					    u_xlat3.x = u_xlat3.x * u_xlat16_19 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat3.x;
					    u_xlat24 = u_xlat16_11 / u_xlat24;
					    u_xlat16_25 = u_xlat16_27 * u_xlat16_11;
					    u_xlat16_25 = (-u_xlat16_25) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat3.xyz = vec3(u_xlat24) * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat3.xyz = u_xlat16_7.xyz * u_xlat3.xyz;
					    u_xlat24 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_1.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat16_6.xyz;
					    u_xlat16_2.x = (-u_xlat16_27) * 0.699999988 + 1.70000005;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_27;
					    u_xlat16_2.x = u_xlat16_2.x * 6.0;
					    u_xlat16_10.x = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_10.x = u_xlat16_10.x + u_xlat16_10.x;
					    u_xlat16_10.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_10.xxx) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat10_0.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat3.xyz;
					    u_xlat10_3.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.xyz = u_xlat10_3.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD6;
					out highp vec3 vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat2 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat2;
					    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.zxy;
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat0.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD6.y = u_xlat2.x;
					    vs_TEXCOORD6.z = u_xlat1.x;
					    vs_TEXCOORD6.x = u_xlat0.z;
					    vs_TEXCOORD7.x = u_xlat0.x;
					    vs_TEXCOORD8.x = u_xlat0.y;
					    vs_TEXCOORD7.z = u_xlat1.y;
					    vs_TEXCOORD8.z = u_xlat1.z;
					    vs_TEXCOORD7.y = u_xlat2.y;
					    vs_TEXCOORD8.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					vec3 u_xlat4;
					mediump float u_xlat16_4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump vec3 u_xlat16_10;
					mediump float u_xlat16_11;
					mediump float u_xlat16_19;
					float u_xlat24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_0 = texture(unity_LightmapInd, vs_TEXCOORD3.xy);
					    u_xlat16_2.xyz = u_xlat16_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat16_0.w, 9.99999975e-05);
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_25 = u_xlat16_25 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_25) * u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
					    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_3.xyz + (-u_xlat10_4.xyz);
					    u_xlat3.xyz = vec3(_DayWeight) * u_xlat16_3.xyz + u_xlat10_4.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat16_1.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat4.xyz;
					    u_xlat16_25 = (-u_xlat16_25) + _Glossiness;
					    u_xlat16_25 = u_xlat16_25 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + vec3(u_xlat16_25);
					    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3.x = dot(u_xlat8.xyz, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat3.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat3.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    vec3 txVec0 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
					    u_xlat10_3.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_25 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_25 = u_xlat10_3.x * u_xlat16_25 + _LightShadowData.x;
					    u_xlat16_26 = (-u_xlat16_25) + 1.0;
					    u_xlat16_25 = u_xlat0.x * u_xlat16_26 + u_xlat16_25;
					    u_xlat16_7.xyz = vec3(u_xlat16_25) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat8.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_27 = (-_Glossiness) + 1.0;
					    u_xlat16_4 = u_xlat16_27 * u_xlat16_27 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_4;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = inversesqrt(u_xlat4.x);
					    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat3.x = dot(u_xlat4.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16_11 = u_xlat16_27 * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_11 * u_xlat16_11 + -1.0;
					    u_xlat3.x = u_xlat3.x * u_xlat16_19 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat3.x;
					    u_xlat24 = u_xlat16_11 / u_xlat24;
					    u_xlat16_25 = u_xlat16_27 * u_xlat16_11;
					    u_xlat16_25 = (-u_xlat16_25) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat3.xyz = vec3(u_xlat24) * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat3.xyz = u_xlat16_7.xyz * u_xlat3.xyz;
					    u_xlat24 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_1.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat16_6.xyz;
					    u_xlat16_2.x = (-u_xlat16_27) * 0.699999988 + 1.70000005;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_27;
					    u_xlat16_2.x = u_xlat16_2.x * 6.0;
					    u_xlat16_10.x = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_10.x = u_xlat16_10.x + u_xlat16_10.x;
					    u_xlat16_10.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_10.xxx) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat10_0.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat3.xyz;
					    u_xlat10_3.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.xyz = u_xlat10_3.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  highp vec3 tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_10 = normalize(tmpvar_11);
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_12;
					  mediump vec3 tmpvar_13;
					  lowp float tmpvar_14;
					  highp vec4 emissionSample_15;
					  highp vec4 diffuseSample_16;
					  highp vec4 nightSample_17;
					  highp vec4 daySample_18;
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_18 = tmpvar_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_17 = tmpvar_20;
					  diffuseSample_16 = (mix (nightSample_17, daySample_18, vec4(_DayWeight)) * _Color);
					  diffuseSample_16.xyz = (diffuseSample_16.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_15 = tmpvar_21;
					  highp vec3 tmpvar_22;
					  tmpvar_22 = ((emissionSample_15.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_12 = diffuseSample_16.xyz;
					  tmpvar_13 = tmpvar_22;
					  tmpvar_14 = diffuseSample_16.w;
					  lowp float tmpvar_23;
					  highp float lightShadowDataX_24;
					  mediump float tmpvar_25;
					  tmpvar_25 = _LightShadowData.x;
					  lightShadowDataX_24 = tmpvar_25;
					  highp float tmpvar_26;
					  tmpvar_26 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_24);
					  tmpvar_23 = tmpvar_26;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_7;
					  tmpvar_1 = tmpvar_10;
					  tmpvar_2 = tmpvar_23;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = xlv_TEXCOORD1;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = xlv_TEXCOORD1;
					  lowp vec4 bakedDirTex_33;
					  mediump vec3 tmpvar_34;
					  highp vec4 v_35;
					  v_35.x = unity_MatrixV[0].z;
					  v_35.y = unity_MatrixV[1].z;
					  v_35.z = unity_MatrixV[2].z;
					  v_35.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_36;
					  tmpvar_36 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_37;
					  highp float tmpvar_38;
					  tmpvar_38 = clamp (((
					    mix (dot (tmpvar_11, v_35.xyz), sqrt(dot (tmpvar_36, tmpvar_36)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_37 = tmpvar_38;
					  tmpvar_34 = (tmpvar_4 * mix (tmpvar_2, 1.0, tmpvar_37));
					  mediump vec3 ambient_39;
					  mediump vec4 tmpvar_40;
					  tmpvar_40.w = 1.0;
					  tmpvar_40.xyz = normalWorld_32;
					  mediump vec3 x_41;
					  x_41.x = dot (unity_SHAr, tmpvar_40);
					  x_41.y = dot (unity_SHAg, tmpvar_40);
					  x_41.z = dot (unity_SHAb, tmpvar_40);
					  mediump vec3 x1_42;
					  mediump vec4 tmpvar_43;
					  tmpvar_43 = (normalWorld_32.xyzz * normalWorld_32.yzzx);
					  x1_42.x = dot (unity_SHBr, tmpvar_43);
					  x1_42.y = dot (unity_SHBg, tmpvar_43);
					  x1_42.z = dot (unity_SHBb, tmpvar_43);
					  ambient_39 = max (vec3(0.0, 0.0, 0.0), (x_41 + (x1_42 + 
					    (unity_SHC.xyz * ((normalWorld_32.x * normalWorld_32.x) - (normalWorld_32.y * normalWorld_32.y)))
					  )));
					  mediump vec3 tmpvar_44;
					  tmpvar_44 = max (((1.055 * 
					    pow (max (ambient_39, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  ambient_39 = tmpvar_44;
					  mediump vec4 tmpvar_45;
					  tmpvar_45 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_46;
					  color_46 = tmpvar_45;
					  mediump vec4 tmpvar_47;
					  tmpvar_47 = texture2D (unity_LightmapInd, xlv_TEXCOORD3.xy);
					  bakedDirTex_33 = tmpvar_47;
					  lowp vec3 y_48;
					  y_48 = (bakedDirTex_33.xyz - 0.5);
					  lowp float tmpvar_49;
					  tmpvar_49 = max (0.0001, bakedDirTex_33.w);
					  mediump vec4 hdr_50;
					  hdr_50 = tmpvar_3;
					  mediump vec4 tmpvar_51;
					  tmpvar_51.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_51.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_52;
					  tmpvar_52 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_51.xyz, tmpvar_51.w);
					  mediump vec4 tmpvar_53;
					  tmpvar_53 = tmpvar_52;
					  tmpvar_4 = tmpvar_34;
					  lowp vec3 tmpvar_54;
					  mediump vec4 c_55;
					  highp vec3 tmpvar_56;
					  tmpvar_56 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_57;
					  mediump vec3 albedo_58;
					  albedo_58 = tmpvar_12;
					  mediump vec3 tmpvar_59;
					  tmpvar_59 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_58, vec3(_Metallic));
					  mediump float tmpvar_60;
					  tmpvar_60 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_57 = (albedo_58 * tmpvar_60);
					  tmpvar_54 = tmpvar_57;
					  mediump vec3 diffColor_61;
					  diffColor_61 = tmpvar_54;
					  mediump float alpha_62;
					  alpha_62 = tmpvar_14;
					  tmpvar_54 = diffColor_61;
					  mediump vec3 diffColor_63;
					  diffColor_63 = tmpvar_54;
					  mediump vec3 color_64;
					  mediump vec2 rlPow4AndFresnelTerm_65;
					  mediump float tmpvar_66;
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (dot (tmpvar_56, tmpvar_5), 0.0, 1.0);
					  tmpvar_66 = tmpvar_67;
					  mediump float tmpvar_68;
					  highp float tmpvar_69;
					  tmpvar_69 = clamp (dot (tmpvar_56, tmpvar_10), 0.0, 1.0);
					  tmpvar_68 = tmpvar_69;
					  highp vec2 tmpvar_70;
					  tmpvar_70.x = dot ((tmpvar_10 - (2.0 * 
					    (dot (tmpvar_56, tmpvar_10) * tmpvar_56)
					  )), tmpvar_5);
					  tmpvar_70.y = (1.0 - tmpvar_68);
					  highp vec2 tmpvar_71;
					  tmpvar_71 = ((tmpvar_70 * tmpvar_70) * (tmpvar_70 * tmpvar_70));
					  rlPow4AndFresnelTerm_65 = tmpvar_71;
					  mediump float tmpvar_72;
					  tmpvar_72 = rlPow4AndFresnelTerm_65.x;
					  mediump float specular_73;
					  highp float smoothness_74;
					  smoothness_74 = _Glossiness;
					  highp vec2 tmpvar_75;
					  tmpvar_75.x = tmpvar_72;
					  tmpvar_75.y = (1.0 - smoothness_74);
					  highp float tmpvar_76;
					  tmpvar_76 = (texture2D (unity_NHxRoughness, tmpvar_75).x * 16.0);
					  specular_73 = tmpvar_76;
					  color_64 = ((diffColor_63 + (specular_73 * tmpvar_59)) * (tmpvar_34 * tmpvar_66));
					  color_64 = (color_64 + ((
					    (tmpvar_44 + (((unity_Lightmap_HDR.x * color_46.xyz) * (
					      dot (normalWorld_32, y_48)
					     + 0.5)) / tmpvar_49))
					   * diffColor_63) + (
					    ((hdr_50.x * ((hdr_50.w * 
					      (tmpvar_53.w - 1.0)
					    ) + 1.0)) * tmpvar_53.xyz)
					   * 
					    mix (tmpvar_59, vec3(clamp ((_Glossiness + (1.0 - tmpvar_60)), 0.0, 1.0)), rlPow4AndFresnelTerm_65.yyy)
					  )));
					  mediump vec4 tmpvar_77;
					  tmpvar_77.w = 1.0;
					  tmpvar_77.xyz = color_64;
					  c_55.xyz = tmpvar_77.xyz;
					  c_55.w = alpha_62;
					  c_6 = c_55;
					  c_6.xyz = (c_6.xyz + tmpvar_13);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  highp vec3 tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_10 = normalize(tmpvar_11);
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_12;
					  mediump vec3 tmpvar_13;
					  lowp float tmpvar_14;
					  highp vec4 emissionSample_15;
					  highp vec4 diffuseSample_16;
					  highp vec4 nightSample_17;
					  highp vec4 daySample_18;
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_18 = tmpvar_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_17 = tmpvar_20;
					  diffuseSample_16 = (mix (nightSample_17, daySample_18, vec4(_DayWeight)) * _Color);
					  diffuseSample_16.xyz = (diffuseSample_16.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_15 = tmpvar_21;
					  highp vec3 tmpvar_22;
					  tmpvar_22 = ((emissionSample_15.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_12 = diffuseSample_16.xyz;
					  tmpvar_13 = tmpvar_22;
					  tmpvar_14 = diffuseSample_16.w;
					  lowp float tmpvar_23;
					  highp float lightShadowDataX_24;
					  mediump float tmpvar_25;
					  tmpvar_25 = _LightShadowData.x;
					  lightShadowDataX_24 = tmpvar_25;
					  highp float tmpvar_26;
					  tmpvar_26 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_24);
					  tmpvar_23 = tmpvar_26;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_7;
					  tmpvar_1 = tmpvar_10;
					  tmpvar_2 = tmpvar_23;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = xlv_TEXCOORD1;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_33;
					  lowp vec4 bakedDirTex_34;
					  mediump vec3 tmpvar_35;
					  mediump vec3 tmpvar_36;
					  highp vec4 v_37;
					  v_37.x = unity_MatrixV[0].z;
					  v_37.y = unity_MatrixV[1].z;
					  v_37.z = unity_MatrixV[2].z;
					  v_37.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_38;
					  tmpvar_38 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_39;
					  highp float tmpvar_40;
					  tmpvar_40 = clamp (((
					    mix (dot (tmpvar_11, v_37.xyz), sqrt(dot (tmpvar_38, tmpvar_38)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_39 = tmpvar_40;
					  tmpvar_35 = (tmpvar_4 * mix (tmpvar_2, 1.0, tmpvar_39));
					  mediump vec3 ambient_41;
					  mediump vec4 tmpvar_42;
					  tmpvar_42.w = 1.0;
					  tmpvar_42.xyz = normalWorld_32;
					  mediump vec3 x_43;
					  x_43.x = dot (unity_SHAr, tmpvar_42);
					  x_43.y = dot (unity_SHAg, tmpvar_42);
					  x_43.z = dot (unity_SHAb, tmpvar_42);
					  mediump vec3 x1_44;
					  mediump vec4 tmpvar_45;
					  tmpvar_45 = (normalWorld_32.xyzz * normalWorld_32.yzzx);
					  x1_44.x = dot (unity_SHBr, tmpvar_45);
					  x1_44.y = dot (unity_SHBg, tmpvar_45);
					  x1_44.z = dot (unity_SHBb, tmpvar_45);
					  ambient_41 = max (vec3(0.0, 0.0, 0.0), (x_43 + (x1_44 + 
					    (unity_SHC.xyz * ((normalWorld_32.x * normalWorld_32.x) - (normalWorld_32.y * normalWorld_32.y)))
					  )));
					  mediump vec3 tmpvar_46;
					  tmpvar_46 = max (((1.055 * 
					    pow (max (ambient_41, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  ambient_41 = tmpvar_46;
					  mediump vec4 tmpvar_47;
					  tmpvar_47 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_48;
					  color_48 = tmpvar_47;
					  mediump vec4 tmpvar_49;
					  tmpvar_49 = texture2D (unity_LightmapInd, xlv_TEXCOORD3.xy);
					  bakedDirTex_34 = tmpvar_49;
					  lowp vec3 y_50;
					  y_50 = (bakedDirTex_34.xyz - 0.5);
					  lowp float tmpvar_51;
					  tmpvar_51 = max (0.0001, bakedDirTex_34.w);
					  tmpvar_36 = (tmpvar_46 + ((
					    (unity_Lightmap_HDR.x * color_48.xyz)
					   * 
					    (dot (normalWorld_32, y_50) + 0.5)
					  ) / tmpvar_51));
					  mediump vec4 hdr_52;
					  hdr_52 = tmpvar_3;
					  mediump vec4 tmpvar_53;
					  tmpvar_53.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_53.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_54;
					  tmpvar_54 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_53.xyz, tmpvar_53.w);
					  mediump vec4 tmpvar_55;
					  tmpvar_55 = tmpvar_54;
					  tmpvar_33 = ((hdr_52.x * (
					    (hdr_52.w * (tmpvar_55.w - 1.0))
					   + 1.0)) * tmpvar_55.xyz);
					  tmpvar_4 = tmpvar_35;
					  lowp vec3 tmpvar_56;
					  mediump vec4 c_57;
					  highp vec3 tmpvar_58;
					  tmpvar_58 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_59;
					  mediump vec3 albedo_60;
					  albedo_60 = tmpvar_12;
					  mediump vec3 tmpvar_61;
					  tmpvar_61 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_60, vec3(_Metallic));
					  mediump float tmpvar_62;
					  tmpvar_62 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_59 = (albedo_60 * tmpvar_62);
					  tmpvar_56 = tmpvar_59;
					  mediump vec3 diffColor_63;
					  diffColor_63 = tmpvar_56;
					  mediump float alpha_64;
					  alpha_64 = tmpvar_14;
					  tmpvar_56 = diffColor_63;
					  mediump vec3 diffColor_65;
					  diffColor_65 = tmpvar_56;
					  mediump vec3 color_66;
					  mediump float surfaceReduction_67;
					  highp float specularTerm_68;
					  highp float a2_69;
					  mediump float roughness_70;
					  mediump float perceptualRoughness_71;
					  highp vec3 tmpvar_72;
					  highp vec3 inVec_73;
					  inVec_73 = (tmpvar_5 + tmpvar_10);
					  tmpvar_72 = (inVec_73 * inversesqrt(max (0.001, 
					    dot (inVec_73, inVec_73)
					  )));
					  mediump float tmpvar_74;
					  highp float tmpvar_75;
					  tmpvar_75 = clamp (dot (tmpvar_58, tmpvar_5), 0.0, 1.0);
					  tmpvar_74 = tmpvar_75;
					  highp float tmpvar_76;
					  tmpvar_76 = clamp (dot (tmpvar_58, tmpvar_72), 0.0, 1.0);
					  mediump float tmpvar_77;
					  highp float tmpvar_78;
					  tmpvar_78 = clamp (dot (tmpvar_58, tmpvar_10), 0.0, 1.0);
					  tmpvar_77 = tmpvar_78;
					  highp float tmpvar_79;
					  highp float smoothness_80;
					  smoothness_80 = _Glossiness;
					  tmpvar_79 = (1.0 - smoothness_80);
					  perceptualRoughness_71 = tmpvar_79;
					  highp float tmpvar_81;
					  highp float perceptualRoughness_82;
					  perceptualRoughness_82 = perceptualRoughness_71;
					  tmpvar_81 = (perceptualRoughness_82 * perceptualRoughness_82);
					  roughness_70 = tmpvar_81;
					  mediump float tmpvar_83;
					  tmpvar_83 = (roughness_70 * roughness_70);
					  a2_69 = tmpvar_83;
					  specularTerm_68 = ((roughness_70 / (
					    (max (0.32, clamp (dot (tmpvar_5, tmpvar_72), 0.0, 1.0)) * (1.5 + roughness_70))
					   * 
					    (((tmpvar_76 * tmpvar_76) * (a2_69 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_84;
					  tmpvar_84 = clamp (specularTerm_68, 0.0, 100.0);
					  specularTerm_68 = tmpvar_84;
					  surfaceReduction_67 = (1.0 - ((roughness_70 * perceptualRoughness_71) * 0.28));
					  mediump float x_85;
					  x_85 = (1.0 - tmpvar_77);
					  mediump vec3 tmpvar_86;
					  tmpvar_86 = mix (tmpvar_61, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_62)
					  ), 0.0, 1.0)), vec3(((x_85 * x_85) * (x_85 * x_85))));
					  highp vec3 tmpvar_87;
					  tmpvar_87 = (((
					    ((diffColor_65 + (tmpvar_84 * tmpvar_61)) * tmpvar_35)
					   * tmpvar_74) + (tmpvar_36 * diffColor_65)) + ((surfaceReduction_67 * tmpvar_33) * tmpvar_86));
					  color_66 = tmpvar_87;
					  mediump vec4 tmpvar_88;
					  tmpvar_88.w = 1.0;
					  tmpvar_88.xyz = color_66;
					  c_57.xyz = tmpvar_88.xyz;
					  c_57.w = alpha_64;
					  c_6 = c_57;
					  c_6.xyz = (c_6.xyz + tmpvar_13);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  highp vec3 tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_10 = normalize(tmpvar_11);
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_12;
					  mediump vec3 tmpvar_13;
					  lowp float tmpvar_14;
					  highp vec4 emissionSample_15;
					  highp vec4 diffuseSample_16;
					  highp vec4 nightSample_17;
					  highp vec4 daySample_18;
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_18 = tmpvar_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_17 = tmpvar_20;
					  diffuseSample_16 = (mix (nightSample_17, daySample_18, vec4(_DayWeight)) * _Color);
					  diffuseSample_16.xyz = (diffuseSample_16.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_15 = tmpvar_21;
					  highp vec3 tmpvar_22;
					  tmpvar_22 = ((emissionSample_15.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_12 = diffuseSample_16.xyz;
					  tmpvar_13 = tmpvar_22;
					  tmpvar_14 = diffuseSample_16.w;
					  lowp float tmpvar_23;
					  highp float lightShadowDataX_24;
					  mediump float tmpvar_25;
					  tmpvar_25 = _LightShadowData.x;
					  lightShadowDataX_24 = tmpvar_25;
					  highp float tmpvar_26;
					  tmpvar_26 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_24);
					  tmpvar_23 = tmpvar_26;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_7;
					  tmpvar_1 = tmpvar_10;
					  tmpvar_2 = tmpvar_23;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = xlv_TEXCOORD1;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_33;
					  lowp vec4 bakedDirTex_34;
					  mediump vec3 tmpvar_35;
					  mediump vec3 tmpvar_36;
					  highp vec4 v_37;
					  v_37.x = unity_MatrixV[0].z;
					  v_37.y = unity_MatrixV[1].z;
					  v_37.z = unity_MatrixV[2].z;
					  v_37.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_38;
					  tmpvar_38 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_39;
					  highp float tmpvar_40;
					  tmpvar_40 = clamp (((
					    mix (dot (tmpvar_11, v_37.xyz), sqrt(dot (tmpvar_38, tmpvar_38)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_39 = tmpvar_40;
					  tmpvar_35 = (tmpvar_4 * mix (tmpvar_2, 1.0, tmpvar_39));
					  mediump vec3 ambient_41;
					  mediump vec4 tmpvar_42;
					  tmpvar_42.w = 1.0;
					  tmpvar_42.xyz = normalWorld_32;
					  mediump vec3 x_43;
					  x_43.x = dot (unity_SHAr, tmpvar_42);
					  x_43.y = dot (unity_SHAg, tmpvar_42);
					  x_43.z = dot (unity_SHAb, tmpvar_42);
					  mediump vec3 x1_44;
					  mediump vec4 tmpvar_45;
					  tmpvar_45 = (normalWorld_32.xyzz * normalWorld_32.yzzx);
					  x1_44.x = dot (unity_SHBr, tmpvar_45);
					  x1_44.y = dot (unity_SHBg, tmpvar_45);
					  x1_44.z = dot (unity_SHBb, tmpvar_45);
					  ambient_41 = max (vec3(0.0, 0.0, 0.0), (x_43 + (x1_44 + 
					    (unity_SHC.xyz * ((normalWorld_32.x * normalWorld_32.x) - (normalWorld_32.y * normalWorld_32.y)))
					  )));
					  mediump vec3 tmpvar_46;
					  tmpvar_46 = max (((1.055 * 
					    pow (max (ambient_41, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  ambient_41 = tmpvar_46;
					  mediump vec4 tmpvar_47;
					  tmpvar_47 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_48;
					  color_48 = tmpvar_47;
					  mediump vec4 tmpvar_49;
					  tmpvar_49 = texture2D (unity_LightmapInd, xlv_TEXCOORD3.xy);
					  bakedDirTex_34 = tmpvar_49;
					  lowp vec3 y_50;
					  y_50 = (bakedDirTex_34.xyz - 0.5);
					  lowp float tmpvar_51;
					  tmpvar_51 = max (0.0001, bakedDirTex_34.w);
					  tmpvar_36 = (tmpvar_46 + ((
					    (unity_Lightmap_HDR.x * color_48.xyz)
					   * 
					    (dot (normalWorld_32, y_50) + 0.5)
					  ) / tmpvar_51));
					  mediump vec4 hdr_52;
					  hdr_52 = tmpvar_3;
					  mediump vec4 tmpvar_53;
					  tmpvar_53.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_53.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_54;
					  tmpvar_54 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_53.xyz, tmpvar_53.w);
					  mediump vec4 tmpvar_55;
					  tmpvar_55 = tmpvar_54;
					  tmpvar_33 = ((hdr_52.x * (
					    (hdr_52.w * (tmpvar_55.w - 1.0))
					   + 1.0)) * tmpvar_55.xyz);
					  tmpvar_4 = tmpvar_35;
					  lowp vec3 tmpvar_56;
					  mediump vec4 c_57;
					  highp vec3 tmpvar_58;
					  tmpvar_58 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_59;
					  mediump vec3 albedo_60;
					  albedo_60 = tmpvar_12;
					  mediump vec3 tmpvar_61;
					  tmpvar_61 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_60, vec3(_Metallic));
					  mediump float tmpvar_62;
					  tmpvar_62 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_59 = (albedo_60 * tmpvar_62);
					  tmpvar_56 = tmpvar_59;
					  mediump vec3 diffColor_63;
					  diffColor_63 = tmpvar_56;
					  mediump float alpha_64;
					  alpha_64 = tmpvar_14;
					  tmpvar_56 = diffColor_63;
					  mediump vec3 diffColor_65;
					  diffColor_65 = tmpvar_56;
					  mediump vec3 color_66;
					  mediump float surfaceReduction_67;
					  highp float specularTerm_68;
					  highp float a2_69;
					  mediump float roughness_70;
					  mediump float perceptualRoughness_71;
					  highp vec3 tmpvar_72;
					  highp vec3 inVec_73;
					  inVec_73 = (tmpvar_5 + tmpvar_10);
					  tmpvar_72 = (inVec_73 * inversesqrt(max (0.001, 
					    dot (inVec_73, inVec_73)
					  )));
					  mediump float tmpvar_74;
					  highp float tmpvar_75;
					  tmpvar_75 = clamp (dot (tmpvar_58, tmpvar_5), 0.0, 1.0);
					  tmpvar_74 = tmpvar_75;
					  highp float tmpvar_76;
					  tmpvar_76 = clamp (dot (tmpvar_58, tmpvar_72), 0.0, 1.0);
					  mediump float tmpvar_77;
					  highp float tmpvar_78;
					  tmpvar_78 = clamp (dot (tmpvar_58, tmpvar_10), 0.0, 1.0);
					  tmpvar_77 = tmpvar_78;
					  highp float tmpvar_79;
					  highp float smoothness_80;
					  smoothness_80 = _Glossiness;
					  tmpvar_79 = (1.0 - smoothness_80);
					  perceptualRoughness_71 = tmpvar_79;
					  highp float tmpvar_81;
					  highp float perceptualRoughness_82;
					  perceptualRoughness_82 = perceptualRoughness_71;
					  tmpvar_81 = (perceptualRoughness_82 * perceptualRoughness_82);
					  roughness_70 = tmpvar_81;
					  mediump float tmpvar_83;
					  tmpvar_83 = (roughness_70 * roughness_70);
					  a2_69 = tmpvar_83;
					  specularTerm_68 = ((roughness_70 / (
					    (max (0.32, clamp (dot (tmpvar_5, tmpvar_72), 0.0, 1.0)) * (1.5 + roughness_70))
					   * 
					    (((tmpvar_76 * tmpvar_76) * (a2_69 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_84;
					  tmpvar_84 = clamp (specularTerm_68, 0.0, 100.0);
					  specularTerm_68 = tmpvar_84;
					  surfaceReduction_67 = (1.0 - ((roughness_70 * perceptualRoughness_71) * 0.28));
					  mediump float x_85;
					  x_85 = (1.0 - tmpvar_77);
					  mediump vec3 tmpvar_86;
					  tmpvar_86 = mix (tmpvar_61, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_62)
					  ), 0.0, 1.0)), vec3(((x_85 * x_85) * (x_85 * x_85))));
					  highp vec3 tmpvar_87;
					  tmpvar_87 = (((
					    ((diffColor_65 + (tmpvar_84 * tmpvar_61)) * tmpvar_35)
					   * tmpvar_74) + (tmpvar_36 * diffColor_65)) + ((surfaceReduction_67 * tmpvar_33) * tmpvar_86));
					  color_66 = tmpvar_87;
					  mediump vec4 tmpvar_88;
					  tmpvar_88.w = 1.0;
					  tmpvar_88.xyz = color_66;
					  c_57.xyz = tmpvar_88.xyz;
					  c_57.w = alpha_64;
					  c_6 = c_57;
					  c_6.xyz = (c_6.xyz + tmpvar_13);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD6;
					out highp vec3 vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat2 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat2;
					    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.zxy;
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat0.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD6.y = u_xlat2.x;
					    vs_TEXCOORD6.z = u_xlat1.x;
					    vs_TEXCOORD6.x = u_xlat0.z;
					    vs_TEXCOORD7.x = u_xlat0.x;
					    vs_TEXCOORD8.x = u_xlat0.y;
					    vs_TEXCOORD7.z = u_xlat1.y;
					    vs_TEXCOORD8.z = u_xlat1.z;
					    vs_TEXCOORD7.y = u_xlat2.y;
					    vs_TEXCOORD8.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					lowp vec3 u_xlat10_5;
					vec3 u_xlat6;
					lowp vec3 u_xlat10_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					float u_xlat13;
					float u_xlat23;
					mediump float u_xlat16_23;
					lowp float u_xlat10_23;
					mediump float u_xlat16_30;
					mediump float u_xlat16_32;
					float u_xlat33;
					mediump float u_xlat16_33;
					float u_xlat34;
					void main()
					{
					    u_xlat16_0.x = vs_TEXCOORD1.y * vs_TEXCOORD1.y;
					    u_xlat16_0.x = vs_TEXCOORD1.x * vs_TEXCOORD1.x + (-u_xlat16_0.x);
					    u_xlat16_1 = vs_TEXCOORD1.yzzx * vs_TEXCOORD1.xyzz;
					    u_xlat16_2.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_2.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_2.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_0.xyz = unity_SHC.xyz * u_xlat16_0.xxx + u_xlat16_2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_3.xyz = log2(u_xlat16_0.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_0.xyz = u_xlat16_4.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1 = texture(unity_LightmapInd, vs_TEXCOORD3.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_33 = max(u_xlat16_1.w, 9.99999975e-05);
					    u_xlat16_30 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_30 = u_xlat16_30 + 0.5;
					    u_xlat16_0.xyz = vec3(u_xlat16_30) * u_xlat16_0.xyz;
					    u_xlat16_4.xyz = u_xlat16_0.xyz / vec3(u_xlat16_33);
					    u_xlat16_0.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat3.z = (-_Glossiness) + 1.0;
					    u_xlat16_30 = (-u_xlat3.z) * 0.699999988 + 1.70000005;
					    u_xlat16_30 = u_xlat16_30 * u_xlat3.z;
					    u_xlat16_30 = u_xlat16_30 * 6.0;
					    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat13 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat5.xyz = vec3(u_xlat13) * u_xlat4.xyz;
					    u_xlat16_2.x = dot((-u_xlat5.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_2.xxx) + (-u_xlat5.xyz);
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_30);
					    u_xlat16_30 = u_xlat10_1.w + -1.0;
					    u_xlat16_30 = unity_SpecCube0_HDR.w * u_xlat16_30 + 1.0;
					    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(u_xlat16_30);
					    u_xlat13 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat6.xyz = vec3(u_xlat13) * vs_TEXCOORD1.xyz;
					    u_xlat13 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat33 = u_xlat13;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat13 = u_xlat13 + u_xlat13;
					    u_xlat5.xyz = u_xlat6.xyz * (-vec3(u_xlat13)) + u_xlat5.xyz;
					    u_xlat13 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
					#else
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					#endif
					    u_xlat34 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat3.x = u_xlat34 * u_xlat34;
					    u_xlat3.x = texture(unity_NHxRoughness, u_xlat3.xz).x;
					    u_xlat3.x = u_xlat3.x * 16.0;
					    u_xlat16_30 = (-u_xlat33) + 1.0;
					    u_xlat16_23 = u_xlat16_30 * u_xlat16_30;
					    u_xlat16_23 = u_xlat16_30 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_30 * u_xlat16_23;
					    u_xlat10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_6.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_5.xyz = u_xlat10_5.xyz + (-u_xlat10_6.xyz);
					    u_xlat5.xyz = vec3(_DayWeight) * u_xlat16_5.xyz + u_xlat10_6.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat16_7.xyz = u_xlat5.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat5.xyz = u_xlat5.xyz * vs_COLOR0.xyz;
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_32 = (-u_xlat16_30) + _Glossiness;
					    u_xlat16_8.xyz = vec3(u_xlat16_30) * u_xlat5.xyz;
					    u_xlat16_30 = u_xlat16_32 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_30);
					    u_xlat16_9.xyz = vec3(u_xlat16_23) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat3.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;
					    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.x = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat23 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat23 = sqrt(u_xlat23);
					    u_xlat23 = (-u_xlat3.x) + u_xlat23;
					    u_xlat3.x = unity_ShadowFadeCenterAndType.w * u_xlat23 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    vec3 txVec0 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
					    u_xlat10_23 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_30 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_30 = u_xlat10_23 * u_xlat16_30 + _LightShadowData.x;
					    u_xlat16_2.x = (-u_xlat16_30) + 1.0;
					    u_xlat16_30 = u_xlat3.x * u_xlat16_2.x + u_xlat16_30;
					    u_xlat16_2.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;
					    u_xlat16_2.xyz = vec3(u_xlat13) * u_xlat16_2.xyz;
					    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
					    u_xlat10_3.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.xyz = u_xlat10_3.xyz * _EmissionColor.xyz;
					    u_xlat33 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat3.xyz * vec3(u_xlat33) + u_xlat16_0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD6;
					out highp vec3 vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat2 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat2;
					    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.zxy;
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat0.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD6.y = u_xlat2.x;
					    vs_TEXCOORD6.z = u_xlat1.x;
					    vs_TEXCOORD6.x = u_xlat0.z;
					    vs_TEXCOORD7.x = u_xlat0.x;
					    vs_TEXCOORD8.x = u_xlat0.y;
					    vs_TEXCOORD7.z = u_xlat1.y;
					    vs_TEXCOORD8.z = u_xlat1.z;
					    vs_TEXCOORD7.y = u_xlat2.y;
					    vs_TEXCOORD8.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					vec3 u_xlat12;
					mediump float u_xlat16_13;
					mediump float u_xlat16_22;
					mediump float u_xlat16_27;
					mediump float u_xlat16_29;
					float u_xlat30;
					mediump float u_xlat16_30;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat16_0.x = vs_TEXCOORD1.y * vs_TEXCOORD1.y;
					    u_xlat16_0.x = vs_TEXCOORD1.x * vs_TEXCOORD1.x + (-u_xlat16_0.x);
					    u_xlat16_1 = vs_TEXCOORD1.yzzx * vs_TEXCOORD1.xyzz;
					    u_xlat16_2.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_2.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_2.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_0.xyz = unity_SHC.xyz * u_xlat16_0.xxx + u_xlat16_2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_3.xyz = log2(u_xlat16_0.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_0.xyz = u_xlat16_4.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1 = texture(unity_LightmapInd, vs_TEXCOORD3.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_30 = max(u_xlat16_1.w, 9.99999975e-05);
					    u_xlat16_27 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_27 = u_xlat16_27 + 0.5;
					    u_xlat16_0.xyz = vec3(u_xlat16_27) * u_xlat16_0.xyz;
					    u_xlat16_4.xyz = u_xlat16_0.xyz / vec3(u_xlat16_30);
					    u_xlat16_0.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_3.xyz + (-u_xlat10_4.xyz);
					    u_xlat3.xyz = vec3(_DayWeight) * u_xlat16_3.xyz + u_xlat10_4.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_27 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_5.xyz = vec3(u_xlat16_27) * u_xlat4.xyz;
					    u_xlat16_27 = (-u_xlat16_27) + _Glossiness;
					    u_xlat16_27 = u_xlat16_27 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_27);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
					    u_xlat3.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat12.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat4.x = dot(u_xlat12.xyz, u_xlat4.xyz);
					    u_xlat3.x = u_xlat3.x + (-u_xlat4.x);
					    u_xlat3.x = unity_ShadowFadeCenterAndType.w * u_xlat3.x + u_xlat4.x;
					    u_xlat3.x = u_xlat3.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    vec3 txVec0 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
					    u_xlat10_4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_27 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_27 = u_xlat10_4.x * u_xlat16_27 + _LightShadowData.x;
					    u_xlat16_29 = (-u_xlat16_27) + 1.0;
					    u_xlat16_27 = u_xlat3.x * u_xlat16_29 + u_xlat16_27;
					    u_xlat16_7.xyz = vec3(u_xlat16_27) * _LightColor0.xyz;
					    u_xlat3.x = dot(u_xlat12.xyz, u_xlat12.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat4.xyz = u_xlat12.xyz * u_xlat3.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat12.xyz;
					    u_xlat30 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat30 = max(u_xlat30, 0.00100000005);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.xyz;
					    u_xlat30 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat16_31 = (-_Glossiness) + 1.0;
					    u_xlat16_8 = u_xlat16_31 * u_xlat16_31 + 1.5;
					    u_xlat30 = u_xlat30 * u_xlat16_8;
					    u_xlat8.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
					    u_xlat4.x = dot(u_xlat8.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat4.x = u_xlat4.x * u_xlat4.x;
					    u_xlat16_13 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_22 = u_xlat16_13 * u_xlat16_13 + -1.0;
					    u_xlat4.x = u_xlat4.x * u_xlat16_22 + 1.00001001;
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat30 = u_xlat16_13 / u_xlat30;
					    u_xlat16_27 = u_xlat16_31 * u_xlat16_13;
					    u_xlat16_27 = (-u_xlat16_27) * 0.280000001 + 1.0;
					    u_xlat30 = u_xlat30 + -9.99999975e-05;
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat30 = min(u_xlat30, 100.0);
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat4.xyz = u_xlat16_7.xyz * u_xlat4.xyz;
					    u_xlat30 = dot(u_xlat8.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat8.x = dot(u_xlat8.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
					#else
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					#endif
					    u_xlat16_29 = (-u_xlat8.x) + 1.0;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_2.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz + u_xlat16_2.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat30) + u_xlat16_0.xyz;
					    u_xlat16_0.x = (-u_xlat16_31) * 0.699999988 + 1.70000005;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_31;
					    u_xlat16_0.x = u_xlat16_0.x * 6.0;
					    u_xlat16_9 = dot((-u_xlat3.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
					    u_xlat16_5.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_9)) + (-u_xlat3.xyz);
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat10_1.w + -1.0;
					    u_xlat16_0.x = unity_SpecCube0_HDR.w * u_xlat16_0.x + 1.0;
					    u_xlat16_0.x = u_xlat16_0.x * unity_SpecCube0_HDR.x;
					    u_xlat16_0.xyz = u_xlat10_1.xyz * u_xlat16_0.xxx;
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_27);
					    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
					    u_xlat10_4.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _EmissionColor.xyz;
					    u_xlat30 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat4.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD6;
					out highp vec3 vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat2 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat2;
					    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.zxy;
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat0.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD6.y = u_xlat2.x;
					    vs_TEXCOORD6.z = u_xlat1.x;
					    vs_TEXCOORD6.x = u_xlat0.z;
					    vs_TEXCOORD7.x = u_xlat0.x;
					    vs_TEXCOORD8.x = u_xlat0.y;
					    vs_TEXCOORD7.z = u_xlat1.y;
					    vs_TEXCOORD8.z = u_xlat1.z;
					    vs_TEXCOORD7.y = u_xlat2.y;
					    vs_TEXCOORD8.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					vec3 u_xlat12;
					mediump float u_xlat16_13;
					mediump float u_xlat16_22;
					mediump float u_xlat16_27;
					mediump float u_xlat16_29;
					float u_xlat30;
					mediump float u_xlat16_30;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat16_0.x = vs_TEXCOORD1.y * vs_TEXCOORD1.y;
					    u_xlat16_0.x = vs_TEXCOORD1.x * vs_TEXCOORD1.x + (-u_xlat16_0.x);
					    u_xlat16_1 = vs_TEXCOORD1.yzzx * vs_TEXCOORD1.xyzz;
					    u_xlat16_2.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_2.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_2.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_0.xyz = unity_SHC.xyz * u_xlat16_0.xxx + u_xlat16_2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_3.xyz = log2(u_xlat16_0.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_0.xyz = u_xlat16_4.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1 = texture(unity_LightmapInd, vs_TEXCOORD3.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_30 = max(u_xlat16_1.w, 9.99999975e-05);
					    u_xlat16_27 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_27 = u_xlat16_27 + 0.5;
					    u_xlat16_0.xyz = vec3(u_xlat16_27) * u_xlat16_0.xyz;
					    u_xlat16_4.xyz = u_xlat16_0.xyz / vec3(u_xlat16_30);
					    u_xlat16_0.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_3.xyz + (-u_xlat10_4.xyz);
					    u_xlat3.xyz = vec3(_DayWeight) * u_xlat16_3.xyz + u_xlat10_4.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_27 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_5.xyz = vec3(u_xlat16_27) * u_xlat4.xyz;
					    u_xlat16_27 = (-u_xlat16_27) + _Glossiness;
					    u_xlat16_27 = u_xlat16_27 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_27);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
					    u_xlat3.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat12.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat4.x = dot(u_xlat12.xyz, u_xlat4.xyz);
					    u_xlat3.x = u_xlat3.x + (-u_xlat4.x);
					    u_xlat3.x = unity_ShadowFadeCenterAndType.w * u_xlat3.x + u_xlat4.x;
					    u_xlat3.x = u_xlat3.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    vec3 txVec0 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
					    u_xlat10_4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_27 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_27 = u_xlat10_4.x * u_xlat16_27 + _LightShadowData.x;
					    u_xlat16_29 = (-u_xlat16_27) + 1.0;
					    u_xlat16_27 = u_xlat3.x * u_xlat16_29 + u_xlat16_27;
					    u_xlat16_7.xyz = vec3(u_xlat16_27) * _LightColor0.xyz;
					    u_xlat3.x = dot(u_xlat12.xyz, u_xlat12.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat4.xyz = u_xlat12.xyz * u_xlat3.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat12.xyz;
					    u_xlat30 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat30 = max(u_xlat30, 0.00100000005);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.xyz;
					    u_xlat30 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat16_31 = (-_Glossiness) + 1.0;
					    u_xlat16_8 = u_xlat16_31 * u_xlat16_31 + 1.5;
					    u_xlat30 = u_xlat30 * u_xlat16_8;
					    u_xlat8.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
					    u_xlat4.x = dot(u_xlat8.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat4.x = u_xlat4.x * u_xlat4.x;
					    u_xlat16_13 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_22 = u_xlat16_13 * u_xlat16_13 + -1.0;
					    u_xlat4.x = u_xlat4.x * u_xlat16_22 + 1.00001001;
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat30 = u_xlat16_13 / u_xlat30;
					    u_xlat16_27 = u_xlat16_31 * u_xlat16_13;
					    u_xlat16_27 = (-u_xlat16_27) * 0.280000001 + 1.0;
					    u_xlat30 = u_xlat30 + -9.99999975e-05;
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat30 = min(u_xlat30, 100.0);
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat4.xyz = u_xlat16_7.xyz * u_xlat4.xyz;
					    u_xlat30 = dot(u_xlat8.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat8.x = dot(u_xlat8.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
					#else
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					#endif
					    u_xlat16_29 = (-u_xlat8.x) + 1.0;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_2.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz + u_xlat16_2.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat30) + u_xlat16_0.xyz;
					    u_xlat16_0.x = (-u_xlat16_31) * 0.699999988 + 1.70000005;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_31;
					    u_xlat16_0.x = u_xlat16_0.x * 6.0;
					    u_xlat16_9 = dot((-u_xlat3.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
					    u_xlat16_5.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_9)) + (-u_xlat3.xyz);
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat10_1.w + -1.0;
					    u_xlat16_0.x = unity_SpecCube0_HDR.w * u_xlat16_0.x + 1.0;
					    u_xlat16_0.x = u_xlat16_0.x * unity_SpecCube0_HDR.x;
					    u_xlat16_0.xyz = u_xlat10_1.xyz * u_xlat16_0.xxx;
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_27);
					    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
					    u_xlat10_4.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _EmissionColor.xyz;
					    u_xlat30 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat4.xyz * vec3(u_xlat30) + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  highp vec3 tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_10 = normalize(tmpvar_11);
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_12;
					  mediump vec3 tmpvar_13;
					  lowp float tmpvar_14;
					  highp vec4 emissionSample_15;
					  highp vec4 diffuseSample_16;
					  highp vec4 nightSample_17;
					  highp vec4 daySample_18;
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_18 = tmpvar_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_17 = tmpvar_20;
					  diffuseSample_16 = (mix (nightSample_17, daySample_18, vec4(_DayWeight)) * _Color);
					  diffuseSample_16.xyz = (diffuseSample_16.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_15 = tmpvar_21;
					  highp vec3 tmpvar_22;
					  tmpvar_22 = ((emissionSample_15.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_12 = diffuseSample_16.xyz;
					  tmpvar_13 = tmpvar_22;
					  tmpvar_14 = diffuseSample_16.w;
					  lowp float tmpvar_23;
					  highp float lightShadowDataX_24;
					  mediump float tmpvar_25;
					  tmpvar_25 = _LightShadowData.x;
					  lightShadowDataX_24 = tmpvar_25;
					  highp float tmpvar_26;
					  tmpvar_26 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_24);
					  tmpvar_23 = tmpvar_26;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_7;
					  tmpvar_1 = tmpvar_10;
					  tmpvar_2 = tmpvar_23;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = xlv_TEXCOORD1;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = xlv_TEXCOORD1;
					  mediump vec4 realtimeDirTex_33;
					  lowp vec4 bakedDirTex_34;
					  mediump vec3 tmpvar_35;
					  mediump vec3 tmpvar_36;
					  highp vec4 v_37;
					  v_37.x = unity_MatrixV[0].z;
					  v_37.y = unity_MatrixV[1].z;
					  v_37.z = unity_MatrixV[2].z;
					  v_37.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_38;
					  tmpvar_38 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_39;
					  highp float tmpvar_40;
					  tmpvar_40 = clamp (((
					    mix (dot (tmpvar_11, v_37.xyz), sqrt(dot (tmpvar_38, tmpvar_38)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_39 = tmpvar_40;
					  tmpvar_35 = (tmpvar_4 * mix (tmpvar_2, 1.0, tmpvar_39));
					  mediump vec4 tmpvar_41;
					  tmpvar_41 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_42;
					  color_42 = tmpvar_41;
					  mediump vec4 tmpvar_43;
					  tmpvar_43 = texture2D (unity_LightmapInd, xlv_TEXCOORD3.xy);
					  bakedDirTex_34 = tmpvar_43;
					  lowp vec3 y_44;
					  y_44 = (bakedDirTex_34.xyz - 0.5);
					  lowp float tmpvar_45;
					  tmpvar_45 = max (0.0001, bakedDirTex_34.w);
					  tmpvar_36 = (((unity_Lightmap_HDR.x * color_42.xyz) * (
					    dot (normalWorld_32, y_44)
					   + 0.5)) / tmpvar_45);
					  lowp vec4 tmpvar_46;
					  tmpvar_46 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
					  lowp vec4 tmpvar_47;
					  tmpvar_47 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD3.zw);
					  realtimeDirTex_33 = tmpvar_47;
					  lowp vec4 dirTex_48;
					  dirTex_48 = realtimeDirTex_33;
					  lowp vec3 y_49;
					  y_49 = (dirTex_48.xyz - 0.5);
					  lowp float tmpvar_50;
					  tmpvar_50 = max (0.0001, dirTex_48.w);
					  tmpvar_36 = (tmpvar_36 + ((
					    pow (((unity_DynamicLightmap_HDR.x * tmpvar_46.w) * tmpvar_46.xyz), unity_DynamicLightmap_HDR.yyy)
					   * 
					    (dot (normalWorld_32, y_49) + 0.5)
					  ) / tmpvar_50));
					  mediump vec4 hdr_51;
					  hdr_51 = tmpvar_3;
					  mediump vec4 tmpvar_52;
					  tmpvar_52.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_52.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_53;
					  tmpvar_53 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_52.xyz, tmpvar_52.w);
					  mediump vec4 tmpvar_54;
					  tmpvar_54 = tmpvar_53;
					  tmpvar_4 = tmpvar_35;
					  lowp vec3 tmpvar_55;
					  mediump vec4 c_56;
					  highp vec3 tmpvar_57;
					  tmpvar_57 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_58;
					  mediump vec3 albedo_59;
					  albedo_59 = tmpvar_12;
					  mediump vec3 tmpvar_60;
					  tmpvar_60 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_59, vec3(_Metallic));
					  mediump float tmpvar_61;
					  tmpvar_61 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_58 = (albedo_59 * tmpvar_61);
					  tmpvar_55 = tmpvar_58;
					  mediump vec3 diffColor_62;
					  diffColor_62 = tmpvar_55;
					  mediump float alpha_63;
					  alpha_63 = tmpvar_14;
					  tmpvar_55 = diffColor_62;
					  mediump vec3 diffColor_64;
					  diffColor_64 = tmpvar_55;
					  mediump vec3 color_65;
					  mediump vec2 rlPow4AndFresnelTerm_66;
					  mediump float tmpvar_67;
					  highp float tmpvar_68;
					  tmpvar_68 = clamp (dot (tmpvar_57, tmpvar_5), 0.0, 1.0);
					  tmpvar_67 = tmpvar_68;
					  mediump float tmpvar_69;
					  highp float tmpvar_70;
					  tmpvar_70 = clamp (dot (tmpvar_57, tmpvar_10), 0.0, 1.0);
					  tmpvar_69 = tmpvar_70;
					  highp vec2 tmpvar_71;
					  tmpvar_71.x = dot ((tmpvar_10 - (2.0 * 
					    (dot (tmpvar_57, tmpvar_10) * tmpvar_57)
					  )), tmpvar_5);
					  tmpvar_71.y = (1.0 - tmpvar_69);
					  highp vec2 tmpvar_72;
					  tmpvar_72 = ((tmpvar_71 * tmpvar_71) * (tmpvar_71 * tmpvar_71));
					  rlPow4AndFresnelTerm_66 = tmpvar_72;
					  mediump float tmpvar_73;
					  tmpvar_73 = rlPow4AndFresnelTerm_66.x;
					  mediump float specular_74;
					  highp float smoothness_75;
					  smoothness_75 = _Glossiness;
					  highp vec2 tmpvar_76;
					  tmpvar_76.x = tmpvar_73;
					  tmpvar_76.y = (1.0 - smoothness_75);
					  highp float tmpvar_77;
					  tmpvar_77 = (texture2D (unity_NHxRoughness, tmpvar_76).x * 16.0);
					  specular_74 = tmpvar_77;
					  color_65 = ((diffColor_64 + (specular_74 * tmpvar_60)) * (tmpvar_35 * tmpvar_67));
					  color_65 = (color_65 + ((tmpvar_36 * diffColor_64) + (
					    ((hdr_51.x * ((hdr_51.w * 
					      (tmpvar_54.w - 1.0)
					    ) + 1.0)) * tmpvar_54.xyz)
					   * 
					    mix (tmpvar_60, vec3(clamp ((_Glossiness + (1.0 - tmpvar_61)), 0.0, 1.0)), rlPow4AndFresnelTerm_66.yyy)
					  )));
					  mediump vec4 tmpvar_78;
					  tmpvar_78.w = 1.0;
					  tmpvar_78.xyz = color_65;
					  c_56.xyz = tmpvar_78.xyz;
					  c_56.w = alpha_63;
					  c_6 = c_56;
					  c_6.xyz = (c_6.xyz + tmpvar_13);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  highp vec3 tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_10 = normalize(tmpvar_11);
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_12;
					  mediump vec3 tmpvar_13;
					  lowp float tmpvar_14;
					  highp vec4 emissionSample_15;
					  highp vec4 diffuseSample_16;
					  highp vec4 nightSample_17;
					  highp vec4 daySample_18;
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_18 = tmpvar_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_17 = tmpvar_20;
					  diffuseSample_16 = (mix (nightSample_17, daySample_18, vec4(_DayWeight)) * _Color);
					  diffuseSample_16.xyz = (diffuseSample_16.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_15 = tmpvar_21;
					  highp vec3 tmpvar_22;
					  tmpvar_22 = ((emissionSample_15.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_12 = diffuseSample_16.xyz;
					  tmpvar_13 = tmpvar_22;
					  tmpvar_14 = diffuseSample_16.w;
					  lowp float tmpvar_23;
					  highp float lightShadowDataX_24;
					  mediump float tmpvar_25;
					  tmpvar_25 = _LightShadowData.x;
					  lightShadowDataX_24 = tmpvar_25;
					  highp float tmpvar_26;
					  tmpvar_26 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_24);
					  tmpvar_23 = tmpvar_26;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_7;
					  tmpvar_1 = tmpvar_10;
					  tmpvar_2 = tmpvar_23;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = xlv_TEXCOORD1;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_33;
					  mediump vec4 realtimeDirTex_34;
					  lowp vec4 bakedDirTex_35;
					  mediump vec3 tmpvar_36;
					  mediump vec3 tmpvar_37;
					  highp vec4 v_38;
					  v_38.x = unity_MatrixV[0].z;
					  v_38.y = unity_MatrixV[1].z;
					  v_38.z = unity_MatrixV[2].z;
					  v_38.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_39;
					  tmpvar_39 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_40;
					  highp float tmpvar_41;
					  tmpvar_41 = clamp (((
					    mix (dot (tmpvar_11, v_38.xyz), sqrt(dot (tmpvar_39, tmpvar_39)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_40 = tmpvar_41;
					  tmpvar_36 = (tmpvar_4 * mix (tmpvar_2, 1.0, tmpvar_40));
					  mediump vec4 tmpvar_42;
					  tmpvar_42 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_43;
					  color_43 = tmpvar_42;
					  mediump vec4 tmpvar_44;
					  tmpvar_44 = texture2D (unity_LightmapInd, xlv_TEXCOORD3.xy);
					  bakedDirTex_35 = tmpvar_44;
					  lowp vec3 y_45;
					  y_45 = (bakedDirTex_35.xyz - 0.5);
					  lowp float tmpvar_46;
					  tmpvar_46 = max (0.0001, bakedDirTex_35.w);
					  tmpvar_37 = (((unity_Lightmap_HDR.x * color_43.xyz) * (
					    dot (normalWorld_32, y_45)
					   + 0.5)) / tmpvar_46);
					  lowp vec4 tmpvar_47;
					  tmpvar_47 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
					  lowp vec4 tmpvar_48;
					  tmpvar_48 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD3.zw);
					  realtimeDirTex_34 = tmpvar_48;
					  lowp vec4 dirTex_49;
					  dirTex_49 = realtimeDirTex_34;
					  lowp vec3 y_50;
					  y_50 = (dirTex_49.xyz - 0.5);
					  lowp float tmpvar_51;
					  tmpvar_51 = max (0.0001, dirTex_49.w);
					  tmpvar_37 = (tmpvar_37 + ((
					    pow (((unity_DynamicLightmap_HDR.x * tmpvar_47.w) * tmpvar_47.xyz), unity_DynamicLightmap_HDR.yyy)
					   * 
					    (dot (normalWorld_32, y_50) + 0.5)
					  ) / tmpvar_51));
					  mediump vec4 hdr_52;
					  hdr_52 = tmpvar_3;
					  mediump vec4 tmpvar_53;
					  tmpvar_53.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_53.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_54;
					  tmpvar_54 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_53.xyz, tmpvar_53.w);
					  mediump vec4 tmpvar_55;
					  tmpvar_55 = tmpvar_54;
					  tmpvar_33 = ((hdr_52.x * (
					    (hdr_52.w * (tmpvar_55.w - 1.0))
					   + 1.0)) * tmpvar_55.xyz);
					  tmpvar_4 = tmpvar_36;
					  lowp vec3 tmpvar_56;
					  mediump vec4 c_57;
					  highp vec3 tmpvar_58;
					  tmpvar_58 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_59;
					  mediump vec3 albedo_60;
					  albedo_60 = tmpvar_12;
					  mediump vec3 tmpvar_61;
					  tmpvar_61 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_60, vec3(_Metallic));
					  mediump float tmpvar_62;
					  tmpvar_62 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_59 = (albedo_60 * tmpvar_62);
					  tmpvar_56 = tmpvar_59;
					  mediump vec3 diffColor_63;
					  diffColor_63 = tmpvar_56;
					  mediump float alpha_64;
					  alpha_64 = tmpvar_14;
					  tmpvar_56 = diffColor_63;
					  mediump vec3 diffColor_65;
					  diffColor_65 = tmpvar_56;
					  mediump vec3 color_66;
					  mediump float surfaceReduction_67;
					  highp float specularTerm_68;
					  highp float a2_69;
					  mediump float roughness_70;
					  mediump float perceptualRoughness_71;
					  highp vec3 tmpvar_72;
					  highp vec3 inVec_73;
					  inVec_73 = (tmpvar_5 + tmpvar_10);
					  tmpvar_72 = (inVec_73 * inversesqrt(max (0.001, 
					    dot (inVec_73, inVec_73)
					  )));
					  mediump float tmpvar_74;
					  highp float tmpvar_75;
					  tmpvar_75 = clamp (dot (tmpvar_58, tmpvar_5), 0.0, 1.0);
					  tmpvar_74 = tmpvar_75;
					  highp float tmpvar_76;
					  tmpvar_76 = clamp (dot (tmpvar_58, tmpvar_72), 0.0, 1.0);
					  mediump float tmpvar_77;
					  highp float tmpvar_78;
					  tmpvar_78 = clamp (dot (tmpvar_58, tmpvar_10), 0.0, 1.0);
					  tmpvar_77 = tmpvar_78;
					  highp float tmpvar_79;
					  highp float smoothness_80;
					  smoothness_80 = _Glossiness;
					  tmpvar_79 = (1.0 - smoothness_80);
					  perceptualRoughness_71 = tmpvar_79;
					  highp float tmpvar_81;
					  highp float perceptualRoughness_82;
					  perceptualRoughness_82 = perceptualRoughness_71;
					  tmpvar_81 = (perceptualRoughness_82 * perceptualRoughness_82);
					  roughness_70 = tmpvar_81;
					  mediump float tmpvar_83;
					  tmpvar_83 = (roughness_70 * roughness_70);
					  a2_69 = tmpvar_83;
					  specularTerm_68 = ((roughness_70 / (
					    (max (0.32, clamp (dot (tmpvar_5, tmpvar_72), 0.0, 1.0)) * (1.5 + roughness_70))
					   * 
					    (((tmpvar_76 * tmpvar_76) * (a2_69 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_84;
					  tmpvar_84 = clamp (specularTerm_68, 0.0, 100.0);
					  specularTerm_68 = tmpvar_84;
					  surfaceReduction_67 = (1.0 - ((roughness_70 * perceptualRoughness_71) * 0.28));
					  mediump float x_85;
					  x_85 = (1.0 - tmpvar_77);
					  mediump vec3 tmpvar_86;
					  tmpvar_86 = mix (tmpvar_61, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_62)
					  ), 0.0, 1.0)), vec3(((x_85 * x_85) * (x_85 * x_85))));
					  highp vec3 tmpvar_87;
					  tmpvar_87 = (((
					    ((diffColor_65 + (tmpvar_84 * tmpvar_61)) * tmpvar_36)
					   * tmpvar_74) + (tmpvar_37 * diffColor_65)) + ((surfaceReduction_67 * tmpvar_33) * tmpvar_86));
					  color_66 = tmpvar_87;
					  mediump vec4 tmpvar_88;
					  tmpvar_88.w = 1.0;
					  tmpvar_88.xyz = color_66;
					  c_57.xyz = tmpvar_88.xyz;
					  c_57.w = alpha_64;
					  c_6 = c_57;
					  c_6.xyz = (c_6.xyz + tmpvar_13);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_2;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  highp vec3 tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_10 = normalize(tmpvar_11);
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_12;
					  mediump vec3 tmpvar_13;
					  lowp float tmpvar_14;
					  highp vec4 emissionSample_15;
					  highp vec4 diffuseSample_16;
					  highp vec4 nightSample_17;
					  highp vec4 daySample_18;
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_18 = tmpvar_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_17 = tmpvar_20;
					  diffuseSample_16 = (mix (nightSample_17, daySample_18, vec4(_DayWeight)) * _Color);
					  diffuseSample_16.xyz = (diffuseSample_16.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_15 = tmpvar_21;
					  highp vec3 tmpvar_22;
					  tmpvar_22 = ((emissionSample_15.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_12 = diffuseSample_16.xyz;
					  tmpvar_13 = tmpvar_22;
					  tmpvar_14 = diffuseSample_16.w;
					  lowp float tmpvar_23;
					  highp float lightShadowDataX_24;
					  mediump float tmpvar_25;
					  tmpvar_25 = _LightShadowData.x;
					  lightShadowDataX_24 = tmpvar_25;
					  highp float tmpvar_26;
					  tmpvar_26 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_24);
					  tmpvar_23 = tmpvar_26;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_7;
					  tmpvar_1 = tmpvar_10;
					  tmpvar_2 = tmpvar_23;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = xlv_TEXCOORD1;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_33;
					  mediump vec4 realtimeDirTex_34;
					  lowp vec4 bakedDirTex_35;
					  mediump vec3 tmpvar_36;
					  mediump vec3 tmpvar_37;
					  highp vec4 v_38;
					  v_38.x = unity_MatrixV[0].z;
					  v_38.y = unity_MatrixV[1].z;
					  v_38.z = unity_MatrixV[2].z;
					  v_38.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_39;
					  tmpvar_39 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_40;
					  highp float tmpvar_41;
					  tmpvar_41 = clamp (((
					    mix (dot (tmpvar_11, v_38.xyz), sqrt(dot (tmpvar_39, tmpvar_39)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_40 = tmpvar_41;
					  tmpvar_36 = (tmpvar_4 * mix (tmpvar_2, 1.0, tmpvar_40));
					  mediump vec4 tmpvar_42;
					  tmpvar_42 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
					  lowp vec4 color_43;
					  color_43 = tmpvar_42;
					  mediump vec4 tmpvar_44;
					  tmpvar_44 = texture2D (unity_LightmapInd, xlv_TEXCOORD3.xy);
					  bakedDirTex_35 = tmpvar_44;
					  lowp vec3 y_45;
					  y_45 = (bakedDirTex_35.xyz - 0.5);
					  lowp float tmpvar_46;
					  tmpvar_46 = max (0.0001, bakedDirTex_35.w);
					  tmpvar_37 = (((unity_Lightmap_HDR.x * color_43.xyz) * (
					    dot (normalWorld_32, y_45)
					   + 0.5)) / tmpvar_46);
					  lowp vec4 tmpvar_47;
					  tmpvar_47 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
					  lowp vec4 tmpvar_48;
					  tmpvar_48 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD3.zw);
					  realtimeDirTex_34 = tmpvar_48;
					  lowp vec4 dirTex_49;
					  dirTex_49 = realtimeDirTex_34;
					  lowp vec3 y_50;
					  y_50 = (dirTex_49.xyz - 0.5);
					  lowp float tmpvar_51;
					  tmpvar_51 = max (0.0001, dirTex_49.w);
					  tmpvar_37 = (tmpvar_37 + ((
					    pow (((unity_DynamicLightmap_HDR.x * tmpvar_47.w) * tmpvar_47.xyz), unity_DynamicLightmap_HDR.yyy)
					   * 
					    (dot (normalWorld_32, y_50) + 0.5)
					  ) / tmpvar_51));
					  mediump vec4 hdr_52;
					  hdr_52 = tmpvar_3;
					  mediump vec4 tmpvar_53;
					  tmpvar_53.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_53.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_54;
					  tmpvar_54 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_53.xyz, tmpvar_53.w);
					  mediump vec4 tmpvar_55;
					  tmpvar_55 = tmpvar_54;
					  tmpvar_33 = ((hdr_52.x * (
					    (hdr_52.w * (tmpvar_55.w - 1.0))
					   + 1.0)) * tmpvar_55.xyz);
					  tmpvar_4 = tmpvar_36;
					  lowp vec3 tmpvar_56;
					  mediump vec4 c_57;
					  highp vec3 tmpvar_58;
					  tmpvar_58 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_59;
					  mediump vec3 albedo_60;
					  albedo_60 = tmpvar_12;
					  mediump vec3 tmpvar_61;
					  tmpvar_61 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_60, vec3(_Metallic));
					  mediump float tmpvar_62;
					  tmpvar_62 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_59 = (albedo_60 * tmpvar_62);
					  tmpvar_56 = tmpvar_59;
					  mediump vec3 diffColor_63;
					  diffColor_63 = tmpvar_56;
					  mediump float alpha_64;
					  alpha_64 = tmpvar_14;
					  tmpvar_56 = diffColor_63;
					  mediump vec3 diffColor_65;
					  diffColor_65 = tmpvar_56;
					  mediump vec3 color_66;
					  mediump float surfaceReduction_67;
					  highp float specularTerm_68;
					  highp float a2_69;
					  mediump float roughness_70;
					  mediump float perceptualRoughness_71;
					  highp vec3 tmpvar_72;
					  highp vec3 inVec_73;
					  inVec_73 = (tmpvar_5 + tmpvar_10);
					  tmpvar_72 = (inVec_73 * inversesqrt(max (0.001, 
					    dot (inVec_73, inVec_73)
					  )));
					  mediump float tmpvar_74;
					  highp float tmpvar_75;
					  tmpvar_75 = clamp (dot (tmpvar_58, tmpvar_5), 0.0, 1.0);
					  tmpvar_74 = tmpvar_75;
					  highp float tmpvar_76;
					  tmpvar_76 = clamp (dot (tmpvar_58, tmpvar_72), 0.0, 1.0);
					  mediump float tmpvar_77;
					  highp float tmpvar_78;
					  tmpvar_78 = clamp (dot (tmpvar_58, tmpvar_10), 0.0, 1.0);
					  tmpvar_77 = tmpvar_78;
					  highp float tmpvar_79;
					  highp float smoothness_80;
					  smoothness_80 = _Glossiness;
					  tmpvar_79 = (1.0 - smoothness_80);
					  perceptualRoughness_71 = tmpvar_79;
					  highp float tmpvar_81;
					  highp float perceptualRoughness_82;
					  perceptualRoughness_82 = perceptualRoughness_71;
					  tmpvar_81 = (perceptualRoughness_82 * perceptualRoughness_82);
					  roughness_70 = tmpvar_81;
					  mediump float tmpvar_83;
					  tmpvar_83 = (roughness_70 * roughness_70);
					  a2_69 = tmpvar_83;
					  specularTerm_68 = ((roughness_70 / (
					    (max (0.32, clamp (dot (tmpvar_5, tmpvar_72), 0.0, 1.0)) * (1.5 + roughness_70))
					   * 
					    (((tmpvar_76 * tmpvar_76) * (a2_69 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_84;
					  tmpvar_84 = clamp (specularTerm_68, 0.0, 100.0);
					  specularTerm_68 = tmpvar_84;
					  surfaceReduction_67 = (1.0 - ((roughness_70 * perceptualRoughness_71) * 0.28));
					  mediump float x_85;
					  x_85 = (1.0 - tmpvar_77);
					  mediump vec3 tmpvar_86;
					  tmpvar_86 = mix (tmpvar_61, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_62)
					  ), 0.0, 1.0)), vec3(((x_85 * x_85) * (x_85 * x_85))));
					  highp vec3 tmpvar_87;
					  tmpvar_87 = (((
					    ((diffColor_65 + (tmpvar_84 * tmpvar_61)) * tmpvar_36)
					   * tmpvar_74) + (tmpvar_37 * diffColor_65)) + ((surfaceReduction_67 * tmpvar_33) * tmpvar_86));
					  color_66 = tmpvar_87;
					  mediump vec4 tmpvar_88;
					  tmpvar_88.w = 1.0;
					  tmpvar_88.xyz = color_66;
					  c_57.xyz = tmpvar_88.xyz;
					  c_57.w = alpha_64;
					  c_6 = c_57;
					  c_6.xyz = (c_6.xyz + tmpvar_13);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD6;
					out highp vec3 vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat2 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat2;
					    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.zxy;
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat0.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD6.y = u_xlat2.x;
					    vs_TEXCOORD6.z = u_xlat1.x;
					    vs_TEXCOORD6.x = u_xlat0.z;
					    vs_TEXCOORD7.x = u_xlat0.x;
					    vs_TEXCOORD8.x = u_xlat0.y;
					    vs_TEXCOORD7.z = u_xlat1.y;
					    vs_TEXCOORD8.z = u_xlat1.z;
					    vs_TEXCOORD7.y = u_xlat2.y;
					    vs_TEXCOORD8.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					lowp vec3 u_xlat10_5;
					vec3 u_xlat6;
					lowp vec3 u_xlat10_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					float u_xlat10;
					float u_xlat20;
					mediump float u_xlat16_20;
					lowp float u_xlat10_20;
					float u_xlat30;
					mediump float u_xlat16_30;
					mediump float u_xlat16_31;
					float u_xlat33;
					mediump float u_xlat16_34;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD3.zw);
					    u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat16_31 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_31 = u_xlat16_31 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
					    u_xlat16_3.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_2 = texture(unity_LightmapInd, vs_TEXCOORD3.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_30 = max(u_xlat16_2.w, 9.99999975e-05);
					    u_xlat16_31 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_31 = u_xlat16_31 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz / vec3(u_xlat16_30);
					    u_xlat16_1.xyz = u_xlat16_0.xyz + u_xlat16_3.xyz;
					    u_xlat0.z = (-_Glossiness) + 1.0;
					    u_xlat16_31 = (-u_xlat0.z) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat0.z * u_xlat16_31;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat5.xyz = vec3(u_xlat10) * u_xlat3.xyz;
					    u_xlat16_4.x = dot((-u_xlat5.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;
					    u_xlat16_4.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_4.xxx) + (-u_xlat5.xyz);
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_31);
					    u_xlat16_31 = u_xlat10_2.w + -1.0;
					    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;
					    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(u_xlat16_31);
					    u_xlat10 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat6.xyz = vec3(u_xlat10) * vs_TEXCOORD1.xyz;
					    u_xlat10 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat30 = u_xlat10;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat10 = u_xlat10 + u_xlat10;
					    u_xlat5.xyz = u_xlat6.xyz * (-vec3(u_xlat10)) + u_xlat5.xyz;
					    u_xlat10 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
					#else
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					#endif
					    u_xlat33 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat33 = u_xlat33 * u_xlat33;
					    u_xlat0.x = u_xlat33 * u_xlat33;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_31 = (-u_xlat30) + 1.0;
					    u_xlat16_20 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_20 = u_xlat16_31 * u_xlat16_20;
					    u_xlat16_20 = u_xlat16_31 * u_xlat16_20;
					    u_xlat10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_6.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_5.xyz = u_xlat10_5.xyz + (-u_xlat10_6.xyz);
					    u_xlat5.xyz = vec3(_DayWeight) * u_xlat16_5.xyz + u_xlat10_6.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat16_7.xyz = u_xlat5.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat5.xyz = u_xlat5.xyz * vs_COLOR0.xyz;
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_34 = (-u_xlat16_31) + _Glossiness;
					    u_xlat16_8.xyz = vec3(u_xlat16_31) * u_xlat5.xyz;
					    u_xlat16_31 = u_xlat16_34 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_31);
					    u_xlat16_9.xyz = vec3(u_xlat16_20) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_9.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_4.xyz;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat5.xyz);
					    u_xlat3.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat20 = sqrt(u_xlat20);
					    u_xlat20 = (-u_xlat0.x) + u_xlat20;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat20 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    vec3 txVec0 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
					    u_xlat10_20 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_31 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_31 = u_xlat10_20 * u_xlat16_31 + _LightShadowData.x;
					    u_xlat16_4.x = (-u_xlat16_31) + 1.0;
					    u_xlat16_31 = u_xlat0.x * u_xlat16_4.x + u_xlat16_31;
					    u_xlat16_4.xyz = vec3(u_xlat16_31) * _LightColor0.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat10) * u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat30 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD6;
					out highp vec3 vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat2 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat2;
					    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.zxy;
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat0.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD6.y = u_xlat2.x;
					    vs_TEXCOORD6.z = u_xlat1.x;
					    vs_TEXCOORD6.x = u_xlat0.z;
					    vs_TEXCOORD7.x = u_xlat0.x;
					    vs_TEXCOORD8.x = u_xlat0.y;
					    vs_TEXCOORD7.z = u_xlat1.y;
					    vs_TEXCOORD8.z = u_xlat1.z;
					    vs_TEXCOORD7.y = u_xlat2.y;
					    vs_TEXCOORD8.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_8;
					vec3 u_xlat9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_12;
					mediump float u_xlat16_21;
					float u_xlat27;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_30;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD3.zw);
					    u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_28 = u_xlat16_28 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
					    u_xlat16_3.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_2 = texture(unity_LightmapInd, vs_TEXCOORD3.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_27 = max(u_xlat16_2.w, 9.99999975e-05);
					    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_28 = u_xlat16_28 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz / vec3(u_xlat16_27);
					    u_xlat16_1.xyz = u_xlat16_0.xyz + u_xlat16_3.xyz;
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_3.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_3.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_4.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_28 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_5.xyz = vec3(u_xlat16_28) * u_xlat3.xyz;
					    u_xlat16_28 = (-u_xlat16_28) + _Glossiness;
					    u_xlat16_28 = u_xlat16_28 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
					#else
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + vec3(u_xlat16_28);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3.x = dot(u_xlat9.xyz, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat3.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat3.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    vec3 txVec0 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
					    u_xlat10_3.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_28 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_28 = u_xlat10_3.x * u_xlat16_28 + _LightShadowData.x;
					    u_xlat16_31 = (-u_xlat16_28) + 1.0;
					    u_xlat16_28 = u_xlat0.x * u_xlat16_31 + u_xlat16_28;
					    u_xlat16_7.xyz = vec3(u_xlat16_28) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat9.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz;
					    u_xlat27 = dot(_WorldSpaceLightPos0.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat27 = max(u_xlat27, 0.319999993);
					    u_xlat16_30 = (-_Glossiness) + 1.0;
					    u_xlat16_8 = u_xlat16_30 * u_xlat16_30 + 1.5;
					    u_xlat27 = u_xlat27 * u_xlat16_8;
					    u_xlat8.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
					    u_xlat3.x = dot(u_xlat8.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16_12 = u_xlat16_30 * u_xlat16_30;
					    u_xlat16_21 = u_xlat16_12 * u_xlat16_12 + -1.0;
					    u_xlat3.x = u_xlat3.x * u_xlat16_21 + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat3.x;
					    u_xlat27 = u_xlat16_12 / u_xlat27;
					    u_xlat16_28 = u_xlat16_30 * u_xlat16_12;
					    u_xlat16_28 = (-u_xlat16_28) * 0.280000001 + 1.0;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat3.xyz = u_xlat16_7.xyz * u_xlat3.xyz;
					    u_xlat27 = dot(u_xlat8.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat8.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
					#else
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					#endif
					    u_xlat16_31 = (-u_xlat8.x) + 1.0;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_4.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_4.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-u_xlat16_30) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_30;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat16_10 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_10 = u_xlat16_10 + u_xlat16_10;
					    u_xlat16_5.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_10)) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat10_0.w + -1.0;
					    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_28);
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz + u_xlat3.xyz;
					    u_xlat10_3.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.xyz = u_xlat10_3.xyz * _EmissionColor.xyz;
					    u_xlat27 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD6;
					out highp vec3 vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat2 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat2;
					    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.zxy;
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat0.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD6.y = u_xlat2.x;
					    vs_TEXCOORD6.z = u_xlat1.x;
					    vs_TEXCOORD6.x = u_xlat0.z;
					    vs_TEXCOORD7.x = u_xlat0.x;
					    vs_TEXCOORD8.x = u_xlat0.y;
					    vs_TEXCOORD7.z = u_xlat1.y;
					    vs_TEXCOORD8.z = u_xlat1.z;
					    vs_TEXCOORD7.y = u_xlat2.y;
					    vs_TEXCOORD8.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_8;
					vec3 u_xlat9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_12;
					mediump float u_xlat16_21;
					float u_xlat27;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_30;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD3.zw);
					    u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_28 = u_xlat16_28 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
					    u_xlat16_3.xyz = texture(unity_Lightmap, vs_TEXCOORD3.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_2 = texture(unity_LightmapInd, vs_TEXCOORD3.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_27 = max(u_xlat16_2.w, 9.99999975e-05);
					    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_28 = u_xlat16_28 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz / vec3(u_xlat16_27);
					    u_xlat16_1.xyz = u_xlat16_0.xyz + u_xlat16_3.xyz;
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_3.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_3.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_4.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_28 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_5.xyz = vec3(u_xlat16_28) * u_xlat3.xyz;
					    u_xlat16_28 = (-u_xlat16_28) + _Glossiness;
					    u_xlat16_28 = u_xlat16_28 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
					#else
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + vec3(u_xlat16_28);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3.x = dot(u_xlat9.xyz, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat3.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat3.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    vec3 txVec0 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
					    u_xlat10_3.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_28 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_28 = u_xlat10_3.x * u_xlat16_28 + _LightShadowData.x;
					    u_xlat16_31 = (-u_xlat16_28) + 1.0;
					    u_xlat16_28 = u_xlat0.x * u_xlat16_31 + u_xlat16_28;
					    u_xlat16_7.xyz = vec3(u_xlat16_28) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat9.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz;
					    u_xlat27 = dot(_WorldSpaceLightPos0.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat27 = max(u_xlat27, 0.319999993);
					    u_xlat16_30 = (-_Glossiness) + 1.0;
					    u_xlat16_8 = u_xlat16_30 * u_xlat16_30 + 1.5;
					    u_xlat27 = u_xlat27 * u_xlat16_8;
					    u_xlat8.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
					    u_xlat3.x = dot(u_xlat8.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16_12 = u_xlat16_30 * u_xlat16_30;
					    u_xlat16_21 = u_xlat16_12 * u_xlat16_12 + -1.0;
					    u_xlat3.x = u_xlat3.x * u_xlat16_21 + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat3.x;
					    u_xlat27 = u_xlat16_12 / u_xlat27;
					    u_xlat16_28 = u_xlat16_30 * u_xlat16_12;
					    u_xlat16_28 = (-u_xlat16_28) * 0.280000001 + 1.0;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat3.xyz = u_xlat16_7.xyz * u_xlat3.xyz;
					    u_xlat27 = dot(u_xlat8.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat8.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
					#else
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					#endif
					    u_xlat16_31 = (-u_xlat8.x) + 1.0;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_4.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_4.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-u_xlat16_30) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_30;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat16_10 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_10 = u_xlat16_10 + u_xlat16_10;
					    u_xlat16_5.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_10)) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat10_0.w + -1.0;
					    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_28);
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz + u_xlat3.xyz;
					    u_xlat10_3.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.xyz = u_xlat10_3.xyz * _EmissionColor.xyz;
					    u_xlat27 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = tmpvar_2;
					  xlv_TEXCOORD6 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec4 hdr_26;
					  hdr_26 = tmpvar_2;
					  mediump vec4 tmpvar_27;
					  tmpvar_27.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_27.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_28;
					  tmpvar_28 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_27.xyz, tmpvar_27.w);
					  mediump vec4 tmpvar_29;
					  tmpvar_29 = tmpvar_28;
					  lowp vec3 tmpvar_30;
					  mediump vec4 c_31;
					  highp vec3 tmpvar_32;
					  tmpvar_32 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_33;
					  mediump vec3 albedo_34;
					  albedo_34 = tmpvar_10;
					  mediump vec3 tmpvar_35;
					  tmpvar_35 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_34, vec3(_Metallic));
					  mediump float tmpvar_36;
					  tmpvar_36 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_33 = (albedo_34 * tmpvar_36);
					  tmpvar_30 = tmpvar_33;
					  mediump vec3 diffColor_37;
					  diffColor_37 = tmpvar_30;
					  mediump float alpha_38;
					  alpha_38 = tmpvar_12;
					  tmpvar_30 = diffColor_37;
					  mediump vec3 diffColor_39;
					  diffColor_39 = tmpvar_30;
					  mediump vec3 color_40;
					  mediump vec2 rlPow4AndFresnelTerm_41;
					  mediump float tmpvar_42;
					  highp float tmpvar_43;
					  tmpvar_43 = clamp (dot (tmpvar_32, tmpvar_4), 0.0, 1.0);
					  tmpvar_42 = tmpvar_43;
					  mediump float tmpvar_44;
					  highp float tmpvar_45;
					  tmpvar_45 = clamp (dot (tmpvar_32, worldViewDir_6), 0.0, 1.0);
					  tmpvar_44 = tmpvar_45;
					  highp vec2 tmpvar_46;
					  tmpvar_46.x = dot ((worldViewDir_6 - (2.0 * 
					    (dot (tmpvar_32, worldViewDir_6) * tmpvar_32)
					  )), tmpvar_4);
					  tmpvar_46.y = (1.0 - tmpvar_44);
					  highp vec2 tmpvar_47;
					  tmpvar_47 = ((tmpvar_46 * tmpvar_46) * (tmpvar_46 * tmpvar_46));
					  rlPow4AndFresnelTerm_41 = tmpvar_47;
					  mediump float tmpvar_48;
					  tmpvar_48 = rlPow4AndFresnelTerm_41.x;
					  mediump float specular_49;
					  highp float smoothness_50;
					  smoothness_50 = _Glossiness;
					  highp vec2 tmpvar_51;
					  tmpvar_51.x = tmpvar_48;
					  tmpvar_51.y = (1.0 - smoothness_50);
					  highp float tmpvar_52;
					  tmpvar_52 = (texture2D (unity_NHxRoughness, tmpvar_51).x * 16.0);
					  specular_49 = tmpvar_52;
					  color_40 = ((diffColor_39 + (specular_49 * tmpvar_35)) * (tmpvar_3 * tmpvar_42));
					  color_40 = (color_40 + ((
					    (hdr_26.x * ((hdr_26.w * (tmpvar_29.w - 1.0)) + 1.0))
					   * tmpvar_29.xyz) * mix (tmpvar_35, vec3(
					    clamp ((_Glossiness + (1.0 - tmpvar_36)), 0.0, 1.0)
					  ), rlPow4AndFresnelTerm_41.yyy)));
					  mediump vec4 tmpvar_53;
					  tmpvar_53.w = 1.0;
					  tmpvar_53.xyz = color_40;
					  c_31.xyz = tmpvar_53.xyz;
					  c_31.w = alpha_38;
					  c_5 = c_31;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = tmpvar_2;
					  xlv_TEXCOORD6 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 tmpvar_26;
					  mediump vec4 hdr_27;
					  hdr_27 = tmpvar_2;
					  mediump vec4 tmpvar_28;
					  tmpvar_28.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_28.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_29;
					  tmpvar_29 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_28.xyz, tmpvar_28.w);
					  mediump vec4 tmpvar_30;
					  tmpvar_30 = tmpvar_29;
					  tmpvar_26 = ((hdr_27.x * (
					    (hdr_27.w * (tmpvar_30.w - 1.0))
					   + 1.0)) * tmpvar_30.xyz);
					  lowp vec3 tmpvar_31;
					  mediump vec4 c_32;
					  highp vec3 tmpvar_33;
					  tmpvar_33 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_34;
					  mediump vec3 albedo_35;
					  albedo_35 = tmpvar_10;
					  mediump vec3 tmpvar_36;
					  tmpvar_36 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_35, vec3(_Metallic));
					  mediump float tmpvar_37;
					  tmpvar_37 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_34 = (albedo_35 * tmpvar_37);
					  tmpvar_31 = tmpvar_34;
					  mediump vec3 diffColor_38;
					  diffColor_38 = tmpvar_31;
					  mediump float alpha_39;
					  alpha_39 = tmpvar_12;
					  tmpvar_31 = diffColor_38;
					  mediump vec3 diffColor_40;
					  diffColor_40 = tmpvar_31;
					  mediump vec3 color_41;
					  mediump float surfaceReduction_42;
					  highp float specularTerm_43;
					  highp float a2_44;
					  mediump float roughness_45;
					  mediump float perceptualRoughness_46;
					  highp vec3 tmpvar_47;
					  highp vec3 inVec_48;
					  inVec_48 = (tmpvar_4 + worldViewDir_6);
					  tmpvar_47 = (inVec_48 * inversesqrt(max (0.001, 
					    dot (inVec_48, inVec_48)
					  )));
					  mediump float tmpvar_49;
					  highp float tmpvar_50;
					  tmpvar_50 = clamp (dot (tmpvar_33, tmpvar_4), 0.0, 1.0);
					  tmpvar_49 = tmpvar_50;
					  highp float tmpvar_51;
					  tmpvar_51 = clamp (dot (tmpvar_33, tmpvar_47), 0.0, 1.0);
					  mediump float tmpvar_52;
					  highp float tmpvar_53;
					  tmpvar_53 = clamp (dot (tmpvar_33, worldViewDir_6), 0.0, 1.0);
					  tmpvar_52 = tmpvar_53;
					  highp float tmpvar_54;
					  highp float smoothness_55;
					  smoothness_55 = _Glossiness;
					  tmpvar_54 = (1.0 - smoothness_55);
					  perceptualRoughness_46 = tmpvar_54;
					  highp float tmpvar_56;
					  highp float perceptualRoughness_57;
					  perceptualRoughness_57 = perceptualRoughness_46;
					  tmpvar_56 = (perceptualRoughness_57 * perceptualRoughness_57);
					  roughness_45 = tmpvar_56;
					  mediump float tmpvar_58;
					  tmpvar_58 = (roughness_45 * roughness_45);
					  a2_44 = tmpvar_58;
					  specularTerm_43 = ((roughness_45 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_47), 0.0, 1.0)) * (1.5 + roughness_45))
					   * 
					    (((tmpvar_51 * tmpvar_51) * (a2_44 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_59;
					  tmpvar_59 = clamp (specularTerm_43, 0.0, 100.0);
					  specularTerm_43 = tmpvar_59;
					  surfaceReduction_42 = (1.0 - ((roughness_45 * perceptualRoughness_46) * 0.28));
					  mediump float x_60;
					  x_60 = (1.0 - tmpvar_52);
					  mediump vec3 tmpvar_61;
					  tmpvar_61 = mix (tmpvar_36, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_37)
					  ), 0.0, 1.0)), vec3(((x_60 * x_60) * (x_60 * x_60))));
					  highp vec3 tmpvar_62;
					  tmpvar_62 = (((
					    (diffColor_40 + (tmpvar_59 * tmpvar_36))
					   * tmpvar_3) * tmpvar_49) + ((surfaceReduction_42 * tmpvar_26) * tmpvar_61));
					  color_41 = tmpvar_62;
					  mediump vec4 tmpvar_63;
					  tmpvar_63.w = 1.0;
					  tmpvar_63.xyz = color_41;
					  c_32.xyz = tmpvar_63.xyz;
					  c_32.w = alpha_39;
					  c_5 = c_32;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = tmpvar_2;
					  xlv_TEXCOORD6 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 tmpvar_26;
					  mediump vec4 hdr_27;
					  hdr_27 = tmpvar_2;
					  mediump vec4 tmpvar_28;
					  tmpvar_28.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_28.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_29;
					  tmpvar_29 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_28.xyz, tmpvar_28.w);
					  mediump vec4 tmpvar_30;
					  tmpvar_30 = tmpvar_29;
					  tmpvar_26 = ((hdr_27.x * (
					    (hdr_27.w * (tmpvar_30.w - 1.0))
					   + 1.0)) * tmpvar_30.xyz);
					  lowp vec3 tmpvar_31;
					  mediump vec4 c_32;
					  highp vec3 tmpvar_33;
					  tmpvar_33 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_34;
					  mediump vec3 albedo_35;
					  albedo_35 = tmpvar_10;
					  mediump vec3 tmpvar_36;
					  tmpvar_36 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_35, vec3(_Metallic));
					  mediump float tmpvar_37;
					  tmpvar_37 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_34 = (albedo_35 * tmpvar_37);
					  tmpvar_31 = tmpvar_34;
					  mediump vec3 diffColor_38;
					  diffColor_38 = tmpvar_31;
					  mediump float alpha_39;
					  alpha_39 = tmpvar_12;
					  tmpvar_31 = diffColor_38;
					  mediump vec3 diffColor_40;
					  diffColor_40 = tmpvar_31;
					  mediump vec3 color_41;
					  mediump float surfaceReduction_42;
					  highp float specularTerm_43;
					  highp float a2_44;
					  mediump float roughness_45;
					  mediump float perceptualRoughness_46;
					  highp vec3 tmpvar_47;
					  highp vec3 inVec_48;
					  inVec_48 = (tmpvar_4 + worldViewDir_6);
					  tmpvar_47 = (inVec_48 * inversesqrt(max (0.001, 
					    dot (inVec_48, inVec_48)
					  )));
					  mediump float tmpvar_49;
					  highp float tmpvar_50;
					  tmpvar_50 = clamp (dot (tmpvar_33, tmpvar_4), 0.0, 1.0);
					  tmpvar_49 = tmpvar_50;
					  highp float tmpvar_51;
					  tmpvar_51 = clamp (dot (tmpvar_33, tmpvar_47), 0.0, 1.0);
					  mediump float tmpvar_52;
					  highp float tmpvar_53;
					  tmpvar_53 = clamp (dot (tmpvar_33, worldViewDir_6), 0.0, 1.0);
					  tmpvar_52 = tmpvar_53;
					  highp float tmpvar_54;
					  highp float smoothness_55;
					  smoothness_55 = _Glossiness;
					  tmpvar_54 = (1.0 - smoothness_55);
					  perceptualRoughness_46 = tmpvar_54;
					  highp float tmpvar_56;
					  highp float perceptualRoughness_57;
					  perceptualRoughness_57 = perceptualRoughness_46;
					  tmpvar_56 = (perceptualRoughness_57 * perceptualRoughness_57);
					  roughness_45 = tmpvar_56;
					  mediump float tmpvar_58;
					  tmpvar_58 = (roughness_45 * roughness_45);
					  a2_44 = tmpvar_58;
					  specularTerm_43 = ((roughness_45 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_47), 0.0, 1.0)) * (1.5 + roughness_45))
					   * 
					    (((tmpvar_51 * tmpvar_51) * (a2_44 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_59;
					  tmpvar_59 = clamp (specularTerm_43, 0.0, 100.0);
					  specularTerm_43 = tmpvar_59;
					  surfaceReduction_42 = (1.0 - ((roughness_45 * perceptualRoughness_46) * 0.28));
					  mediump float x_60;
					  x_60 = (1.0 - tmpvar_52);
					  mediump vec3 tmpvar_61;
					  tmpvar_61 = mix (tmpvar_36, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_37)
					  ), 0.0, 1.0)), vec3(((x_60 * x_60) * (x_60 * x_60))));
					  highp vec3 tmpvar_62;
					  tmpvar_62 = (((
					    (diffColor_40 + (tmpvar_59 * tmpvar_36))
					   * tmpvar_3) * tmpvar_49) + ((surfaceReduction_42 * tmpvar_26) * tmpvar_61));
					  color_41 = tmpvar_62;
					  mediump vec4 tmpvar_63;
					  tmpvar_63.w = 1.0;
					  tmpvar_63.xyz = color_41;
					  c_32.xyz = tmpvar_63.xyz;
					  c_32.w = alpha_39;
					  c_5 = c_32;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_8;
					float u_xlat10;
					float u_xlat24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_27;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat2.z = (-_Glossiness) + 1.0;
					    u_xlat16_25 = (-u_xlat2.z) * 0.699999988 + 1.70000005;
					    u_xlat16_25 = u_xlat16_25 * u_xlat2.z;
					    u_xlat16_25 = u_xlat16_25 * 6.0;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_25);
					    u_xlat16_3.x = u_xlat10_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
					    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat10 = u_xlat24;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
					#else
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					#endif
					    u_xlat24 = u_xlat24 + u_xlat24;
					    u_xlat0.xyz = u_xlat4.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat2.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat2.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_27 = (-u_xlat10) + 1.0;
					    u_xlat16_8 = u_xlat16_27 * u_xlat16_27;
					    u_xlat16_8 = u_xlat16_27 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_27 * u_xlat16_8;
					    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_2.xyz + (-u_xlat10_4.xyz);
					    u_xlat2.xyz = vec3(_DayWeight) * u_xlat16_2.xyz + u_xlat10_4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_27 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_29 = (-u_xlat16_27) + _Glossiness;
					    u_xlat16_29 = u_xlat16_29 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
					#else
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_29);
					    u_xlat16_7.xyz = vec3(u_xlat16_8) * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat16_27) + u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz;
					    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_3.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					lowp vec3 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat8;
					float u_xlat16;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_24 = (-_Glossiness) + 1.0;
					    u_xlat16_26 = (-u_xlat16_24) * 0.699999988 + 1.70000005;
					    u_xlat16_26 = u_xlat16_24 * u_xlat16_26;
					    u_xlat16_26 = u_xlat16_26 * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_26);
					    u_xlat16_3.x = u_xlat10_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_25 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_27 = u_xlat16_24 * u_xlat16_25;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24 + 1.5;
					    u_xlat16_27 = (-u_xlat16_27) * 0.280000001 + 1.0;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_27);
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = inversesqrt(u_xlat4.x);
					    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_27 = (-u_xlat1.x) + 1.0;
					    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
					    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_5.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz + (-u_xlat10_5.xyz);
					    u_xlat1.xyz = vec3(_DayWeight) * u_xlat16_1.xyz + u_xlat10_5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_7.x = (-u_xlat16_30) + _Glossiness;
					    u_xlat16_7.x = u_xlat16_7.x + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
					#else
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xxx;
					    u_xlat16_7.xyz = vec3(u_xlat16_27) * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz;
					    u_xlat28 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat28);
					    u_xlat28 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat8 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
					#else
					    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16 = max(u_xlat28, 0.319999993);
					    u_xlat16 = u_xlat16_24 * u_xlat16;
					    u_xlat16_24 = u_xlat16_25 * u_xlat16_25 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_24 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat16;
					    u_xlat0.x = u_xlat16_25 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat16_6.xyz * u_xlat0.xxx;
					    u_xlat0.xzw = u_xlat1.xyz * vec3(u_xlat16_30) + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat8) + u_xlat16_3.xyz;
					    u_xlat10_1.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					lowp vec3 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat8;
					float u_xlat16;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_24 = (-_Glossiness) + 1.0;
					    u_xlat16_26 = (-u_xlat16_24) * 0.699999988 + 1.70000005;
					    u_xlat16_26 = u_xlat16_24 * u_xlat16_26;
					    u_xlat16_26 = u_xlat16_26 * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_26);
					    u_xlat16_3.x = u_xlat10_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_25 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_27 = u_xlat16_24 * u_xlat16_25;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24 + 1.5;
					    u_xlat16_27 = (-u_xlat16_27) * 0.280000001 + 1.0;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_27);
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = inversesqrt(u_xlat4.x);
					    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_27 = (-u_xlat1.x) + 1.0;
					    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
					    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_5.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz + (-u_xlat10_5.xyz);
					    u_xlat1.xyz = vec3(_DayWeight) * u_xlat16_1.xyz + u_xlat10_5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_7.x = (-u_xlat16_30) + _Glossiness;
					    u_xlat16_7.x = u_xlat16_7.x + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
					#else
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xxx;
					    u_xlat16_7.xyz = vec3(u_xlat16_27) * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz;
					    u_xlat28 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat28);
					    u_xlat28 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat8 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
					#else
					    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16 = max(u_xlat28, 0.319999993);
					    u_xlat16 = u_xlat16_24 * u_xlat16;
					    u_xlat16_24 = u_xlat16_25 * u_xlat16_25 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_24 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat16;
					    u_xlat0.x = u_xlat16_25 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat16_6.xyz * u_xlat0.xxx;
					    u_xlat0.xzw = u_xlat1.xyz * vec3(u_xlat16_30) + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat8) + u_xlat16_3.xyz;
					    u_xlat10_1.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 unity_4LightPosX0;
					uniform highp vec4 unity_4LightPosY0;
					uniform highp vec4 unity_4LightPosZ0;
					uniform mediump vec4 unity_4LightAtten0;
					uniform mediump vec4 unity_LightColor[8];
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = 1.0;
					  tmpvar_5.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_7;
					  tmpvar_7[0] = unity_WorldToObject[0].xyz;
					  tmpvar_7[1] = unity_WorldToObject[1].xyz;
					  tmpvar_7[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
					  tmpvar_1.xyz = tmpvar_6;
					  highp vec3 lightColor0_9;
					  lightColor0_9 = unity_LightColor[0].xyz;
					  highp vec3 lightColor1_10;
					  lightColor1_10 = unity_LightColor[1].xyz;
					  highp vec3 lightColor2_11;
					  lightColor2_11 = unity_LightColor[2].xyz;
					  highp vec3 lightColor3_12;
					  lightColor3_12 = unity_LightColor[3].xyz;
					  highp vec4 lightAttenSq_13;
					  lightAttenSq_13 = unity_4LightAtten0;
					  highp vec3 col_14;
					  highp vec4 ndotl_15;
					  highp vec4 lengthSq_16;
					  highp vec4 tmpvar_17;
					  tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
					  highp vec4 tmpvar_18;
					  tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
					  highp vec4 tmpvar_19;
					  tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
					  lengthSq_16 = (tmpvar_17 * tmpvar_17);
					  lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
					  lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
					  highp vec4 tmpvar_20;
					  tmpvar_20 = max (lengthSq_16, vec4(1e-06, 1e-06, 1e-06, 1e-06));
					  lengthSq_16 = tmpvar_20;
					  ndotl_15 = (tmpvar_17 * tmpvar_8.x);
					  ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
					  ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
					  highp vec4 tmpvar_21;
					  tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
					  ndotl_15 = tmpvar_21;
					  highp vec4 tmpvar_22;
					  tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
					    (tmpvar_20 * lightAttenSq_13)
					  ))));
					  col_14 = (lightColor0_9 * tmpvar_22.x);
					  col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
					  col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
					  col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
					  tmpvar_2 = col_14;
					  mediump vec3 normal_23;
					  normal_23 = tmpvar_8;
					  mediump vec3 ambient_24;
					  mediump vec3 x1_25;
					  mediump vec4 tmpvar_26;
					  tmpvar_26 = (normal_23.xyzz * normal_23.yzzx);
					  x1_25.x = dot (unity_SHBr, tmpvar_26);
					  x1_25.y = dot (unity_SHBg, tmpvar_26);
					  x1_25.z = dot (unity_SHBb, tmpvar_26);
					  ambient_24 = ((tmpvar_2 * (
					    (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
					   + 0.01252288)) + (x1_25 + (unity_SHC.xyz * 
					    ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
					  )));
					  tmpvar_2 = ambient_24;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_8;
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = ambient_24;
					  xlv_TEXCOORD5 = tmpvar_3;
					  xlv_TEXCOORD6 = tmpvar_4;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 normalWorld_26;
					  normalWorld_26 = xlv_TEXCOORD1;
					  mediump vec4 tmpvar_27;
					  tmpvar_27.w = 1.0;
					  tmpvar_27.xyz = normalWorld_26;
					  mediump vec3 x_28;
					  x_28.x = dot (unity_SHAr, tmpvar_27);
					  x_28.y = dot (unity_SHAg, tmpvar_27);
					  x_28.z = dot (unity_SHAb, tmpvar_27);
					  mediump vec4 hdr_29;
					  hdr_29 = tmpvar_2;
					  mediump vec4 tmpvar_30;
					  tmpvar_30.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_30.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_31;
					  tmpvar_31 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_30.xyz, tmpvar_30.w);
					  mediump vec4 tmpvar_32;
					  tmpvar_32 = tmpvar_31;
					  lowp vec3 tmpvar_33;
					  mediump vec4 c_34;
					  highp vec3 tmpvar_35;
					  tmpvar_35 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_36;
					  mediump vec3 albedo_37;
					  albedo_37 = tmpvar_10;
					  mediump vec3 tmpvar_38;
					  tmpvar_38 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_37, vec3(_Metallic));
					  mediump float tmpvar_39;
					  tmpvar_39 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_36 = (albedo_37 * tmpvar_39);
					  tmpvar_33 = tmpvar_36;
					  mediump vec3 diffColor_40;
					  diffColor_40 = tmpvar_33;
					  mediump float alpha_41;
					  alpha_41 = tmpvar_12;
					  tmpvar_33 = diffColor_40;
					  mediump vec3 diffColor_42;
					  diffColor_42 = tmpvar_33;
					  mediump vec3 color_43;
					  mediump vec2 rlPow4AndFresnelTerm_44;
					  mediump float tmpvar_45;
					  highp float tmpvar_46;
					  tmpvar_46 = clamp (dot (tmpvar_35, tmpvar_4), 0.0, 1.0);
					  tmpvar_45 = tmpvar_46;
					  mediump float tmpvar_47;
					  highp float tmpvar_48;
					  tmpvar_48 = clamp (dot (tmpvar_35, worldViewDir_6), 0.0, 1.0);
					  tmpvar_47 = tmpvar_48;
					  highp vec2 tmpvar_49;
					  tmpvar_49.x = dot ((worldViewDir_6 - (2.0 * 
					    (dot (tmpvar_35, worldViewDir_6) * tmpvar_35)
					  )), tmpvar_4);
					  tmpvar_49.y = (1.0 - tmpvar_47);
					  highp vec2 tmpvar_50;
					  tmpvar_50 = ((tmpvar_49 * tmpvar_49) * (tmpvar_49 * tmpvar_49));
					  rlPow4AndFresnelTerm_44 = tmpvar_50;
					  mediump float tmpvar_51;
					  tmpvar_51 = rlPow4AndFresnelTerm_44.x;
					  mediump float specular_52;
					  highp float smoothness_53;
					  smoothness_53 = _Glossiness;
					  highp vec2 tmpvar_54;
					  tmpvar_54.x = tmpvar_51;
					  tmpvar_54.y = (1.0 - smoothness_53);
					  highp float tmpvar_55;
					  tmpvar_55 = (texture2D (unity_NHxRoughness, tmpvar_54).x * 16.0);
					  specular_52 = tmpvar_55;
					  color_43 = ((diffColor_42 + (specular_52 * tmpvar_38)) * (tmpvar_3 * tmpvar_45));
					  color_43 = (color_43 + ((
					    max (((1.055 * pow (
					      max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_28))
					    , vec3(0.4166667, 0.4166667, 0.4166667))) - 0.055), vec3(0.0, 0.0, 0.0))
					   * diffColor_42) + (
					    ((hdr_29.x * ((hdr_29.w * 
					      (tmpvar_32.w - 1.0)
					    ) + 1.0)) * tmpvar_32.xyz)
					   * 
					    mix (tmpvar_38, vec3(clamp ((_Glossiness + (1.0 - tmpvar_39)), 0.0, 1.0)), rlPow4AndFresnelTerm_44.yyy)
					  )));
					  mediump vec4 tmpvar_56;
					  tmpvar_56.w = 1.0;
					  tmpvar_56.xyz = color_43;
					  c_34.xyz = tmpvar_56.xyz;
					  c_34.w = alpha_41;
					  c_5 = c_34;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 unity_4LightPosX0;
					uniform highp vec4 unity_4LightPosY0;
					uniform highp vec4 unity_4LightPosZ0;
					uniform mediump vec4 unity_4LightAtten0;
					uniform mediump vec4 unity_LightColor[8];
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = 1.0;
					  tmpvar_5.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_7;
					  tmpvar_7[0] = unity_WorldToObject[0].xyz;
					  tmpvar_7[1] = unity_WorldToObject[1].xyz;
					  tmpvar_7[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
					  tmpvar_1.xyz = tmpvar_6;
					  highp vec3 lightColor0_9;
					  lightColor0_9 = unity_LightColor[0].xyz;
					  highp vec3 lightColor1_10;
					  lightColor1_10 = unity_LightColor[1].xyz;
					  highp vec3 lightColor2_11;
					  lightColor2_11 = unity_LightColor[2].xyz;
					  highp vec3 lightColor3_12;
					  lightColor3_12 = unity_LightColor[3].xyz;
					  highp vec4 lightAttenSq_13;
					  lightAttenSq_13 = unity_4LightAtten0;
					  highp vec3 col_14;
					  highp vec4 ndotl_15;
					  highp vec4 lengthSq_16;
					  highp vec4 tmpvar_17;
					  tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
					  highp vec4 tmpvar_18;
					  tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
					  highp vec4 tmpvar_19;
					  tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
					  lengthSq_16 = (tmpvar_17 * tmpvar_17);
					  lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
					  lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
					  highp vec4 tmpvar_20;
					  tmpvar_20 = max (lengthSq_16, vec4(1e-06, 1e-06, 1e-06, 1e-06));
					  lengthSq_16 = tmpvar_20;
					  ndotl_15 = (tmpvar_17 * tmpvar_8.x);
					  ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
					  ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
					  highp vec4 tmpvar_21;
					  tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
					  ndotl_15 = tmpvar_21;
					  highp vec4 tmpvar_22;
					  tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
					    (tmpvar_20 * lightAttenSq_13)
					  ))));
					  col_14 = (lightColor0_9 * tmpvar_22.x);
					  col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
					  col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
					  col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
					  tmpvar_2 = col_14;
					  mediump vec3 normal_23;
					  normal_23 = tmpvar_8;
					  mediump vec3 ambient_24;
					  mediump vec3 x1_25;
					  mediump vec4 tmpvar_26;
					  tmpvar_26 = (normal_23.xyzz * normal_23.yzzx);
					  x1_25.x = dot (unity_SHBr, tmpvar_26);
					  x1_25.y = dot (unity_SHBg, tmpvar_26);
					  x1_25.z = dot (unity_SHBb, tmpvar_26);
					  ambient_24 = ((tmpvar_2 * (
					    (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
					   + 0.01252288)) + (x1_25 + (unity_SHC.xyz * 
					    ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
					  )));
					  tmpvar_2 = ambient_24;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_8;
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = ambient_24;
					  xlv_TEXCOORD5 = tmpvar_3;
					  xlv_TEXCOORD6 = tmpvar_4;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 normalWorld_26;
					  normalWorld_26 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_27;
					  mediump vec3 tmpvar_28;
					  mediump vec4 tmpvar_29;
					  tmpvar_29.w = 1.0;
					  tmpvar_29.xyz = normalWorld_26;
					  mediump vec3 x_30;
					  x_30.x = dot (unity_SHAr, tmpvar_29);
					  x_30.y = dot (unity_SHAg, tmpvar_29);
					  x_30.z = dot (unity_SHAb, tmpvar_29);
					  tmpvar_28 = max (((1.055 * 
					    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_30)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  mediump vec4 hdr_31;
					  hdr_31 = tmpvar_2;
					  mediump vec4 tmpvar_32;
					  tmpvar_32.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_32.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_33;
					  tmpvar_33 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_32.xyz, tmpvar_32.w);
					  mediump vec4 tmpvar_34;
					  tmpvar_34 = tmpvar_33;
					  tmpvar_27 = ((hdr_31.x * (
					    (hdr_31.w * (tmpvar_34.w - 1.0))
					   + 1.0)) * tmpvar_34.xyz);
					  lowp vec3 tmpvar_35;
					  mediump vec4 c_36;
					  highp vec3 tmpvar_37;
					  tmpvar_37 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_38;
					  mediump vec3 albedo_39;
					  albedo_39 = tmpvar_10;
					  mediump vec3 tmpvar_40;
					  tmpvar_40 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_39, vec3(_Metallic));
					  mediump float tmpvar_41;
					  tmpvar_41 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_38 = (albedo_39 * tmpvar_41);
					  tmpvar_35 = tmpvar_38;
					  mediump vec3 diffColor_42;
					  diffColor_42 = tmpvar_35;
					  mediump float alpha_43;
					  alpha_43 = tmpvar_12;
					  tmpvar_35 = diffColor_42;
					  mediump vec3 diffColor_44;
					  diffColor_44 = tmpvar_35;
					  mediump vec3 color_45;
					  mediump float surfaceReduction_46;
					  highp float specularTerm_47;
					  highp float a2_48;
					  mediump float roughness_49;
					  mediump float perceptualRoughness_50;
					  highp vec3 tmpvar_51;
					  highp vec3 inVec_52;
					  inVec_52 = (tmpvar_4 + worldViewDir_6);
					  tmpvar_51 = (inVec_52 * inversesqrt(max (0.001, 
					    dot (inVec_52, inVec_52)
					  )));
					  mediump float tmpvar_53;
					  highp float tmpvar_54;
					  tmpvar_54 = clamp (dot (tmpvar_37, tmpvar_4), 0.0, 1.0);
					  tmpvar_53 = tmpvar_54;
					  highp float tmpvar_55;
					  tmpvar_55 = clamp (dot (tmpvar_37, tmpvar_51), 0.0, 1.0);
					  mediump float tmpvar_56;
					  highp float tmpvar_57;
					  tmpvar_57 = clamp (dot (tmpvar_37, worldViewDir_6), 0.0, 1.0);
					  tmpvar_56 = tmpvar_57;
					  highp float tmpvar_58;
					  highp float smoothness_59;
					  smoothness_59 = _Glossiness;
					  tmpvar_58 = (1.0 - smoothness_59);
					  perceptualRoughness_50 = tmpvar_58;
					  highp float tmpvar_60;
					  highp float perceptualRoughness_61;
					  perceptualRoughness_61 = perceptualRoughness_50;
					  tmpvar_60 = (perceptualRoughness_61 * perceptualRoughness_61);
					  roughness_49 = tmpvar_60;
					  mediump float tmpvar_62;
					  tmpvar_62 = (roughness_49 * roughness_49);
					  a2_48 = tmpvar_62;
					  specularTerm_47 = ((roughness_49 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_51), 0.0, 1.0)) * (1.5 + roughness_49))
					   * 
					    (((tmpvar_55 * tmpvar_55) * (a2_48 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_63;
					  tmpvar_63 = clamp (specularTerm_47, 0.0, 100.0);
					  specularTerm_47 = tmpvar_63;
					  surfaceReduction_46 = (1.0 - ((roughness_49 * perceptualRoughness_50) * 0.28));
					  mediump float x_64;
					  x_64 = (1.0 - tmpvar_56);
					  mediump vec3 tmpvar_65;
					  tmpvar_65 = mix (tmpvar_40, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_41)
					  ), 0.0, 1.0)), vec3(((x_64 * x_64) * (x_64 * x_64))));
					  highp vec3 tmpvar_66;
					  tmpvar_66 = (((
					    ((diffColor_44 + (tmpvar_63 * tmpvar_40)) * tmpvar_3)
					   * tmpvar_53) + (tmpvar_28 * diffColor_44)) + ((surfaceReduction_46 * tmpvar_27) * tmpvar_65));
					  color_45 = tmpvar_66;
					  mediump vec4 tmpvar_67;
					  tmpvar_67.w = 1.0;
					  tmpvar_67.xyz = color_45;
					  c_36.xyz = tmpvar_67.xyz;
					  c_36.w = alpha_43;
					  c_5 = c_36;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 unity_4LightPosX0;
					uniform highp vec4 unity_4LightPosY0;
					uniform highp vec4 unity_4LightPosZ0;
					uniform mediump vec4 unity_4LightAtten0;
					uniform mediump vec4 unity_LightColor[8];
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = 1.0;
					  tmpvar_5.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_7;
					  tmpvar_7[0] = unity_WorldToObject[0].xyz;
					  tmpvar_7[1] = unity_WorldToObject[1].xyz;
					  tmpvar_7[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
					  tmpvar_1.xyz = tmpvar_6;
					  highp vec3 lightColor0_9;
					  lightColor0_9 = unity_LightColor[0].xyz;
					  highp vec3 lightColor1_10;
					  lightColor1_10 = unity_LightColor[1].xyz;
					  highp vec3 lightColor2_11;
					  lightColor2_11 = unity_LightColor[2].xyz;
					  highp vec3 lightColor3_12;
					  lightColor3_12 = unity_LightColor[3].xyz;
					  highp vec4 lightAttenSq_13;
					  lightAttenSq_13 = unity_4LightAtten0;
					  highp vec3 col_14;
					  highp vec4 ndotl_15;
					  highp vec4 lengthSq_16;
					  highp vec4 tmpvar_17;
					  tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
					  highp vec4 tmpvar_18;
					  tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
					  highp vec4 tmpvar_19;
					  tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
					  lengthSq_16 = (tmpvar_17 * tmpvar_17);
					  lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
					  lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
					  highp vec4 tmpvar_20;
					  tmpvar_20 = max (lengthSq_16, vec4(1e-06, 1e-06, 1e-06, 1e-06));
					  lengthSq_16 = tmpvar_20;
					  ndotl_15 = (tmpvar_17 * tmpvar_8.x);
					  ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
					  ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
					  highp vec4 tmpvar_21;
					  tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
					  ndotl_15 = tmpvar_21;
					  highp vec4 tmpvar_22;
					  tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
					    (tmpvar_20 * lightAttenSq_13)
					  ))));
					  col_14 = (lightColor0_9 * tmpvar_22.x);
					  col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
					  col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
					  col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
					  tmpvar_2 = col_14;
					  mediump vec3 normal_23;
					  normal_23 = tmpvar_8;
					  mediump vec3 ambient_24;
					  mediump vec3 x1_25;
					  mediump vec4 tmpvar_26;
					  tmpvar_26 = (normal_23.xyzz * normal_23.yzzx);
					  x1_25.x = dot (unity_SHBr, tmpvar_26);
					  x1_25.y = dot (unity_SHBg, tmpvar_26);
					  x1_25.z = dot (unity_SHBb, tmpvar_26);
					  ambient_24 = ((tmpvar_2 * (
					    (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
					   + 0.01252288)) + (x1_25 + (unity_SHC.xyz * 
					    ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
					  )));
					  tmpvar_2 = ambient_24;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_8;
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = ambient_24;
					  xlv_TEXCOORD5 = tmpvar_3;
					  xlv_TEXCOORD6 = tmpvar_4;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 normalWorld_26;
					  normalWorld_26 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_27;
					  mediump vec3 tmpvar_28;
					  mediump vec4 tmpvar_29;
					  tmpvar_29.w = 1.0;
					  tmpvar_29.xyz = normalWorld_26;
					  mediump vec3 x_30;
					  x_30.x = dot (unity_SHAr, tmpvar_29);
					  x_30.y = dot (unity_SHAg, tmpvar_29);
					  x_30.z = dot (unity_SHAb, tmpvar_29);
					  tmpvar_28 = max (((1.055 * 
					    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_30)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  mediump vec4 hdr_31;
					  hdr_31 = tmpvar_2;
					  mediump vec4 tmpvar_32;
					  tmpvar_32.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_32.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_33;
					  tmpvar_33 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_32.xyz, tmpvar_32.w);
					  mediump vec4 tmpvar_34;
					  tmpvar_34 = tmpvar_33;
					  tmpvar_27 = ((hdr_31.x * (
					    (hdr_31.w * (tmpvar_34.w - 1.0))
					   + 1.0)) * tmpvar_34.xyz);
					  lowp vec3 tmpvar_35;
					  mediump vec4 c_36;
					  highp vec3 tmpvar_37;
					  tmpvar_37 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_38;
					  mediump vec3 albedo_39;
					  albedo_39 = tmpvar_10;
					  mediump vec3 tmpvar_40;
					  tmpvar_40 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_39, vec3(_Metallic));
					  mediump float tmpvar_41;
					  tmpvar_41 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_38 = (albedo_39 * tmpvar_41);
					  tmpvar_35 = tmpvar_38;
					  mediump vec3 diffColor_42;
					  diffColor_42 = tmpvar_35;
					  mediump float alpha_43;
					  alpha_43 = tmpvar_12;
					  tmpvar_35 = diffColor_42;
					  mediump vec3 diffColor_44;
					  diffColor_44 = tmpvar_35;
					  mediump vec3 color_45;
					  mediump float surfaceReduction_46;
					  highp float specularTerm_47;
					  highp float a2_48;
					  mediump float roughness_49;
					  mediump float perceptualRoughness_50;
					  highp vec3 tmpvar_51;
					  highp vec3 inVec_52;
					  inVec_52 = (tmpvar_4 + worldViewDir_6);
					  tmpvar_51 = (inVec_52 * inversesqrt(max (0.001, 
					    dot (inVec_52, inVec_52)
					  )));
					  mediump float tmpvar_53;
					  highp float tmpvar_54;
					  tmpvar_54 = clamp (dot (tmpvar_37, tmpvar_4), 0.0, 1.0);
					  tmpvar_53 = tmpvar_54;
					  highp float tmpvar_55;
					  tmpvar_55 = clamp (dot (tmpvar_37, tmpvar_51), 0.0, 1.0);
					  mediump float tmpvar_56;
					  highp float tmpvar_57;
					  tmpvar_57 = clamp (dot (tmpvar_37, worldViewDir_6), 0.0, 1.0);
					  tmpvar_56 = tmpvar_57;
					  highp float tmpvar_58;
					  highp float smoothness_59;
					  smoothness_59 = _Glossiness;
					  tmpvar_58 = (1.0 - smoothness_59);
					  perceptualRoughness_50 = tmpvar_58;
					  highp float tmpvar_60;
					  highp float perceptualRoughness_61;
					  perceptualRoughness_61 = perceptualRoughness_50;
					  tmpvar_60 = (perceptualRoughness_61 * perceptualRoughness_61);
					  roughness_49 = tmpvar_60;
					  mediump float tmpvar_62;
					  tmpvar_62 = (roughness_49 * roughness_49);
					  a2_48 = tmpvar_62;
					  specularTerm_47 = ((roughness_49 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_51), 0.0, 1.0)) * (1.5 + roughness_49))
					   * 
					    (((tmpvar_55 * tmpvar_55) * (a2_48 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_63;
					  tmpvar_63 = clamp (specularTerm_47, 0.0, 100.0);
					  specularTerm_47 = tmpvar_63;
					  surfaceReduction_46 = (1.0 - ((roughness_49 * perceptualRoughness_50) * 0.28));
					  mediump float x_64;
					  x_64 = (1.0 - tmpvar_56);
					  mediump vec3 tmpvar_65;
					  tmpvar_65 = mix (tmpvar_40, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_41)
					  ), 0.0, 1.0)), vec3(((x_64 * x_64) * (x_64 * x_64))));
					  highp vec3 tmpvar_66;
					  tmpvar_66 = (((
					    ((diffColor_44 + (tmpvar_63 * tmpvar_40)) * tmpvar_3)
					   * tmpvar_53) + (tmpvar_28 * diffColor_44)) + ((surfaceReduction_46 * tmpvar_27) * tmpvar_65));
					  color_45 = tmpvar_66;
					  mediump vec4 tmpvar_67;
					  tmpvar_67.w = 1.0;
					  tmpvar_67.xyz = color_45;
					  c_36.xyz = tmpvar_67.xyz;
					  c_36.w = alpha_43;
					  c_5 = c_36;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat12;
					mediump vec3 u_xlat16_12;
					lowp vec3 u_xlat10_12;
					float u_xlat30;
					mediump float u_xlat16_31;
					float u_xlat32;
					mediump float u_xlat16_34;
					mediump float u_xlat16_36;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat16_1.x = dot((-u_xlat2.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_1.xxx) + (-u_xlat2.xyz);
					    u_xlat3.z = (-_Glossiness) + 1.0;
					    u_xlat16_31 = (-u_xlat3.z) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat16_31 * u_xlat3.z;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_31);
					    u_xlat16_4.x = u_xlat10_1.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_1.xyz * u_xlat16_4.xxx;
					    u_xlat30 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat5.xyz = vec3(u_xlat30) * vs_TEXCOORD1.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat32 = u_xlat30;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
					#else
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					#endif
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat2.xyz = u_xlat5.xyz * (-vec3(u_xlat30)) + u_xlat2.xyz;
					    u_xlat30 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = vec3(u_xlat30) * _LightColor0.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat3.x = u_xlat30 * u_xlat30;
					    u_xlat30 = texture(unity_NHxRoughness, u_xlat3.xz).x;
					    u_xlat30 = u_xlat30 * 16.0;
					    u_xlat16_34 = (-u_xlat32) + 1.0;
					    u_xlat16_2 = u_xlat16_34 * u_xlat16_34;
					    u_xlat16_2 = u_xlat16_34 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_34 * u_xlat16_2;
					    u_xlat10_12.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_3.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_12.xyz = u_xlat10_12.xyz + (-u_xlat10_3.xyz);
					    u_xlat12.xyz = vec3(_DayWeight) * u_xlat16_12.xyz + u_xlat10_3.xyz;
					    u_xlat12.xyz = u_xlat12.xyz * _Color.xyz;
					    u_xlat16_7.xyz = u_xlat12.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat12.xyz = u_xlat12.xyz * vs_COLOR0.xyz;
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_34 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_36 = (-u_xlat16_34) + _Glossiness;
					    u_xlat16_8.xyz = u_xlat12.xyz * vec3(u_xlat16_34);
					    u_xlat16_34 = u_xlat16_36 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
					#else
					    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_34);
					    u_xlat16_9.xyz = vec3(u_xlat16_2) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = vec3(u_xlat30) * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_9.xyz;
					    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_8.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_4.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat30 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump float u_xlat16_9;
					mediump vec3 u_xlat16_11;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_22;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_3.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_2.xyz + (-u_xlat10_3.xyz);
					    u_xlat2.xyz = vec3(_DayWeight) * u_xlat16_2.xyz + u_xlat10_3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat16_1.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat3.xyz;
					    u_xlat16_22 = (-u_xlat16_22) + _Glossiness;
					    u_xlat16_22 = u_xlat16_22 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
					#else
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + vec3(u_xlat16_22);
					    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat21 = max(u_xlat21, 0.319999993);
					    u_xlat16_23 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_23 * u_xlat16_23 + 1.5;
					    u_xlat21 = u_xlat21 * u_xlat16_3;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat16_9 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_16 = u_xlat16_9 * u_xlat16_9 + -1.0;
					    u_xlat2.x = u_xlat2.x * u_xlat16_16 + 1.00001001;
					    u_xlat21 = u_xlat21 * u_xlat2.x;
					    u_xlat21 = u_xlat16_9 / u_xlat21;
					    u_xlat16_22 = u_xlat16_23 * u_xlat16_9;
					    u_xlat16_22 = (-u_xlat16_22) * 0.280000001 + 1.0;
					    u_xlat21 = u_xlat21 + -9.99999975e-05;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = min(u_xlat21, 100.0);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat3.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = (-u_xlat3.x) + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat21) + u_xlat16_6.xyz;
					    u_xlat16_4.x = (-u_xlat16_23) * 0.699999988 + 1.70000005;
					    u_xlat16_4.x = u_xlat16_23 * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * 6.0;
					    u_xlat16_11.x = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;
					    u_xlat16_11.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_11.xxx) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_4.x);
					    u_xlat16_4.x = u_xlat10_0.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_0.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat16_4.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat2.xyz;
					    u_xlat10_2.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.xyz = u_xlat10_2.xyz * _EmissionColor.xyz;
					    u_xlat21 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump float u_xlat16_9;
					mediump vec3 u_xlat16_11;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_22;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_3.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_2.xyz + (-u_xlat10_3.xyz);
					    u_xlat2.xyz = vec3(_DayWeight) * u_xlat16_2.xyz + u_xlat10_3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat16_1.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat3.xyz;
					    u_xlat16_22 = (-u_xlat16_22) + _Glossiness;
					    u_xlat16_22 = u_xlat16_22 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
					#else
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + vec3(u_xlat16_22);
					    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat21 = max(u_xlat21, 0.319999993);
					    u_xlat16_23 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_23 * u_xlat16_23 + 1.5;
					    u_xlat21 = u_xlat21 * u_xlat16_3;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat16_9 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_16 = u_xlat16_9 * u_xlat16_9 + -1.0;
					    u_xlat2.x = u_xlat2.x * u_xlat16_16 + 1.00001001;
					    u_xlat21 = u_xlat21 * u_xlat2.x;
					    u_xlat21 = u_xlat16_9 / u_xlat21;
					    u_xlat16_22 = u_xlat16_23 * u_xlat16_9;
					    u_xlat16_22 = (-u_xlat16_22) * 0.280000001 + 1.0;
					    u_xlat21 = u_xlat21 + -9.99999975e-05;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = min(u_xlat21, 100.0);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat3.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = (-u_xlat3.x) + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat21) + u_xlat16_6.xyz;
					    u_xlat16_4.x = (-u_xlat16_23) * 0.699999988 + 1.70000005;
					    u_xlat16_4.x = u_xlat16_23 * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * 6.0;
					    u_xlat16_11.x = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;
					    u_xlat16_11.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_11.xxx) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_4.x);
					    u_xlat16_4.x = u_xlat10_0.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_0.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat16_4.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat2.xyz;
					    u_xlat10_2.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.xyz = u_xlat10_2.xyz * _EmissionColor.xyz;
					    u_xlat21 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = tmpvar_2;
					  xlv_TEXCOORD6 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  lowp vec4 tmpvar_26;
					  tmpvar_26 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
					  mediump vec4 hdr_27;
					  hdr_27 = tmpvar_2;
					  mediump vec4 tmpvar_28;
					  tmpvar_28.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_28.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_29;
					  tmpvar_29 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_28.xyz, tmpvar_28.w);
					  mediump vec4 tmpvar_30;
					  tmpvar_30 = tmpvar_29;
					  lowp vec3 tmpvar_31;
					  mediump vec4 c_32;
					  highp vec3 tmpvar_33;
					  tmpvar_33 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_34;
					  mediump vec3 albedo_35;
					  albedo_35 = tmpvar_10;
					  mediump vec3 tmpvar_36;
					  tmpvar_36 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_35, vec3(_Metallic));
					  mediump float tmpvar_37;
					  tmpvar_37 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_34 = (albedo_35 * tmpvar_37);
					  tmpvar_31 = tmpvar_34;
					  mediump vec3 diffColor_38;
					  diffColor_38 = tmpvar_31;
					  mediump float alpha_39;
					  alpha_39 = tmpvar_12;
					  tmpvar_31 = diffColor_38;
					  mediump vec3 diffColor_40;
					  diffColor_40 = tmpvar_31;
					  mediump vec3 color_41;
					  mediump vec2 rlPow4AndFresnelTerm_42;
					  mediump float tmpvar_43;
					  highp float tmpvar_44;
					  tmpvar_44 = clamp (dot (tmpvar_33, tmpvar_4), 0.0, 1.0);
					  tmpvar_43 = tmpvar_44;
					  mediump float tmpvar_45;
					  highp float tmpvar_46;
					  tmpvar_46 = clamp (dot (tmpvar_33, worldViewDir_6), 0.0, 1.0);
					  tmpvar_45 = tmpvar_46;
					  highp vec2 tmpvar_47;
					  tmpvar_47.x = dot ((worldViewDir_6 - (2.0 * 
					    (dot (tmpvar_33, worldViewDir_6) * tmpvar_33)
					  )), tmpvar_4);
					  tmpvar_47.y = (1.0 - tmpvar_45);
					  highp vec2 tmpvar_48;
					  tmpvar_48 = ((tmpvar_47 * tmpvar_47) * (tmpvar_47 * tmpvar_47));
					  rlPow4AndFresnelTerm_42 = tmpvar_48;
					  mediump float tmpvar_49;
					  tmpvar_49 = rlPow4AndFresnelTerm_42.x;
					  mediump float specular_50;
					  highp float smoothness_51;
					  smoothness_51 = _Glossiness;
					  highp vec2 tmpvar_52;
					  tmpvar_52.x = tmpvar_49;
					  tmpvar_52.y = (1.0 - smoothness_51);
					  highp float tmpvar_53;
					  tmpvar_53 = (texture2D (unity_NHxRoughness, tmpvar_52).x * 16.0);
					  specular_50 = tmpvar_53;
					  color_41 = ((diffColor_40 + (specular_50 * tmpvar_36)) * (tmpvar_3 * tmpvar_43));
					  color_41 = (color_41 + ((
					    pow (((unity_DynamicLightmap_HDR.x * tmpvar_26.w) * tmpvar_26.xyz), unity_DynamicLightmap_HDR.yyy)
					   * diffColor_40) + (
					    ((hdr_27.x * ((hdr_27.w * 
					      (tmpvar_30.w - 1.0)
					    ) + 1.0)) * tmpvar_30.xyz)
					   * 
					    mix (tmpvar_36, vec3(clamp ((_Glossiness + (1.0 - tmpvar_37)), 0.0, 1.0)), rlPow4AndFresnelTerm_42.yyy)
					  )));
					  mediump vec4 tmpvar_54;
					  tmpvar_54.w = 1.0;
					  tmpvar_54.xyz = color_41;
					  c_32.xyz = tmpvar_54.xyz;
					  c_32.w = alpha_39;
					  c_5 = c_32;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = tmpvar_2;
					  xlv_TEXCOORD6 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 tmpvar_26;
					  mediump vec3 tmpvar_27;
					  lowp vec4 tmpvar_28;
					  tmpvar_28 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
					  tmpvar_27 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_28.w) * tmpvar_28.xyz), unity_DynamicLightmap_HDR.yyy);
					  mediump vec4 hdr_29;
					  hdr_29 = tmpvar_2;
					  mediump vec4 tmpvar_30;
					  tmpvar_30.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_30.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_31;
					  tmpvar_31 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_30.xyz, tmpvar_30.w);
					  mediump vec4 tmpvar_32;
					  tmpvar_32 = tmpvar_31;
					  tmpvar_26 = ((hdr_29.x * (
					    (hdr_29.w * (tmpvar_32.w - 1.0))
					   + 1.0)) * tmpvar_32.xyz);
					  lowp vec3 tmpvar_33;
					  mediump vec4 c_34;
					  highp vec3 tmpvar_35;
					  tmpvar_35 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_36;
					  mediump vec3 albedo_37;
					  albedo_37 = tmpvar_10;
					  mediump vec3 tmpvar_38;
					  tmpvar_38 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_37, vec3(_Metallic));
					  mediump float tmpvar_39;
					  tmpvar_39 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_36 = (albedo_37 * tmpvar_39);
					  tmpvar_33 = tmpvar_36;
					  mediump vec3 diffColor_40;
					  diffColor_40 = tmpvar_33;
					  mediump float alpha_41;
					  alpha_41 = tmpvar_12;
					  tmpvar_33 = diffColor_40;
					  mediump vec3 diffColor_42;
					  diffColor_42 = tmpvar_33;
					  mediump vec3 color_43;
					  mediump float surfaceReduction_44;
					  highp float specularTerm_45;
					  highp float a2_46;
					  mediump float roughness_47;
					  mediump float perceptualRoughness_48;
					  highp vec3 tmpvar_49;
					  highp vec3 inVec_50;
					  inVec_50 = (tmpvar_4 + worldViewDir_6);
					  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
					    dot (inVec_50, inVec_50)
					  )));
					  mediump float tmpvar_51;
					  highp float tmpvar_52;
					  tmpvar_52 = clamp (dot (tmpvar_35, tmpvar_4), 0.0, 1.0);
					  tmpvar_51 = tmpvar_52;
					  highp float tmpvar_53;
					  tmpvar_53 = clamp (dot (tmpvar_35, tmpvar_49), 0.0, 1.0);
					  mediump float tmpvar_54;
					  highp float tmpvar_55;
					  tmpvar_55 = clamp (dot (tmpvar_35, worldViewDir_6), 0.0, 1.0);
					  tmpvar_54 = tmpvar_55;
					  highp float tmpvar_56;
					  highp float smoothness_57;
					  smoothness_57 = _Glossiness;
					  tmpvar_56 = (1.0 - smoothness_57);
					  perceptualRoughness_48 = tmpvar_56;
					  highp float tmpvar_58;
					  highp float perceptualRoughness_59;
					  perceptualRoughness_59 = perceptualRoughness_48;
					  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
					  roughness_47 = tmpvar_58;
					  mediump float tmpvar_60;
					  tmpvar_60 = (roughness_47 * roughness_47);
					  a2_46 = tmpvar_60;
					  specularTerm_45 = ((roughness_47 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
					   * 
					    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_61;
					  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
					  specularTerm_45 = tmpvar_61;
					  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
					  mediump float x_62;
					  x_62 = (1.0 - tmpvar_54);
					  mediump vec3 tmpvar_63;
					  tmpvar_63 = mix (tmpvar_38, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_39)
					  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
					  highp vec3 tmpvar_64;
					  tmpvar_64 = (((
					    ((diffColor_42 + (tmpvar_61 * tmpvar_38)) * tmpvar_3)
					   * tmpvar_51) + (tmpvar_27 * diffColor_42)) + ((surfaceReduction_44 * tmpvar_26) * tmpvar_63));
					  color_43 = tmpvar_64;
					  mediump vec4 tmpvar_65;
					  tmpvar_65.w = 1.0;
					  tmpvar_65.xyz = color_43;
					  c_34.xyz = tmpvar_65.xyz;
					  c_34.w = alpha_41;
					  c_5 = c_34;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = tmpvar_2;
					  xlv_TEXCOORD6 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 tmpvar_26;
					  mediump vec3 tmpvar_27;
					  lowp vec4 tmpvar_28;
					  tmpvar_28 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
					  tmpvar_27 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_28.w) * tmpvar_28.xyz), unity_DynamicLightmap_HDR.yyy);
					  mediump vec4 hdr_29;
					  hdr_29 = tmpvar_2;
					  mediump vec4 tmpvar_30;
					  tmpvar_30.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_30.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_31;
					  tmpvar_31 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_30.xyz, tmpvar_30.w);
					  mediump vec4 tmpvar_32;
					  tmpvar_32 = tmpvar_31;
					  tmpvar_26 = ((hdr_29.x * (
					    (hdr_29.w * (tmpvar_32.w - 1.0))
					   + 1.0)) * tmpvar_32.xyz);
					  lowp vec3 tmpvar_33;
					  mediump vec4 c_34;
					  highp vec3 tmpvar_35;
					  tmpvar_35 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_36;
					  mediump vec3 albedo_37;
					  albedo_37 = tmpvar_10;
					  mediump vec3 tmpvar_38;
					  tmpvar_38 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_37, vec3(_Metallic));
					  mediump float tmpvar_39;
					  tmpvar_39 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_36 = (albedo_37 * tmpvar_39);
					  tmpvar_33 = tmpvar_36;
					  mediump vec3 diffColor_40;
					  diffColor_40 = tmpvar_33;
					  mediump float alpha_41;
					  alpha_41 = tmpvar_12;
					  tmpvar_33 = diffColor_40;
					  mediump vec3 diffColor_42;
					  diffColor_42 = tmpvar_33;
					  mediump vec3 color_43;
					  mediump float surfaceReduction_44;
					  highp float specularTerm_45;
					  highp float a2_46;
					  mediump float roughness_47;
					  mediump float perceptualRoughness_48;
					  highp vec3 tmpvar_49;
					  highp vec3 inVec_50;
					  inVec_50 = (tmpvar_4 + worldViewDir_6);
					  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
					    dot (inVec_50, inVec_50)
					  )));
					  mediump float tmpvar_51;
					  highp float tmpvar_52;
					  tmpvar_52 = clamp (dot (tmpvar_35, tmpvar_4), 0.0, 1.0);
					  tmpvar_51 = tmpvar_52;
					  highp float tmpvar_53;
					  tmpvar_53 = clamp (dot (tmpvar_35, tmpvar_49), 0.0, 1.0);
					  mediump float tmpvar_54;
					  highp float tmpvar_55;
					  tmpvar_55 = clamp (dot (tmpvar_35, worldViewDir_6), 0.0, 1.0);
					  tmpvar_54 = tmpvar_55;
					  highp float tmpvar_56;
					  highp float smoothness_57;
					  smoothness_57 = _Glossiness;
					  tmpvar_56 = (1.0 - smoothness_57);
					  perceptualRoughness_48 = tmpvar_56;
					  highp float tmpvar_58;
					  highp float perceptualRoughness_59;
					  perceptualRoughness_59 = perceptualRoughness_48;
					  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
					  roughness_47 = tmpvar_58;
					  mediump float tmpvar_60;
					  tmpvar_60 = (roughness_47 * roughness_47);
					  a2_46 = tmpvar_60;
					  specularTerm_45 = ((roughness_47 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
					   * 
					    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_61;
					  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
					  specularTerm_45 = tmpvar_61;
					  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
					  mediump float x_62;
					  x_62 = (1.0 - tmpvar_54);
					  mediump vec3 tmpvar_63;
					  tmpvar_63 = mix (tmpvar_38, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_39)
					  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
					  highp vec3 tmpvar_64;
					  tmpvar_64 = (((
					    ((diffColor_42 + (tmpvar_61 * tmpvar_38)) * tmpvar_3)
					   * tmpvar_51) + (tmpvar_27 * diffColor_42)) + ((surfaceReduction_44 * tmpvar_26) * tmpvar_63));
					  color_43 = tmpvar_64;
					  mediump vec4 tmpvar_65;
					  tmpvar_65.w = 1.0;
					  tmpvar_65.xyz = color_43;
					  c_34.xyz = tmpvar_65.xyz;
					  c_34.w = alpha_41;
					  c_5 = c_34;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					lowp vec3 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump float u_xlat16_10;
					float u_xlat13;
					float u_xlat30;
					mediump float u_xlat16_31;
					mediump float u_xlat16_34;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat16_31 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
					    u_xlat16_2.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat0.xyz);
					    u_xlat3.z = (-_Glossiness) + 1.0;
					    u_xlat16_31 = (-u_xlat3.z) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat16_31 * u_xlat3.z;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_31);
					    u_xlat16_31 = u_xlat10_2.w + -1.0;
					    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;
					    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(u_xlat16_31);
					    u_xlat30 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat5.xyz = vec3(u_xlat30) * vs_TEXCOORD1.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat5.xyz);
					    u_xlat13 = u_xlat30;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
					#else
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					#endif
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat0.xyz = u_xlat5.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
					    u_xlat30 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = vec3(u_xlat30) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat3.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_31 = (-u_xlat13) + 1.0;
					    u_xlat16_10 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_10 = u_xlat16_31 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_31 * u_xlat16_10;
					    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_5.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_3.xyz + (-u_xlat10_5.xyz);
					    u_xlat3.xyz = vec3(_DayWeight) * u_xlat16_3.xyz + u_xlat10_5.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat16_7.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_34 = (-u_xlat16_31) + _Glossiness;
					    u_xlat16_8.xyz = vec3(u_xlat16_31) * u_xlat3.xyz;
					    u_xlat16_31 = u_xlat16_34 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_31);
					    u_xlat16_9.xyz = vec3(u_xlat16_10) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_9.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_1.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat30 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_6;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_22;
					mediump float u_xlat16_23;
					mediump float u_xlat16_24;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_2.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat2.xyz;
					    u_xlat16_22 = (-u_xlat16_22) + _Glossiness;
					    u_xlat16_22 = u_xlat16_22 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
					#else
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_22);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat21 = max(u_xlat21, 0.319999993);
					    u_xlat16_23 = (-_Glossiness) + 1.0;
					    u_xlat16_6 = u_xlat16_23 * u_xlat16_23 + 1.5;
					    u_xlat21 = u_xlat21 * u_xlat16_6;
					    u_xlat6.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * vs_TEXCOORD1.xyz;
					    u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat16_9 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_16 = u_xlat16_9 * u_xlat16_9 + -1.0;
					    u_xlat2.x = u_xlat2.x * u_xlat16_16 + 1.00001001;
					    u_xlat21 = u_xlat21 * u_xlat2.x;
					    u_xlat21 = u_xlat16_9 / u_xlat21;
					    u_xlat16_22 = u_xlat16_23 * u_xlat16_9;
					    u_xlat16_22 = (-u_xlat16_22) * 0.280000001 + 1.0;
					    u_xlat21 = u_xlat21 + -9.99999975e-05;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = min(u_xlat21, 100.0);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat21 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
					#else
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					#endif
					    u_xlat16_24 = (-u_xlat6.x) + 1.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_5.xyz + u_xlat16_3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat21) + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-u_xlat16_23) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_23;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat16_8 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_8 = u_xlat16_8 + u_xlat16_8;
					    u_xlat16_4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_8)) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat10_0.w + -1.0;
					    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_22);
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat2.xyz;
					    u_xlat10_2.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.xyz = u_xlat10_2.xyz * _EmissionColor.xyz;
					    u_xlat21 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_6;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_22;
					mediump float u_xlat16_23;
					mediump float u_xlat16_24;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_2.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat2.xyz;
					    u_xlat16_22 = (-u_xlat16_22) + _Glossiness;
					    u_xlat16_22 = u_xlat16_22 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
					#else
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_22);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat21 = max(u_xlat21, 0.319999993);
					    u_xlat16_23 = (-_Glossiness) + 1.0;
					    u_xlat16_6 = u_xlat16_23 * u_xlat16_23 + 1.5;
					    u_xlat21 = u_xlat21 * u_xlat16_6;
					    u_xlat6.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * vs_TEXCOORD1.xyz;
					    u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat16_9 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_16 = u_xlat16_9 * u_xlat16_9 + -1.0;
					    u_xlat2.x = u_xlat2.x * u_xlat16_16 + 1.00001001;
					    u_xlat21 = u_xlat21 * u_xlat2.x;
					    u_xlat21 = u_xlat16_9 / u_xlat21;
					    u_xlat16_22 = u_xlat16_23 * u_xlat16_9;
					    u_xlat16_22 = (-u_xlat16_22) * 0.280000001 + 1.0;
					    u_xlat21 = u_xlat21 + -9.99999975e-05;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = min(u_xlat21, 100.0);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat21 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
					#else
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					#endif
					    u_xlat16_24 = (-u_xlat6.x) + 1.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_5.xyz + u_xlat16_3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat21) + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-u_xlat16_23) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_23;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat16_8 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_8 = u_xlat16_8 + u_xlat16_8;
					    u_xlat16_4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_8)) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat10_0.w + -1.0;
					    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_22);
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat2.xyz;
					    u_xlat10_2.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.xyz = u_xlat10_2.xyz * _EmissionColor.xyz;
					    u_xlat21 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = tmpvar_2;
					  xlv_TEXCOORD6 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 normalWorld_26;
					  normalWorld_26 = xlv_TEXCOORD1;
					  mediump vec4 realtimeDirTex_27;
					  lowp vec4 tmpvar_28;
					  tmpvar_28 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
					  lowp vec4 tmpvar_29;
					  tmpvar_29 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
					  realtimeDirTex_27 = tmpvar_29;
					  lowp vec4 dirTex_30;
					  dirTex_30 = realtimeDirTex_27;
					  lowp vec3 y_31;
					  y_31 = (dirTex_30.xyz - 0.5);
					  lowp float tmpvar_32;
					  tmpvar_32 = max (0.0001, dirTex_30.w);
					  mediump vec4 hdr_33;
					  hdr_33 = tmpvar_2;
					  mediump vec4 tmpvar_34;
					  tmpvar_34.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_34.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_35;
					  tmpvar_35 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_34.xyz, tmpvar_34.w);
					  mediump vec4 tmpvar_36;
					  tmpvar_36 = tmpvar_35;
					  lowp vec3 tmpvar_37;
					  mediump vec4 c_38;
					  highp vec3 tmpvar_39;
					  tmpvar_39 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_40;
					  mediump vec3 albedo_41;
					  albedo_41 = tmpvar_10;
					  mediump vec3 tmpvar_42;
					  tmpvar_42 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_41, vec3(_Metallic));
					  mediump float tmpvar_43;
					  tmpvar_43 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_40 = (albedo_41 * tmpvar_43);
					  tmpvar_37 = tmpvar_40;
					  mediump vec3 diffColor_44;
					  diffColor_44 = tmpvar_37;
					  mediump float alpha_45;
					  alpha_45 = tmpvar_12;
					  tmpvar_37 = diffColor_44;
					  mediump vec3 diffColor_46;
					  diffColor_46 = tmpvar_37;
					  mediump vec3 color_47;
					  mediump vec2 rlPow4AndFresnelTerm_48;
					  mediump float tmpvar_49;
					  highp float tmpvar_50;
					  tmpvar_50 = clamp (dot (tmpvar_39, tmpvar_4), 0.0, 1.0);
					  tmpvar_49 = tmpvar_50;
					  mediump float tmpvar_51;
					  highp float tmpvar_52;
					  tmpvar_52 = clamp (dot (tmpvar_39, worldViewDir_6), 0.0, 1.0);
					  tmpvar_51 = tmpvar_52;
					  highp vec2 tmpvar_53;
					  tmpvar_53.x = dot ((worldViewDir_6 - (2.0 * 
					    (dot (tmpvar_39, worldViewDir_6) * tmpvar_39)
					  )), tmpvar_4);
					  tmpvar_53.y = (1.0 - tmpvar_51);
					  highp vec2 tmpvar_54;
					  tmpvar_54 = ((tmpvar_53 * tmpvar_53) * (tmpvar_53 * tmpvar_53));
					  rlPow4AndFresnelTerm_48 = tmpvar_54;
					  mediump float tmpvar_55;
					  tmpvar_55 = rlPow4AndFresnelTerm_48.x;
					  mediump float specular_56;
					  highp float smoothness_57;
					  smoothness_57 = _Glossiness;
					  highp vec2 tmpvar_58;
					  tmpvar_58.x = tmpvar_55;
					  tmpvar_58.y = (1.0 - smoothness_57);
					  highp float tmpvar_59;
					  tmpvar_59 = (texture2D (unity_NHxRoughness, tmpvar_58).x * 16.0);
					  specular_56 = tmpvar_59;
					  color_47 = ((diffColor_46 + (specular_56 * tmpvar_42)) * (tmpvar_3 * tmpvar_49));
					  color_47 = (color_47 + ((
					    ((pow ((
					      (unity_DynamicLightmap_HDR.x * tmpvar_28.w)
					     * tmpvar_28.xyz), unity_DynamicLightmap_HDR.yyy) * (dot (normalWorld_26, y_31) + 0.5)) / tmpvar_32)
					   * diffColor_46) + (
					    ((hdr_33.x * ((hdr_33.w * 
					      (tmpvar_36.w - 1.0)
					    ) + 1.0)) * tmpvar_36.xyz)
					   * 
					    mix (tmpvar_42, vec3(clamp ((_Glossiness + (1.0 - tmpvar_43)), 0.0, 1.0)), rlPow4AndFresnelTerm_48.yyy)
					  )));
					  mediump vec4 tmpvar_60;
					  tmpvar_60.w = 1.0;
					  tmpvar_60.xyz = color_47;
					  c_38.xyz = tmpvar_60.xyz;
					  c_38.w = alpha_45;
					  c_5 = c_38;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = tmpvar_2;
					  xlv_TEXCOORD6 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 normalWorld_26;
					  normalWorld_26 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_27;
					  mediump vec4 realtimeDirTex_28;
					  mediump vec3 tmpvar_29;
					  lowp vec4 tmpvar_30;
					  tmpvar_30 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
					  lowp vec4 tmpvar_31;
					  tmpvar_31 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
					  realtimeDirTex_28 = tmpvar_31;
					  lowp vec4 dirTex_32;
					  dirTex_32 = realtimeDirTex_28;
					  lowp vec3 y_33;
					  y_33 = (dirTex_32.xyz - 0.5);
					  lowp float tmpvar_34;
					  tmpvar_34 = max (0.0001, dirTex_32.w);
					  tmpvar_29 = ((pow (
					    ((unity_DynamicLightmap_HDR.x * tmpvar_30.w) * tmpvar_30.xyz)
					  , unity_DynamicLightmap_HDR.yyy) * (
					    dot (normalWorld_26, y_33)
					   + 0.5)) / tmpvar_34);
					  mediump vec4 hdr_35;
					  hdr_35 = tmpvar_2;
					  mediump vec4 tmpvar_36;
					  tmpvar_36.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_36.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_37;
					  tmpvar_37 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_36.xyz, tmpvar_36.w);
					  mediump vec4 tmpvar_38;
					  tmpvar_38 = tmpvar_37;
					  tmpvar_27 = ((hdr_35.x * (
					    (hdr_35.w * (tmpvar_38.w - 1.0))
					   + 1.0)) * tmpvar_38.xyz);
					  lowp vec3 tmpvar_39;
					  mediump vec4 c_40;
					  highp vec3 tmpvar_41;
					  tmpvar_41 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_42;
					  mediump vec3 albedo_43;
					  albedo_43 = tmpvar_10;
					  mediump vec3 tmpvar_44;
					  tmpvar_44 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_43, vec3(_Metallic));
					  mediump float tmpvar_45;
					  tmpvar_45 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_42 = (albedo_43 * tmpvar_45);
					  tmpvar_39 = tmpvar_42;
					  mediump vec3 diffColor_46;
					  diffColor_46 = tmpvar_39;
					  mediump float alpha_47;
					  alpha_47 = tmpvar_12;
					  tmpvar_39 = diffColor_46;
					  mediump vec3 diffColor_48;
					  diffColor_48 = tmpvar_39;
					  mediump vec3 color_49;
					  mediump float surfaceReduction_50;
					  highp float specularTerm_51;
					  highp float a2_52;
					  mediump float roughness_53;
					  mediump float perceptualRoughness_54;
					  highp vec3 tmpvar_55;
					  highp vec3 inVec_56;
					  inVec_56 = (tmpvar_4 + worldViewDir_6);
					  tmpvar_55 = (inVec_56 * inversesqrt(max (0.001, 
					    dot (inVec_56, inVec_56)
					  )));
					  mediump float tmpvar_57;
					  highp float tmpvar_58;
					  tmpvar_58 = clamp (dot (tmpvar_41, tmpvar_4), 0.0, 1.0);
					  tmpvar_57 = tmpvar_58;
					  highp float tmpvar_59;
					  tmpvar_59 = clamp (dot (tmpvar_41, tmpvar_55), 0.0, 1.0);
					  mediump float tmpvar_60;
					  highp float tmpvar_61;
					  tmpvar_61 = clamp (dot (tmpvar_41, worldViewDir_6), 0.0, 1.0);
					  tmpvar_60 = tmpvar_61;
					  highp float tmpvar_62;
					  highp float smoothness_63;
					  smoothness_63 = _Glossiness;
					  tmpvar_62 = (1.0 - smoothness_63);
					  perceptualRoughness_54 = tmpvar_62;
					  highp float tmpvar_64;
					  highp float perceptualRoughness_65;
					  perceptualRoughness_65 = perceptualRoughness_54;
					  tmpvar_64 = (perceptualRoughness_65 * perceptualRoughness_65);
					  roughness_53 = tmpvar_64;
					  mediump float tmpvar_66;
					  tmpvar_66 = (roughness_53 * roughness_53);
					  a2_52 = tmpvar_66;
					  specularTerm_51 = ((roughness_53 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_55), 0.0, 1.0)) * (1.5 + roughness_53))
					   * 
					    (((tmpvar_59 * tmpvar_59) * (a2_52 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (specularTerm_51, 0.0, 100.0);
					  specularTerm_51 = tmpvar_67;
					  surfaceReduction_50 = (1.0 - ((roughness_53 * perceptualRoughness_54) * 0.28));
					  mediump float x_68;
					  x_68 = (1.0 - tmpvar_60);
					  mediump vec3 tmpvar_69;
					  tmpvar_69 = mix (tmpvar_44, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_45)
					  ), 0.0, 1.0)), vec3(((x_68 * x_68) * (x_68 * x_68))));
					  highp vec3 tmpvar_70;
					  tmpvar_70 = (((
					    ((diffColor_48 + (tmpvar_67 * tmpvar_44)) * tmpvar_3)
					   * tmpvar_57) + (tmpvar_29 * diffColor_48)) + ((surfaceReduction_50 * tmpvar_27) * tmpvar_69));
					  color_49 = tmpvar_70;
					  mediump vec4 tmpvar_71;
					  tmpvar_71.w = 1.0;
					  tmpvar_71.xyz = color_49;
					  c_40.xyz = tmpvar_71.xyz;
					  c_40.w = alpha_47;
					  c_5 = c_40;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
					  tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = tmpvar_2;
					  xlv_TEXCOORD6 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  lowp vec4 c_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 emissionSample_13;
					  highp vec4 diffuseSample_14;
					  highp vec4 nightSample_15;
					  highp vec4 daySample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_16 = tmpvar_17;
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_15 = tmpvar_18;
					  diffuseSample_14 = (mix (nightSample_15, daySample_16, vec4(_DayWeight)) * _Color);
					  diffuseSample_14.xyz = (diffuseSample_14.xyz * tmpvar_8.xyz);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_13 = tmpvar_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((emissionSample_13.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_10 = diffuseSample_14.xyz;
					  tmpvar_11 = tmpvar_20;
					  tmpvar_12 = diffuseSample_14.w;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_7;
					  tmpvar_1 = worldViewDir_6;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_21;
					  Normal_21 = xlv_TEXCOORD1;
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  highp float smoothness_24;
					  smoothness_24 = _Glossiness;
					  tmpvar_23 = (1.0 - smoothness_24);
					  tmpvar_22 = tmpvar_23;
					  mediump vec3 I_25;
					  I_25 = -(tmpvar_1);
					  mediump vec3 normalWorld_26;
					  normalWorld_26 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_27;
					  mediump vec4 realtimeDirTex_28;
					  mediump vec3 tmpvar_29;
					  lowp vec4 tmpvar_30;
					  tmpvar_30 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
					  lowp vec4 tmpvar_31;
					  tmpvar_31 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
					  realtimeDirTex_28 = tmpvar_31;
					  lowp vec4 dirTex_32;
					  dirTex_32 = realtimeDirTex_28;
					  lowp vec3 y_33;
					  y_33 = (dirTex_32.xyz - 0.5);
					  lowp float tmpvar_34;
					  tmpvar_34 = max (0.0001, dirTex_32.w);
					  tmpvar_29 = ((pow (
					    ((unity_DynamicLightmap_HDR.x * tmpvar_30.w) * tmpvar_30.xyz)
					  , unity_DynamicLightmap_HDR.yyy) * (
					    dot (normalWorld_26, y_33)
					   + 0.5)) / tmpvar_34);
					  mediump vec4 hdr_35;
					  hdr_35 = tmpvar_2;
					  mediump vec4 tmpvar_36;
					  tmpvar_36.xyz = (I_25 - (2.0 * (
					    dot (Normal_21, I_25)
					   * Normal_21)));
					  tmpvar_36.w = ((tmpvar_22 * (1.7 - 
					    (0.7 * tmpvar_22)
					  )) * 6.0);
					  lowp vec4 tmpvar_37;
					  tmpvar_37 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_36.xyz, tmpvar_36.w);
					  mediump vec4 tmpvar_38;
					  tmpvar_38 = tmpvar_37;
					  tmpvar_27 = ((hdr_35.x * (
					    (hdr_35.w * (tmpvar_38.w - 1.0))
					   + 1.0)) * tmpvar_38.xyz);
					  lowp vec3 tmpvar_39;
					  mediump vec4 c_40;
					  highp vec3 tmpvar_41;
					  tmpvar_41 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_42;
					  mediump vec3 albedo_43;
					  albedo_43 = tmpvar_10;
					  mediump vec3 tmpvar_44;
					  tmpvar_44 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_43, vec3(_Metallic));
					  mediump float tmpvar_45;
					  tmpvar_45 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_42 = (albedo_43 * tmpvar_45);
					  tmpvar_39 = tmpvar_42;
					  mediump vec3 diffColor_46;
					  diffColor_46 = tmpvar_39;
					  mediump float alpha_47;
					  alpha_47 = tmpvar_12;
					  tmpvar_39 = diffColor_46;
					  mediump vec3 diffColor_48;
					  diffColor_48 = tmpvar_39;
					  mediump vec3 color_49;
					  mediump float surfaceReduction_50;
					  highp float specularTerm_51;
					  highp float a2_52;
					  mediump float roughness_53;
					  mediump float perceptualRoughness_54;
					  highp vec3 tmpvar_55;
					  highp vec3 inVec_56;
					  inVec_56 = (tmpvar_4 + worldViewDir_6);
					  tmpvar_55 = (inVec_56 * inversesqrt(max (0.001, 
					    dot (inVec_56, inVec_56)
					  )));
					  mediump float tmpvar_57;
					  highp float tmpvar_58;
					  tmpvar_58 = clamp (dot (tmpvar_41, tmpvar_4), 0.0, 1.0);
					  tmpvar_57 = tmpvar_58;
					  highp float tmpvar_59;
					  tmpvar_59 = clamp (dot (tmpvar_41, tmpvar_55), 0.0, 1.0);
					  mediump float tmpvar_60;
					  highp float tmpvar_61;
					  tmpvar_61 = clamp (dot (tmpvar_41, worldViewDir_6), 0.0, 1.0);
					  tmpvar_60 = tmpvar_61;
					  highp float tmpvar_62;
					  highp float smoothness_63;
					  smoothness_63 = _Glossiness;
					  tmpvar_62 = (1.0 - smoothness_63);
					  perceptualRoughness_54 = tmpvar_62;
					  highp float tmpvar_64;
					  highp float perceptualRoughness_65;
					  perceptualRoughness_65 = perceptualRoughness_54;
					  tmpvar_64 = (perceptualRoughness_65 * perceptualRoughness_65);
					  roughness_53 = tmpvar_64;
					  mediump float tmpvar_66;
					  tmpvar_66 = (roughness_53 * roughness_53);
					  a2_52 = tmpvar_66;
					  specularTerm_51 = ((roughness_53 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_55), 0.0, 1.0)) * (1.5 + roughness_53))
					   * 
					    (((tmpvar_59 * tmpvar_59) * (a2_52 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (specularTerm_51, 0.0, 100.0);
					  specularTerm_51 = tmpvar_67;
					  surfaceReduction_50 = (1.0 - ((roughness_53 * perceptualRoughness_54) * 0.28));
					  mediump float x_68;
					  x_68 = (1.0 - tmpvar_60);
					  mediump vec3 tmpvar_69;
					  tmpvar_69 = mix (tmpvar_44, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_45)
					  ), 0.0, 1.0)), vec3(((x_68 * x_68) * (x_68 * x_68))));
					  highp vec3 tmpvar_70;
					  tmpvar_70 = (((
					    ((diffColor_48 + (tmpvar_67 * tmpvar_44)) * tmpvar_3)
					   * tmpvar_57) + (tmpvar_29 * diffColor_48)) + ((surfaceReduction_50 * tmpvar_27) * tmpvar_69));
					  color_49 = tmpvar_70;
					  mediump vec4 tmpvar_71;
					  tmpvar_71.w = 1.0;
					  tmpvar_71.xyz = color_49;
					  c_40.xyz = tmpvar_71.xyz;
					  c_40.w = alpha_47;
					  c_5 = c_40;
					  c_5.xyz = (c_5.xyz + tmpvar_11);
					  c_5.w = 1.0;
					  gl_FragData[0] = c_5;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					vec3 u_xlat4;
					lowp vec3 u_xlat10_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat13;
					mediump vec3 u_xlat16_13;
					lowp vec3 u_xlat10_13;
					float u_xlat30;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					float u_xlat33;
					mediump float u_xlat16_36;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat16_31 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_31 = u_xlat16_31 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
					    u_xlat16_1.x = dot((-u_xlat3.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_1.xxx) + (-u_xlat3.xyz);
					    u_xlat4.z = (-_Glossiness) + 1.0;
					    u_xlat16_31 = (-u_xlat4.z) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat16_31 * u_xlat4.z;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_31);
					    u_xlat16_2.x = u_xlat10_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_1.xyz * u_xlat16_2.xxx;
					    u_xlat30 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat5.xyz = vec3(u_xlat30) * vs_TEXCOORD1.xyz;
					    u_xlat30 = dot(u_xlat3.xyz, u_xlat5.xyz);
					    u_xlat33 = u_xlat30;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat3.xyz = u_xlat5.xyz * (-vec3(u_xlat30)) + u_xlat3.xyz;
					    u_xlat30 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = vec3(u_xlat30) * _LightColor0.xyz;
					    u_xlat30 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat4.x = u_xlat30 * u_xlat30;
					    u_xlat30 = texture(unity_NHxRoughness, u_xlat4.xz).x;
					    u_xlat30 = u_xlat30 * 16.0;
					    u_xlat16_32 = (-u_xlat33) + 1.0;
					    u_xlat16_3 = u_xlat16_32 * u_xlat16_32;
					    u_xlat16_3 = u_xlat16_32 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_32 * u_xlat16_3;
					    u_xlat10_13.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_13.xyz = u_xlat10_13.xyz + (-u_xlat10_4.xyz);
					    u_xlat13.xyz = vec3(_DayWeight) * u_xlat16_13.xyz + u_xlat10_4.xyz;
					    u_xlat13.xyz = u_xlat13.xyz * _Color.xyz;
					    u_xlat16_7.xyz = u_xlat13.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat13.xyz = u_xlat13.xyz * vs_COLOR0.xyz;
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_36 = (-u_xlat16_32) + _Glossiness;
					    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat13.xyz;
					    u_xlat16_32 = u_xlat16_36 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
					#else
					    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_32);
					    u_xlat16_9.xyz = vec3(u_xlat16_3) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = vec3(u_xlat30) * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_2.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat30 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					vec3 u_xlat4;
					mediump float u_xlat16_4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_17;
					float u_xlat21;
					mediump float u_xlat16_22;
					mediump float u_xlat16_24;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat16_22 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_22 = u_xlat16_22 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
					    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_3.xyz + (-u_xlat10_4.xyz);
					    u_xlat3.xyz = vec3(_DayWeight) * u_xlat16_3.xyz + u_xlat10_4.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat16_1.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat16_22) * u_xlat4.xyz;
					    u_xlat16_22 = (-u_xlat16_22) + _Glossiness;
					    u_xlat16_22 = u_xlat16_22 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
					#else
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + vec3(u_xlat16_22);
					    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat21 = max(u_xlat21, 0.319999993);
					    u_xlat16_24 = (-_Glossiness) + 1.0;
					    u_xlat16_4 = u_xlat16_24 * u_xlat16_24 + 1.5;
					    u_xlat21 = u_xlat21 * u_xlat16_4;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = inversesqrt(u_xlat4.x);
					    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat3.x = dot(u_xlat4.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16_10 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_17 = u_xlat16_10 * u_xlat16_10 + -1.0;
					    u_xlat3.x = u_xlat3.x * u_xlat16_17 + 1.00001001;
					    u_xlat21 = u_xlat21 * u_xlat3.x;
					    u_xlat21 = u_xlat16_10 / u_xlat21;
					    u_xlat16_22 = u_xlat16_24 * u_xlat16_10;
					    u_xlat16_22 = (-u_xlat16_22) * 0.280000001 + 1.0;
					    u_xlat21 = u_xlat21 + -9.99999975e-05;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = min(u_xlat21, 100.0);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _LightColor0.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_1.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_6.xyz;
					    u_xlat16_2.x = (-u_xlat16_24) * 0.699999988 + 1.70000005;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_24;
					    u_xlat16_2.x = u_xlat16_2.x * 6.0;
					    u_xlat16_9.x = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_9.x = u_xlat16_9.x + u_xlat16_9.x;
					    u_xlat16_9.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_9.xxx) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat10_0.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
					    u_xlat16_2.xyz = vec3(u_xlat16_22) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat3.xyz;
					    u_xlat10_3.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.xyz = u_xlat10_3.xyz * _EmissionColor.xyz;
					    u_xlat21 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					vec3 u_xlat4;
					mediump float u_xlat16_4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_17;
					float u_xlat21;
					mediump float u_xlat16_22;
					mediump float u_xlat16_24;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat16_22 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_22 = u_xlat16_22 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
					    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_3.xyz + (-u_xlat10_4.xyz);
					    u_xlat3.xyz = vec3(_DayWeight) * u_xlat16_3.xyz + u_xlat10_4.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat16_1.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat16_22) * u_xlat4.xyz;
					    u_xlat16_22 = (-u_xlat16_22) + _Glossiness;
					    u_xlat16_22 = u_xlat16_22 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
					#else
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + vec3(u_xlat16_22);
					    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat21 = max(u_xlat21, 0.319999993);
					    u_xlat16_24 = (-_Glossiness) + 1.0;
					    u_xlat16_4 = u_xlat16_24 * u_xlat16_24 + 1.5;
					    u_xlat21 = u_xlat21 * u_xlat16_4;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = inversesqrt(u_xlat4.x);
					    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat3.x = dot(u_xlat4.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16_10 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_17 = u_xlat16_10 * u_xlat16_10 + -1.0;
					    u_xlat3.x = u_xlat3.x * u_xlat16_17 + 1.00001001;
					    u_xlat21 = u_xlat21 * u_xlat3.x;
					    u_xlat21 = u_xlat16_10 / u_xlat21;
					    u_xlat16_22 = u_xlat16_24 * u_xlat16_10;
					    u_xlat16_22 = (-u_xlat16_22) * 0.280000001 + 1.0;
					    u_xlat21 = u_xlat21 + -9.99999975e-05;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = min(u_xlat21, 100.0);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _LightColor0.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_1.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_6.xyz;
					    u_xlat16_2.x = (-u_xlat16_24) * 0.699999988 + 1.70000005;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_24;
					    u_xlat16_2.x = u_xlat16_2.x * 6.0;
					    u_xlat16_9.x = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_9.x = u_xlat16_9.x + u_xlat16_9.x;
					    u_xlat16_9.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_9.xxx) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat10_0.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
					    u_xlat16_2.xyz = vec3(u_xlat16_22) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat3.xyz;
					    u_xlat10_3.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.xyz = u_xlat10_3.xyz * _EmissionColor.xyz;
					    u_xlat21 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					  xlv_TEXCOORD6 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp float atten_7;
					  lowp vec3 lightDir_8;
					  highp vec4 tmpvar_9;
					  mediump vec3 tmpvar_10;
					  tmpvar_10 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_11 = normalize(tmpvar_12);
					  tmpvar_9 = xlv_COLOR0;
					  lowp vec3 tmpvar_13;
					  mediump vec3 tmpvar_14;
					  lowp float tmpvar_15;
					  highp vec4 emissionSample_16;
					  highp vec4 diffuseSample_17;
					  highp vec4 nightSample_18;
					  highp vec4 daySample_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_19 = tmpvar_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_18 = tmpvar_21;
					  diffuseSample_17 = (mix (nightSample_18, daySample_19, vec4(_DayWeight)) * _Color);
					  diffuseSample_17.xyz = (diffuseSample_17.xyz * tmpvar_9.xyz);
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_16 = tmpvar_22;
					  highp vec3 tmpvar_23;
					  tmpvar_23 = ((emissionSample_16.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_13 = diffuseSample_17.xyz;
					  tmpvar_14 = tmpvar_23;
					  tmpvar_15 = diffuseSample_17.w;
					  mediump float realtimeShadowAttenuation_24;
					  highp vec4 v_25;
					  v_25.x = unity_MatrixV[0].z;
					  v_25.y = unity_MatrixV[1].z;
					  v_25.z = unity_MatrixV[2].z;
					  v_25.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_27;
					  highp float tmpvar_28;
					  tmpvar_28 = clamp (((
					    mix (dot (tmpvar_12, v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_27 = tmpvar_28;
					  lowp float tmpvar_29;
					  highp float lightShadowDataX_30;
					  mediump float tmpvar_31;
					  tmpvar_31 = _LightShadowData.x;
					  lightShadowDataX_30 = tmpvar_31;
					  highp float tmpvar_32;
					  tmpvar_32 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_30);
					  tmpvar_29 = tmpvar_32;
					  realtimeShadowAttenuation_24 = tmpvar_29;
					  mediump float tmpvar_33;
					  tmpvar_33 = mix (realtimeShadowAttenuation_24, 1.0, tmpvar_27);
					  atten_7 = tmpvar_33;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_8;
					  tmpvar_1 = tmpvar_11;
					  tmpvar_2 = atten_7;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_34;
					  Normal_34 = xlv_TEXCOORD1;
					  mediump float tmpvar_35;
					  highp float tmpvar_36;
					  highp float smoothness_37;
					  smoothness_37 = _Glossiness;
					  tmpvar_36 = (1.0 - smoothness_37);
					  tmpvar_35 = tmpvar_36;
					  mediump vec3 I_38;
					  I_38 = -(tmpvar_1);
					  mediump vec3 tmpvar_39;
					  tmpvar_39 = (tmpvar_4 * tmpvar_2);
					  mediump vec4 hdr_40;
					  hdr_40 = tmpvar_3;
					  mediump vec4 tmpvar_41;
					  tmpvar_41.xyz = (I_38 - (2.0 * (
					    dot (Normal_34, I_38)
					   * Normal_34)));
					  tmpvar_41.w = ((tmpvar_35 * (1.7 - 
					    (0.7 * tmpvar_35)
					  )) * 6.0);
					  lowp vec4 tmpvar_42;
					  tmpvar_42 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_41.xyz, tmpvar_41.w);
					  mediump vec4 tmpvar_43;
					  tmpvar_43 = tmpvar_42;
					  tmpvar_4 = tmpvar_39;
					  lowp vec3 tmpvar_44;
					  mediump vec4 c_45;
					  highp vec3 tmpvar_46;
					  tmpvar_46 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_47;
					  mediump vec3 albedo_48;
					  albedo_48 = tmpvar_13;
					  mediump vec3 tmpvar_49;
					  tmpvar_49 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_48, vec3(_Metallic));
					  mediump float tmpvar_50;
					  tmpvar_50 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_47 = (albedo_48 * tmpvar_50);
					  tmpvar_44 = tmpvar_47;
					  mediump vec3 diffColor_51;
					  diffColor_51 = tmpvar_44;
					  mediump float alpha_52;
					  alpha_52 = tmpvar_15;
					  tmpvar_44 = diffColor_51;
					  mediump vec3 diffColor_53;
					  diffColor_53 = tmpvar_44;
					  mediump vec3 color_54;
					  mediump vec2 rlPow4AndFresnelTerm_55;
					  mediump float tmpvar_56;
					  highp float tmpvar_57;
					  tmpvar_57 = clamp (dot (tmpvar_46, tmpvar_5), 0.0, 1.0);
					  tmpvar_56 = tmpvar_57;
					  mediump float tmpvar_58;
					  highp float tmpvar_59;
					  tmpvar_59 = clamp (dot (tmpvar_46, tmpvar_11), 0.0, 1.0);
					  tmpvar_58 = tmpvar_59;
					  highp vec2 tmpvar_60;
					  tmpvar_60.x = dot ((tmpvar_11 - (2.0 * 
					    (dot (tmpvar_46, tmpvar_11) * tmpvar_46)
					  )), tmpvar_5);
					  tmpvar_60.y = (1.0 - tmpvar_58);
					  highp vec2 tmpvar_61;
					  tmpvar_61 = ((tmpvar_60 * tmpvar_60) * (tmpvar_60 * tmpvar_60));
					  rlPow4AndFresnelTerm_55 = tmpvar_61;
					  mediump float tmpvar_62;
					  tmpvar_62 = rlPow4AndFresnelTerm_55.x;
					  mediump float specular_63;
					  highp float smoothness_64;
					  smoothness_64 = _Glossiness;
					  highp vec2 tmpvar_65;
					  tmpvar_65.x = tmpvar_62;
					  tmpvar_65.y = (1.0 - smoothness_64);
					  highp float tmpvar_66;
					  tmpvar_66 = (texture2D (unity_NHxRoughness, tmpvar_65).x * 16.0);
					  specular_63 = tmpvar_66;
					  color_54 = ((diffColor_53 + (specular_63 * tmpvar_49)) * (tmpvar_39 * tmpvar_56));
					  color_54 = (color_54 + ((
					    (hdr_40.x * ((hdr_40.w * (tmpvar_43.w - 1.0)) + 1.0))
					   * tmpvar_43.xyz) * mix (tmpvar_49, vec3(
					    clamp ((_Glossiness + (1.0 - tmpvar_50)), 0.0, 1.0)
					  ), rlPow4AndFresnelTerm_55.yyy)));
					  mediump vec4 tmpvar_67;
					  tmpvar_67.w = 1.0;
					  tmpvar_67.xyz = color_54;
					  c_45.xyz = tmpvar_67.xyz;
					  c_45.w = alpha_52;
					  c_6 = c_45;
					  c_6.xyz = (c_6.xyz + tmpvar_14);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					  xlv_TEXCOORD6 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp float atten_7;
					  lowp vec3 lightDir_8;
					  highp vec4 tmpvar_9;
					  mediump vec3 tmpvar_10;
					  tmpvar_10 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_11 = normalize(tmpvar_12);
					  tmpvar_9 = xlv_COLOR0;
					  lowp vec3 tmpvar_13;
					  mediump vec3 tmpvar_14;
					  lowp float tmpvar_15;
					  highp vec4 emissionSample_16;
					  highp vec4 diffuseSample_17;
					  highp vec4 nightSample_18;
					  highp vec4 daySample_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_19 = tmpvar_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_18 = tmpvar_21;
					  diffuseSample_17 = (mix (nightSample_18, daySample_19, vec4(_DayWeight)) * _Color);
					  diffuseSample_17.xyz = (diffuseSample_17.xyz * tmpvar_9.xyz);
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_16 = tmpvar_22;
					  highp vec3 tmpvar_23;
					  tmpvar_23 = ((emissionSample_16.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_13 = diffuseSample_17.xyz;
					  tmpvar_14 = tmpvar_23;
					  tmpvar_15 = diffuseSample_17.w;
					  mediump float realtimeShadowAttenuation_24;
					  highp vec4 v_25;
					  v_25.x = unity_MatrixV[0].z;
					  v_25.y = unity_MatrixV[1].z;
					  v_25.z = unity_MatrixV[2].z;
					  v_25.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_27;
					  highp float tmpvar_28;
					  tmpvar_28 = clamp (((
					    mix (dot (tmpvar_12, v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_27 = tmpvar_28;
					  lowp float tmpvar_29;
					  highp float lightShadowDataX_30;
					  mediump float tmpvar_31;
					  tmpvar_31 = _LightShadowData.x;
					  lightShadowDataX_30 = tmpvar_31;
					  highp float tmpvar_32;
					  tmpvar_32 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_30);
					  tmpvar_29 = tmpvar_32;
					  realtimeShadowAttenuation_24 = tmpvar_29;
					  mediump float tmpvar_33;
					  tmpvar_33 = mix (realtimeShadowAttenuation_24, 1.0, tmpvar_27);
					  atten_7 = tmpvar_33;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_8;
					  tmpvar_1 = tmpvar_11;
					  tmpvar_2 = atten_7;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_34;
					  Normal_34 = xlv_TEXCOORD1;
					  mediump float tmpvar_35;
					  highp float tmpvar_36;
					  highp float smoothness_37;
					  smoothness_37 = _Glossiness;
					  tmpvar_36 = (1.0 - smoothness_37);
					  tmpvar_35 = tmpvar_36;
					  mediump vec3 I_38;
					  I_38 = -(tmpvar_1);
					  mediump vec3 tmpvar_39;
					  mediump vec3 tmpvar_40;
					  tmpvar_40 = (tmpvar_4 * tmpvar_2);
					  mediump vec4 hdr_41;
					  hdr_41 = tmpvar_3;
					  mediump vec4 tmpvar_42;
					  tmpvar_42.xyz = (I_38 - (2.0 * (
					    dot (Normal_34, I_38)
					   * Normal_34)));
					  tmpvar_42.w = ((tmpvar_35 * (1.7 - 
					    (0.7 * tmpvar_35)
					  )) * 6.0);
					  lowp vec4 tmpvar_43;
					  tmpvar_43 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42.xyz, tmpvar_42.w);
					  mediump vec4 tmpvar_44;
					  tmpvar_44 = tmpvar_43;
					  tmpvar_39 = ((hdr_41.x * (
					    (hdr_41.w * (tmpvar_44.w - 1.0))
					   + 1.0)) * tmpvar_44.xyz);
					  tmpvar_4 = tmpvar_40;
					  lowp vec3 tmpvar_45;
					  mediump vec4 c_46;
					  highp vec3 tmpvar_47;
					  tmpvar_47 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_48;
					  mediump vec3 albedo_49;
					  albedo_49 = tmpvar_13;
					  mediump vec3 tmpvar_50;
					  tmpvar_50 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_49, vec3(_Metallic));
					  mediump float tmpvar_51;
					  tmpvar_51 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_48 = (albedo_49 * tmpvar_51);
					  tmpvar_45 = tmpvar_48;
					  mediump vec3 diffColor_52;
					  diffColor_52 = tmpvar_45;
					  mediump float alpha_53;
					  alpha_53 = tmpvar_15;
					  tmpvar_45 = diffColor_52;
					  mediump vec3 diffColor_54;
					  diffColor_54 = tmpvar_45;
					  mediump vec3 color_55;
					  mediump float surfaceReduction_56;
					  highp float specularTerm_57;
					  highp float a2_58;
					  mediump float roughness_59;
					  mediump float perceptualRoughness_60;
					  highp vec3 tmpvar_61;
					  highp vec3 inVec_62;
					  inVec_62 = (tmpvar_5 + tmpvar_11);
					  tmpvar_61 = (inVec_62 * inversesqrt(max (0.001, 
					    dot (inVec_62, inVec_62)
					  )));
					  mediump float tmpvar_63;
					  highp float tmpvar_64;
					  tmpvar_64 = clamp (dot (tmpvar_47, tmpvar_5), 0.0, 1.0);
					  tmpvar_63 = tmpvar_64;
					  highp float tmpvar_65;
					  tmpvar_65 = clamp (dot (tmpvar_47, tmpvar_61), 0.0, 1.0);
					  mediump float tmpvar_66;
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (dot (tmpvar_47, tmpvar_11), 0.0, 1.0);
					  tmpvar_66 = tmpvar_67;
					  highp float tmpvar_68;
					  highp float smoothness_69;
					  smoothness_69 = _Glossiness;
					  tmpvar_68 = (1.0 - smoothness_69);
					  perceptualRoughness_60 = tmpvar_68;
					  highp float tmpvar_70;
					  highp float perceptualRoughness_71;
					  perceptualRoughness_71 = perceptualRoughness_60;
					  tmpvar_70 = (perceptualRoughness_71 * perceptualRoughness_71);
					  roughness_59 = tmpvar_70;
					  mediump float tmpvar_72;
					  tmpvar_72 = (roughness_59 * roughness_59);
					  a2_58 = tmpvar_72;
					  specularTerm_57 = ((roughness_59 / (
					    (max (0.32, clamp (dot (tmpvar_5, tmpvar_61), 0.0, 1.0)) * (1.5 + roughness_59))
					   * 
					    (((tmpvar_65 * tmpvar_65) * (a2_58 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_73;
					  tmpvar_73 = clamp (specularTerm_57, 0.0, 100.0);
					  specularTerm_57 = tmpvar_73;
					  surfaceReduction_56 = (1.0 - ((roughness_59 * perceptualRoughness_60) * 0.28));
					  mediump float x_74;
					  x_74 = (1.0 - tmpvar_66);
					  mediump vec3 tmpvar_75;
					  tmpvar_75 = mix (tmpvar_50, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_51)
					  ), 0.0, 1.0)), vec3(((x_74 * x_74) * (x_74 * x_74))));
					  highp vec3 tmpvar_76;
					  tmpvar_76 = (((
					    (diffColor_54 + (tmpvar_73 * tmpvar_50))
					   * tmpvar_40) * tmpvar_63) + ((surfaceReduction_56 * tmpvar_39) * tmpvar_75));
					  color_55 = tmpvar_76;
					  mediump vec4 tmpvar_77;
					  tmpvar_77.w = 1.0;
					  tmpvar_77.xyz = color_55;
					  c_46.xyz = tmpvar_77.xyz;
					  c_46.w = alpha_53;
					  c_6 = c_46;
					  c_6.xyz = (c_6.xyz + tmpvar_14);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					  xlv_TEXCOORD6 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp float atten_7;
					  lowp vec3 lightDir_8;
					  highp vec4 tmpvar_9;
					  mediump vec3 tmpvar_10;
					  tmpvar_10 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_11 = normalize(tmpvar_12);
					  tmpvar_9 = xlv_COLOR0;
					  lowp vec3 tmpvar_13;
					  mediump vec3 tmpvar_14;
					  lowp float tmpvar_15;
					  highp vec4 emissionSample_16;
					  highp vec4 diffuseSample_17;
					  highp vec4 nightSample_18;
					  highp vec4 daySample_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_19 = tmpvar_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_18 = tmpvar_21;
					  diffuseSample_17 = (mix (nightSample_18, daySample_19, vec4(_DayWeight)) * _Color);
					  diffuseSample_17.xyz = (diffuseSample_17.xyz * tmpvar_9.xyz);
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_16 = tmpvar_22;
					  highp vec3 tmpvar_23;
					  tmpvar_23 = ((emissionSample_16.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_13 = diffuseSample_17.xyz;
					  tmpvar_14 = tmpvar_23;
					  tmpvar_15 = diffuseSample_17.w;
					  mediump float realtimeShadowAttenuation_24;
					  highp vec4 v_25;
					  v_25.x = unity_MatrixV[0].z;
					  v_25.y = unity_MatrixV[1].z;
					  v_25.z = unity_MatrixV[2].z;
					  v_25.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_27;
					  highp float tmpvar_28;
					  tmpvar_28 = clamp (((
					    mix (dot (tmpvar_12, v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_27 = tmpvar_28;
					  lowp float tmpvar_29;
					  highp float lightShadowDataX_30;
					  mediump float tmpvar_31;
					  tmpvar_31 = _LightShadowData.x;
					  lightShadowDataX_30 = tmpvar_31;
					  highp float tmpvar_32;
					  tmpvar_32 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_30);
					  tmpvar_29 = tmpvar_32;
					  realtimeShadowAttenuation_24 = tmpvar_29;
					  mediump float tmpvar_33;
					  tmpvar_33 = mix (realtimeShadowAttenuation_24, 1.0, tmpvar_27);
					  atten_7 = tmpvar_33;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_8;
					  tmpvar_1 = tmpvar_11;
					  tmpvar_2 = atten_7;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_34;
					  Normal_34 = xlv_TEXCOORD1;
					  mediump float tmpvar_35;
					  highp float tmpvar_36;
					  highp float smoothness_37;
					  smoothness_37 = _Glossiness;
					  tmpvar_36 = (1.0 - smoothness_37);
					  tmpvar_35 = tmpvar_36;
					  mediump vec3 I_38;
					  I_38 = -(tmpvar_1);
					  mediump vec3 tmpvar_39;
					  mediump vec3 tmpvar_40;
					  tmpvar_40 = (tmpvar_4 * tmpvar_2);
					  mediump vec4 hdr_41;
					  hdr_41 = tmpvar_3;
					  mediump vec4 tmpvar_42;
					  tmpvar_42.xyz = (I_38 - (2.0 * (
					    dot (Normal_34, I_38)
					   * Normal_34)));
					  tmpvar_42.w = ((tmpvar_35 * (1.7 - 
					    (0.7 * tmpvar_35)
					  )) * 6.0);
					  lowp vec4 tmpvar_43;
					  tmpvar_43 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42.xyz, tmpvar_42.w);
					  mediump vec4 tmpvar_44;
					  tmpvar_44 = tmpvar_43;
					  tmpvar_39 = ((hdr_41.x * (
					    (hdr_41.w * (tmpvar_44.w - 1.0))
					   + 1.0)) * tmpvar_44.xyz);
					  tmpvar_4 = tmpvar_40;
					  lowp vec3 tmpvar_45;
					  mediump vec4 c_46;
					  highp vec3 tmpvar_47;
					  tmpvar_47 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_48;
					  mediump vec3 albedo_49;
					  albedo_49 = tmpvar_13;
					  mediump vec3 tmpvar_50;
					  tmpvar_50 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_49, vec3(_Metallic));
					  mediump float tmpvar_51;
					  tmpvar_51 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_48 = (albedo_49 * tmpvar_51);
					  tmpvar_45 = tmpvar_48;
					  mediump vec3 diffColor_52;
					  diffColor_52 = tmpvar_45;
					  mediump float alpha_53;
					  alpha_53 = tmpvar_15;
					  tmpvar_45 = diffColor_52;
					  mediump vec3 diffColor_54;
					  diffColor_54 = tmpvar_45;
					  mediump vec3 color_55;
					  mediump float surfaceReduction_56;
					  highp float specularTerm_57;
					  highp float a2_58;
					  mediump float roughness_59;
					  mediump float perceptualRoughness_60;
					  highp vec3 tmpvar_61;
					  highp vec3 inVec_62;
					  inVec_62 = (tmpvar_5 + tmpvar_11);
					  tmpvar_61 = (inVec_62 * inversesqrt(max (0.001, 
					    dot (inVec_62, inVec_62)
					  )));
					  mediump float tmpvar_63;
					  highp float tmpvar_64;
					  tmpvar_64 = clamp (dot (tmpvar_47, tmpvar_5), 0.0, 1.0);
					  tmpvar_63 = tmpvar_64;
					  highp float tmpvar_65;
					  tmpvar_65 = clamp (dot (tmpvar_47, tmpvar_61), 0.0, 1.0);
					  mediump float tmpvar_66;
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (dot (tmpvar_47, tmpvar_11), 0.0, 1.0);
					  tmpvar_66 = tmpvar_67;
					  highp float tmpvar_68;
					  highp float smoothness_69;
					  smoothness_69 = _Glossiness;
					  tmpvar_68 = (1.0 - smoothness_69);
					  perceptualRoughness_60 = tmpvar_68;
					  highp float tmpvar_70;
					  highp float perceptualRoughness_71;
					  perceptualRoughness_71 = perceptualRoughness_60;
					  tmpvar_70 = (perceptualRoughness_71 * perceptualRoughness_71);
					  roughness_59 = tmpvar_70;
					  mediump float tmpvar_72;
					  tmpvar_72 = (roughness_59 * roughness_59);
					  a2_58 = tmpvar_72;
					  specularTerm_57 = ((roughness_59 / (
					    (max (0.32, clamp (dot (tmpvar_5, tmpvar_61), 0.0, 1.0)) * (1.5 + roughness_59))
					   * 
					    (((tmpvar_65 * tmpvar_65) * (a2_58 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_73;
					  tmpvar_73 = clamp (specularTerm_57, 0.0, 100.0);
					  specularTerm_57 = tmpvar_73;
					  surfaceReduction_56 = (1.0 - ((roughness_59 * perceptualRoughness_60) * 0.28));
					  mediump float x_74;
					  x_74 = (1.0 - tmpvar_66);
					  mediump vec3 tmpvar_75;
					  tmpvar_75 = mix (tmpvar_50, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_51)
					  ), 0.0, 1.0)), vec3(((x_74 * x_74) * (x_74 * x_74))));
					  highp vec3 tmpvar_76;
					  tmpvar_76 = (((
					    (diffColor_54 + (tmpvar_73 * tmpvar_50))
					   * tmpvar_40) * tmpvar_63) + ((surfaceReduction_56 * tmpvar_39) * tmpvar_75));
					  color_55 = tmpvar_76;
					  mediump vec4 tmpvar_77;
					  tmpvar_77.w = 1.0;
					  tmpvar_77.xyz = color_55;
					  c_46.xyz = tmpvar_77.xyz;
					  c_46.w = alpha_53;
					  c_6 = c_46;
					  c_6.xyz = (c_6.xyz + tmpvar_14);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					float u_xlat24;
					mediump float u_xlat16_25;
					float u_xlat26;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat10_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat10_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_9 = (-u_xlat16_1.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat8.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_9 + u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat16_25 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
					    u_xlat16_3.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_25)) + (-u_xlat0.xyz);
					    u_xlat4.z = (-_Glossiness) + 1.0;
					    u_xlat16_25 = (-u_xlat4.z) * 0.699999988 + 1.70000005;
					    u_xlat16_25 = u_xlat16_25 * u_xlat4.z;
					    u_xlat16_25 = u_xlat16_25 * 6.0;
					    u_xlat10_3 = textureLod(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_25);
					    u_xlat16_25 = u_xlat10_3.w + -1.0;
					    u_xlat16_25 = unity_SpecCube0_HDR.w * u_xlat16_25 + 1.0;
					    u_xlat16_25 = u_xlat16_25 * unity_SpecCube0_HDR.x;
					    u_xlat16_5.xyz = u_xlat10_3.xyz * vec3(u_xlat16_25);
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat26 = u_xlat24;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
					#else
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					#endif
					    u_xlat24 = u_xlat24 + u_xlat24;
					    u_xlat0.xyz = u_xlat2.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat4.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat4.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_25 = (-u_xlat26) + 1.0;
					    u_xlat16_8 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_8 = u_xlat16_25 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_25 * u_xlat16_8;
					    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_2.xyz + (-u_xlat10_4.xyz);
					    u_xlat2.xyz = vec3(_DayWeight) * u_xlat16_2.xyz + u_xlat10_4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_29 = (-u_xlat16_25) + _Glossiness;
					    u_xlat16_29 = u_xlat16_29 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
					#else
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_29);
					    u_xlat16_7.xyz = vec3(u_xlat16_8) * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_5.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp float u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_2;
					vec3 u_xlat3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_18;
					float u_xlat24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					float u_xlat27;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_9 = (-u_xlat16_1.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat8.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_9 + u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_3.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_2.xyz + (-u_xlat10_3.xyz);
					    u_xlat2.xyz = vec3(_DayWeight) * u_xlat16_2.xyz + u_xlat10_3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat16_4.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat8.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_26 = (-_Glossiness) + 1.0;
					    u_xlat16_27 = u_xlat16_26 * u_xlat16_26 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_27;
					    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat5.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat16_10 = u_xlat16_26 * u_xlat16_26;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_10 + -1.0;
					    u_xlat2.x = u_xlat2.x * u_xlat16_18 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat2.x;
					    u_xlat24 = u_xlat16_10 / u_xlat24;
					    u_xlat16_25 = u_xlat16_26 * u_xlat16_10;
					    u_xlat16_25 = (-u_xlat16_25) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat2.xyz = u_xlat16_4.xyz * vec3(u_xlat24);
					    u_xlat16_28 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat16_28) + u_xlat2.xyz;
					    u_xlat16_28 = (-u_xlat16_28) + _Glossiness;
					    u_xlat16_28 = u_xlat16_28 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
					#else
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + vec3(u_xlat16_28);
					    u_xlat2.xyz = u_xlat16_1.xyz * u_xlat2.xyz;
					    u_xlat16_1.x = (-u_xlat16_26) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_26;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat16_9 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
					    u_xlat16_7.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_9)) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat8.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
					#else
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = (-u_xlat0.x) + 1.0;
					    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
					    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
					    u_xlat16_4.xyz = vec3(u_xlat16_9) * u_xlat16_6.xyz + u_xlat16_4.xyz;
					    u_xlat10_3 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat10_3.w + -1.0;
					    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_3.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_25);
					    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat8.xxx + u_xlat16_1.xyz;
					    u_xlat10_2.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.xyz = u_xlat10_2.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp float u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_2;
					vec3 u_xlat3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_18;
					float u_xlat24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					float u_xlat27;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_9 = (-u_xlat16_1.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat8.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_9 + u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_3.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_2.xyz + (-u_xlat10_3.xyz);
					    u_xlat2.xyz = vec3(_DayWeight) * u_xlat16_2.xyz + u_xlat10_3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat16_4.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat8.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_26 = (-_Glossiness) + 1.0;
					    u_xlat16_27 = u_xlat16_26 * u_xlat16_26 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_27;
					    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat5.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat16_10 = u_xlat16_26 * u_xlat16_26;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_10 + -1.0;
					    u_xlat2.x = u_xlat2.x * u_xlat16_18 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat2.x;
					    u_xlat24 = u_xlat16_10 / u_xlat24;
					    u_xlat16_25 = u_xlat16_26 * u_xlat16_10;
					    u_xlat16_25 = (-u_xlat16_25) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat2.xyz = u_xlat16_4.xyz * vec3(u_xlat24);
					    u_xlat16_28 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat16_28) + u_xlat2.xyz;
					    u_xlat16_28 = (-u_xlat16_28) + _Glossiness;
					    u_xlat16_28 = u_xlat16_28 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
					#else
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + vec3(u_xlat16_28);
					    u_xlat2.xyz = u_xlat16_1.xyz * u_xlat2.xyz;
					    u_xlat16_1.x = (-u_xlat16_26) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_26;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat16_9 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
					    u_xlat16_7.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_9)) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat8.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
					#else
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = (-u_xlat0.x) + 1.0;
					    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
					    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
					    u_xlat16_4.xyz = vec3(u_xlat16_9) * u_xlat16_6.xyz + u_xlat16_4.xyz;
					    u_xlat10_3 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat10_3.w + -1.0;
					    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_3.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_25);
					    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat8.xxx + u_xlat16_1.xyz;
					    u_xlat10_2.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.xyz = u_xlat10_2.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 unity_4LightPosX0;
					uniform highp vec4 unity_4LightPosY0;
					uniform highp vec4 unity_4LightPosZ0;
					uniform mediump vec4 unity_4LightAtten0;
					uniform mediump vec4 unity_LightColor[8];
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_7;
					  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  highp vec3 lightColor0_8;
					  lightColor0_8 = unity_LightColor[0].xyz;
					  highp vec3 lightColor1_9;
					  lightColor1_9 = unity_LightColor[1].xyz;
					  highp vec3 lightColor2_10;
					  lightColor2_10 = unity_LightColor[2].xyz;
					  highp vec3 lightColor3_11;
					  lightColor3_11 = unity_LightColor[3].xyz;
					  highp vec4 lightAttenSq_12;
					  lightAttenSq_12 = unity_4LightAtten0;
					  highp vec3 col_13;
					  highp vec4 ndotl_14;
					  highp vec4 lengthSq_15;
					  highp vec4 tmpvar_16;
					  tmpvar_16 = (unity_4LightPosX0 - tmpvar_5.x);
					  highp vec4 tmpvar_17;
					  tmpvar_17 = (unity_4LightPosY0 - tmpvar_5.y);
					  highp vec4 tmpvar_18;
					  tmpvar_18 = (unity_4LightPosZ0 - tmpvar_5.z);
					  lengthSq_15 = (tmpvar_16 * tmpvar_16);
					  lengthSq_15 = (lengthSq_15 + (tmpvar_17 * tmpvar_17));
					  lengthSq_15 = (lengthSq_15 + (tmpvar_18 * tmpvar_18));
					  highp vec4 tmpvar_19;
					  tmpvar_19 = max (lengthSq_15, vec4(1e-06, 1e-06, 1e-06, 1e-06));
					  lengthSq_15 = tmpvar_19;
					  ndotl_14 = (tmpvar_16 * tmpvar_7.x);
					  ndotl_14 = (ndotl_14 + (tmpvar_17 * tmpvar_7.y));
					  ndotl_14 = (ndotl_14 + (tmpvar_18 * tmpvar_7.z));
					  highp vec4 tmpvar_20;
					  tmpvar_20 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_14 * inversesqrt(tmpvar_19)));
					  ndotl_14 = tmpvar_20;
					  highp vec4 tmpvar_21;
					  tmpvar_21 = (tmpvar_20 * (1.0/((1.0 + 
					    (tmpvar_19 * lightAttenSq_12)
					  ))));
					  col_13 = (lightColor0_8 * tmpvar_21.x);
					  col_13 = (col_13 + (lightColor1_9 * tmpvar_21.y));
					  col_13 = (col_13 + (lightColor2_10 * tmpvar_21.z));
					  col_13 = (col_13 + (lightColor3_11 * tmpvar_21.w));
					  tmpvar_2 = col_13;
					  mediump vec3 normal_22;
					  normal_22 = tmpvar_7;
					  mediump vec3 ambient_23;
					  mediump vec3 x1_24;
					  mediump vec4 tmpvar_25;
					  tmpvar_25 = (normal_22.xyzz * normal_22.yzzx);
					  x1_24.x = dot (unity_SHBr, tmpvar_25);
					  x1_24.y = dot (unity_SHBg, tmpvar_25);
					  x1_24.z = dot (unity_SHBb, tmpvar_25);
					  ambient_23 = ((tmpvar_2 * (
					    (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
					   + 0.01252288)) + (x1_24 + (unity_SHC.xyz * 
					    ((normal_22.x * normal_22.x) - (normal_22.y * normal_22.y))
					  )));
					  tmpvar_2 = ambient_23;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_7;
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = ambient_23;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					  xlv_TEXCOORD6 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp float atten_7;
					  lowp vec3 lightDir_8;
					  highp vec4 tmpvar_9;
					  mediump vec3 tmpvar_10;
					  tmpvar_10 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_11 = normalize(tmpvar_12);
					  tmpvar_9 = xlv_COLOR0;
					  lowp vec3 tmpvar_13;
					  mediump vec3 tmpvar_14;
					  lowp float tmpvar_15;
					  highp vec4 emissionSample_16;
					  highp vec4 diffuseSample_17;
					  highp vec4 nightSample_18;
					  highp vec4 daySample_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_19 = tmpvar_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_18 = tmpvar_21;
					  diffuseSample_17 = (mix (nightSample_18, daySample_19, vec4(_DayWeight)) * _Color);
					  diffuseSample_17.xyz = (diffuseSample_17.xyz * tmpvar_9.xyz);
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_16 = tmpvar_22;
					  highp vec3 tmpvar_23;
					  tmpvar_23 = ((emissionSample_16.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_13 = diffuseSample_17.xyz;
					  tmpvar_14 = tmpvar_23;
					  tmpvar_15 = diffuseSample_17.w;
					  mediump float realtimeShadowAttenuation_24;
					  highp vec4 v_25;
					  v_25.x = unity_MatrixV[0].z;
					  v_25.y = unity_MatrixV[1].z;
					  v_25.z = unity_MatrixV[2].z;
					  v_25.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_27;
					  highp float tmpvar_28;
					  tmpvar_28 = clamp (((
					    mix (dot (tmpvar_12, v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_27 = tmpvar_28;
					  lowp float tmpvar_29;
					  highp float lightShadowDataX_30;
					  mediump float tmpvar_31;
					  tmpvar_31 = _LightShadowData.x;
					  lightShadowDataX_30 = tmpvar_31;
					  highp float tmpvar_32;
					  tmpvar_32 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_30);
					  tmpvar_29 = tmpvar_32;
					  realtimeShadowAttenuation_24 = tmpvar_29;
					  mediump float tmpvar_33;
					  tmpvar_33 = mix (realtimeShadowAttenuation_24, 1.0, tmpvar_27);
					  atten_7 = tmpvar_33;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_8;
					  tmpvar_1 = tmpvar_11;
					  tmpvar_2 = atten_7;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_34;
					  Normal_34 = xlv_TEXCOORD1;
					  mediump float tmpvar_35;
					  highp float tmpvar_36;
					  highp float smoothness_37;
					  smoothness_37 = _Glossiness;
					  tmpvar_36 = (1.0 - smoothness_37);
					  tmpvar_35 = tmpvar_36;
					  mediump vec3 I_38;
					  I_38 = -(tmpvar_1);
					  mediump vec3 normalWorld_39;
					  normalWorld_39 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_40;
					  tmpvar_40 = (tmpvar_4 * tmpvar_2);
					  mediump vec4 tmpvar_41;
					  tmpvar_41.w = 1.0;
					  tmpvar_41.xyz = normalWorld_39;
					  mediump vec3 x_42;
					  x_42.x = dot (unity_SHAr, tmpvar_41);
					  x_42.y = dot (unity_SHAg, tmpvar_41);
					  x_42.z = dot (unity_SHAb, tmpvar_41);
					  mediump vec4 hdr_43;
					  hdr_43 = tmpvar_3;
					  mediump vec4 tmpvar_44;
					  tmpvar_44.xyz = (I_38 - (2.0 * (
					    dot (Normal_34, I_38)
					   * Normal_34)));
					  tmpvar_44.w = ((tmpvar_35 * (1.7 - 
					    (0.7 * tmpvar_35)
					  )) * 6.0);
					  lowp vec4 tmpvar_45;
					  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_44.xyz, tmpvar_44.w);
					  mediump vec4 tmpvar_46;
					  tmpvar_46 = tmpvar_45;
					  tmpvar_4 = tmpvar_40;
					  lowp vec3 tmpvar_47;
					  mediump vec4 c_48;
					  highp vec3 tmpvar_49;
					  tmpvar_49 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_50;
					  mediump vec3 albedo_51;
					  albedo_51 = tmpvar_13;
					  mediump vec3 tmpvar_52;
					  tmpvar_52 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_51, vec3(_Metallic));
					  mediump float tmpvar_53;
					  tmpvar_53 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_50 = (albedo_51 * tmpvar_53);
					  tmpvar_47 = tmpvar_50;
					  mediump vec3 diffColor_54;
					  diffColor_54 = tmpvar_47;
					  mediump float alpha_55;
					  alpha_55 = tmpvar_15;
					  tmpvar_47 = diffColor_54;
					  mediump vec3 diffColor_56;
					  diffColor_56 = tmpvar_47;
					  mediump vec3 color_57;
					  mediump vec2 rlPow4AndFresnelTerm_58;
					  mediump float tmpvar_59;
					  highp float tmpvar_60;
					  tmpvar_60 = clamp (dot (tmpvar_49, tmpvar_5), 0.0, 1.0);
					  tmpvar_59 = tmpvar_60;
					  mediump float tmpvar_61;
					  highp float tmpvar_62;
					  tmpvar_62 = clamp (dot (tmpvar_49, tmpvar_11), 0.0, 1.0);
					  tmpvar_61 = tmpvar_62;
					  highp vec2 tmpvar_63;
					  tmpvar_63.x = dot ((tmpvar_11 - (2.0 * 
					    (dot (tmpvar_49, tmpvar_11) * tmpvar_49)
					  )), tmpvar_5);
					  tmpvar_63.y = (1.0 - tmpvar_61);
					  highp vec2 tmpvar_64;
					  tmpvar_64 = ((tmpvar_63 * tmpvar_63) * (tmpvar_63 * tmpvar_63));
					  rlPow4AndFresnelTerm_58 = tmpvar_64;
					  mediump float tmpvar_65;
					  tmpvar_65 = rlPow4AndFresnelTerm_58.x;
					  mediump float specular_66;
					  highp float smoothness_67;
					  smoothness_67 = _Glossiness;
					  highp vec2 tmpvar_68;
					  tmpvar_68.x = tmpvar_65;
					  tmpvar_68.y = (1.0 - smoothness_67);
					  highp float tmpvar_69;
					  tmpvar_69 = (texture2D (unity_NHxRoughness, tmpvar_68).x * 16.0);
					  specular_66 = tmpvar_69;
					  color_57 = ((diffColor_56 + (specular_66 * tmpvar_52)) * (tmpvar_40 * tmpvar_59));
					  color_57 = (color_57 + ((
					    max (((1.055 * pow (
					      max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_42))
					    , vec3(0.4166667, 0.4166667, 0.4166667))) - 0.055), vec3(0.0, 0.0, 0.0))
					   * diffColor_56) + (
					    ((hdr_43.x * ((hdr_43.w * 
					      (tmpvar_46.w - 1.0)
					    ) + 1.0)) * tmpvar_46.xyz)
					   * 
					    mix (tmpvar_52, vec3(clamp ((_Glossiness + (1.0 - tmpvar_53)), 0.0, 1.0)), rlPow4AndFresnelTerm_58.yyy)
					  )));
					  mediump vec4 tmpvar_70;
					  tmpvar_70.w = 1.0;
					  tmpvar_70.xyz = color_57;
					  c_48.xyz = tmpvar_70.xyz;
					  c_48.w = alpha_55;
					  c_6 = c_48;
					  c_6.xyz = (c_6.xyz + tmpvar_14);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 unity_4LightPosX0;
					uniform highp vec4 unity_4LightPosY0;
					uniform highp vec4 unity_4LightPosZ0;
					uniform mediump vec4 unity_4LightAtten0;
					uniform mediump vec4 unity_LightColor[8];
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_7;
					  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  highp vec3 lightColor0_8;
					  lightColor0_8 = unity_LightColor[0].xyz;
					  highp vec3 lightColor1_9;
					  lightColor1_9 = unity_LightColor[1].xyz;
					  highp vec3 lightColor2_10;
					  lightColor2_10 = unity_LightColor[2].xyz;
					  highp vec3 lightColor3_11;
					  lightColor3_11 = unity_LightColor[3].xyz;
					  highp vec4 lightAttenSq_12;
					  lightAttenSq_12 = unity_4LightAtten0;
					  highp vec3 col_13;
					  highp vec4 ndotl_14;
					  highp vec4 lengthSq_15;
					  highp vec4 tmpvar_16;
					  tmpvar_16 = (unity_4LightPosX0 - tmpvar_5.x);
					  highp vec4 tmpvar_17;
					  tmpvar_17 = (unity_4LightPosY0 - tmpvar_5.y);
					  highp vec4 tmpvar_18;
					  tmpvar_18 = (unity_4LightPosZ0 - tmpvar_5.z);
					  lengthSq_15 = (tmpvar_16 * tmpvar_16);
					  lengthSq_15 = (lengthSq_15 + (tmpvar_17 * tmpvar_17));
					  lengthSq_15 = (lengthSq_15 + (tmpvar_18 * tmpvar_18));
					  highp vec4 tmpvar_19;
					  tmpvar_19 = max (lengthSq_15, vec4(1e-06, 1e-06, 1e-06, 1e-06));
					  lengthSq_15 = tmpvar_19;
					  ndotl_14 = (tmpvar_16 * tmpvar_7.x);
					  ndotl_14 = (ndotl_14 + (tmpvar_17 * tmpvar_7.y));
					  ndotl_14 = (ndotl_14 + (tmpvar_18 * tmpvar_7.z));
					  highp vec4 tmpvar_20;
					  tmpvar_20 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_14 * inversesqrt(tmpvar_19)));
					  ndotl_14 = tmpvar_20;
					  highp vec4 tmpvar_21;
					  tmpvar_21 = (tmpvar_20 * (1.0/((1.0 + 
					    (tmpvar_19 * lightAttenSq_12)
					  ))));
					  col_13 = (lightColor0_8 * tmpvar_21.x);
					  col_13 = (col_13 + (lightColor1_9 * tmpvar_21.y));
					  col_13 = (col_13 + (lightColor2_10 * tmpvar_21.z));
					  col_13 = (col_13 + (lightColor3_11 * tmpvar_21.w));
					  tmpvar_2 = col_13;
					  mediump vec3 normal_22;
					  normal_22 = tmpvar_7;
					  mediump vec3 ambient_23;
					  mediump vec3 x1_24;
					  mediump vec4 tmpvar_25;
					  tmpvar_25 = (normal_22.xyzz * normal_22.yzzx);
					  x1_24.x = dot (unity_SHBr, tmpvar_25);
					  x1_24.y = dot (unity_SHBg, tmpvar_25);
					  x1_24.z = dot (unity_SHBb, tmpvar_25);
					  ambient_23 = ((tmpvar_2 * (
					    (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
					   + 0.01252288)) + (x1_24 + (unity_SHC.xyz * 
					    ((normal_22.x * normal_22.x) - (normal_22.y * normal_22.y))
					  )));
					  tmpvar_2 = ambient_23;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_7;
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = ambient_23;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					  xlv_TEXCOORD6 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp float atten_7;
					  lowp vec3 lightDir_8;
					  highp vec4 tmpvar_9;
					  mediump vec3 tmpvar_10;
					  tmpvar_10 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_11 = normalize(tmpvar_12);
					  tmpvar_9 = xlv_COLOR0;
					  lowp vec3 tmpvar_13;
					  mediump vec3 tmpvar_14;
					  lowp float tmpvar_15;
					  highp vec4 emissionSample_16;
					  highp vec4 diffuseSample_17;
					  highp vec4 nightSample_18;
					  highp vec4 daySample_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_19 = tmpvar_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_18 = tmpvar_21;
					  diffuseSample_17 = (mix (nightSample_18, daySample_19, vec4(_DayWeight)) * _Color);
					  diffuseSample_17.xyz = (diffuseSample_17.xyz * tmpvar_9.xyz);
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_16 = tmpvar_22;
					  highp vec3 tmpvar_23;
					  tmpvar_23 = ((emissionSample_16.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_13 = diffuseSample_17.xyz;
					  tmpvar_14 = tmpvar_23;
					  tmpvar_15 = diffuseSample_17.w;
					  mediump float realtimeShadowAttenuation_24;
					  highp vec4 v_25;
					  v_25.x = unity_MatrixV[0].z;
					  v_25.y = unity_MatrixV[1].z;
					  v_25.z = unity_MatrixV[2].z;
					  v_25.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_27;
					  highp float tmpvar_28;
					  tmpvar_28 = clamp (((
					    mix (dot (tmpvar_12, v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_27 = tmpvar_28;
					  lowp float tmpvar_29;
					  highp float lightShadowDataX_30;
					  mediump float tmpvar_31;
					  tmpvar_31 = _LightShadowData.x;
					  lightShadowDataX_30 = tmpvar_31;
					  highp float tmpvar_32;
					  tmpvar_32 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_30);
					  tmpvar_29 = tmpvar_32;
					  realtimeShadowAttenuation_24 = tmpvar_29;
					  mediump float tmpvar_33;
					  tmpvar_33 = mix (realtimeShadowAttenuation_24, 1.0, tmpvar_27);
					  atten_7 = tmpvar_33;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_8;
					  tmpvar_1 = tmpvar_11;
					  tmpvar_2 = atten_7;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_34;
					  Normal_34 = xlv_TEXCOORD1;
					  mediump float tmpvar_35;
					  highp float tmpvar_36;
					  highp float smoothness_37;
					  smoothness_37 = _Glossiness;
					  tmpvar_36 = (1.0 - smoothness_37);
					  tmpvar_35 = tmpvar_36;
					  mediump vec3 I_38;
					  I_38 = -(tmpvar_1);
					  mediump vec3 normalWorld_39;
					  normalWorld_39 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_40;
					  mediump vec3 tmpvar_41;
					  mediump vec3 tmpvar_42;
					  tmpvar_41 = (tmpvar_4 * tmpvar_2);
					  mediump vec4 tmpvar_43;
					  tmpvar_43.w = 1.0;
					  tmpvar_43.xyz = normalWorld_39;
					  mediump vec3 x_44;
					  x_44.x = dot (unity_SHAr, tmpvar_43);
					  x_44.y = dot (unity_SHAg, tmpvar_43);
					  x_44.z = dot (unity_SHAb, tmpvar_43);
					  tmpvar_42 = max (((1.055 * 
					    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_44)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  mediump vec4 hdr_45;
					  hdr_45 = tmpvar_3;
					  mediump vec4 tmpvar_46;
					  tmpvar_46.xyz = (I_38 - (2.0 * (
					    dot (Normal_34, I_38)
					   * Normal_34)));
					  tmpvar_46.w = ((tmpvar_35 * (1.7 - 
					    (0.7 * tmpvar_35)
					  )) * 6.0);
					  lowp vec4 tmpvar_47;
					  tmpvar_47 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_46.xyz, tmpvar_46.w);
					  mediump vec4 tmpvar_48;
					  tmpvar_48 = tmpvar_47;
					  tmpvar_40 = ((hdr_45.x * (
					    (hdr_45.w * (tmpvar_48.w - 1.0))
					   + 1.0)) * tmpvar_48.xyz);
					  tmpvar_4 = tmpvar_41;
					  lowp vec3 tmpvar_49;
					  mediump vec4 c_50;
					  highp vec3 tmpvar_51;
					  tmpvar_51 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_52;
					  mediump vec3 albedo_53;
					  albedo_53 = tmpvar_13;
					  mediump vec3 tmpvar_54;
					  tmpvar_54 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_53, vec3(_Metallic));
					  mediump float tmpvar_55;
					  tmpvar_55 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_52 = (albedo_53 * tmpvar_55);
					  tmpvar_49 = tmpvar_52;
					  mediump vec3 diffColor_56;
					  diffColor_56 = tmpvar_49;
					  mediump float alpha_57;
					  alpha_57 = tmpvar_15;
					  tmpvar_49 = diffColor_56;
					  mediump vec3 diffColor_58;
					  diffColor_58 = tmpvar_49;
					  mediump vec3 color_59;
					  mediump float surfaceReduction_60;
					  highp float specularTerm_61;
					  highp float a2_62;
					  mediump float roughness_63;
					  mediump float perceptualRoughness_64;
					  highp vec3 tmpvar_65;
					  highp vec3 inVec_66;
					  inVec_66 = (tmpvar_5 + tmpvar_11);
					  tmpvar_65 = (inVec_66 * inversesqrt(max (0.001, 
					    dot (inVec_66, inVec_66)
					  )));
					  mediump float tmpvar_67;
					  highp float tmpvar_68;
					  tmpvar_68 = clamp (dot (tmpvar_51, tmpvar_5), 0.0, 1.0);
					  tmpvar_67 = tmpvar_68;
					  highp float tmpvar_69;
					  tmpvar_69 = clamp (dot (tmpvar_51, tmpvar_65), 0.0, 1.0);
					  mediump float tmpvar_70;
					  highp float tmpvar_71;
					  tmpvar_71 = clamp (dot (tmpvar_51, tmpvar_11), 0.0, 1.0);
					  tmpvar_70 = tmpvar_71;
					  highp float tmpvar_72;
					  highp float smoothness_73;
					  smoothness_73 = _Glossiness;
					  tmpvar_72 = (1.0 - smoothness_73);
					  perceptualRoughness_64 = tmpvar_72;
					  highp float tmpvar_74;
					  highp float perceptualRoughness_75;
					  perceptualRoughness_75 = perceptualRoughness_64;
					  tmpvar_74 = (perceptualRoughness_75 * perceptualRoughness_75);
					  roughness_63 = tmpvar_74;
					  mediump float tmpvar_76;
					  tmpvar_76 = (roughness_63 * roughness_63);
					  a2_62 = tmpvar_76;
					  specularTerm_61 = ((roughness_63 / (
					    (max (0.32, clamp (dot (tmpvar_5, tmpvar_65), 0.0, 1.0)) * (1.5 + roughness_63))
					   * 
					    (((tmpvar_69 * tmpvar_69) * (a2_62 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_77;
					  tmpvar_77 = clamp (specularTerm_61, 0.0, 100.0);
					  specularTerm_61 = tmpvar_77;
					  surfaceReduction_60 = (1.0 - ((roughness_63 * perceptualRoughness_64) * 0.28));
					  mediump float x_78;
					  x_78 = (1.0 - tmpvar_70);
					  mediump vec3 tmpvar_79;
					  tmpvar_79 = mix (tmpvar_54, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_55)
					  ), 0.0, 1.0)), vec3(((x_78 * x_78) * (x_78 * x_78))));
					  highp vec3 tmpvar_80;
					  tmpvar_80 = (((
					    ((diffColor_58 + (tmpvar_77 * tmpvar_54)) * tmpvar_41)
					   * tmpvar_67) + (tmpvar_42 * diffColor_58)) + ((surfaceReduction_60 * tmpvar_40) * tmpvar_79));
					  color_59 = tmpvar_80;
					  mediump vec4 tmpvar_81;
					  tmpvar_81.w = 1.0;
					  tmpvar_81.xyz = color_59;
					  c_50.xyz = tmpvar_81.xyz;
					  c_50.w = alpha_57;
					  c_6 = c_50;
					  c_6.xyz = (c_6.xyz + tmpvar_14);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 unity_4LightPosX0;
					uniform highp vec4 unity_4LightPosY0;
					uniform highp vec4 unity_4LightPosZ0;
					uniform mediump vec4 unity_4LightAtten0;
					uniform mediump vec4 unity_LightColor[8];
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_7;
					  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  highp vec3 lightColor0_8;
					  lightColor0_8 = unity_LightColor[0].xyz;
					  highp vec3 lightColor1_9;
					  lightColor1_9 = unity_LightColor[1].xyz;
					  highp vec3 lightColor2_10;
					  lightColor2_10 = unity_LightColor[2].xyz;
					  highp vec3 lightColor3_11;
					  lightColor3_11 = unity_LightColor[3].xyz;
					  highp vec4 lightAttenSq_12;
					  lightAttenSq_12 = unity_4LightAtten0;
					  highp vec3 col_13;
					  highp vec4 ndotl_14;
					  highp vec4 lengthSq_15;
					  highp vec4 tmpvar_16;
					  tmpvar_16 = (unity_4LightPosX0 - tmpvar_5.x);
					  highp vec4 tmpvar_17;
					  tmpvar_17 = (unity_4LightPosY0 - tmpvar_5.y);
					  highp vec4 tmpvar_18;
					  tmpvar_18 = (unity_4LightPosZ0 - tmpvar_5.z);
					  lengthSq_15 = (tmpvar_16 * tmpvar_16);
					  lengthSq_15 = (lengthSq_15 + (tmpvar_17 * tmpvar_17));
					  lengthSq_15 = (lengthSq_15 + (tmpvar_18 * tmpvar_18));
					  highp vec4 tmpvar_19;
					  tmpvar_19 = max (lengthSq_15, vec4(1e-06, 1e-06, 1e-06, 1e-06));
					  lengthSq_15 = tmpvar_19;
					  ndotl_14 = (tmpvar_16 * tmpvar_7.x);
					  ndotl_14 = (ndotl_14 + (tmpvar_17 * tmpvar_7.y));
					  ndotl_14 = (ndotl_14 + (tmpvar_18 * tmpvar_7.z));
					  highp vec4 tmpvar_20;
					  tmpvar_20 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_14 * inversesqrt(tmpvar_19)));
					  ndotl_14 = tmpvar_20;
					  highp vec4 tmpvar_21;
					  tmpvar_21 = (tmpvar_20 * (1.0/((1.0 + 
					    (tmpvar_19 * lightAttenSq_12)
					  ))));
					  col_13 = (lightColor0_8 * tmpvar_21.x);
					  col_13 = (col_13 + (lightColor1_9 * tmpvar_21.y));
					  col_13 = (col_13 + (lightColor2_10 * tmpvar_21.z));
					  col_13 = (col_13 + (lightColor3_11 * tmpvar_21.w));
					  tmpvar_2 = col_13;
					  mediump vec3 normal_22;
					  normal_22 = tmpvar_7;
					  mediump vec3 ambient_23;
					  mediump vec3 x1_24;
					  mediump vec4 tmpvar_25;
					  tmpvar_25 = (normal_22.xyzz * normal_22.yzzx);
					  x1_24.x = dot (unity_SHBr, tmpvar_25);
					  x1_24.y = dot (unity_SHBg, tmpvar_25);
					  x1_24.z = dot (unity_SHBb, tmpvar_25);
					  ambient_23 = ((tmpvar_2 * (
					    (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
					   + 0.01252288)) + (x1_24 + (unity_SHC.xyz * 
					    ((normal_22.x * normal_22.x) - (normal_22.y * normal_22.y))
					  )));
					  tmpvar_2 = ambient_23;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_7;
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = ambient_23;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					  xlv_TEXCOORD6 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp float atten_7;
					  lowp vec3 lightDir_8;
					  highp vec4 tmpvar_9;
					  mediump vec3 tmpvar_10;
					  tmpvar_10 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_11 = normalize(tmpvar_12);
					  tmpvar_9 = xlv_COLOR0;
					  lowp vec3 tmpvar_13;
					  mediump vec3 tmpvar_14;
					  lowp float tmpvar_15;
					  highp vec4 emissionSample_16;
					  highp vec4 diffuseSample_17;
					  highp vec4 nightSample_18;
					  highp vec4 daySample_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_19 = tmpvar_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_18 = tmpvar_21;
					  diffuseSample_17 = (mix (nightSample_18, daySample_19, vec4(_DayWeight)) * _Color);
					  diffuseSample_17.xyz = (diffuseSample_17.xyz * tmpvar_9.xyz);
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_16 = tmpvar_22;
					  highp vec3 tmpvar_23;
					  tmpvar_23 = ((emissionSample_16.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_13 = diffuseSample_17.xyz;
					  tmpvar_14 = tmpvar_23;
					  tmpvar_15 = diffuseSample_17.w;
					  mediump float realtimeShadowAttenuation_24;
					  highp vec4 v_25;
					  v_25.x = unity_MatrixV[0].z;
					  v_25.y = unity_MatrixV[1].z;
					  v_25.z = unity_MatrixV[2].z;
					  v_25.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_27;
					  highp float tmpvar_28;
					  tmpvar_28 = clamp (((
					    mix (dot (tmpvar_12, v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_27 = tmpvar_28;
					  lowp float tmpvar_29;
					  highp float lightShadowDataX_30;
					  mediump float tmpvar_31;
					  tmpvar_31 = _LightShadowData.x;
					  lightShadowDataX_30 = tmpvar_31;
					  highp float tmpvar_32;
					  tmpvar_32 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_30);
					  tmpvar_29 = tmpvar_32;
					  realtimeShadowAttenuation_24 = tmpvar_29;
					  mediump float tmpvar_33;
					  tmpvar_33 = mix (realtimeShadowAttenuation_24, 1.0, tmpvar_27);
					  atten_7 = tmpvar_33;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_8;
					  tmpvar_1 = tmpvar_11;
					  tmpvar_2 = atten_7;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_34;
					  Normal_34 = xlv_TEXCOORD1;
					  mediump float tmpvar_35;
					  highp float tmpvar_36;
					  highp float smoothness_37;
					  smoothness_37 = _Glossiness;
					  tmpvar_36 = (1.0 - smoothness_37);
					  tmpvar_35 = tmpvar_36;
					  mediump vec3 I_38;
					  I_38 = -(tmpvar_1);
					  mediump vec3 normalWorld_39;
					  normalWorld_39 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_40;
					  mediump vec3 tmpvar_41;
					  mediump vec3 tmpvar_42;
					  tmpvar_41 = (tmpvar_4 * tmpvar_2);
					  mediump vec4 tmpvar_43;
					  tmpvar_43.w = 1.0;
					  tmpvar_43.xyz = normalWorld_39;
					  mediump vec3 x_44;
					  x_44.x = dot (unity_SHAr, tmpvar_43);
					  x_44.y = dot (unity_SHAg, tmpvar_43);
					  x_44.z = dot (unity_SHAb, tmpvar_43);
					  tmpvar_42 = max (((1.055 * 
					    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_44)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  mediump vec4 hdr_45;
					  hdr_45 = tmpvar_3;
					  mediump vec4 tmpvar_46;
					  tmpvar_46.xyz = (I_38 - (2.0 * (
					    dot (Normal_34, I_38)
					   * Normal_34)));
					  tmpvar_46.w = ((tmpvar_35 * (1.7 - 
					    (0.7 * tmpvar_35)
					  )) * 6.0);
					  lowp vec4 tmpvar_47;
					  tmpvar_47 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_46.xyz, tmpvar_46.w);
					  mediump vec4 tmpvar_48;
					  tmpvar_48 = tmpvar_47;
					  tmpvar_40 = ((hdr_45.x * (
					    (hdr_45.w * (tmpvar_48.w - 1.0))
					   + 1.0)) * tmpvar_48.xyz);
					  tmpvar_4 = tmpvar_41;
					  lowp vec3 tmpvar_49;
					  mediump vec4 c_50;
					  highp vec3 tmpvar_51;
					  tmpvar_51 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_52;
					  mediump vec3 albedo_53;
					  albedo_53 = tmpvar_13;
					  mediump vec3 tmpvar_54;
					  tmpvar_54 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_53, vec3(_Metallic));
					  mediump float tmpvar_55;
					  tmpvar_55 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_52 = (albedo_53 * tmpvar_55);
					  tmpvar_49 = tmpvar_52;
					  mediump vec3 diffColor_56;
					  diffColor_56 = tmpvar_49;
					  mediump float alpha_57;
					  alpha_57 = tmpvar_15;
					  tmpvar_49 = diffColor_56;
					  mediump vec3 diffColor_58;
					  diffColor_58 = tmpvar_49;
					  mediump vec3 color_59;
					  mediump float surfaceReduction_60;
					  highp float specularTerm_61;
					  highp float a2_62;
					  mediump float roughness_63;
					  mediump float perceptualRoughness_64;
					  highp vec3 tmpvar_65;
					  highp vec3 inVec_66;
					  inVec_66 = (tmpvar_5 + tmpvar_11);
					  tmpvar_65 = (inVec_66 * inversesqrt(max (0.001, 
					    dot (inVec_66, inVec_66)
					  )));
					  mediump float tmpvar_67;
					  highp float tmpvar_68;
					  tmpvar_68 = clamp (dot (tmpvar_51, tmpvar_5), 0.0, 1.0);
					  tmpvar_67 = tmpvar_68;
					  highp float tmpvar_69;
					  tmpvar_69 = clamp (dot (tmpvar_51, tmpvar_65), 0.0, 1.0);
					  mediump float tmpvar_70;
					  highp float tmpvar_71;
					  tmpvar_71 = clamp (dot (tmpvar_51, tmpvar_11), 0.0, 1.0);
					  tmpvar_70 = tmpvar_71;
					  highp float tmpvar_72;
					  highp float smoothness_73;
					  smoothness_73 = _Glossiness;
					  tmpvar_72 = (1.0 - smoothness_73);
					  perceptualRoughness_64 = tmpvar_72;
					  highp float tmpvar_74;
					  highp float perceptualRoughness_75;
					  perceptualRoughness_75 = perceptualRoughness_64;
					  tmpvar_74 = (perceptualRoughness_75 * perceptualRoughness_75);
					  roughness_63 = tmpvar_74;
					  mediump float tmpvar_76;
					  tmpvar_76 = (roughness_63 * roughness_63);
					  a2_62 = tmpvar_76;
					  specularTerm_61 = ((roughness_63 / (
					    (max (0.32, clamp (dot (tmpvar_5, tmpvar_65), 0.0, 1.0)) * (1.5 + roughness_63))
					   * 
					    (((tmpvar_69 * tmpvar_69) * (a2_62 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_77;
					  tmpvar_77 = clamp (specularTerm_61, 0.0, 100.0);
					  specularTerm_61 = tmpvar_77;
					  surfaceReduction_60 = (1.0 - ((roughness_63 * perceptualRoughness_64) * 0.28));
					  mediump float x_78;
					  x_78 = (1.0 - tmpvar_70);
					  mediump vec3 tmpvar_79;
					  tmpvar_79 = mix (tmpvar_54, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_55)
					  ), 0.0, 1.0)), vec3(((x_78 * x_78) * (x_78 * x_78))));
					  highp vec3 tmpvar_80;
					  tmpvar_80 = (((
					    ((diffColor_58 + (tmpvar_77 * tmpvar_54)) * tmpvar_41)
					   * tmpvar_67) + (tmpvar_42 * diffColor_58)) + ((surfaceReduction_60 * tmpvar_40) * tmpvar_79));
					  color_59 = tmpvar_80;
					  mediump vec4 tmpvar_81;
					  tmpvar_81.w = 1.0;
					  tmpvar_81.xyz = color_59;
					  c_50.xyz = tmpvar_81.xyz;
					  c_50.w = alpha_57;
					  c_6 = c_50;
					  c_6.xyz = (c_6.xyz + tmpvar_14);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					lowp vec3 u_xlat10_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					float u_xlat10;
					lowp float u_xlat10_10;
					mediump vec3 u_xlat16_11;
					float u_xlat12;
					mediump float u_xlat16_12;
					float u_xlat30;
					float u_xlat32;
					mediump float u_xlat16_35;
					mediump float u_xlat16_37;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.z = (-_Glossiness) + 1.0;
					    u_xlat16_1.x = (-u_xlat2.z) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2.z;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat3.xyz;
					    u_xlat16_11.x = dot((-u_xlat4.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;
					    u_xlat16_11.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_11.xxx) + (-u_xlat4.xyz);
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_1.x);
					    u_xlat16_5.x = u_xlat10_1.w + -1.0;
					    u_xlat16_5.x = unity_SpecCube0_HDR.w * u_xlat16_5.x + 1.0;
					    u_xlat16_5.x = u_xlat16_5.x * unity_SpecCube0_HDR.x;
					    u_xlat16_5.xyz = u_xlat10_1.xyz * u_xlat16_5.xxx;
					    u_xlat30 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat6.xyz = vec3(u_xlat30) * vs_TEXCOORD1.xyz;
					    u_xlat30 = dot(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat12 = u_xlat30;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat4.xyz = u_xlat6.xyz * (-vec3(u_xlat30)) + u_xlat4.xyz;
					    u_xlat30 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat32 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat2.x = u_xlat32 * u_xlat32;
					    u_xlat2.x = texture(unity_NHxRoughness, u_xlat2.xz).x;
					    u_xlat2.x = u_xlat2.x * 16.0;
					    u_xlat16_35 = (-u_xlat12) + 1.0;
					    u_xlat16_12 = u_xlat16_35 * u_xlat16_35;
					    u_xlat16_12 = u_xlat16_35 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_35 * u_xlat16_12;
					    u_xlat10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_6.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = u_xlat10_4.xyz + (-u_xlat10_6.xyz);
					    u_xlat4.xyz = vec3(_DayWeight) * u_xlat16_4.xyz + u_xlat10_6.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat16_7.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_35 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_37 = (-u_xlat16_35) + _Glossiness;
					    u_xlat16_8.xyz = u_xlat4.xyz * vec3(u_xlat16_35);
					    u_xlat16_35 = u_xlat16_37 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_35);
					    u_xlat16_9.xyz = vec3(u_xlat16_12) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat2.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_9.xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_8.xyz + u_xlat16_5.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat10 = (-u_xlat0.x) + u_xlat10;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat10 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat10_10 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_35 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_35 = u_xlat10_10 * u_xlat16_35 + _LightShadowData.x;
					    u_xlat16_37 = (-u_xlat16_35) + 1.0;
					    u_xlat16_35 = u_xlat0.x * u_xlat16_37 + u_xlat16_35;
					    u_xlat16_8.xyz = vec3(u_xlat16_35) * _LightColor0.xyz;
					    u_xlat16_8.xyz = vec3(u_xlat30) * u_xlat16_8.xyz;
					    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz + u_xlat16_5.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat30 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat16_5.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					mediump vec3 u_xlat16_12;
					mediump float u_xlat16_18;
					float u_xlat24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_28;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_3.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_2.xyz + (-u_xlat10_3.xyz);
					    u_xlat2.xyz = vec3(_DayWeight) * u_xlat16_2.xyz + u_xlat10_3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat16_1.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat3.xyz;
					    u_xlat16_25 = (-u_xlat16_25) + _Glossiness;
					    u_xlat16_25 = u_xlat16_25 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + vec3(u_xlat16_25);
					    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat10_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_25 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_25 = u_xlat10_0.x * u_xlat16_25 + _LightShadowData.x;
					    u_xlat16_28 = (-u_xlat16_25) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat8.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat0.x * u_xlat16_28 + u_xlat16_25;
					    u_xlat16_7.xyz = vec3(u_xlat16_25) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat8.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_26 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_26 * u_xlat16_26 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_3;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat16_10 = u_xlat16_26 * u_xlat16_26;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_10 + -1.0;
					    u_xlat2.x = u_xlat2.x * u_xlat16_18 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat2.x;
					    u_xlat24 = u_xlat16_10 / u_xlat24;
					    u_xlat16_25 = u_xlat16_26 * u_xlat16_10;
					    u_xlat16_25 = (-u_xlat16_25) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat2.xyz = u_xlat16_7.xyz * u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat3.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = (-u_xlat3.x) + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat16_6.xyz;
					    u_xlat16_4.x = (-u_xlat16_26) * 0.699999988 + 1.70000005;
					    u_xlat16_4.x = u_xlat16_26 * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * 6.0;
					    u_xlat16_12.x = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_12.x = u_xlat16_12.x + u_xlat16_12.x;
					    u_xlat16_12.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_12.xxx) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_12.xyz, u_xlat16_4.x);
					    u_xlat16_4.x = u_xlat10_0.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_0.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat2.xyz;
					    u_xlat10_2.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.xyz = u_xlat10_2.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					mediump vec3 u_xlat16_12;
					mediump float u_xlat16_18;
					float u_xlat24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_28;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_3.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_2.xyz + (-u_xlat10_3.xyz);
					    u_xlat2.xyz = vec3(_DayWeight) * u_xlat16_2.xyz + u_xlat10_3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat16_1.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat3.xyz;
					    u_xlat16_25 = (-u_xlat16_25) + _Glossiness;
					    u_xlat16_25 = u_xlat16_25 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + vec3(u_xlat16_25);
					    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat10_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_25 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_25 = u_xlat10_0.x * u_xlat16_25 + _LightShadowData.x;
					    u_xlat16_28 = (-u_xlat16_25) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat8.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat0.x * u_xlat16_28 + u_xlat16_25;
					    u_xlat16_7.xyz = vec3(u_xlat16_25) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat8.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_26 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_26 * u_xlat16_26 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_3;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat16_10 = u_xlat16_26 * u_xlat16_26;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_10 + -1.0;
					    u_xlat2.x = u_xlat2.x * u_xlat16_18 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat2.x;
					    u_xlat24 = u_xlat16_10 / u_xlat24;
					    u_xlat16_25 = u_xlat16_26 * u_xlat16_10;
					    u_xlat16_25 = (-u_xlat16_25) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat2.xyz = u_xlat16_7.xyz * u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat3.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = (-u_xlat3.x) + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat16_6.xyz;
					    u_xlat16_4.x = (-u_xlat16_26) * 0.699999988 + 1.70000005;
					    u_xlat16_4.x = u_xlat16_26 * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * 6.0;
					    u_xlat16_12.x = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_12.x = u_xlat16_12.x + u_xlat16_12.x;
					    u_xlat16_12.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_12.xxx) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_12.xyz, u_xlat16_4.x);
					    u_xlat16_4.x = u_xlat10_0.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_0.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat2.xyz;
					    u_xlat10_2.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.xyz = u_xlat10_2.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					  xlv_TEXCOORD6 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp float atten_7;
					  lowp vec3 lightDir_8;
					  highp vec4 tmpvar_9;
					  mediump vec3 tmpvar_10;
					  tmpvar_10 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_11 = normalize(tmpvar_12);
					  tmpvar_9 = xlv_COLOR0;
					  lowp vec3 tmpvar_13;
					  mediump vec3 tmpvar_14;
					  lowp float tmpvar_15;
					  highp vec4 emissionSample_16;
					  highp vec4 diffuseSample_17;
					  highp vec4 nightSample_18;
					  highp vec4 daySample_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_19 = tmpvar_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_18 = tmpvar_21;
					  diffuseSample_17 = (mix (nightSample_18, daySample_19, vec4(_DayWeight)) * _Color);
					  diffuseSample_17.xyz = (diffuseSample_17.xyz * tmpvar_9.xyz);
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_16 = tmpvar_22;
					  highp vec3 tmpvar_23;
					  tmpvar_23 = ((emissionSample_16.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_13 = diffuseSample_17.xyz;
					  tmpvar_14 = tmpvar_23;
					  tmpvar_15 = diffuseSample_17.w;
					  mediump float realtimeShadowAttenuation_24;
					  highp vec4 v_25;
					  v_25.x = unity_MatrixV[0].z;
					  v_25.y = unity_MatrixV[1].z;
					  v_25.z = unity_MatrixV[2].z;
					  v_25.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_27;
					  highp float tmpvar_28;
					  tmpvar_28 = clamp (((
					    mix (dot (tmpvar_12, v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_27 = tmpvar_28;
					  lowp float tmpvar_29;
					  highp float lightShadowDataX_30;
					  mediump float tmpvar_31;
					  tmpvar_31 = _LightShadowData.x;
					  lightShadowDataX_30 = tmpvar_31;
					  highp float tmpvar_32;
					  tmpvar_32 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_30);
					  tmpvar_29 = tmpvar_32;
					  realtimeShadowAttenuation_24 = tmpvar_29;
					  mediump float tmpvar_33;
					  tmpvar_33 = mix (realtimeShadowAttenuation_24, 1.0, tmpvar_27);
					  atten_7 = tmpvar_33;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_8;
					  tmpvar_1 = tmpvar_11;
					  tmpvar_2 = atten_7;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_34;
					  Normal_34 = xlv_TEXCOORD1;
					  mediump float tmpvar_35;
					  highp float tmpvar_36;
					  highp float smoothness_37;
					  smoothness_37 = _Glossiness;
					  tmpvar_36 = (1.0 - smoothness_37);
					  tmpvar_35 = tmpvar_36;
					  mediump vec3 I_38;
					  I_38 = -(tmpvar_1);
					  mediump vec3 tmpvar_39;
					  tmpvar_39 = (tmpvar_4 * tmpvar_2);
					  lowp vec4 tmpvar_40;
					  tmpvar_40 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
					  mediump vec4 hdr_41;
					  hdr_41 = tmpvar_3;
					  mediump vec4 tmpvar_42;
					  tmpvar_42.xyz = (I_38 - (2.0 * (
					    dot (Normal_34, I_38)
					   * Normal_34)));
					  tmpvar_42.w = ((tmpvar_35 * (1.7 - 
					    (0.7 * tmpvar_35)
					  )) * 6.0);
					  lowp vec4 tmpvar_43;
					  tmpvar_43 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42.xyz, tmpvar_42.w);
					  mediump vec4 tmpvar_44;
					  tmpvar_44 = tmpvar_43;
					  tmpvar_4 = tmpvar_39;
					  lowp vec3 tmpvar_45;
					  mediump vec4 c_46;
					  highp vec3 tmpvar_47;
					  tmpvar_47 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_48;
					  mediump vec3 albedo_49;
					  albedo_49 = tmpvar_13;
					  mediump vec3 tmpvar_50;
					  tmpvar_50 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_49, vec3(_Metallic));
					  mediump float tmpvar_51;
					  tmpvar_51 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_48 = (albedo_49 * tmpvar_51);
					  tmpvar_45 = tmpvar_48;
					  mediump vec3 diffColor_52;
					  diffColor_52 = tmpvar_45;
					  mediump float alpha_53;
					  alpha_53 = tmpvar_15;
					  tmpvar_45 = diffColor_52;
					  mediump vec3 diffColor_54;
					  diffColor_54 = tmpvar_45;
					  mediump vec3 color_55;
					  mediump vec2 rlPow4AndFresnelTerm_56;
					  mediump float tmpvar_57;
					  highp float tmpvar_58;
					  tmpvar_58 = clamp (dot (tmpvar_47, tmpvar_5), 0.0, 1.0);
					  tmpvar_57 = tmpvar_58;
					  mediump float tmpvar_59;
					  highp float tmpvar_60;
					  tmpvar_60 = clamp (dot (tmpvar_47, tmpvar_11), 0.0, 1.0);
					  tmpvar_59 = tmpvar_60;
					  highp vec2 tmpvar_61;
					  tmpvar_61.x = dot ((tmpvar_11 - (2.0 * 
					    (dot (tmpvar_47, tmpvar_11) * tmpvar_47)
					  )), tmpvar_5);
					  tmpvar_61.y = (1.0 - tmpvar_59);
					  highp vec2 tmpvar_62;
					  tmpvar_62 = ((tmpvar_61 * tmpvar_61) * (tmpvar_61 * tmpvar_61));
					  rlPow4AndFresnelTerm_56 = tmpvar_62;
					  mediump float tmpvar_63;
					  tmpvar_63 = rlPow4AndFresnelTerm_56.x;
					  mediump float specular_64;
					  highp float smoothness_65;
					  smoothness_65 = _Glossiness;
					  highp vec2 tmpvar_66;
					  tmpvar_66.x = tmpvar_63;
					  tmpvar_66.y = (1.0 - smoothness_65);
					  highp float tmpvar_67;
					  tmpvar_67 = (texture2D (unity_NHxRoughness, tmpvar_66).x * 16.0);
					  specular_64 = tmpvar_67;
					  color_55 = ((diffColor_54 + (specular_64 * tmpvar_50)) * (tmpvar_39 * tmpvar_57));
					  color_55 = (color_55 + ((
					    pow (((unity_DynamicLightmap_HDR.x * tmpvar_40.w) * tmpvar_40.xyz), unity_DynamicLightmap_HDR.yyy)
					   * diffColor_54) + (
					    ((hdr_41.x * ((hdr_41.w * 
					      (tmpvar_44.w - 1.0)
					    ) + 1.0)) * tmpvar_44.xyz)
					   * 
					    mix (tmpvar_50, vec3(clamp ((_Glossiness + (1.0 - tmpvar_51)), 0.0, 1.0)), rlPow4AndFresnelTerm_56.yyy)
					  )));
					  mediump vec4 tmpvar_68;
					  tmpvar_68.w = 1.0;
					  tmpvar_68.xyz = color_55;
					  c_46.xyz = tmpvar_68.xyz;
					  c_46.w = alpha_53;
					  c_6 = c_46;
					  c_6.xyz = (c_6.xyz + tmpvar_14);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					  xlv_TEXCOORD6 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp float atten_7;
					  lowp vec3 lightDir_8;
					  highp vec4 tmpvar_9;
					  mediump vec3 tmpvar_10;
					  tmpvar_10 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_11 = normalize(tmpvar_12);
					  tmpvar_9 = xlv_COLOR0;
					  lowp vec3 tmpvar_13;
					  mediump vec3 tmpvar_14;
					  lowp float tmpvar_15;
					  highp vec4 emissionSample_16;
					  highp vec4 diffuseSample_17;
					  highp vec4 nightSample_18;
					  highp vec4 daySample_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_19 = tmpvar_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_18 = tmpvar_21;
					  diffuseSample_17 = (mix (nightSample_18, daySample_19, vec4(_DayWeight)) * _Color);
					  diffuseSample_17.xyz = (diffuseSample_17.xyz * tmpvar_9.xyz);
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_16 = tmpvar_22;
					  highp vec3 tmpvar_23;
					  tmpvar_23 = ((emissionSample_16.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_13 = diffuseSample_17.xyz;
					  tmpvar_14 = tmpvar_23;
					  tmpvar_15 = diffuseSample_17.w;
					  mediump float realtimeShadowAttenuation_24;
					  highp vec4 v_25;
					  v_25.x = unity_MatrixV[0].z;
					  v_25.y = unity_MatrixV[1].z;
					  v_25.z = unity_MatrixV[2].z;
					  v_25.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_27;
					  highp float tmpvar_28;
					  tmpvar_28 = clamp (((
					    mix (dot (tmpvar_12, v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_27 = tmpvar_28;
					  lowp float tmpvar_29;
					  highp float lightShadowDataX_30;
					  mediump float tmpvar_31;
					  tmpvar_31 = _LightShadowData.x;
					  lightShadowDataX_30 = tmpvar_31;
					  highp float tmpvar_32;
					  tmpvar_32 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_30);
					  tmpvar_29 = tmpvar_32;
					  realtimeShadowAttenuation_24 = tmpvar_29;
					  mediump float tmpvar_33;
					  tmpvar_33 = mix (realtimeShadowAttenuation_24, 1.0, tmpvar_27);
					  atten_7 = tmpvar_33;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_8;
					  tmpvar_1 = tmpvar_11;
					  tmpvar_2 = atten_7;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_34;
					  Normal_34 = xlv_TEXCOORD1;
					  mediump float tmpvar_35;
					  highp float tmpvar_36;
					  highp float smoothness_37;
					  smoothness_37 = _Glossiness;
					  tmpvar_36 = (1.0 - smoothness_37);
					  tmpvar_35 = tmpvar_36;
					  mediump vec3 I_38;
					  I_38 = -(tmpvar_1);
					  mediump vec3 tmpvar_39;
					  mediump vec3 tmpvar_40;
					  mediump vec3 tmpvar_41;
					  tmpvar_40 = (tmpvar_4 * tmpvar_2);
					  lowp vec4 tmpvar_42;
					  tmpvar_42 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
					  tmpvar_41 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_42.w) * tmpvar_42.xyz), unity_DynamicLightmap_HDR.yyy);
					  mediump vec4 hdr_43;
					  hdr_43 = tmpvar_3;
					  mediump vec4 tmpvar_44;
					  tmpvar_44.xyz = (I_38 - (2.0 * (
					    dot (Normal_34, I_38)
					   * Normal_34)));
					  tmpvar_44.w = ((tmpvar_35 * (1.7 - 
					    (0.7 * tmpvar_35)
					  )) * 6.0);
					  lowp vec4 tmpvar_45;
					  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_44.xyz, tmpvar_44.w);
					  mediump vec4 tmpvar_46;
					  tmpvar_46 = tmpvar_45;
					  tmpvar_39 = ((hdr_43.x * (
					    (hdr_43.w * (tmpvar_46.w - 1.0))
					   + 1.0)) * tmpvar_46.xyz);
					  tmpvar_4 = tmpvar_40;
					  lowp vec3 tmpvar_47;
					  mediump vec4 c_48;
					  highp vec3 tmpvar_49;
					  tmpvar_49 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_50;
					  mediump vec3 albedo_51;
					  albedo_51 = tmpvar_13;
					  mediump vec3 tmpvar_52;
					  tmpvar_52 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_51, vec3(_Metallic));
					  mediump float tmpvar_53;
					  tmpvar_53 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_50 = (albedo_51 * tmpvar_53);
					  tmpvar_47 = tmpvar_50;
					  mediump vec3 diffColor_54;
					  diffColor_54 = tmpvar_47;
					  mediump float alpha_55;
					  alpha_55 = tmpvar_15;
					  tmpvar_47 = diffColor_54;
					  mediump vec3 diffColor_56;
					  diffColor_56 = tmpvar_47;
					  mediump vec3 color_57;
					  mediump float surfaceReduction_58;
					  highp float specularTerm_59;
					  highp float a2_60;
					  mediump float roughness_61;
					  mediump float perceptualRoughness_62;
					  highp vec3 tmpvar_63;
					  highp vec3 inVec_64;
					  inVec_64 = (tmpvar_5 + tmpvar_11);
					  tmpvar_63 = (inVec_64 * inversesqrt(max (0.001, 
					    dot (inVec_64, inVec_64)
					  )));
					  mediump float tmpvar_65;
					  highp float tmpvar_66;
					  tmpvar_66 = clamp (dot (tmpvar_49, tmpvar_5), 0.0, 1.0);
					  tmpvar_65 = tmpvar_66;
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (dot (tmpvar_49, tmpvar_63), 0.0, 1.0);
					  mediump float tmpvar_68;
					  highp float tmpvar_69;
					  tmpvar_69 = clamp (dot (tmpvar_49, tmpvar_11), 0.0, 1.0);
					  tmpvar_68 = tmpvar_69;
					  highp float tmpvar_70;
					  highp float smoothness_71;
					  smoothness_71 = _Glossiness;
					  tmpvar_70 = (1.0 - smoothness_71);
					  perceptualRoughness_62 = tmpvar_70;
					  highp float tmpvar_72;
					  highp float perceptualRoughness_73;
					  perceptualRoughness_73 = perceptualRoughness_62;
					  tmpvar_72 = (perceptualRoughness_73 * perceptualRoughness_73);
					  roughness_61 = tmpvar_72;
					  mediump float tmpvar_74;
					  tmpvar_74 = (roughness_61 * roughness_61);
					  a2_60 = tmpvar_74;
					  specularTerm_59 = ((roughness_61 / (
					    (max (0.32, clamp (dot (tmpvar_5, tmpvar_63), 0.0, 1.0)) * (1.5 + roughness_61))
					   * 
					    (((tmpvar_67 * tmpvar_67) * (a2_60 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_75;
					  tmpvar_75 = clamp (specularTerm_59, 0.0, 100.0);
					  specularTerm_59 = tmpvar_75;
					  surfaceReduction_58 = (1.0 - ((roughness_61 * perceptualRoughness_62) * 0.28));
					  mediump float x_76;
					  x_76 = (1.0 - tmpvar_68);
					  mediump vec3 tmpvar_77;
					  tmpvar_77 = mix (tmpvar_52, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_53)
					  ), 0.0, 1.0)), vec3(((x_76 * x_76) * (x_76 * x_76))));
					  highp vec3 tmpvar_78;
					  tmpvar_78 = (((
					    ((diffColor_56 + (tmpvar_75 * tmpvar_52)) * tmpvar_40)
					   * tmpvar_65) + (tmpvar_41 * diffColor_56)) + ((surfaceReduction_58 * tmpvar_39) * tmpvar_77));
					  color_57 = tmpvar_78;
					  mediump vec4 tmpvar_79;
					  tmpvar_79.w = 1.0;
					  tmpvar_79.xyz = color_57;
					  c_48.xyz = tmpvar_79.xyz;
					  c_48.w = alpha_55;
					  c_6 = c_48;
					  c_6.xyz = (c_6.xyz + tmpvar_14);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					  xlv_TEXCOORD6 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp float atten_7;
					  lowp vec3 lightDir_8;
					  highp vec4 tmpvar_9;
					  mediump vec3 tmpvar_10;
					  tmpvar_10 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_11 = normalize(tmpvar_12);
					  tmpvar_9 = xlv_COLOR0;
					  lowp vec3 tmpvar_13;
					  mediump vec3 tmpvar_14;
					  lowp float tmpvar_15;
					  highp vec4 emissionSample_16;
					  highp vec4 diffuseSample_17;
					  highp vec4 nightSample_18;
					  highp vec4 daySample_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_19 = tmpvar_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_18 = tmpvar_21;
					  diffuseSample_17 = (mix (nightSample_18, daySample_19, vec4(_DayWeight)) * _Color);
					  diffuseSample_17.xyz = (diffuseSample_17.xyz * tmpvar_9.xyz);
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_16 = tmpvar_22;
					  highp vec3 tmpvar_23;
					  tmpvar_23 = ((emissionSample_16.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_13 = diffuseSample_17.xyz;
					  tmpvar_14 = tmpvar_23;
					  tmpvar_15 = diffuseSample_17.w;
					  mediump float realtimeShadowAttenuation_24;
					  highp vec4 v_25;
					  v_25.x = unity_MatrixV[0].z;
					  v_25.y = unity_MatrixV[1].z;
					  v_25.z = unity_MatrixV[2].z;
					  v_25.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_27;
					  highp float tmpvar_28;
					  tmpvar_28 = clamp (((
					    mix (dot (tmpvar_12, v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_27 = tmpvar_28;
					  lowp float tmpvar_29;
					  highp float lightShadowDataX_30;
					  mediump float tmpvar_31;
					  tmpvar_31 = _LightShadowData.x;
					  lightShadowDataX_30 = tmpvar_31;
					  highp float tmpvar_32;
					  tmpvar_32 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_30);
					  tmpvar_29 = tmpvar_32;
					  realtimeShadowAttenuation_24 = tmpvar_29;
					  mediump float tmpvar_33;
					  tmpvar_33 = mix (realtimeShadowAttenuation_24, 1.0, tmpvar_27);
					  atten_7 = tmpvar_33;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_8;
					  tmpvar_1 = tmpvar_11;
					  tmpvar_2 = atten_7;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_34;
					  Normal_34 = xlv_TEXCOORD1;
					  mediump float tmpvar_35;
					  highp float tmpvar_36;
					  highp float smoothness_37;
					  smoothness_37 = _Glossiness;
					  tmpvar_36 = (1.0 - smoothness_37);
					  tmpvar_35 = tmpvar_36;
					  mediump vec3 I_38;
					  I_38 = -(tmpvar_1);
					  mediump vec3 tmpvar_39;
					  mediump vec3 tmpvar_40;
					  mediump vec3 tmpvar_41;
					  tmpvar_40 = (tmpvar_4 * tmpvar_2);
					  lowp vec4 tmpvar_42;
					  tmpvar_42 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
					  tmpvar_41 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_42.w) * tmpvar_42.xyz), unity_DynamicLightmap_HDR.yyy);
					  mediump vec4 hdr_43;
					  hdr_43 = tmpvar_3;
					  mediump vec4 tmpvar_44;
					  tmpvar_44.xyz = (I_38 - (2.0 * (
					    dot (Normal_34, I_38)
					   * Normal_34)));
					  tmpvar_44.w = ((tmpvar_35 * (1.7 - 
					    (0.7 * tmpvar_35)
					  )) * 6.0);
					  lowp vec4 tmpvar_45;
					  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_44.xyz, tmpvar_44.w);
					  mediump vec4 tmpvar_46;
					  tmpvar_46 = tmpvar_45;
					  tmpvar_39 = ((hdr_43.x * (
					    (hdr_43.w * (tmpvar_46.w - 1.0))
					   + 1.0)) * tmpvar_46.xyz);
					  tmpvar_4 = tmpvar_40;
					  lowp vec3 tmpvar_47;
					  mediump vec4 c_48;
					  highp vec3 tmpvar_49;
					  tmpvar_49 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_50;
					  mediump vec3 albedo_51;
					  albedo_51 = tmpvar_13;
					  mediump vec3 tmpvar_52;
					  tmpvar_52 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_51, vec3(_Metallic));
					  mediump float tmpvar_53;
					  tmpvar_53 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_50 = (albedo_51 * tmpvar_53);
					  tmpvar_47 = tmpvar_50;
					  mediump vec3 diffColor_54;
					  diffColor_54 = tmpvar_47;
					  mediump float alpha_55;
					  alpha_55 = tmpvar_15;
					  tmpvar_47 = diffColor_54;
					  mediump vec3 diffColor_56;
					  diffColor_56 = tmpvar_47;
					  mediump vec3 color_57;
					  mediump float surfaceReduction_58;
					  highp float specularTerm_59;
					  highp float a2_60;
					  mediump float roughness_61;
					  mediump float perceptualRoughness_62;
					  highp vec3 tmpvar_63;
					  highp vec3 inVec_64;
					  inVec_64 = (tmpvar_5 + tmpvar_11);
					  tmpvar_63 = (inVec_64 * inversesqrt(max (0.001, 
					    dot (inVec_64, inVec_64)
					  )));
					  mediump float tmpvar_65;
					  highp float tmpvar_66;
					  tmpvar_66 = clamp (dot (tmpvar_49, tmpvar_5), 0.0, 1.0);
					  tmpvar_65 = tmpvar_66;
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (dot (tmpvar_49, tmpvar_63), 0.0, 1.0);
					  mediump float tmpvar_68;
					  highp float tmpvar_69;
					  tmpvar_69 = clamp (dot (tmpvar_49, tmpvar_11), 0.0, 1.0);
					  tmpvar_68 = tmpvar_69;
					  highp float tmpvar_70;
					  highp float smoothness_71;
					  smoothness_71 = _Glossiness;
					  tmpvar_70 = (1.0 - smoothness_71);
					  perceptualRoughness_62 = tmpvar_70;
					  highp float tmpvar_72;
					  highp float perceptualRoughness_73;
					  perceptualRoughness_73 = perceptualRoughness_62;
					  tmpvar_72 = (perceptualRoughness_73 * perceptualRoughness_73);
					  roughness_61 = tmpvar_72;
					  mediump float tmpvar_74;
					  tmpvar_74 = (roughness_61 * roughness_61);
					  a2_60 = tmpvar_74;
					  specularTerm_59 = ((roughness_61 / (
					    (max (0.32, clamp (dot (tmpvar_5, tmpvar_63), 0.0, 1.0)) * (1.5 + roughness_61))
					   * 
					    (((tmpvar_67 * tmpvar_67) * (a2_60 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_75;
					  tmpvar_75 = clamp (specularTerm_59, 0.0, 100.0);
					  specularTerm_59 = tmpvar_75;
					  surfaceReduction_58 = (1.0 - ((roughness_61 * perceptualRoughness_62) * 0.28));
					  mediump float x_76;
					  x_76 = (1.0 - tmpvar_68);
					  mediump vec3 tmpvar_77;
					  tmpvar_77 = mix (tmpvar_52, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_53)
					  ), 0.0, 1.0)), vec3(((x_76 * x_76) * (x_76 * x_76))));
					  highp vec3 tmpvar_78;
					  tmpvar_78 = (((
					    ((diffColor_56 + (tmpvar_75 * tmpvar_52)) * tmpvar_40)
					   * tmpvar_65) + (tmpvar_41 * diffColor_56)) + ((surfaceReduction_58 * tmpvar_39) * tmpvar_77));
					  color_57 = tmpvar_78;
					  mediump vec4 tmpvar_79;
					  tmpvar_79.w = 1.0;
					  tmpvar_79.xyz = color_57;
					  c_48.xyz = tmpvar_79.xyz;
					  c_48.w = alpha_55;
					  c_6 = c_48;
					  c_6.xyz = (c_6.xyz + tmpvar_14);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					mediump float u_xlat16_9;
					mediump float u_xlat16_10;
					float u_xlat27;
					mediump float u_xlat16_28;
					float u_xlat29;
					mediump float u_xlat16_32;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat10_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat10_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_10 = (-u_xlat16_1.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat9.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_10 + u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat16_28 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
					    u_xlat16_3.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat0.xyz);
					    u_xlat4.z = (-_Glossiness) + 1.0;
					    u_xlat16_28 = (-u_xlat4.z) * 0.699999988 + 1.70000005;
					    u_xlat16_28 = u_xlat16_28 * u_xlat4.z;
					    u_xlat16_28 = u_xlat16_28 * 6.0;
					    u_xlat10_3 = textureLod(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_28);
					    u_xlat16_28 = u_xlat10_3.w + -1.0;
					    u_xlat16_28 = unity_SpecCube0_HDR.w * u_xlat16_28 + 1.0;
					    u_xlat16_28 = u_xlat16_28 * unity_SpecCube0_HDR.x;
					    u_xlat16_5.xyz = u_xlat10_3.xyz * vec3(u_xlat16_28);
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat29 = u_xlat27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat0.xyz = u_xlat2.xyz * (-vec3(u_xlat27)) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat4.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat4.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_28 = (-u_xlat29) + 1.0;
					    u_xlat16_9 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_9 = u_xlat16_28 * u_xlat16_9;
					    u_xlat16_9 = u_xlat16_28 * u_xlat16_9;
					    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_2.xyz + (-u_xlat10_4.xyz);
					    u_xlat2.xyz = vec3(_DayWeight) * u_xlat16_2.xyz + u_xlat10_4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_28 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_32 = (-u_xlat16_28) + _Glossiness;
					    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat2.xyz;
					    u_xlat16_28 = u_xlat16_32 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
					#else
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					#endif
					    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_28);
					    u_xlat16_8.xyz = vec3(u_xlat16_9) * u_xlat16_8.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_7.xyz;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_8.xyz;
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat16_28 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_8.xyz = u_xlat10_0.xyz * vec3(u_xlat16_28);
					    u_xlat16_8.xyz = log2(u_xlat16_8.xyz);
					    u_xlat16_8.xyz = u_xlat16_8.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
					    u_xlat16_5.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_5.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_5.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat27 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat27) + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					vec3 u_xlat4;
					lowp vec4 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_18;
					float u_xlat24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat10_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat10_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_9 = (-u_xlat16_1.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat8.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_9 + u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat8.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_26 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_26 * u_xlat16_26 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_3;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat16_10 = u_xlat16_26 * u_xlat16_26;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_10 + -1.0;
					    u_xlat2.x = u_xlat2.x * u_xlat16_18 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat2.x;
					    u_xlat24 = u_xlat16_10 / u_xlat24;
					    u_xlat16_25 = u_xlat16_26 * u_xlat16_10;
					    u_xlat16_25 = (-u_xlat16_25) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_2.xyz + (-u_xlat10_4.xyz);
					    u_xlat2.xyz = vec3(_DayWeight) * u_xlat16_2.xyz + u_xlat10_4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat16_5.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_6.xyz = u_xlat4.xyz * vec3(u_xlat16_29);
					    u_xlat16_29 = (-u_xlat16_29) + _Glossiness;
					    u_xlat16_29 = u_xlat16_29 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
					#else
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_29);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat16_5.xyz + u_xlat16_6.xyz;
					    u_xlat2.xyz = u_xlat16_1.xyz * u_xlat2.xyz;
					    u_xlat10_4 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat16_1.x = u_xlat10_4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_4.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat3.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat16_29 = (-u_xlat3.x) + 1.0;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-u_xlat16_26) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_26;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat16_9 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
					    u_xlat16_6.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_9)) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat10_0.w + -1.0;
					    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_25);
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz + u_xlat2.xyz;
					    u_xlat10_2.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.xyz = u_xlat10_2.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					vec3 u_xlat4;
					lowp vec4 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_18;
					float u_xlat24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat10_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat10_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_9 = (-u_xlat16_1.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat8.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_9 + u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat8.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_26 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_26 * u_xlat16_26 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_3;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat16_10 = u_xlat16_26 * u_xlat16_26;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_10 + -1.0;
					    u_xlat2.x = u_xlat2.x * u_xlat16_18 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat2.x;
					    u_xlat24 = u_xlat16_10 / u_xlat24;
					    u_xlat16_25 = u_xlat16_26 * u_xlat16_10;
					    u_xlat16_25 = (-u_xlat16_25) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_2.xyz + (-u_xlat10_4.xyz);
					    u_xlat2.xyz = vec3(_DayWeight) * u_xlat16_2.xyz + u_xlat10_4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat16_5.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_6.xyz = u_xlat4.xyz * vec3(u_xlat16_29);
					    u_xlat16_29 = (-u_xlat16_29) + _Glossiness;
					    u_xlat16_29 = u_xlat16_29 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
					#else
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_29);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat16_5.xyz + u_xlat16_6.xyz;
					    u_xlat2.xyz = u_xlat16_1.xyz * u_xlat2.xyz;
					    u_xlat10_4 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat16_1.x = u_xlat10_4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_4.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat3.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat16_29 = (-u_xlat3.x) + 1.0;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-u_xlat16_26) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_26;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat16_9 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
					    u_xlat16_6.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_9)) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat10_0.w + -1.0;
					    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_25);
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz + u_xlat2.xyz;
					    u_xlat10_2.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.xyz = u_xlat10_2.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					  xlv_TEXCOORD6 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp float atten_7;
					  lowp vec3 lightDir_8;
					  highp vec4 tmpvar_9;
					  mediump vec3 tmpvar_10;
					  tmpvar_10 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_11 = normalize(tmpvar_12);
					  tmpvar_9 = xlv_COLOR0;
					  lowp vec3 tmpvar_13;
					  mediump vec3 tmpvar_14;
					  lowp float tmpvar_15;
					  highp vec4 emissionSample_16;
					  highp vec4 diffuseSample_17;
					  highp vec4 nightSample_18;
					  highp vec4 daySample_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_19 = tmpvar_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_18 = tmpvar_21;
					  diffuseSample_17 = (mix (nightSample_18, daySample_19, vec4(_DayWeight)) * _Color);
					  diffuseSample_17.xyz = (diffuseSample_17.xyz * tmpvar_9.xyz);
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_16 = tmpvar_22;
					  highp vec3 tmpvar_23;
					  tmpvar_23 = ((emissionSample_16.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_13 = diffuseSample_17.xyz;
					  tmpvar_14 = tmpvar_23;
					  tmpvar_15 = diffuseSample_17.w;
					  mediump float realtimeShadowAttenuation_24;
					  highp vec4 v_25;
					  v_25.x = unity_MatrixV[0].z;
					  v_25.y = unity_MatrixV[1].z;
					  v_25.z = unity_MatrixV[2].z;
					  v_25.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_27;
					  highp float tmpvar_28;
					  tmpvar_28 = clamp (((
					    mix (dot (tmpvar_12, v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_27 = tmpvar_28;
					  lowp float tmpvar_29;
					  highp float lightShadowDataX_30;
					  mediump float tmpvar_31;
					  tmpvar_31 = _LightShadowData.x;
					  lightShadowDataX_30 = tmpvar_31;
					  highp float tmpvar_32;
					  tmpvar_32 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_30);
					  tmpvar_29 = tmpvar_32;
					  realtimeShadowAttenuation_24 = tmpvar_29;
					  mediump float tmpvar_33;
					  tmpvar_33 = mix (realtimeShadowAttenuation_24, 1.0, tmpvar_27);
					  atten_7 = tmpvar_33;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_8;
					  tmpvar_1 = tmpvar_11;
					  tmpvar_2 = atten_7;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_34;
					  Normal_34 = xlv_TEXCOORD1;
					  mediump float tmpvar_35;
					  highp float tmpvar_36;
					  highp float smoothness_37;
					  smoothness_37 = _Glossiness;
					  tmpvar_36 = (1.0 - smoothness_37);
					  tmpvar_35 = tmpvar_36;
					  mediump vec3 I_38;
					  I_38 = -(tmpvar_1);
					  mediump vec3 normalWorld_39;
					  normalWorld_39 = xlv_TEXCOORD1;
					  mediump vec4 realtimeDirTex_40;
					  mediump vec3 tmpvar_41;
					  tmpvar_41 = (tmpvar_4 * tmpvar_2);
					  lowp vec4 tmpvar_42;
					  tmpvar_42 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
					  lowp vec4 tmpvar_43;
					  tmpvar_43 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
					  realtimeDirTex_40 = tmpvar_43;
					  lowp vec4 dirTex_44;
					  dirTex_44 = realtimeDirTex_40;
					  lowp vec3 y_45;
					  y_45 = (dirTex_44.xyz - 0.5);
					  lowp float tmpvar_46;
					  tmpvar_46 = max (0.0001, dirTex_44.w);
					  mediump vec4 hdr_47;
					  hdr_47 = tmpvar_3;
					  mediump vec4 tmpvar_48;
					  tmpvar_48.xyz = (I_38 - (2.0 * (
					    dot (Normal_34, I_38)
					   * Normal_34)));
					  tmpvar_48.w = ((tmpvar_35 * (1.7 - 
					    (0.7 * tmpvar_35)
					  )) * 6.0);
					  lowp vec4 tmpvar_49;
					  tmpvar_49 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_48.xyz, tmpvar_48.w);
					  mediump vec4 tmpvar_50;
					  tmpvar_50 = tmpvar_49;
					  tmpvar_4 = tmpvar_41;
					  lowp vec3 tmpvar_51;
					  mediump vec4 c_52;
					  highp vec3 tmpvar_53;
					  tmpvar_53 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_54;
					  mediump vec3 albedo_55;
					  albedo_55 = tmpvar_13;
					  mediump vec3 tmpvar_56;
					  tmpvar_56 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_55, vec3(_Metallic));
					  mediump float tmpvar_57;
					  tmpvar_57 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_54 = (albedo_55 * tmpvar_57);
					  tmpvar_51 = tmpvar_54;
					  mediump vec3 diffColor_58;
					  diffColor_58 = tmpvar_51;
					  mediump float alpha_59;
					  alpha_59 = tmpvar_15;
					  tmpvar_51 = diffColor_58;
					  mediump vec3 diffColor_60;
					  diffColor_60 = tmpvar_51;
					  mediump vec3 color_61;
					  mediump vec2 rlPow4AndFresnelTerm_62;
					  mediump float tmpvar_63;
					  highp float tmpvar_64;
					  tmpvar_64 = clamp (dot (tmpvar_53, tmpvar_5), 0.0, 1.0);
					  tmpvar_63 = tmpvar_64;
					  mediump float tmpvar_65;
					  highp float tmpvar_66;
					  tmpvar_66 = clamp (dot (tmpvar_53, tmpvar_11), 0.0, 1.0);
					  tmpvar_65 = tmpvar_66;
					  highp vec2 tmpvar_67;
					  tmpvar_67.x = dot ((tmpvar_11 - (2.0 * 
					    (dot (tmpvar_53, tmpvar_11) * tmpvar_53)
					  )), tmpvar_5);
					  tmpvar_67.y = (1.0 - tmpvar_65);
					  highp vec2 tmpvar_68;
					  tmpvar_68 = ((tmpvar_67 * tmpvar_67) * (tmpvar_67 * tmpvar_67));
					  rlPow4AndFresnelTerm_62 = tmpvar_68;
					  mediump float tmpvar_69;
					  tmpvar_69 = rlPow4AndFresnelTerm_62.x;
					  mediump float specular_70;
					  highp float smoothness_71;
					  smoothness_71 = _Glossiness;
					  highp vec2 tmpvar_72;
					  tmpvar_72.x = tmpvar_69;
					  tmpvar_72.y = (1.0 - smoothness_71);
					  highp float tmpvar_73;
					  tmpvar_73 = (texture2D (unity_NHxRoughness, tmpvar_72).x * 16.0);
					  specular_70 = tmpvar_73;
					  color_61 = ((diffColor_60 + (specular_70 * tmpvar_56)) * (tmpvar_41 * tmpvar_63));
					  color_61 = (color_61 + ((
					    ((pow ((
					      (unity_DynamicLightmap_HDR.x * tmpvar_42.w)
					     * tmpvar_42.xyz), unity_DynamicLightmap_HDR.yyy) * (dot (normalWorld_39, y_45) + 0.5)) / tmpvar_46)
					   * diffColor_60) + (
					    ((hdr_47.x * ((hdr_47.w * 
					      (tmpvar_50.w - 1.0)
					    ) + 1.0)) * tmpvar_50.xyz)
					   * 
					    mix (tmpvar_56, vec3(clamp ((_Glossiness + (1.0 - tmpvar_57)), 0.0, 1.0)), rlPow4AndFresnelTerm_62.yyy)
					  )));
					  mediump vec4 tmpvar_74;
					  tmpvar_74.w = 1.0;
					  tmpvar_74.xyz = color_61;
					  c_52.xyz = tmpvar_74.xyz;
					  c_52.w = alpha_59;
					  c_6 = c_52;
					  c_6.xyz = (c_6.xyz + tmpvar_14);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					  xlv_TEXCOORD6 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp float atten_7;
					  lowp vec3 lightDir_8;
					  highp vec4 tmpvar_9;
					  mediump vec3 tmpvar_10;
					  tmpvar_10 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_11 = normalize(tmpvar_12);
					  tmpvar_9 = xlv_COLOR0;
					  lowp vec3 tmpvar_13;
					  mediump vec3 tmpvar_14;
					  lowp float tmpvar_15;
					  highp vec4 emissionSample_16;
					  highp vec4 diffuseSample_17;
					  highp vec4 nightSample_18;
					  highp vec4 daySample_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_19 = tmpvar_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_18 = tmpvar_21;
					  diffuseSample_17 = (mix (nightSample_18, daySample_19, vec4(_DayWeight)) * _Color);
					  diffuseSample_17.xyz = (diffuseSample_17.xyz * tmpvar_9.xyz);
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_16 = tmpvar_22;
					  highp vec3 tmpvar_23;
					  tmpvar_23 = ((emissionSample_16.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_13 = diffuseSample_17.xyz;
					  tmpvar_14 = tmpvar_23;
					  tmpvar_15 = diffuseSample_17.w;
					  mediump float realtimeShadowAttenuation_24;
					  highp vec4 v_25;
					  v_25.x = unity_MatrixV[0].z;
					  v_25.y = unity_MatrixV[1].z;
					  v_25.z = unity_MatrixV[2].z;
					  v_25.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_27;
					  highp float tmpvar_28;
					  tmpvar_28 = clamp (((
					    mix (dot (tmpvar_12, v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_27 = tmpvar_28;
					  lowp float tmpvar_29;
					  highp float lightShadowDataX_30;
					  mediump float tmpvar_31;
					  tmpvar_31 = _LightShadowData.x;
					  lightShadowDataX_30 = tmpvar_31;
					  highp float tmpvar_32;
					  tmpvar_32 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_30);
					  tmpvar_29 = tmpvar_32;
					  realtimeShadowAttenuation_24 = tmpvar_29;
					  mediump float tmpvar_33;
					  tmpvar_33 = mix (realtimeShadowAttenuation_24, 1.0, tmpvar_27);
					  atten_7 = tmpvar_33;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_8;
					  tmpvar_1 = tmpvar_11;
					  tmpvar_2 = atten_7;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_34;
					  Normal_34 = xlv_TEXCOORD1;
					  mediump float tmpvar_35;
					  highp float tmpvar_36;
					  highp float smoothness_37;
					  smoothness_37 = _Glossiness;
					  tmpvar_36 = (1.0 - smoothness_37);
					  tmpvar_35 = tmpvar_36;
					  mediump vec3 I_38;
					  I_38 = -(tmpvar_1);
					  mediump vec3 normalWorld_39;
					  normalWorld_39 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_40;
					  mediump vec4 realtimeDirTex_41;
					  mediump vec3 tmpvar_42;
					  mediump vec3 tmpvar_43;
					  tmpvar_42 = (tmpvar_4 * tmpvar_2);
					  lowp vec4 tmpvar_44;
					  tmpvar_44 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
					  lowp vec4 tmpvar_45;
					  tmpvar_45 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
					  realtimeDirTex_41 = tmpvar_45;
					  lowp vec4 dirTex_46;
					  dirTex_46 = realtimeDirTex_41;
					  lowp vec3 y_47;
					  y_47 = (dirTex_46.xyz - 0.5);
					  lowp float tmpvar_48;
					  tmpvar_48 = max (0.0001, dirTex_46.w);
					  tmpvar_43 = ((pow (
					    ((unity_DynamicLightmap_HDR.x * tmpvar_44.w) * tmpvar_44.xyz)
					  , unity_DynamicLightmap_HDR.yyy) * (
					    dot (normalWorld_39, y_47)
					   + 0.5)) / tmpvar_48);
					  mediump vec4 hdr_49;
					  hdr_49 = tmpvar_3;
					  mediump vec4 tmpvar_50;
					  tmpvar_50.xyz = (I_38 - (2.0 * (
					    dot (Normal_34, I_38)
					   * Normal_34)));
					  tmpvar_50.w = ((tmpvar_35 * (1.7 - 
					    (0.7 * tmpvar_35)
					  )) * 6.0);
					  lowp vec4 tmpvar_51;
					  tmpvar_51 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_50.xyz, tmpvar_50.w);
					  mediump vec4 tmpvar_52;
					  tmpvar_52 = tmpvar_51;
					  tmpvar_40 = ((hdr_49.x * (
					    (hdr_49.w * (tmpvar_52.w - 1.0))
					   + 1.0)) * tmpvar_52.xyz);
					  tmpvar_4 = tmpvar_42;
					  lowp vec3 tmpvar_53;
					  mediump vec4 c_54;
					  highp vec3 tmpvar_55;
					  tmpvar_55 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_56;
					  mediump vec3 albedo_57;
					  albedo_57 = tmpvar_13;
					  mediump vec3 tmpvar_58;
					  tmpvar_58 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_57, vec3(_Metallic));
					  mediump float tmpvar_59;
					  tmpvar_59 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_56 = (albedo_57 * tmpvar_59);
					  tmpvar_53 = tmpvar_56;
					  mediump vec3 diffColor_60;
					  diffColor_60 = tmpvar_53;
					  mediump float alpha_61;
					  alpha_61 = tmpvar_15;
					  tmpvar_53 = diffColor_60;
					  mediump vec3 diffColor_62;
					  diffColor_62 = tmpvar_53;
					  mediump vec3 color_63;
					  mediump float surfaceReduction_64;
					  highp float specularTerm_65;
					  highp float a2_66;
					  mediump float roughness_67;
					  mediump float perceptualRoughness_68;
					  highp vec3 tmpvar_69;
					  highp vec3 inVec_70;
					  inVec_70 = (tmpvar_5 + tmpvar_11);
					  tmpvar_69 = (inVec_70 * inversesqrt(max (0.001, 
					    dot (inVec_70, inVec_70)
					  )));
					  mediump float tmpvar_71;
					  highp float tmpvar_72;
					  tmpvar_72 = clamp (dot (tmpvar_55, tmpvar_5), 0.0, 1.0);
					  tmpvar_71 = tmpvar_72;
					  highp float tmpvar_73;
					  tmpvar_73 = clamp (dot (tmpvar_55, tmpvar_69), 0.0, 1.0);
					  mediump float tmpvar_74;
					  highp float tmpvar_75;
					  tmpvar_75 = clamp (dot (tmpvar_55, tmpvar_11), 0.0, 1.0);
					  tmpvar_74 = tmpvar_75;
					  highp float tmpvar_76;
					  highp float smoothness_77;
					  smoothness_77 = _Glossiness;
					  tmpvar_76 = (1.0 - smoothness_77);
					  perceptualRoughness_68 = tmpvar_76;
					  highp float tmpvar_78;
					  highp float perceptualRoughness_79;
					  perceptualRoughness_79 = perceptualRoughness_68;
					  tmpvar_78 = (perceptualRoughness_79 * perceptualRoughness_79);
					  roughness_67 = tmpvar_78;
					  mediump float tmpvar_80;
					  tmpvar_80 = (roughness_67 * roughness_67);
					  a2_66 = tmpvar_80;
					  specularTerm_65 = ((roughness_67 / (
					    (max (0.32, clamp (dot (tmpvar_5, tmpvar_69), 0.0, 1.0)) * (1.5 + roughness_67))
					   * 
					    (((tmpvar_73 * tmpvar_73) * (a2_66 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_81;
					  tmpvar_81 = clamp (specularTerm_65, 0.0, 100.0);
					  specularTerm_65 = tmpvar_81;
					  surfaceReduction_64 = (1.0 - ((roughness_67 * perceptualRoughness_68) * 0.28));
					  mediump float x_82;
					  x_82 = (1.0 - tmpvar_74);
					  mediump vec3 tmpvar_83;
					  tmpvar_83 = mix (tmpvar_58, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_59)
					  ), 0.0, 1.0)), vec3(((x_82 * x_82) * (x_82 * x_82))));
					  highp vec3 tmpvar_84;
					  tmpvar_84 = (((
					    ((diffColor_62 + (tmpvar_81 * tmpvar_58)) * tmpvar_42)
					   * tmpvar_71) + (tmpvar_43 * diffColor_62)) + ((surfaceReduction_64 * tmpvar_40) * tmpvar_83));
					  color_63 = tmpvar_84;
					  mediump vec4 tmpvar_85;
					  tmpvar_85.w = 1.0;
					  tmpvar_85.xyz = color_63;
					  c_54.xyz = tmpvar_85.xyz;
					  c_54.w = alpha_61;
					  c_6 = c_54;
					  c_6.xyz = (c_6.xyz + tmpvar_14);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_4;
					  tmpvar_4[0] = unity_WorldToObject[0].xyz;
					  tmpvar_4[1] = unity_WorldToObject[1].xyz;
					  tmpvar_4[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = tmpvar_5.xyz;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
					  xlv_TEXCOORD2 = tmpvar_1;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
					  xlv_TEXCOORD6 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump float tmpvar_2;
					  highp vec4 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  lowp vec4 c_6;
					  lowp float atten_7;
					  lowp vec3 lightDir_8;
					  highp vec4 tmpvar_9;
					  mediump vec3 tmpvar_10;
					  tmpvar_10 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
					  tmpvar_11 = normalize(tmpvar_12);
					  tmpvar_9 = xlv_COLOR0;
					  lowp vec3 tmpvar_13;
					  mediump vec3 tmpvar_14;
					  lowp float tmpvar_15;
					  highp vec4 emissionSample_16;
					  highp vec4 diffuseSample_17;
					  highp vec4 nightSample_18;
					  highp vec4 daySample_19;
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_19 = tmpvar_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_18 = tmpvar_21;
					  diffuseSample_17 = (mix (nightSample_18, daySample_19, vec4(_DayWeight)) * _Color);
					  diffuseSample_17.xyz = (diffuseSample_17.xyz * tmpvar_9.xyz);
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_16 = tmpvar_22;
					  highp vec3 tmpvar_23;
					  tmpvar_23 = ((emissionSample_16.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_13 = diffuseSample_17.xyz;
					  tmpvar_14 = tmpvar_23;
					  tmpvar_15 = diffuseSample_17.w;
					  mediump float realtimeShadowAttenuation_24;
					  highp vec4 v_25;
					  v_25.x = unity_MatrixV[0].z;
					  v_25.y = unity_MatrixV[1].z;
					  v_25.z = unity_MatrixV[2].z;
					  v_25.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_27;
					  highp float tmpvar_28;
					  tmpvar_28 = clamp (((
					    mix (dot (tmpvar_12, v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_27 = tmpvar_28;
					  lowp float tmpvar_29;
					  highp float lightShadowDataX_30;
					  mediump float tmpvar_31;
					  tmpvar_31 = _LightShadowData.x;
					  lightShadowDataX_30 = tmpvar_31;
					  highp float tmpvar_32;
					  tmpvar_32 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_30);
					  tmpvar_29 = tmpvar_32;
					  realtimeShadowAttenuation_24 = tmpvar_29;
					  mediump float tmpvar_33;
					  tmpvar_33 = mix (realtimeShadowAttenuation_24, 1.0, tmpvar_27);
					  atten_7 = tmpvar_33;
					  tmpvar_4 = _LightColor0.xyz;
					  tmpvar_5 = lightDir_8;
					  tmpvar_1 = tmpvar_11;
					  tmpvar_2 = atten_7;
					  tmpvar_3 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_34;
					  Normal_34 = xlv_TEXCOORD1;
					  mediump float tmpvar_35;
					  highp float tmpvar_36;
					  highp float smoothness_37;
					  smoothness_37 = _Glossiness;
					  tmpvar_36 = (1.0 - smoothness_37);
					  tmpvar_35 = tmpvar_36;
					  mediump vec3 I_38;
					  I_38 = -(tmpvar_1);
					  mediump vec3 normalWorld_39;
					  normalWorld_39 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_40;
					  mediump vec4 realtimeDirTex_41;
					  mediump vec3 tmpvar_42;
					  mediump vec3 tmpvar_43;
					  tmpvar_42 = (tmpvar_4 * tmpvar_2);
					  lowp vec4 tmpvar_44;
					  tmpvar_44 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
					  lowp vec4 tmpvar_45;
					  tmpvar_45 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
					  realtimeDirTex_41 = tmpvar_45;
					  lowp vec4 dirTex_46;
					  dirTex_46 = realtimeDirTex_41;
					  lowp vec3 y_47;
					  y_47 = (dirTex_46.xyz - 0.5);
					  lowp float tmpvar_48;
					  tmpvar_48 = max (0.0001, dirTex_46.w);
					  tmpvar_43 = ((pow (
					    ((unity_DynamicLightmap_HDR.x * tmpvar_44.w) * tmpvar_44.xyz)
					  , unity_DynamicLightmap_HDR.yyy) * (
					    dot (normalWorld_39, y_47)
					   + 0.5)) / tmpvar_48);
					  mediump vec4 hdr_49;
					  hdr_49 = tmpvar_3;
					  mediump vec4 tmpvar_50;
					  tmpvar_50.xyz = (I_38 - (2.0 * (
					    dot (Normal_34, I_38)
					   * Normal_34)));
					  tmpvar_50.w = ((tmpvar_35 * (1.7 - 
					    (0.7 * tmpvar_35)
					  )) * 6.0);
					  lowp vec4 tmpvar_51;
					  tmpvar_51 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_50.xyz, tmpvar_50.w);
					  mediump vec4 tmpvar_52;
					  tmpvar_52 = tmpvar_51;
					  tmpvar_40 = ((hdr_49.x * (
					    (hdr_49.w * (tmpvar_52.w - 1.0))
					   + 1.0)) * tmpvar_52.xyz);
					  tmpvar_4 = tmpvar_42;
					  lowp vec3 tmpvar_53;
					  mediump vec4 c_54;
					  highp vec3 tmpvar_55;
					  tmpvar_55 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_56;
					  mediump vec3 albedo_57;
					  albedo_57 = tmpvar_13;
					  mediump vec3 tmpvar_58;
					  tmpvar_58 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_57, vec3(_Metallic));
					  mediump float tmpvar_59;
					  tmpvar_59 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_56 = (albedo_57 * tmpvar_59);
					  tmpvar_53 = tmpvar_56;
					  mediump vec3 diffColor_60;
					  diffColor_60 = tmpvar_53;
					  mediump float alpha_61;
					  alpha_61 = tmpvar_15;
					  tmpvar_53 = diffColor_60;
					  mediump vec3 diffColor_62;
					  diffColor_62 = tmpvar_53;
					  mediump vec3 color_63;
					  mediump float surfaceReduction_64;
					  highp float specularTerm_65;
					  highp float a2_66;
					  mediump float roughness_67;
					  mediump float perceptualRoughness_68;
					  highp vec3 tmpvar_69;
					  highp vec3 inVec_70;
					  inVec_70 = (tmpvar_5 + tmpvar_11);
					  tmpvar_69 = (inVec_70 * inversesqrt(max (0.001, 
					    dot (inVec_70, inVec_70)
					  )));
					  mediump float tmpvar_71;
					  highp float tmpvar_72;
					  tmpvar_72 = clamp (dot (tmpvar_55, tmpvar_5), 0.0, 1.0);
					  tmpvar_71 = tmpvar_72;
					  highp float tmpvar_73;
					  tmpvar_73 = clamp (dot (tmpvar_55, tmpvar_69), 0.0, 1.0);
					  mediump float tmpvar_74;
					  highp float tmpvar_75;
					  tmpvar_75 = clamp (dot (tmpvar_55, tmpvar_11), 0.0, 1.0);
					  tmpvar_74 = tmpvar_75;
					  highp float tmpvar_76;
					  highp float smoothness_77;
					  smoothness_77 = _Glossiness;
					  tmpvar_76 = (1.0 - smoothness_77);
					  perceptualRoughness_68 = tmpvar_76;
					  highp float tmpvar_78;
					  highp float perceptualRoughness_79;
					  perceptualRoughness_79 = perceptualRoughness_68;
					  tmpvar_78 = (perceptualRoughness_79 * perceptualRoughness_79);
					  roughness_67 = tmpvar_78;
					  mediump float tmpvar_80;
					  tmpvar_80 = (roughness_67 * roughness_67);
					  a2_66 = tmpvar_80;
					  specularTerm_65 = ((roughness_67 / (
					    (max (0.32, clamp (dot (tmpvar_5, tmpvar_69), 0.0, 1.0)) * (1.5 + roughness_67))
					   * 
					    (((tmpvar_73 * tmpvar_73) * (a2_66 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_81;
					  tmpvar_81 = clamp (specularTerm_65, 0.0, 100.0);
					  specularTerm_65 = tmpvar_81;
					  surfaceReduction_64 = (1.0 - ((roughness_67 * perceptualRoughness_68) * 0.28));
					  mediump float x_82;
					  x_82 = (1.0 - tmpvar_74);
					  mediump vec3 tmpvar_83;
					  tmpvar_83 = mix (tmpvar_58, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_59)
					  ), 0.0, 1.0)), vec3(((x_82 * x_82) * (x_82 * x_82))));
					  highp vec3 tmpvar_84;
					  tmpvar_84 = (((
					    ((diffColor_62 + (tmpvar_81 * tmpvar_58)) * tmpvar_42)
					   * tmpvar_71) + (tmpvar_43 * diffColor_62)) + ((surfaceReduction_64 * tmpvar_40) * tmpvar_83));
					  color_63 = tmpvar_84;
					  mediump vec4 tmpvar_85;
					  tmpvar_85.w = 1.0;
					  tmpvar_85.xyz = color_63;
					  c_54.xyz = tmpvar_85.xyz;
					  c_54.w = alpha_61;
					  c_6 = c_54;
					  c_6.xyz = (c_6.xyz + tmpvar_14);
					  c_6.w = 1.0;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					lowp vec3 u_xlat10_5;
					vec3 u_xlat6;
					lowp vec3 u_xlat10_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					float u_xlat10;
					lowp float u_xlat10_10;
					mediump vec3 u_xlat16_11;
					float u_xlat13;
					mediump float u_xlat16_13;
					float u_xlat30;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					float u_xlat33;
					mediump float u_xlat16_37;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat16_31 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_31 = u_xlat16_31 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
					    u_xlat3.z = (-_Glossiness) + 1.0;
					    u_xlat16_1.x = (-u_xlat3.z) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat3.z;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat5.xyz = vec3(u_xlat30) * u_xlat4.xyz;
					    u_xlat16_11.x = dot((-u_xlat5.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;
					    u_xlat16_11.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_11.xxx) + (-u_xlat5.xyz);
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_1.x);
					    u_xlat16_2.x = u_xlat10_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_1.xyz * u_xlat16_2.xxx;
					    u_xlat30 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat6.xyz = vec3(u_xlat30) * vs_TEXCOORD1.xyz;
					    u_xlat30 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat13 = u_xlat30;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
					#else
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					#endif
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat5.xyz = u_xlat6.xyz * (-vec3(u_xlat30)) + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat33 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat33 = u_xlat33 * u_xlat33;
					    u_xlat3.x = u_xlat33 * u_xlat33;
					    u_xlat3.x = texture(unity_NHxRoughness, u_xlat3.xz).x;
					    u_xlat3.x = u_xlat3.x * 16.0;
					    u_xlat16_32 = (-u_xlat13) + 1.0;
					    u_xlat16_13 = u_xlat16_32 * u_xlat16_32;
					    u_xlat16_13 = u_xlat16_32 * u_xlat16_13;
					    u_xlat16_13 = u_xlat16_32 * u_xlat16_13;
					    u_xlat10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_6.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_5.xyz = u_xlat10_5.xyz + (-u_xlat10_6.xyz);
					    u_xlat5.xyz = vec3(_DayWeight) * u_xlat16_5.xyz + u_xlat10_6.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat16_7.xyz = u_xlat5.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat5.xyz = u_xlat5.xyz * vs_COLOR0.xyz;
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_37 = (-u_xlat16_32) + _Glossiness;
					    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat5.xyz;
					    u_xlat16_32 = u_xlat16_37 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
					#else
					    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_32);
					    u_xlat16_9.xyz = vec3(u_xlat16_13) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat3.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat10 = (-u_xlat0.x) + u_xlat10;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat10 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat10_10 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_32 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_32 = u_xlat10_10 * u_xlat16_32 + _LightShadowData.x;
					    u_xlat16_37 = (-u_xlat16_32) + 1.0;
					    u_xlat16_32 = u_xlat0.x * u_xlat16_37 + u_xlat16_32;
					    u_xlat16_8.xyz = vec3(u_xlat16_32) * _LightColor0.xyz;
					    u_xlat16_8.xyz = vec3(u_xlat30) * u_xlat16_8.xyz;
					    u_xlat16_2.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat30 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					vec3 u_xlat4;
					mediump float u_xlat16_4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump vec3 u_xlat16_10;
					mediump float u_xlat16_11;
					mediump float u_xlat16_19;
					float u_xlat24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_25 = u_xlat16_25 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_25) * u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
					    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_3.xyz + (-u_xlat10_4.xyz);
					    u_xlat3.xyz = vec3(_DayWeight) * u_xlat16_3.xyz + u_xlat10_4.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat16_1.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat4.xyz;
					    u_xlat16_25 = (-u_xlat16_25) + _Glossiness;
					    u_xlat16_25 = u_xlat16_25 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + vec3(u_xlat16_25);
					    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat10_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_25 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_25 = u_xlat10_0.x * u_xlat16_25 + _LightShadowData.x;
					    u_xlat16_26 = (-u_xlat16_25) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3.x = dot(u_xlat8.xyz, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat3.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat3.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat0.x * u_xlat16_26 + u_xlat16_25;
					    u_xlat16_7.xyz = vec3(u_xlat16_25) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat8.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_27 = (-_Glossiness) + 1.0;
					    u_xlat16_4 = u_xlat16_27 * u_xlat16_27 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_4;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = inversesqrt(u_xlat4.x);
					    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat3.x = dot(u_xlat4.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16_11 = u_xlat16_27 * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_11 * u_xlat16_11 + -1.0;
					    u_xlat3.x = u_xlat3.x * u_xlat16_19 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat3.x;
					    u_xlat24 = u_xlat16_11 / u_xlat24;
					    u_xlat16_25 = u_xlat16_27 * u_xlat16_11;
					    u_xlat16_25 = (-u_xlat16_25) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat3.xyz = vec3(u_xlat24) * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat3.xyz = u_xlat16_7.xyz * u_xlat3.xyz;
					    u_xlat24 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_1.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat16_6.xyz;
					    u_xlat16_2.x = (-u_xlat16_27) * 0.699999988 + 1.70000005;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_27;
					    u_xlat16_2.x = u_xlat16_2.x * 6.0;
					    u_xlat16_10.x = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_10.x = u_xlat16_10.x + u_xlat16_10.x;
					    u_xlat16_10.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_10.xxx) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat10_0.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat3.xyz;
					    u_xlat10_3.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.xyz = u_xlat10_3.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					vec3 u_xlat4;
					mediump float u_xlat16_4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump vec3 u_xlat16_10;
					mediump float u_xlat16_11;
					mediump float u_xlat16_19;
					float u_xlat24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_25 = u_xlat16_25 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_25) * u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
					    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_4.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_3.xyz + (-u_xlat10_4.xyz);
					    u_xlat3.xyz = vec3(_DayWeight) * u_xlat16_3.xyz + u_xlat10_4.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat16_1.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat4.xyz;
					    u_xlat16_25 = (-u_xlat16_25) + _Glossiness;
					    u_xlat16_25 = u_xlat16_25 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + vec3(u_xlat16_25);
					    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat10_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_25 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_25 = u_xlat10_0.x * u_xlat16_25 + _LightShadowData.x;
					    u_xlat16_26 = (-u_xlat16_25) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3.x = dot(u_xlat8.xyz, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat3.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat3.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat0.x * u_xlat16_26 + u_xlat16_25;
					    u_xlat16_7.xyz = vec3(u_xlat16_25) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat8.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_27 = (-_Glossiness) + 1.0;
					    u_xlat16_4 = u_xlat16_27 * u_xlat16_27 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_4;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = inversesqrt(u_xlat4.x);
					    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat3.x = dot(u_xlat4.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16_11 = u_xlat16_27 * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_11 * u_xlat16_11 + -1.0;
					    u_xlat3.x = u_xlat3.x * u_xlat16_19 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat3.x;
					    u_xlat24 = u_xlat16_11 / u_xlat24;
					    u_xlat16_25 = u_xlat16_27 * u_xlat16_11;
					    u_xlat16_25 = (-u_xlat16_25) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat3.xyz = vec3(u_xlat24) * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat3.xyz = u_xlat16_7.xyz * u_xlat3.xyz;
					    u_xlat24 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_1.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat16_6.xyz;
					    u_xlat16_2.x = (-u_xlat16_27) * 0.699999988 + 1.70000005;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_27;
					    u_xlat16_2.x = u_xlat16_2.x * 6.0;
					    u_xlat16_10.x = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat16_10.x = u_xlat16_10.x + u_xlat16_10.x;
					    u_xlat16_10.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_10.xxx) + (-u_xlat0.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat10_0.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat3.xyz;
					    u_xlat10_3.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.xyz = u_xlat10_3.xyz * _EmissionColor.xyz;
					    u_xlat24 = (-_DayWeight) + 1.0;
					    SV_Target0.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
			}
		}
		Pass {
			Name "FORWARD"
			LOD 200
			Tags { "LIGHTMODE" = "FORWARDADD" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
			Blend One One, One One
			ZWrite Off
			GpuProgramID 127578
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  highp vec4 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
					  xlv_TEXCOORD2 = tmpvar_4.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4).xyz;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp sampler2D _LightTexture0;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  highp vec3 lightCoord_5;
					  highp vec3 worldViewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec4 tmpvar_8;
					  highp vec3 tmpvar_9;
					  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_7 = tmpvar_9;
					  worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
					  tmpvar_8 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  lowp float tmpvar_11;
					  highp vec4 diffuseSample_12;
					  highp vec4 nightSample_13;
					  highp vec4 daySample_14;
					  lowp vec4 tmpvar_15;
					  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_14 = tmpvar_15;
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_13 = tmpvar_16;
					  diffuseSample_12 = (mix (nightSample_13, daySample_14, vec4(_DayWeight)) * _Color);
					  diffuseSample_12.xyz = (diffuseSample_12.xyz * tmpvar_8.xyz);
					  tmpvar_10 = diffuseSample_12.xyz;
					  tmpvar_11 = diffuseSample_12.w;
					  highp vec4 tmpvar_17;
					  tmpvar_17.w = 1.0;
					  tmpvar_17.xyz = xlv_TEXCOORD2;
					  lightCoord_5 = (unity_WorldToLight * tmpvar_17).xyz;
					  highp float tmpvar_18;
					  tmpvar_18 = texture2D (_LightTexture0, vec2(dot (lightCoord_5, lightCoord_5))).x;
					  atten_4 = tmpvar_18;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_7;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_19;
					  mediump vec4 c_20;
					  highp vec3 tmpvar_21;
					  tmpvar_21 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_22;
					  mediump vec3 albedo_23;
					  albedo_23 = tmpvar_10;
					  tmpvar_22 = (albedo_23 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_19 = tmpvar_22;
					  mediump vec3 diffColor_24;
					  diffColor_24 = tmpvar_19;
					  mediump float alpha_25;
					  alpha_25 = tmpvar_11;
					  tmpvar_19 = diffColor_24;
					  mediump vec3 diffColor_26;
					  diffColor_26 = tmpvar_19;
					  mediump vec2 rlPow4AndFresnelTerm_27;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = clamp (dot (tmpvar_21, tmpvar_2), 0.0, 1.0);
					  tmpvar_28 = tmpvar_29;
					  mediump float tmpvar_30;
					  highp float tmpvar_31;
					  tmpvar_31 = clamp (dot (tmpvar_21, worldViewDir_6), 0.0, 1.0);
					  tmpvar_30 = tmpvar_31;
					  highp vec2 tmpvar_32;
					  tmpvar_32.x = dot ((worldViewDir_6 - (2.0 * 
					    (dot (tmpvar_21, worldViewDir_6) * tmpvar_21)
					  )), tmpvar_2);
					  tmpvar_32.y = (1.0 - tmpvar_30);
					  highp vec2 tmpvar_33;
					  tmpvar_33 = ((tmpvar_32 * tmpvar_32) * (tmpvar_32 * tmpvar_32));
					  rlPow4AndFresnelTerm_27 = tmpvar_33;
					  mediump float tmpvar_34;
					  tmpvar_34 = rlPow4AndFresnelTerm_27.x;
					  mediump float specular_35;
					  highp float smoothness_36;
					  smoothness_36 = _Glossiness;
					  highp vec2 tmpvar_37;
					  tmpvar_37.x = tmpvar_34;
					  tmpvar_37.y = (1.0 - smoothness_36);
					  highp float tmpvar_38;
					  tmpvar_38 = (texture2D (unity_NHxRoughness, tmpvar_37).x * 16.0);
					  specular_35 = tmpvar_38;
					  mediump vec4 tmpvar_39;
					  tmpvar_39.w = 1.0;
					  tmpvar_39.xyz = ((diffColor_26 + (specular_35 * 
					    mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_23, vec3(_Metallic))
					  )) * (tmpvar_1 * tmpvar_28));
					  c_20.xyz = tmpvar_39.xyz;
					  c_20.w = alpha_25;
					  c_3.xyz = c_20.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  highp vec4 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
					  xlv_TEXCOORD2 = tmpvar_4.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4).xyz;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _LightTexture0;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  highp vec3 lightCoord_5;
					  lowp vec3 lightDir_6;
					  highp vec4 tmpvar_7;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_6 = tmpvar_8;
					  tmpvar_7 = xlv_COLOR0;
					  lowp vec3 tmpvar_9;
					  lowp float tmpvar_10;
					  highp vec4 diffuseSample_11;
					  highp vec4 nightSample_12;
					  highp vec4 daySample_13;
					  lowp vec4 tmpvar_14;
					  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_13 = tmpvar_14;
					  lowp vec4 tmpvar_15;
					  tmpvar_15 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_12 = tmpvar_15;
					  diffuseSample_11 = (mix (nightSample_12, daySample_13, vec4(_DayWeight)) * _Color);
					  diffuseSample_11.xyz = (diffuseSample_11.xyz * tmpvar_7.xyz);
					  tmpvar_9 = diffuseSample_11.xyz;
					  tmpvar_10 = diffuseSample_11.w;
					  highp vec4 tmpvar_16;
					  tmpvar_16.w = 1.0;
					  tmpvar_16.xyz = xlv_TEXCOORD2;
					  lightCoord_5 = (unity_WorldToLight * tmpvar_16).xyz;
					  highp float tmpvar_17;
					  tmpvar_17 = texture2D (_LightTexture0, vec2(dot (lightCoord_5, lightCoord_5))).x;
					  atten_4 = tmpvar_17;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_18;
					  mediump vec4 c_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_21;
					  mediump vec3 albedo_22;
					  albedo_22 = tmpvar_9;
					  mediump vec3 tmpvar_23;
					  tmpvar_23 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_22, vec3(_Metallic));
					  tmpvar_21 = (albedo_22 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_18 = tmpvar_21;
					  mediump vec3 diffColor_24;
					  diffColor_24 = tmpvar_18;
					  mediump float alpha_25;
					  alpha_25 = tmpvar_10;
					  tmpvar_18 = diffColor_24;
					  mediump vec3 diffColor_26;
					  diffColor_26 = tmpvar_18;
					  mediump vec3 color_27;
					  highp float specularTerm_28;
					  highp float a2_29;
					  mediump float roughness_30;
					  mediump float perceptualRoughness_31;
					  highp vec3 tmpvar_32;
					  highp vec3 inVec_33;
					  inVec_33 = (tmpvar_2 + normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2)));
					  tmpvar_32 = (inVec_33 * inversesqrt(max (0.001, 
					    dot (inVec_33, inVec_33)
					  )));
					  mediump float tmpvar_34;
					  highp float tmpvar_35;
					  tmpvar_35 = clamp (dot (tmpvar_20, tmpvar_2), 0.0, 1.0);
					  tmpvar_34 = tmpvar_35;
					  highp float tmpvar_36;
					  tmpvar_36 = clamp (dot (tmpvar_20, tmpvar_32), 0.0, 1.0);
					  highp float tmpvar_37;
					  highp float smoothness_38;
					  smoothness_38 = _Glossiness;
					  tmpvar_37 = (1.0 - smoothness_38);
					  perceptualRoughness_31 = tmpvar_37;
					  highp float tmpvar_39;
					  highp float perceptualRoughness_40;
					  perceptualRoughness_40 = perceptualRoughness_31;
					  tmpvar_39 = (perceptualRoughness_40 * perceptualRoughness_40);
					  roughness_30 = tmpvar_39;
					  mediump float tmpvar_41;
					  tmpvar_41 = (roughness_30 * roughness_30);
					  a2_29 = tmpvar_41;
					  specularTerm_28 = ((roughness_30 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_32), 0.0, 1.0)) * (1.5 + roughness_30))
					   * 
					    (((tmpvar_36 * tmpvar_36) * (a2_29 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_42;
					  tmpvar_42 = clamp (specularTerm_28, 0.0, 100.0);
					  specularTerm_28 = tmpvar_42;
					  highp vec3 tmpvar_43;
					  tmpvar_43 = (((diffColor_26 + 
					    (tmpvar_42 * tmpvar_23)
					  ) * tmpvar_1) * tmpvar_34);
					  color_27 = tmpvar_43;
					  mediump vec4 tmpvar_44;
					  tmpvar_44.w = 1.0;
					  tmpvar_44.xyz = color_27;
					  c_19.xyz = tmpvar_44.xyz;
					  c_19.w = alpha_25;
					  c_3.xyz = c_19.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  highp vec4 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
					  xlv_TEXCOORD2 = tmpvar_4.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4).xyz;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _LightTexture0;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  highp vec3 lightCoord_5;
					  lowp vec3 lightDir_6;
					  highp vec4 tmpvar_7;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_6 = tmpvar_8;
					  tmpvar_7 = xlv_COLOR0;
					  lowp vec3 tmpvar_9;
					  lowp float tmpvar_10;
					  highp vec4 diffuseSample_11;
					  highp vec4 nightSample_12;
					  highp vec4 daySample_13;
					  lowp vec4 tmpvar_14;
					  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_13 = tmpvar_14;
					  lowp vec4 tmpvar_15;
					  tmpvar_15 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_12 = tmpvar_15;
					  diffuseSample_11 = (mix (nightSample_12, daySample_13, vec4(_DayWeight)) * _Color);
					  diffuseSample_11.xyz = (diffuseSample_11.xyz * tmpvar_7.xyz);
					  tmpvar_9 = diffuseSample_11.xyz;
					  tmpvar_10 = diffuseSample_11.w;
					  highp vec4 tmpvar_16;
					  tmpvar_16.w = 1.0;
					  tmpvar_16.xyz = xlv_TEXCOORD2;
					  lightCoord_5 = (unity_WorldToLight * tmpvar_16).xyz;
					  highp float tmpvar_17;
					  tmpvar_17 = texture2D (_LightTexture0, vec2(dot (lightCoord_5, lightCoord_5))).x;
					  atten_4 = tmpvar_17;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_18;
					  mediump vec4 c_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_21;
					  mediump vec3 albedo_22;
					  albedo_22 = tmpvar_9;
					  mediump vec3 tmpvar_23;
					  tmpvar_23 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_22, vec3(_Metallic));
					  tmpvar_21 = (albedo_22 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_18 = tmpvar_21;
					  mediump vec3 diffColor_24;
					  diffColor_24 = tmpvar_18;
					  mediump float alpha_25;
					  alpha_25 = tmpvar_10;
					  tmpvar_18 = diffColor_24;
					  mediump vec3 diffColor_26;
					  diffColor_26 = tmpvar_18;
					  mediump vec3 color_27;
					  highp float specularTerm_28;
					  highp float a2_29;
					  mediump float roughness_30;
					  mediump float perceptualRoughness_31;
					  highp vec3 tmpvar_32;
					  highp vec3 inVec_33;
					  inVec_33 = (tmpvar_2 + normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2)));
					  tmpvar_32 = (inVec_33 * inversesqrt(max (0.001, 
					    dot (inVec_33, inVec_33)
					  )));
					  mediump float tmpvar_34;
					  highp float tmpvar_35;
					  tmpvar_35 = clamp (dot (tmpvar_20, tmpvar_2), 0.0, 1.0);
					  tmpvar_34 = tmpvar_35;
					  highp float tmpvar_36;
					  tmpvar_36 = clamp (dot (tmpvar_20, tmpvar_32), 0.0, 1.0);
					  highp float tmpvar_37;
					  highp float smoothness_38;
					  smoothness_38 = _Glossiness;
					  tmpvar_37 = (1.0 - smoothness_38);
					  perceptualRoughness_31 = tmpvar_37;
					  highp float tmpvar_39;
					  highp float perceptualRoughness_40;
					  perceptualRoughness_40 = perceptualRoughness_31;
					  tmpvar_39 = (perceptualRoughness_40 * perceptualRoughness_40);
					  roughness_30 = tmpvar_39;
					  mediump float tmpvar_41;
					  tmpvar_41 = (roughness_30 * roughness_30);
					  a2_29 = tmpvar_41;
					  specularTerm_28 = ((roughness_30 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_32), 0.0, 1.0)) * (1.5 + roughness_30))
					   * 
					    (((tmpvar_36 * tmpvar_36) * (a2_29 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_42;
					  tmpvar_42 = clamp (specularTerm_28, 0.0, 100.0);
					  specularTerm_28 = tmpvar_42;
					  highp vec3 tmpvar_43;
					  tmpvar_43 = (((diffColor_26 + 
					    (tmpvar_42 * tmpvar_23)
					  ) * tmpvar_1) * tmpvar_34);
					  color_27 = tmpvar_43;
					  mediump vec4 tmpvar_44;
					  tmpvar_44.w = 1.0;
					  tmpvar_44.xyz = color_27;
					  c_19.xyz = tmpvar_44.xyz;
					  c_19.w = alpha_25;
					  c_3.xyz = c_19.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D unity_NHxRoughness;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					vec3 u_xlat2;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat1.xyz = vec3(_DayWeight) * u_xlat16_1.xyz + u_xlat10_2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat16_3.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_18) + u_xlat16_3.xyz;
					    u_xlat0.xzw = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat5) * u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTexture0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					mediump float u_xlat16_8;
					float u_xlat12;
					float u_xlat13;
					mediump float u_xlat16_13;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat16_13 = (-_Glossiness) + 1.0;
					    u_xlat16_2 = u_xlat16_13 * u_xlat16_13 + 1.5;
					    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;
					    u_xlat12 = u_xlat12 * u_xlat16_2;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD1.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat4 = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
					#else
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_8 = u_xlat16_13 * u_xlat16_13 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat16_13 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat1.xyz = vec3(_DayWeight) * u_xlat16_1.xyz + u_xlat10_2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat16_3.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat0.xzw;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = texture(_LightTexture0, u_xlat1.xx).x;
					    u_xlat16_3.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_3.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTexture0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					mediump float u_xlat16_8;
					float u_xlat12;
					float u_xlat13;
					mediump float u_xlat16_13;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat16_13 = (-_Glossiness) + 1.0;
					    u_xlat16_2 = u_xlat16_13 * u_xlat16_13 + 1.5;
					    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;
					    u_xlat12 = u_xlat12 * u_xlat16_2;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD1.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat4 = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
					#else
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_8 = u_xlat16_13 * u_xlat16_13 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat16_13 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat1.xyz = vec3(_DayWeight) * u_xlat16_1.xyz + u_xlat10_2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat16_3.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat0.xzw;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = texture(_LightTexture0, u_xlat1.xx).x;
					    u_xlat16_3.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_3.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  highp vec3 worldViewDir_4;
					  lowp vec3 lightDir_5;
					  highp vec4 tmpvar_6;
					  mediump vec3 tmpvar_7;
					  tmpvar_7 = _WorldSpaceLightPos0.xyz;
					  lightDir_5 = tmpvar_7;
					  worldViewDir_4 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
					  tmpvar_6 = xlv_COLOR0;
					  lowp vec3 tmpvar_8;
					  lowp float tmpvar_9;
					  highp vec4 diffuseSample_10;
					  highp vec4 nightSample_11;
					  highp vec4 daySample_12;
					  lowp vec4 tmpvar_13;
					  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_12 = tmpvar_13;
					  lowp vec4 tmpvar_14;
					  tmpvar_14 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_11 = tmpvar_14;
					  diffuseSample_10 = (mix (nightSample_11, daySample_12, vec4(_DayWeight)) * _Color);
					  diffuseSample_10.xyz = (diffuseSample_10.xyz * tmpvar_6.xyz);
					  tmpvar_8 = diffuseSample_10.xyz;
					  tmpvar_9 = diffuseSample_10.w;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_5;
					  lowp vec3 tmpvar_15;
					  mediump vec4 c_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_18;
					  mediump vec3 albedo_19;
					  albedo_19 = tmpvar_8;
					  tmpvar_18 = (albedo_19 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_15 = tmpvar_18;
					  mediump vec3 diffColor_20;
					  diffColor_20 = tmpvar_15;
					  mediump float alpha_21;
					  alpha_21 = tmpvar_9;
					  tmpvar_15 = diffColor_20;
					  mediump vec3 diffColor_22;
					  diffColor_22 = tmpvar_15;
					  mediump vec2 rlPow4AndFresnelTerm_23;
					  mediump float tmpvar_24;
					  highp float tmpvar_25;
					  tmpvar_25 = clamp (dot (tmpvar_17, tmpvar_2), 0.0, 1.0);
					  tmpvar_24 = tmpvar_25;
					  mediump float tmpvar_26;
					  highp float tmpvar_27;
					  tmpvar_27 = clamp (dot (tmpvar_17, worldViewDir_4), 0.0, 1.0);
					  tmpvar_26 = tmpvar_27;
					  highp vec2 tmpvar_28;
					  tmpvar_28.x = dot ((worldViewDir_4 - (2.0 * 
					    (dot (tmpvar_17, worldViewDir_4) * tmpvar_17)
					  )), tmpvar_2);
					  tmpvar_28.y = (1.0 - tmpvar_26);
					  highp vec2 tmpvar_29;
					  tmpvar_29 = ((tmpvar_28 * tmpvar_28) * (tmpvar_28 * tmpvar_28));
					  rlPow4AndFresnelTerm_23 = tmpvar_29;
					  mediump float tmpvar_30;
					  tmpvar_30 = rlPow4AndFresnelTerm_23.x;
					  mediump float specular_31;
					  highp float smoothness_32;
					  smoothness_32 = _Glossiness;
					  highp vec2 tmpvar_33;
					  tmpvar_33.x = tmpvar_30;
					  tmpvar_33.y = (1.0 - smoothness_32);
					  highp float tmpvar_34;
					  tmpvar_34 = (texture2D (unity_NHxRoughness, tmpvar_33).x * 16.0);
					  specular_31 = tmpvar_34;
					  mediump vec4 tmpvar_35;
					  tmpvar_35.w = 1.0;
					  tmpvar_35.xyz = ((diffColor_22 + (specular_31 * 
					    mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_19, vec3(_Metallic))
					  )) * (tmpvar_1 * tmpvar_24));
					  c_16.xyz = tmpvar_35.xyz;
					  c_16.w = alpha_21;
					  c_3.xyz = c_16.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp vec3 lightDir_4;
					  highp vec4 tmpvar_5;
					  mediump vec3 tmpvar_6;
					  tmpvar_6 = _WorldSpaceLightPos0.xyz;
					  lightDir_4 = tmpvar_6;
					  tmpvar_5 = xlv_COLOR0;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec4 diffuseSample_9;
					  highp vec4 nightSample_10;
					  highp vec4 daySample_11;
					  lowp vec4 tmpvar_12;
					  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_11 = tmpvar_12;
					  lowp vec4 tmpvar_13;
					  tmpvar_13 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_10 = tmpvar_13;
					  diffuseSample_9 = (mix (nightSample_10, daySample_11, vec4(_DayWeight)) * _Color);
					  diffuseSample_9.xyz = (diffuseSample_9.xyz * tmpvar_5.xyz);
					  tmpvar_7 = diffuseSample_9.xyz;
					  tmpvar_8 = diffuseSample_9.w;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_4;
					  lowp vec3 tmpvar_14;
					  mediump vec4 c_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_17;
					  mediump vec3 albedo_18;
					  albedo_18 = tmpvar_7;
					  mediump vec3 tmpvar_19;
					  tmpvar_19 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_18, vec3(_Metallic));
					  tmpvar_17 = (albedo_18 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_14 = tmpvar_17;
					  mediump vec3 diffColor_20;
					  diffColor_20 = tmpvar_14;
					  mediump float alpha_21;
					  alpha_21 = tmpvar_8;
					  tmpvar_14 = diffColor_20;
					  mediump vec3 diffColor_22;
					  diffColor_22 = tmpvar_14;
					  mediump vec3 color_23;
					  highp float specularTerm_24;
					  highp float a2_25;
					  mediump float roughness_26;
					  mediump float perceptualRoughness_27;
					  highp vec3 tmpvar_28;
					  highp vec3 inVec_29;
					  inVec_29 = (tmpvar_2 + normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2)));
					  tmpvar_28 = (inVec_29 * inversesqrt(max (0.001, 
					    dot (inVec_29, inVec_29)
					  )));
					  mediump float tmpvar_30;
					  highp float tmpvar_31;
					  tmpvar_31 = clamp (dot (tmpvar_16, tmpvar_2), 0.0, 1.0);
					  tmpvar_30 = tmpvar_31;
					  highp float tmpvar_32;
					  tmpvar_32 = clamp (dot (tmpvar_16, tmpvar_28), 0.0, 1.0);
					  highp float tmpvar_33;
					  highp float smoothness_34;
					  smoothness_34 = _Glossiness;
					  tmpvar_33 = (1.0 - smoothness_34);
					  perceptualRoughness_27 = tmpvar_33;
					  highp float tmpvar_35;
					  highp float perceptualRoughness_36;
					  perceptualRoughness_36 = perceptualRoughness_27;
					  tmpvar_35 = (perceptualRoughness_36 * perceptualRoughness_36);
					  roughness_26 = tmpvar_35;
					  mediump float tmpvar_37;
					  tmpvar_37 = (roughness_26 * roughness_26);
					  a2_25 = tmpvar_37;
					  specularTerm_24 = ((roughness_26 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_28), 0.0, 1.0)) * (1.5 + roughness_26))
					   * 
					    (((tmpvar_32 * tmpvar_32) * (a2_25 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_38;
					  tmpvar_38 = clamp (specularTerm_24, 0.0, 100.0);
					  specularTerm_24 = tmpvar_38;
					  highp vec3 tmpvar_39;
					  tmpvar_39 = (((diffColor_22 + 
					    (tmpvar_38 * tmpvar_19)
					  ) * tmpvar_1) * tmpvar_30);
					  color_23 = tmpvar_39;
					  mediump vec4 tmpvar_40;
					  tmpvar_40.w = 1.0;
					  tmpvar_40.xyz = color_23;
					  c_15.xyz = tmpvar_40.xyz;
					  c_15.w = alpha_21;
					  c_3.xyz = c_15.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp vec3 lightDir_4;
					  highp vec4 tmpvar_5;
					  mediump vec3 tmpvar_6;
					  tmpvar_6 = _WorldSpaceLightPos0.xyz;
					  lightDir_4 = tmpvar_6;
					  tmpvar_5 = xlv_COLOR0;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec4 diffuseSample_9;
					  highp vec4 nightSample_10;
					  highp vec4 daySample_11;
					  lowp vec4 tmpvar_12;
					  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_11 = tmpvar_12;
					  lowp vec4 tmpvar_13;
					  tmpvar_13 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_10 = tmpvar_13;
					  diffuseSample_9 = (mix (nightSample_10, daySample_11, vec4(_DayWeight)) * _Color);
					  diffuseSample_9.xyz = (diffuseSample_9.xyz * tmpvar_5.xyz);
					  tmpvar_7 = diffuseSample_9.xyz;
					  tmpvar_8 = diffuseSample_9.w;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_4;
					  lowp vec3 tmpvar_14;
					  mediump vec4 c_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_17;
					  mediump vec3 albedo_18;
					  albedo_18 = tmpvar_7;
					  mediump vec3 tmpvar_19;
					  tmpvar_19 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_18, vec3(_Metallic));
					  tmpvar_17 = (albedo_18 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_14 = tmpvar_17;
					  mediump vec3 diffColor_20;
					  diffColor_20 = tmpvar_14;
					  mediump float alpha_21;
					  alpha_21 = tmpvar_8;
					  tmpvar_14 = diffColor_20;
					  mediump vec3 diffColor_22;
					  diffColor_22 = tmpvar_14;
					  mediump vec3 color_23;
					  highp float specularTerm_24;
					  highp float a2_25;
					  mediump float roughness_26;
					  mediump float perceptualRoughness_27;
					  highp vec3 tmpvar_28;
					  highp vec3 inVec_29;
					  inVec_29 = (tmpvar_2 + normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2)));
					  tmpvar_28 = (inVec_29 * inversesqrt(max (0.001, 
					    dot (inVec_29, inVec_29)
					  )));
					  mediump float tmpvar_30;
					  highp float tmpvar_31;
					  tmpvar_31 = clamp (dot (tmpvar_16, tmpvar_2), 0.0, 1.0);
					  tmpvar_30 = tmpvar_31;
					  highp float tmpvar_32;
					  tmpvar_32 = clamp (dot (tmpvar_16, tmpvar_28), 0.0, 1.0);
					  highp float tmpvar_33;
					  highp float smoothness_34;
					  smoothness_34 = _Glossiness;
					  tmpvar_33 = (1.0 - smoothness_34);
					  perceptualRoughness_27 = tmpvar_33;
					  highp float tmpvar_35;
					  highp float perceptualRoughness_36;
					  perceptualRoughness_36 = perceptualRoughness_27;
					  tmpvar_35 = (perceptualRoughness_36 * perceptualRoughness_36);
					  roughness_26 = tmpvar_35;
					  mediump float tmpvar_37;
					  tmpvar_37 = (roughness_26 * roughness_26);
					  a2_25 = tmpvar_37;
					  specularTerm_24 = ((roughness_26 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_28), 0.0, 1.0)) * (1.5 + roughness_26))
					   * 
					    (((tmpvar_32 * tmpvar_32) * (a2_25 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_38;
					  tmpvar_38 = clamp (specularTerm_24, 0.0, 100.0);
					  specularTerm_24 = tmpvar_38;
					  highp vec3 tmpvar_39;
					  tmpvar_39 = (((diffColor_22 + 
					    (tmpvar_38 * tmpvar_19)
					  ) * tmpvar_1) * tmpvar_30);
					  color_23 = tmpvar_39;
					  mediump vec4 tmpvar_40;
					  tmpvar_40.w = 1.0;
					  tmpvar_40.xyz = color_23;
					  c_15.xyz = tmpvar_40.xyz;
					  c_15.w = alpha_21;
					  c_3.xyz = c_15.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D unity_NHxRoughness;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					lowp vec3 u_xlat10_4;
					float u_xlat12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat16_2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_Glossiness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = u_xlat10_4.xyz + (-u_xlat10_1.xyz);
					    u_xlat4.xyz = vec3(_DayWeight) * u_xlat16_4.xyz + u_xlat10_1.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat16_3.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_14 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_3.xyz = u_xlat4.xyz * vec3(u_xlat16_14) + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					vec3 u_xlat5;
					mediump float u_xlat16_5;
					mediump float u_xlat16_8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat16_1.x = (-_Glossiness) + 1.0;
					    u_xlat16_5 = u_xlat16_1.x * u_xlat16_1.x + 1.5;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat12 = u_xlat12 * u_xlat16_5;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD1.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat4 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
					#else
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_8 = u_xlat16_1.x * u_xlat16_1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat16_1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat1.xyz = vec3(_DayWeight) * u_xlat16_1.xyz + u_xlat10_2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat16_3.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					vec3 u_xlat5;
					mediump float u_xlat16_5;
					mediump float u_xlat16_8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat16_1.x = (-_Glossiness) + 1.0;
					    u_xlat16_5 = u_xlat16_1.x * u_xlat16_1.x + 1.5;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat12 = u_xlat12 * u_xlat16_5;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD1.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat4 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
					#else
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_8 = u_xlat16_1.x * u_xlat16_1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat16_1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat1.xyz = vec3(_DayWeight) * u_xlat16_1.xyz + u_xlat10_2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat16_3.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  highp vec4 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
					  xlv_TEXCOORD2 = tmpvar_4.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4);
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  highp vec3 worldViewDir_5;
					  lowp vec3 lightDir_6;
					  highp vec4 tmpvar_7;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_6 = tmpvar_8;
					  worldViewDir_5 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
					  tmpvar_7 = xlv_COLOR0;
					  lowp vec3 tmpvar_9;
					  lowp float tmpvar_10;
					  highp vec4 diffuseSample_11;
					  highp vec4 nightSample_12;
					  highp vec4 daySample_13;
					  lowp vec4 tmpvar_14;
					  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_13 = tmpvar_14;
					  lowp vec4 tmpvar_15;
					  tmpvar_15 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_12 = tmpvar_15;
					  diffuseSample_11 = (mix (nightSample_12, daySample_13, vec4(_DayWeight)) * _Color);
					  diffuseSample_11.xyz = (diffuseSample_11.xyz * tmpvar_7.xyz);
					  tmpvar_9 = diffuseSample_11.xyz;
					  tmpvar_10 = diffuseSample_11.w;
					  lowp float tmpvar_16;
					  highp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
					  tmpvar_16 = tmpvar_17.w;
					  lowp float tmpvar_18;
					  highp vec4 tmpvar_19;
					  tmpvar_19 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
					  tmpvar_18 = tmpvar_19.x;
					  highp float tmpvar_20;
					  tmpvar_20 = ((float(
					    (xlv_TEXCOORD3.z > 0.0)
					  ) * tmpvar_16) * tmpvar_18);
					  atten_4 = tmpvar_20;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_21;
					  mediump vec4 c_22;
					  highp vec3 tmpvar_23;
					  tmpvar_23 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_24;
					  mediump vec3 albedo_25;
					  albedo_25 = tmpvar_9;
					  tmpvar_24 = (albedo_25 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_21 = tmpvar_24;
					  mediump vec3 diffColor_26;
					  diffColor_26 = tmpvar_21;
					  mediump float alpha_27;
					  alpha_27 = tmpvar_10;
					  tmpvar_21 = diffColor_26;
					  mediump vec3 diffColor_28;
					  diffColor_28 = tmpvar_21;
					  mediump vec2 rlPow4AndFresnelTerm_29;
					  mediump float tmpvar_30;
					  highp float tmpvar_31;
					  tmpvar_31 = clamp (dot (tmpvar_23, tmpvar_2), 0.0, 1.0);
					  tmpvar_30 = tmpvar_31;
					  mediump float tmpvar_32;
					  highp float tmpvar_33;
					  tmpvar_33 = clamp (dot (tmpvar_23, worldViewDir_5), 0.0, 1.0);
					  tmpvar_32 = tmpvar_33;
					  highp vec2 tmpvar_34;
					  tmpvar_34.x = dot ((worldViewDir_5 - (2.0 * 
					    (dot (tmpvar_23, worldViewDir_5) * tmpvar_23)
					  )), tmpvar_2);
					  tmpvar_34.y = (1.0 - tmpvar_32);
					  highp vec2 tmpvar_35;
					  tmpvar_35 = ((tmpvar_34 * tmpvar_34) * (tmpvar_34 * tmpvar_34));
					  rlPow4AndFresnelTerm_29 = tmpvar_35;
					  mediump float tmpvar_36;
					  tmpvar_36 = rlPow4AndFresnelTerm_29.x;
					  mediump float specular_37;
					  highp float smoothness_38;
					  smoothness_38 = _Glossiness;
					  highp vec2 tmpvar_39;
					  tmpvar_39.x = tmpvar_36;
					  tmpvar_39.y = (1.0 - smoothness_38);
					  highp float tmpvar_40;
					  tmpvar_40 = (texture2D (unity_NHxRoughness, tmpvar_39).x * 16.0);
					  specular_37 = tmpvar_40;
					  mediump vec4 tmpvar_41;
					  tmpvar_41.w = 1.0;
					  tmpvar_41.xyz = ((diffColor_28 + (specular_37 * 
					    mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_25, vec3(_Metallic))
					  )) * (tmpvar_1 * tmpvar_30));
					  c_22.xyz = tmpvar_41.xyz;
					  c_22.w = alpha_27;
					  c_3.xyz = c_22.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  highp vec4 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
					  xlv_TEXCOORD2 = tmpvar_4.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4);
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  lowp vec3 lightDir_5;
					  highp vec4 tmpvar_6;
					  highp vec3 tmpvar_7;
					  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_5 = tmpvar_7;
					  tmpvar_6 = xlv_COLOR0;
					  lowp vec3 tmpvar_8;
					  lowp float tmpvar_9;
					  highp vec4 diffuseSample_10;
					  highp vec4 nightSample_11;
					  highp vec4 daySample_12;
					  lowp vec4 tmpvar_13;
					  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_12 = tmpvar_13;
					  lowp vec4 tmpvar_14;
					  tmpvar_14 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_11 = tmpvar_14;
					  diffuseSample_10 = (mix (nightSample_11, daySample_12, vec4(_DayWeight)) * _Color);
					  diffuseSample_10.xyz = (diffuseSample_10.xyz * tmpvar_6.xyz);
					  tmpvar_8 = diffuseSample_10.xyz;
					  tmpvar_9 = diffuseSample_10.w;
					  lowp float tmpvar_15;
					  highp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
					  tmpvar_15 = tmpvar_16.w;
					  lowp float tmpvar_17;
					  highp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
					  tmpvar_17 = tmpvar_18.x;
					  highp float tmpvar_19;
					  tmpvar_19 = ((float(
					    (xlv_TEXCOORD3.z > 0.0)
					  ) * tmpvar_15) * tmpvar_17);
					  atten_4 = tmpvar_19;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_5;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_20;
					  mediump vec4 c_21;
					  highp vec3 tmpvar_22;
					  tmpvar_22 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_23;
					  mediump vec3 albedo_24;
					  albedo_24 = tmpvar_8;
					  mediump vec3 tmpvar_25;
					  tmpvar_25 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_24, vec3(_Metallic));
					  tmpvar_23 = (albedo_24 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_20 = tmpvar_23;
					  mediump vec3 diffColor_26;
					  diffColor_26 = tmpvar_20;
					  mediump float alpha_27;
					  alpha_27 = tmpvar_9;
					  tmpvar_20 = diffColor_26;
					  mediump vec3 diffColor_28;
					  diffColor_28 = tmpvar_20;
					  mediump vec3 color_29;
					  highp float specularTerm_30;
					  highp float a2_31;
					  mediump float roughness_32;
					  mediump float perceptualRoughness_33;
					  highp vec3 tmpvar_34;
					  highp vec3 inVec_35;
					  inVec_35 = (tmpvar_2 + normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2)));
					  tmpvar_34 = (inVec_35 * inversesqrt(max (0.001, 
					    dot (inVec_35, inVec_35)
					  )));
					  mediump float tmpvar_36;
					  highp float tmpvar_37;
					  tmpvar_37 = clamp (dot (tmpvar_22, tmpvar_2), 0.0, 1.0);
					  tmpvar_36 = tmpvar_37;
					  highp float tmpvar_38;
					  tmpvar_38 = clamp (dot (tmpvar_22, tmpvar_34), 0.0, 1.0);
					  highp float tmpvar_39;
					  highp float smoothness_40;
					  smoothness_40 = _Glossiness;
					  tmpvar_39 = (1.0 - smoothness_40);
					  perceptualRoughness_33 = tmpvar_39;
					  highp float tmpvar_41;
					  highp float perceptualRoughness_42;
					  perceptualRoughness_42 = perceptualRoughness_33;
					  tmpvar_41 = (perceptualRoughness_42 * perceptualRoughness_42);
					  roughness_32 = tmpvar_41;
					  mediump float tmpvar_43;
					  tmpvar_43 = (roughness_32 * roughness_32);
					  a2_31 = tmpvar_43;
					  specularTerm_30 = ((roughness_32 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_34), 0.0, 1.0)) * (1.5 + roughness_32))
					   * 
					    (((tmpvar_38 * tmpvar_38) * (a2_31 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_44;
					  tmpvar_44 = clamp (specularTerm_30, 0.0, 100.0);
					  specularTerm_30 = tmpvar_44;
					  highp vec3 tmpvar_45;
					  tmpvar_45 = (((diffColor_28 + 
					    (tmpvar_44 * tmpvar_25)
					  ) * tmpvar_1) * tmpvar_36);
					  color_29 = tmpvar_45;
					  mediump vec4 tmpvar_46;
					  tmpvar_46.w = 1.0;
					  tmpvar_46.xyz = color_29;
					  c_21.xyz = tmpvar_46.xyz;
					  c_21.w = alpha_27;
					  c_3.xyz = c_21.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  highp vec4 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
					  xlv_TEXCOORD2 = tmpvar_4.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4);
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  lowp vec3 lightDir_5;
					  highp vec4 tmpvar_6;
					  highp vec3 tmpvar_7;
					  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_5 = tmpvar_7;
					  tmpvar_6 = xlv_COLOR0;
					  lowp vec3 tmpvar_8;
					  lowp float tmpvar_9;
					  highp vec4 diffuseSample_10;
					  highp vec4 nightSample_11;
					  highp vec4 daySample_12;
					  lowp vec4 tmpvar_13;
					  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_12 = tmpvar_13;
					  lowp vec4 tmpvar_14;
					  tmpvar_14 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_11 = tmpvar_14;
					  diffuseSample_10 = (mix (nightSample_11, daySample_12, vec4(_DayWeight)) * _Color);
					  diffuseSample_10.xyz = (diffuseSample_10.xyz * tmpvar_6.xyz);
					  tmpvar_8 = diffuseSample_10.xyz;
					  tmpvar_9 = diffuseSample_10.w;
					  lowp float tmpvar_15;
					  highp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
					  tmpvar_15 = tmpvar_16.w;
					  lowp float tmpvar_17;
					  highp vec4 tmpvar_18;
					  tmpvar_18 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
					  tmpvar_17 = tmpvar_18.x;
					  highp float tmpvar_19;
					  tmpvar_19 = ((float(
					    (xlv_TEXCOORD3.z > 0.0)
					  ) * tmpvar_15) * tmpvar_17);
					  atten_4 = tmpvar_19;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_5;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_20;
					  mediump vec4 c_21;
					  highp vec3 tmpvar_22;
					  tmpvar_22 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_23;
					  mediump vec3 albedo_24;
					  albedo_24 = tmpvar_8;
					  mediump vec3 tmpvar_25;
					  tmpvar_25 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_24, vec3(_Metallic));
					  tmpvar_23 = (albedo_24 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_20 = tmpvar_23;
					  mediump vec3 diffColor_26;
					  diffColor_26 = tmpvar_20;
					  mediump float alpha_27;
					  alpha_27 = tmpvar_9;
					  tmpvar_20 = diffColor_26;
					  mediump vec3 diffColor_28;
					  diffColor_28 = tmpvar_20;
					  mediump vec3 color_29;
					  highp float specularTerm_30;
					  highp float a2_31;
					  mediump float roughness_32;
					  mediump float perceptualRoughness_33;
					  highp vec3 tmpvar_34;
					  highp vec3 inVec_35;
					  inVec_35 = (tmpvar_2 + normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2)));
					  tmpvar_34 = (inVec_35 * inversesqrt(max (0.001, 
					    dot (inVec_35, inVec_35)
					  )));
					  mediump float tmpvar_36;
					  highp float tmpvar_37;
					  tmpvar_37 = clamp (dot (tmpvar_22, tmpvar_2), 0.0, 1.0);
					  tmpvar_36 = tmpvar_37;
					  highp float tmpvar_38;
					  tmpvar_38 = clamp (dot (tmpvar_22, tmpvar_34), 0.0, 1.0);
					  highp float tmpvar_39;
					  highp float smoothness_40;
					  smoothness_40 = _Glossiness;
					  tmpvar_39 = (1.0 - smoothness_40);
					  perceptualRoughness_33 = tmpvar_39;
					  highp float tmpvar_41;
					  highp float perceptualRoughness_42;
					  perceptualRoughness_42 = perceptualRoughness_33;
					  tmpvar_41 = (perceptualRoughness_42 * perceptualRoughness_42);
					  roughness_32 = tmpvar_41;
					  mediump float tmpvar_43;
					  tmpvar_43 = (roughness_32 * roughness_32);
					  a2_31 = tmpvar_43;
					  specularTerm_30 = ((roughness_32 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_34), 0.0, 1.0)) * (1.5 + roughness_32))
					   * 
					    (((tmpvar_38 * tmpvar_38) * (a2_31 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_44;
					  tmpvar_44 = clamp (specularTerm_30, 0.0, 100.0);
					  specularTerm_30 = tmpvar_44;
					  highp vec3 tmpvar_45;
					  tmpvar_45 = (((diffColor_28 + 
					    (tmpvar_44 * tmpvar_25)
					  ) * tmpvar_1) * tmpvar_36);
					  color_29 = tmpvar_45;
					  mediump vec4 tmpvar_46;
					  tmpvar_46.w = 1.0;
					  tmpvar_46.xyz = color_29;
					  c_21.xyz = tmpvar_46.xyz;
					  c_21.w = alpha_27;
					  c_3.xyz = c_21.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform highp sampler2D unity_NHxRoughness;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					vec3 u_xlat2;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat1.xyz = vec3(_DayWeight) * u_xlat16_1.xyz + u_xlat10_2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat16_3.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_18) + u_xlat16_3.xyz;
					    u_xlat1 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat0.xz = u_xlat1.xy / u_xlat1.ww;
					    u_xlat0.xz = u_xlat0.xz + vec2(0.5, 0.5);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xz).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb10 = !!(0.0<u_xlat1.z);
					#else
					    u_xlatb10 = 0.0<u_xlat1.z;
					#endif
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat15)).x;
					    u_xlat16_18 = (u_xlatb10) ? 1.0 : 0.0;
					    u_xlat16_18 = u_xlat0.x * u_xlat16_18;
					    u_xlat16_18 = u_xlat15 * u_xlat16_18;
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * _LightColor0.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat5) * u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_10;
					float u_xlat15;
					float u_xlat16;
					mediump float u_xlat16_16;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat15 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat15 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat16_16 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_16 * u_xlat16_16 + 1.5;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat15 = u_xlat15 * u_xlat16_3;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat3.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_10 = u_xlat16_16 * u_xlat16_16 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_10 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat15;
					    u_xlat0.x = u_xlat16_16 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_3.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz + (-u_xlat10_3.xyz);
					    u_xlat1.xyz = vec3(_DayWeight) * u_xlat16_1.xyz + u_xlat10_3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_17 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xzw = u_xlat1.xyz * vec3(u_xlat16_17) + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xzw;
					    u_xlat0.xyz = vec3(u_xlat5) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_10;
					float u_xlat15;
					float u_xlat16;
					mediump float u_xlat16_16;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat15 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat15 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat16_16 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_16 * u_xlat16_16 + 1.5;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat15 = u_xlat15 * u_xlat16_3;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat3.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_10 = u_xlat16_16 * u_xlat16_16 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_10 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat15;
					    u_xlat0.x = u_xlat16_16 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_3.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz + (-u_xlat10_3.xyz);
					    u_xlat1.xyz = vec3(_DayWeight) * u_xlat16_1.xyz + u_xlat10_3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_17 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xzw = u_xlat1.xyz * vec3(u_xlat16_17) + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xzw;
					    u_xlat0.xyz = vec3(u_xlat5) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  highp vec4 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
					  xlv_TEXCOORD2 = tmpvar_4.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4).xyz;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp samplerCube _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec3 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  highp vec3 worldViewDir_5;
					  lowp vec3 lightDir_6;
					  highp vec4 tmpvar_7;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_6 = tmpvar_8;
					  worldViewDir_5 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
					  tmpvar_7 = xlv_COLOR0;
					  lowp vec3 tmpvar_9;
					  lowp float tmpvar_10;
					  highp vec4 diffuseSample_11;
					  highp vec4 nightSample_12;
					  highp vec4 daySample_13;
					  lowp vec4 tmpvar_14;
					  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_13 = tmpvar_14;
					  lowp vec4 tmpvar_15;
					  tmpvar_15 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_12 = tmpvar_15;
					  diffuseSample_11 = (mix (nightSample_12, daySample_13, vec4(_DayWeight)) * _Color);
					  diffuseSample_11.xyz = (diffuseSample_11.xyz * tmpvar_7.xyz);
					  tmpvar_9 = diffuseSample_11.xyz;
					  tmpvar_10 = diffuseSample_11.w;
					  highp float tmpvar_16;
					  tmpvar_16 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).x * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
					  atten_4 = tmpvar_16;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_17;
					  mediump vec4 c_18;
					  highp vec3 tmpvar_19;
					  tmpvar_19 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_20;
					  mediump vec3 albedo_21;
					  albedo_21 = tmpvar_9;
					  tmpvar_20 = (albedo_21 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_17 = tmpvar_20;
					  mediump vec3 diffColor_22;
					  diffColor_22 = tmpvar_17;
					  mediump float alpha_23;
					  alpha_23 = tmpvar_10;
					  tmpvar_17 = diffColor_22;
					  mediump vec3 diffColor_24;
					  diffColor_24 = tmpvar_17;
					  mediump vec2 rlPow4AndFresnelTerm_25;
					  mediump float tmpvar_26;
					  highp float tmpvar_27;
					  tmpvar_27 = clamp (dot (tmpvar_19, tmpvar_2), 0.0, 1.0);
					  tmpvar_26 = tmpvar_27;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = clamp (dot (tmpvar_19, worldViewDir_5), 0.0, 1.0);
					  tmpvar_28 = tmpvar_29;
					  highp vec2 tmpvar_30;
					  tmpvar_30.x = dot ((worldViewDir_5 - (2.0 * 
					    (dot (tmpvar_19, worldViewDir_5) * tmpvar_19)
					  )), tmpvar_2);
					  tmpvar_30.y = (1.0 - tmpvar_28);
					  highp vec2 tmpvar_31;
					  tmpvar_31 = ((tmpvar_30 * tmpvar_30) * (tmpvar_30 * tmpvar_30));
					  rlPow4AndFresnelTerm_25 = tmpvar_31;
					  mediump float tmpvar_32;
					  tmpvar_32 = rlPow4AndFresnelTerm_25.x;
					  mediump float specular_33;
					  highp float smoothness_34;
					  smoothness_34 = _Glossiness;
					  highp vec2 tmpvar_35;
					  tmpvar_35.x = tmpvar_32;
					  tmpvar_35.y = (1.0 - smoothness_34);
					  highp float tmpvar_36;
					  tmpvar_36 = (texture2D (unity_NHxRoughness, tmpvar_35).x * 16.0);
					  specular_33 = tmpvar_36;
					  mediump vec4 tmpvar_37;
					  tmpvar_37.w = 1.0;
					  tmpvar_37.xyz = ((diffColor_24 + (specular_33 * 
					    mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_21, vec3(_Metallic))
					  )) * (tmpvar_1 * tmpvar_26));
					  c_18.xyz = tmpvar_37.xyz;
					  c_18.w = alpha_23;
					  c_3.xyz = c_18.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  highp vec4 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
					  xlv_TEXCOORD2 = tmpvar_4.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4).xyz;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform highp samplerCube _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec3 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  lowp vec3 lightDir_5;
					  highp vec4 tmpvar_6;
					  highp vec3 tmpvar_7;
					  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_5 = tmpvar_7;
					  tmpvar_6 = xlv_COLOR0;
					  lowp vec3 tmpvar_8;
					  lowp float tmpvar_9;
					  highp vec4 diffuseSample_10;
					  highp vec4 nightSample_11;
					  highp vec4 daySample_12;
					  lowp vec4 tmpvar_13;
					  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_12 = tmpvar_13;
					  lowp vec4 tmpvar_14;
					  tmpvar_14 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_11 = tmpvar_14;
					  diffuseSample_10 = (mix (nightSample_11, daySample_12, vec4(_DayWeight)) * _Color);
					  diffuseSample_10.xyz = (diffuseSample_10.xyz * tmpvar_6.xyz);
					  tmpvar_8 = diffuseSample_10.xyz;
					  tmpvar_9 = diffuseSample_10.w;
					  highp float tmpvar_15;
					  tmpvar_15 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).x * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
					  atten_4 = tmpvar_15;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_5;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_16;
					  mediump vec4 c_17;
					  highp vec3 tmpvar_18;
					  tmpvar_18 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_19;
					  mediump vec3 albedo_20;
					  albedo_20 = tmpvar_8;
					  mediump vec3 tmpvar_21;
					  tmpvar_21 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_20, vec3(_Metallic));
					  tmpvar_19 = (albedo_20 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_16 = tmpvar_19;
					  mediump vec3 diffColor_22;
					  diffColor_22 = tmpvar_16;
					  mediump float alpha_23;
					  alpha_23 = tmpvar_9;
					  tmpvar_16 = diffColor_22;
					  mediump vec3 diffColor_24;
					  diffColor_24 = tmpvar_16;
					  mediump vec3 color_25;
					  highp float specularTerm_26;
					  highp float a2_27;
					  mediump float roughness_28;
					  mediump float perceptualRoughness_29;
					  highp vec3 tmpvar_30;
					  highp vec3 inVec_31;
					  inVec_31 = (tmpvar_2 + normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2)));
					  tmpvar_30 = (inVec_31 * inversesqrt(max (0.001, 
					    dot (inVec_31, inVec_31)
					  )));
					  mediump float tmpvar_32;
					  highp float tmpvar_33;
					  tmpvar_33 = clamp (dot (tmpvar_18, tmpvar_2), 0.0, 1.0);
					  tmpvar_32 = tmpvar_33;
					  highp float tmpvar_34;
					  tmpvar_34 = clamp (dot (tmpvar_18, tmpvar_30), 0.0, 1.0);
					  highp float tmpvar_35;
					  highp float smoothness_36;
					  smoothness_36 = _Glossiness;
					  tmpvar_35 = (1.0 - smoothness_36);
					  perceptualRoughness_29 = tmpvar_35;
					  highp float tmpvar_37;
					  highp float perceptualRoughness_38;
					  perceptualRoughness_38 = perceptualRoughness_29;
					  tmpvar_37 = (perceptualRoughness_38 * perceptualRoughness_38);
					  roughness_28 = tmpvar_37;
					  mediump float tmpvar_39;
					  tmpvar_39 = (roughness_28 * roughness_28);
					  a2_27 = tmpvar_39;
					  specularTerm_26 = ((roughness_28 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_30), 0.0, 1.0)) * (1.5 + roughness_28))
					   * 
					    (((tmpvar_34 * tmpvar_34) * (a2_27 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_40;
					  tmpvar_40 = clamp (specularTerm_26, 0.0, 100.0);
					  specularTerm_26 = tmpvar_40;
					  highp vec3 tmpvar_41;
					  tmpvar_41 = (((diffColor_24 + 
					    (tmpvar_40 * tmpvar_21)
					  ) * tmpvar_1) * tmpvar_32);
					  color_25 = tmpvar_41;
					  mediump vec4 tmpvar_42;
					  tmpvar_42.w = 1.0;
					  tmpvar_42.xyz = color_25;
					  c_17.xyz = tmpvar_42.xyz;
					  c_17.w = alpha_23;
					  c_3.xyz = c_17.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  highp vec4 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
					  xlv_TEXCOORD2 = tmpvar_4.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4).xyz;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform highp samplerCube _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec3 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  lowp vec3 lightDir_5;
					  highp vec4 tmpvar_6;
					  highp vec3 tmpvar_7;
					  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_5 = tmpvar_7;
					  tmpvar_6 = xlv_COLOR0;
					  lowp vec3 tmpvar_8;
					  lowp float tmpvar_9;
					  highp vec4 diffuseSample_10;
					  highp vec4 nightSample_11;
					  highp vec4 daySample_12;
					  lowp vec4 tmpvar_13;
					  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_12 = tmpvar_13;
					  lowp vec4 tmpvar_14;
					  tmpvar_14 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_11 = tmpvar_14;
					  diffuseSample_10 = (mix (nightSample_11, daySample_12, vec4(_DayWeight)) * _Color);
					  diffuseSample_10.xyz = (diffuseSample_10.xyz * tmpvar_6.xyz);
					  tmpvar_8 = diffuseSample_10.xyz;
					  tmpvar_9 = diffuseSample_10.w;
					  highp float tmpvar_15;
					  tmpvar_15 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).x * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
					  atten_4 = tmpvar_15;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_5;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_16;
					  mediump vec4 c_17;
					  highp vec3 tmpvar_18;
					  tmpvar_18 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_19;
					  mediump vec3 albedo_20;
					  albedo_20 = tmpvar_8;
					  mediump vec3 tmpvar_21;
					  tmpvar_21 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_20, vec3(_Metallic));
					  tmpvar_19 = (albedo_20 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_16 = tmpvar_19;
					  mediump vec3 diffColor_22;
					  diffColor_22 = tmpvar_16;
					  mediump float alpha_23;
					  alpha_23 = tmpvar_9;
					  tmpvar_16 = diffColor_22;
					  mediump vec3 diffColor_24;
					  diffColor_24 = tmpvar_16;
					  mediump vec3 color_25;
					  highp float specularTerm_26;
					  highp float a2_27;
					  mediump float roughness_28;
					  mediump float perceptualRoughness_29;
					  highp vec3 tmpvar_30;
					  highp vec3 inVec_31;
					  inVec_31 = (tmpvar_2 + normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2)));
					  tmpvar_30 = (inVec_31 * inversesqrt(max (0.001, 
					    dot (inVec_31, inVec_31)
					  )));
					  mediump float tmpvar_32;
					  highp float tmpvar_33;
					  tmpvar_33 = clamp (dot (tmpvar_18, tmpvar_2), 0.0, 1.0);
					  tmpvar_32 = tmpvar_33;
					  highp float tmpvar_34;
					  tmpvar_34 = clamp (dot (tmpvar_18, tmpvar_30), 0.0, 1.0);
					  highp float tmpvar_35;
					  highp float smoothness_36;
					  smoothness_36 = _Glossiness;
					  tmpvar_35 = (1.0 - smoothness_36);
					  perceptualRoughness_29 = tmpvar_35;
					  highp float tmpvar_37;
					  highp float perceptualRoughness_38;
					  perceptualRoughness_38 = perceptualRoughness_29;
					  tmpvar_37 = (perceptualRoughness_38 * perceptualRoughness_38);
					  roughness_28 = tmpvar_37;
					  mediump float tmpvar_39;
					  tmpvar_39 = (roughness_28 * roughness_28);
					  a2_27 = tmpvar_39;
					  specularTerm_26 = ((roughness_28 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_30), 0.0, 1.0)) * (1.5 + roughness_28))
					   * 
					    (((tmpvar_34 * tmpvar_34) * (a2_27 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_40;
					  tmpvar_40 = clamp (specularTerm_26, 0.0, 100.0);
					  specularTerm_26 = tmpvar_40;
					  highp vec3 tmpvar_41;
					  tmpvar_41 = (((diffColor_24 + 
					    (tmpvar_40 * tmpvar_21)
					  ) * tmpvar_1) * tmpvar_32);
					  color_25 = tmpvar_41;
					  mediump vec4 tmpvar_42;
					  tmpvar_42.w = 1.0;
					  tmpvar_42.xyz = color_25;
					  c_17.xyz = tmpvar_42.xyz;
					  c_17.w = alpha_23;
					  c_3.xyz = c_17.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform highp sampler2D unity_NHxRoughness;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					vec3 u_xlat2;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					float u_xlat10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat1.xyz = vec3(_DayWeight) * u_xlat16_1.xyz + u_xlat10_2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat16_3.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_18) + u_xlat16_3.xyz;
					    u_xlat0.xzw = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xzw).w;
					    u_xlat10 = texture(_LightTextureB0, u_xlat1.xx).x;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat5) * u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					float u_xlat5;
					mediump float u_xlat16_8;
					float u_xlat12;
					float u_xlat13;
					mediump float u_xlat16_13;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat16_13 = (-_Glossiness) + 1.0;
					    u_xlat16_2 = u_xlat16_13 * u_xlat16_13 + 1.5;
					    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;
					    u_xlat12 = u_xlat12 * u_xlat16_2;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD1.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat4 = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
					#else
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_8 = u_xlat16_13 * u_xlat16_13 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat16_13 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat1.xyz = vec3(_DayWeight) * u_xlat16_1.xyz + u_xlat10_2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat16_3.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat0.xzw;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = texture(_LightTexture0, u_xlat1.xyz).w;
					    u_xlat5 = texture(_LightTextureB0, vec2(u_xlat13)).x;
					    u_xlat1.x = u_xlat1.x * u_xlat5;
					    u_xlat16_3.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_3.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					float u_xlat5;
					mediump float u_xlat16_8;
					float u_xlat12;
					float u_xlat13;
					mediump float u_xlat16_13;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat16_13 = (-_Glossiness) + 1.0;
					    u_xlat16_2 = u_xlat16_13 * u_xlat16_13 + 1.5;
					    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;
					    u_xlat12 = u_xlat12 * u_xlat16_2;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD1.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat4 = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
					#else
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_8 = u_xlat16_13 * u_xlat16_13 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat16_13 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat1.xyz = vec3(_DayWeight) * u_xlat16_1.xyz + u_xlat10_2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat16_3.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat0.xzw;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = texture(_LightTexture0, u_xlat1.xyz).w;
					    u_xlat5 = texture(_LightTextureB0, vec2(u_xlat13)).x;
					    u_xlat1.x = u_xlat1.x * u_xlat5;
					    u_xlat16_3.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_3.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec2 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  highp vec4 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
					  xlv_TEXCOORD2 = tmpvar_4.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4).xy;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp sampler2D _LightTexture0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec2 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  highp vec3 worldViewDir_5;
					  lowp vec3 lightDir_6;
					  highp vec4 tmpvar_7;
					  mediump vec3 tmpvar_8;
					  tmpvar_8 = _WorldSpaceLightPos0.xyz;
					  lightDir_6 = tmpvar_8;
					  worldViewDir_5 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
					  tmpvar_7 = xlv_COLOR0;
					  lowp vec3 tmpvar_9;
					  lowp float tmpvar_10;
					  highp vec4 diffuseSample_11;
					  highp vec4 nightSample_12;
					  highp vec4 daySample_13;
					  lowp vec4 tmpvar_14;
					  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_13 = tmpvar_14;
					  lowp vec4 tmpvar_15;
					  tmpvar_15 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_12 = tmpvar_15;
					  diffuseSample_11 = (mix (nightSample_12, daySample_13, vec4(_DayWeight)) * _Color);
					  diffuseSample_11.xyz = (diffuseSample_11.xyz * tmpvar_7.xyz);
					  tmpvar_9 = diffuseSample_11.xyz;
					  tmpvar_10 = diffuseSample_11.w;
					  highp float tmpvar_16;
					  tmpvar_16 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
					  atten_4 = tmpvar_16;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_17;
					  mediump vec4 c_18;
					  highp vec3 tmpvar_19;
					  tmpvar_19 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_20;
					  mediump vec3 albedo_21;
					  albedo_21 = tmpvar_9;
					  tmpvar_20 = (albedo_21 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_17 = tmpvar_20;
					  mediump vec3 diffColor_22;
					  diffColor_22 = tmpvar_17;
					  mediump float alpha_23;
					  alpha_23 = tmpvar_10;
					  tmpvar_17 = diffColor_22;
					  mediump vec3 diffColor_24;
					  diffColor_24 = tmpvar_17;
					  mediump vec2 rlPow4AndFresnelTerm_25;
					  mediump float tmpvar_26;
					  highp float tmpvar_27;
					  tmpvar_27 = clamp (dot (tmpvar_19, tmpvar_2), 0.0, 1.0);
					  tmpvar_26 = tmpvar_27;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = clamp (dot (tmpvar_19, worldViewDir_5), 0.0, 1.0);
					  tmpvar_28 = tmpvar_29;
					  highp vec2 tmpvar_30;
					  tmpvar_30.x = dot ((worldViewDir_5 - (2.0 * 
					    (dot (tmpvar_19, worldViewDir_5) * tmpvar_19)
					  )), tmpvar_2);
					  tmpvar_30.y = (1.0 - tmpvar_28);
					  highp vec2 tmpvar_31;
					  tmpvar_31 = ((tmpvar_30 * tmpvar_30) * (tmpvar_30 * tmpvar_30));
					  rlPow4AndFresnelTerm_25 = tmpvar_31;
					  mediump float tmpvar_32;
					  tmpvar_32 = rlPow4AndFresnelTerm_25.x;
					  mediump float specular_33;
					  highp float smoothness_34;
					  smoothness_34 = _Glossiness;
					  highp vec2 tmpvar_35;
					  tmpvar_35.x = tmpvar_32;
					  tmpvar_35.y = (1.0 - smoothness_34);
					  highp float tmpvar_36;
					  tmpvar_36 = (texture2D (unity_NHxRoughness, tmpvar_35).x * 16.0);
					  specular_33 = tmpvar_36;
					  mediump vec4 tmpvar_37;
					  tmpvar_37.w = 1.0;
					  tmpvar_37.xyz = ((diffColor_24 + (specular_33 * 
					    mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_21, vec3(_Metallic))
					  )) * (tmpvar_1 * tmpvar_26));
					  c_18.xyz = tmpvar_37.xyz;
					  c_18.w = alpha_23;
					  c_3.xyz = c_18.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec2 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  highp vec4 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
					  xlv_TEXCOORD2 = tmpvar_4.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4).xy;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _LightTexture0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec2 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  lowp vec3 lightDir_5;
					  highp vec4 tmpvar_6;
					  mediump vec3 tmpvar_7;
					  tmpvar_7 = _WorldSpaceLightPos0.xyz;
					  lightDir_5 = tmpvar_7;
					  tmpvar_6 = xlv_COLOR0;
					  lowp vec3 tmpvar_8;
					  lowp float tmpvar_9;
					  highp vec4 diffuseSample_10;
					  highp vec4 nightSample_11;
					  highp vec4 daySample_12;
					  lowp vec4 tmpvar_13;
					  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_12 = tmpvar_13;
					  lowp vec4 tmpvar_14;
					  tmpvar_14 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_11 = tmpvar_14;
					  diffuseSample_10 = (mix (nightSample_11, daySample_12, vec4(_DayWeight)) * _Color);
					  diffuseSample_10.xyz = (diffuseSample_10.xyz * tmpvar_6.xyz);
					  tmpvar_8 = diffuseSample_10.xyz;
					  tmpvar_9 = diffuseSample_10.w;
					  highp float tmpvar_15;
					  tmpvar_15 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
					  atten_4 = tmpvar_15;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_5;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_16;
					  mediump vec4 c_17;
					  highp vec3 tmpvar_18;
					  tmpvar_18 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_19;
					  mediump vec3 albedo_20;
					  albedo_20 = tmpvar_8;
					  mediump vec3 tmpvar_21;
					  tmpvar_21 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_20, vec3(_Metallic));
					  tmpvar_19 = (albedo_20 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_16 = tmpvar_19;
					  mediump vec3 diffColor_22;
					  diffColor_22 = tmpvar_16;
					  mediump float alpha_23;
					  alpha_23 = tmpvar_9;
					  tmpvar_16 = diffColor_22;
					  mediump vec3 diffColor_24;
					  diffColor_24 = tmpvar_16;
					  mediump vec3 color_25;
					  highp float specularTerm_26;
					  highp float a2_27;
					  mediump float roughness_28;
					  mediump float perceptualRoughness_29;
					  highp vec3 tmpvar_30;
					  highp vec3 inVec_31;
					  inVec_31 = (tmpvar_2 + normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2)));
					  tmpvar_30 = (inVec_31 * inversesqrt(max (0.001, 
					    dot (inVec_31, inVec_31)
					  )));
					  mediump float tmpvar_32;
					  highp float tmpvar_33;
					  tmpvar_33 = clamp (dot (tmpvar_18, tmpvar_2), 0.0, 1.0);
					  tmpvar_32 = tmpvar_33;
					  highp float tmpvar_34;
					  tmpvar_34 = clamp (dot (tmpvar_18, tmpvar_30), 0.0, 1.0);
					  highp float tmpvar_35;
					  highp float smoothness_36;
					  smoothness_36 = _Glossiness;
					  tmpvar_35 = (1.0 - smoothness_36);
					  perceptualRoughness_29 = tmpvar_35;
					  highp float tmpvar_37;
					  highp float perceptualRoughness_38;
					  perceptualRoughness_38 = perceptualRoughness_29;
					  tmpvar_37 = (perceptualRoughness_38 * perceptualRoughness_38);
					  roughness_28 = tmpvar_37;
					  mediump float tmpvar_39;
					  tmpvar_39 = (roughness_28 * roughness_28);
					  a2_27 = tmpvar_39;
					  specularTerm_26 = ((roughness_28 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_30), 0.0, 1.0)) * (1.5 + roughness_28))
					   * 
					    (((tmpvar_34 * tmpvar_34) * (a2_27 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_40;
					  tmpvar_40 = clamp (specularTerm_26, 0.0, 100.0);
					  specularTerm_26 = tmpvar_40;
					  highp vec3 tmpvar_41;
					  tmpvar_41 = (((diffColor_24 + 
					    (tmpvar_40 * tmpvar_21)
					  ) * tmpvar_1) * tmpvar_32);
					  color_25 = tmpvar_41;
					  mediump vec4 tmpvar_42;
					  tmpvar_42.w = 1.0;
					  tmpvar_42.xyz = color_25;
					  c_17.xyz = tmpvar_42.xyz;
					  c_17.w = alpha_23;
					  c_3.xyz = c_17.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec2 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  highp vec4 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
					  xlv_TEXCOORD2 = tmpvar_4.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4).xy;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _LightTexture0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec2 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  lowp vec3 lightDir_5;
					  highp vec4 tmpvar_6;
					  mediump vec3 tmpvar_7;
					  tmpvar_7 = _WorldSpaceLightPos0.xyz;
					  lightDir_5 = tmpvar_7;
					  tmpvar_6 = xlv_COLOR0;
					  lowp vec3 tmpvar_8;
					  lowp float tmpvar_9;
					  highp vec4 diffuseSample_10;
					  highp vec4 nightSample_11;
					  highp vec4 daySample_12;
					  lowp vec4 tmpvar_13;
					  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_12 = tmpvar_13;
					  lowp vec4 tmpvar_14;
					  tmpvar_14 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_11 = tmpvar_14;
					  diffuseSample_10 = (mix (nightSample_11, daySample_12, vec4(_DayWeight)) * _Color);
					  diffuseSample_10.xyz = (diffuseSample_10.xyz * tmpvar_6.xyz);
					  tmpvar_8 = diffuseSample_10.xyz;
					  tmpvar_9 = diffuseSample_10.w;
					  highp float tmpvar_15;
					  tmpvar_15 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
					  atten_4 = tmpvar_15;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_5;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_16;
					  mediump vec4 c_17;
					  highp vec3 tmpvar_18;
					  tmpvar_18 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_19;
					  mediump vec3 albedo_20;
					  albedo_20 = tmpvar_8;
					  mediump vec3 tmpvar_21;
					  tmpvar_21 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_20, vec3(_Metallic));
					  tmpvar_19 = (albedo_20 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_16 = tmpvar_19;
					  mediump vec3 diffColor_22;
					  diffColor_22 = tmpvar_16;
					  mediump float alpha_23;
					  alpha_23 = tmpvar_9;
					  tmpvar_16 = diffColor_22;
					  mediump vec3 diffColor_24;
					  diffColor_24 = tmpvar_16;
					  mediump vec3 color_25;
					  highp float specularTerm_26;
					  highp float a2_27;
					  mediump float roughness_28;
					  mediump float perceptualRoughness_29;
					  highp vec3 tmpvar_30;
					  highp vec3 inVec_31;
					  inVec_31 = (tmpvar_2 + normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2)));
					  tmpvar_30 = (inVec_31 * inversesqrt(max (0.001, 
					    dot (inVec_31, inVec_31)
					  )));
					  mediump float tmpvar_32;
					  highp float tmpvar_33;
					  tmpvar_33 = clamp (dot (tmpvar_18, tmpvar_2), 0.0, 1.0);
					  tmpvar_32 = tmpvar_33;
					  highp float tmpvar_34;
					  tmpvar_34 = clamp (dot (tmpvar_18, tmpvar_30), 0.0, 1.0);
					  highp float tmpvar_35;
					  highp float smoothness_36;
					  smoothness_36 = _Glossiness;
					  tmpvar_35 = (1.0 - smoothness_36);
					  perceptualRoughness_29 = tmpvar_35;
					  highp float tmpvar_37;
					  highp float perceptualRoughness_38;
					  perceptualRoughness_38 = perceptualRoughness_29;
					  tmpvar_37 = (perceptualRoughness_38 * perceptualRoughness_38);
					  roughness_28 = tmpvar_37;
					  mediump float tmpvar_39;
					  tmpvar_39 = (roughness_28 * roughness_28);
					  a2_27 = tmpvar_39;
					  specularTerm_26 = ((roughness_28 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_30), 0.0, 1.0)) * (1.5 + roughness_28))
					   * 
					    (((tmpvar_34 * tmpvar_34) * (a2_27 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_40;
					  tmpvar_40 = clamp (specularTerm_26, 0.0, 100.0);
					  specularTerm_26 = tmpvar_40;
					  highp vec3 tmpvar_41;
					  tmpvar_41 = (((diffColor_24 + 
					    (tmpvar_40 * tmpvar_21)
					  ) * tmpvar_1) * tmpvar_32);
					  color_25 = tmpvar_41;
					  mediump vec4 tmpvar_42;
					  tmpvar_42.w = 1.0;
					  tmpvar_42.xyz = color_25;
					  c_17.xyz = tmpvar_42.xyz;
					  c_17.w = alpha_23;
					  c_3.xyz = c_17.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D unity_NHxRoughness;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_Glossiness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat1.xyz = vec3(_DayWeight) * u_xlat16_1.xyz + u_xlat10_2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat16_3.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_18) + u_xlat16_3.xyz;
					    u_xlat0.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat15) * u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTexture0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					vec3 u_xlat5;
					mediump float u_xlat16_5;
					mediump float u_xlat16_8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat16_1.x = (-_Glossiness) + 1.0;
					    u_xlat16_5 = u_xlat16_1.x * u_xlat16_1.x + 1.5;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat12 = u_xlat12 * u_xlat16_5;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD1.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat4 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
					#else
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_8 = u_xlat16_1.x * u_xlat16_1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat16_1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat1.xyz = vec3(_DayWeight) * u_xlat16_1.xyz + u_xlat10_2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat16_3.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat0.xzw;
					    u_xlat1.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat1.xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat1.x = texture(_LightTexture0, u_xlat1.xy).w;
					    u_xlat16_3.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_3.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTexture0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					vec3 u_xlat5;
					mediump float u_xlat16_5;
					mediump float u_xlat16_8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat16_1.x = (-_Glossiness) + 1.0;
					    u_xlat16_5 = u_xlat16_1.x * u_xlat16_1.x + 1.5;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat12 = u_xlat12 * u_xlat16_5;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD1.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat4 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
					#else
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_8 = u_xlat16_1.x * u_xlat16_1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat16_1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat1.xyz = vec3(_DayWeight) * u_xlat16_1.xyz + u_xlat10_2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat16_3.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat0.xzw;
					    u_xlat1.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat1.xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat1.x = texture(_LightTexture0, u_xlat1.xy).w;
					    u_xlat16_3.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_3.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1.w = 1.0;
					  tmpvar_1.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_2;
					  tmpvar_2[0] = unity_WorldToObject[0].xyz;
					  tmpvar_2[1] = unity_WorldToObject[1].xyz;
					  tmpvar_2[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_2));
					  highp vec4 tmpvar_3;
					  tmpvar_3 = (unity_ObjectToWorld * _glesVertex);
					  xlv_TEXCOORD2 = tmpvar_3.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_3);
					  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_3);
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  lowp float shadow_5;
					  lowp vec3 lightDir_6;
					  highp vec4 tmpvar_7;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_6 = tmpvar_8;
					  highp vec3 tmpvar_9;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2);
					  tmpvar_9 = normalize(tmpvar_10);
					  tmpvar_7 = xlv_COLOR0;
					  lowp vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 diffuseSample_13;
					  highp vec4 nightSample_14;
					  highp vec4 daySample_15;
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_15 = tmpvar_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_14 = tmpvar_17;
					  diffuseSample_13 = (mix (nightSample_14, daySample_15, vec4(_DayWeight)) * _Color);
					  diffuseSample_13.xyz = (diffuseSample_13.xyz * tmpvar_7.xyz);
					  tmpvar_11 = diffuseSample_13.xyz;
					  tmpvar_12 = diffuseSample_13.w;
					  mediump float realtimeShadowAttenuation_18;
					  highp vec4 v_19;
					  v_19.x = unity_MatrixV[0].z;
					  v_19.y = unity_MatrixV[1].z;
					  v_19.z = unity_MatrixV[2].z;
					  v_19.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = clamp (((
					    mix (dot (tmpvar_10, v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_21 = tmpvar_22;
					  realtimeShadowAttenuation_18 = 1.0;
					  lowp float tmpvar_23;
					  highp vec4 tmpvar_24;
					  tmpvar_24 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
					  mediump float tmpvar_25;
					  if ((tmpvar_24.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
					    tmpvar_25 = _LightShadowData.x;
					  } else {
					    tmpvar_25 = 1.0;
					  };
					  tmpvar_23 = tmpvar_25;
					  realtimeShadowAttenuation_18 = tmpvar_23;
					  mediump float tmpvar_26;
					  tmpvar_26 = mix (realtimeShadowAttenuation_18, 1.0, tmpvar_21);
					  shadow_5 = tmpvar_26;
					  lowp float tmpvar_27;
					  highp vec4 tmpvar_28;
					  tmpvar_28 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
					  tmpvar_27 = tmpvar_28.w;
					  lowp float tmpvar_29;
					  highp vec4 tmpvar_30;
					  tmpvar_30 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
					  tmpvar_29 = tmpvar_30.x;
					  highp float tmpvar_31;
					  tmpvar_31 = (((
					    float((xlv_TEXCOORD3.z > 0.0))
					   * tmpvar_27) * tmpvar_29) * shadow_5);
					  atten_4 = tmpvar_31;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_32;
					  mediump vec4 c_33;
					  highp vec3 tmpvar_34;
					  tmpvar_34 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_35;
					  mediump vec3 albedo_36;
					  albedo_36 = tmpvar_11;
					  tmpvar_35 = (albedo_36 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_32 = tmpvar_35;
					  mediump vec3 diffColor_37;
					  diffColor_37 = tmpvar_32;
					  mediump float alpha_38;
					  alpha_38 = tmpvar_12;
					  tmpvar_32 = diffColor_37;
					  mediump vec3 diffColor_39;
					  diffColor_39 = tmpvar_32;
					  mediump vec2 rlPow4AndFresnelTerm_40;
					  mediump float tmpvar_41;
					  highp float tmpvar_42;
					  tmpvar_42 = clamp (dot (tmpvar_34, tmpvar_2), 0.0, 1.0);
					  tmpvar_41 = tmpvar_42;
					  mediump float tmpvar_43;
					  highp float tmpvar_44;
					  tmpvar_44 = clamp (dot (tmpvar_34, tmpvar_9), 0.0, 1.0);
					  tmpvar_43 = tmpvar_44;
					  highp vec2 tmpvar_45;
					  tmpvar_45.x = dot ((tmpvar_9 - (2.0 * 
					    (dot (tmpvar_34, tmpvar_9) * tmpvar_34)
					  )), tmpvar_2);
					  tmpvar_45.y = (1.0 - tmpvar_43);
					  highp vec2 tmpvar_46;
					  tmpvar_46 = ((tmpvar_45 * tmpvar_45) * (tmpvar_45 * tmpvar_45));
					  rlPow4AndFresnelTerm_40 = tmpvar_46;
					  mediump float tmpvar_47;
					  tmpvar_47 = rlPow4AndFresnelTerm_40.x;
					  mediump float specular_48;
					  highp float smoothness_49;
					  smoothness_49 = _Glossiness;
					  highp vec2 tmpvar_50;
					  tmpvar_50.x = tmpvar_47;
					  tmpvar_50.y = (1.0 - smoothness_49);
					  highp float tmpvar_51;
					  tmpvar_51 = (texture2D (unity_NHxRoughness, tmpvar_50).x * 16.0);
					  specular_48 = tmpvar_51;
					  mediump vec4 tmpvar_52;
					  tmpvar_52.w = 1.0;
					  tmpvar_52.xyz = ((diffColor_39 + (specular_48 * 
					    mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_36, vec3(_Metallic))
					  )) * (tmpvar_1 * tmpvar_41));
					  c_33.xyz = tmpvar_52.xyz;
					  c_33.w = alpha_38;
					  c_3.xyz = c_33.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1.w = 1.0;
					  tmpvar_1.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_2;
					  tmpvar_2[0] = unity_WorldToObject[0].xyz;
					  tmpvar_2[1] = unity_WorldToObject[1].xyz;
					  tmpvar_2[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_2));
					  highp vec4 tmpvar_3;
					  tmpvar_3 = (unity_ObjectToWorld * _glesVertex);
					  xlv_TEXCOORD2 = tmpvar_3.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_3);
					  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_3);
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  lowp float shadow_5;
					  lowp vec3 lightDir_6;
					  highp vec4 tmpvar_7;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_6 = tmpvar_8;
					  highp vec3 tmpvar_9;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2);
					  tmpvar_9 = normalize(tmpvar_10);
					  tmpvar_7 = xlv_COLOR0;
					  lowp vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 diffuseSample_13;
					  highp vec4 nightSample_14;
					  highp vec4 daySample_15;
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_15 = tmpvar_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_14 = tmpvar_17;
					  diffuseSample_13 = (mix (nightSample_14, daySample_15, vec4(_DayWeight)) * _Color);
					  diffuseSample_13.xyz = (diffuseSample_13.xyz * tmpvar_7.xyz);
					  tmpvar_11 = diffuseSample_13.xyz;
					  tmpvar_12 = diffuseSample_13.w;
					  mediump float realtimeShadowAttenuation_18;
					  highp vec4 v_19;
					  v_19.x = unity_MatrixV[0].z;
					  v_19.y = unity_MatrixV[1].z;
					  v_19.z = unity_MatrixV[2].z;
					  v_19.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = clamp (((
					    mix (dot (tmpvar_10, v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_21 = tmpvar_22;
					  realtimeShadowAttenuation_18 = 1.0;
					  lowp float tmpvar_23;
					  highp vec4 tmpvar_24;
					  tmpvar_24 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
					  mediump float tmpvar_25;
					  if ((tmpvar_24.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
					    tmpvar_25 = _LightShadowData.x;
					  } else {
					    tmpvar_25 = 1.0;
					  };
					  tmpvar_23 = tmpvar_25;
					  realtimeShadowAttenuation_18 = tmpvar_23;
					  mediump float tmpvar_26;
					  tmpvar_26 = mix (realtimeShadowAttenuation_18, 1.0, tmpvar_21);
					  shadow_5 = tmpvar_26;
					  lowp float tmpvar_27;
					  highp vec4 tmpvar_28;
					  tmpvar_28 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
					  tmpvar_27 = tmpvar_28.w;
					  lowp float tmpvar_29;
					  highp vec4 tmpvar_30;
					  tmpvar_30 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
					  tmpvar_29 = tmpvar_30.x;
					  highp float tmpvar_31;
					  tmpvar_31 = (((
					    float((xlv_TEXCOORD3.z > 0.0))
					   * tmpvar_27) * tmpvar_29) * shadow_5);
					  atten_4 = tmpvar_31;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_32;
					  mediump vec4 c_33;
					  highp vec3 tmpvar_34;
					  tmpvar_34 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_35;
					  mediump vec3 albedo_36;
					  albedo_36 = tmpvar_11;
					  mediump vec3 tmpvar_37;
					  tmpvar_37 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_36, vec3(_Metallic));
					  tmpvar_35 = (albedo_36 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_32 = tmpvar_35;
					  mediump vec3 diffColor_38;
					  diffColor_38 = tmpvar_32;
					  mediump float alpha_39;
					  alpha_39 = tmpvar_12;
					  tmpvar_32 = diffColor_38;
					  mediump vec3 diffColor_40;
					  diffColor_40 = tmpvar_32;
					  mediump vec3 color_41;
					  highp float specularTerm_42;
					  highp float a2_43;
					  mediump float roughness_44;
					  mediump float perceptualRoughness_45;
					  highp vec3 tmpvar_46;
					  highp vec3 inVec_47;
					  inVec_47 = (tmpvar_2 + tmpvar_9);
					  tmpvar_46 = (inVec_47 * inversesqrt(max (0.001, 
					    dot (inVec_47, inVec_47)
					  )));
					  mediump float tmpvar_48;
					  highp float tmpvar_49;
					  tmpvar_49 = clamp (dot (tmpvar_34, tmpvar_2), 0.0, 1.0);
					  tmpvar_48 = tmpvar_49;
					  highp float tmpvar_50;
					  tmpvar_50 = clamp (dot (tmpvar_34, tmpvar_46), 0.0, 1.0);
					  highp float tmpvar_51;
					  highp float smoothness_52;
					  smoothness_52 = _Glossiness;
					  tmpvar_51 = (1.0 - smoothness_52);
					  perceptualRoughness_45 = tmpvar_51;
					  highp float tmpvar_53;
					  highp float perceptualRoughness_54;
					  perceptualRoughness_54 = perceptualRoughness_45;
					  tmpvar_53 = (perceptualRoughness_54 * perceptualRoughness_54);
					  roughness_44 = tmpvar_53;
					  mediump float tmpvar_55;
					  tmpvar_55 = (roughness_44 * roughness_44);
					  a2_43 = tmpvar_55;
					  specularTerm_42 = ((roughness_44 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_46), 0.0, 1.0)) * (1.5 + roughness_44))
					   * 
					    (((tmpvar_50 * tmpvar_50) * (a2_43 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_56;
					  tmpvar_56 = clamp (specularTerm_42, 0.0, 100.0);
					  specularTerm_42 = tmpvar_56;
					  highp vec3 tmpvar_57;
					  tmpvar_57 = (((diffColor_40 + 
					    (tmpvar_56 * tmpvar_37)
					  ) * tmpvar_1) * tmpvar_48);
					  color_41 = tmpvar_57;
					  mediump vec4 tmpvar_58;
					  tmpvar_58.w = 1.0;
					  tmpvar_58.xyz = color_41;
					  c_33.xyz = tmpvar_58.xyz;
					  c_33.w = alpha_39;
					  c_3.xyz = c_33.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1.w = 1.0;
					  tmpvar_1.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_2;
					  tmpvar_2[0] = unity_WorldToObject[0].xyz;
					  tmpvar_2[1] = unity_WorldToObject[1].xyz;
					  tmpvar_2[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_2));
					  highp vec4 tmpvar_3;
					  tmpvar_3 = (unity_ObjectToWorld * _glesVertex);
					  xlv_TEXCOORD2 = tmpvar_3.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_3);
					  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_3);
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  lowp float shadow_5;
					  lowp vec3 lightDir_6;
					  highp vec4 tmpvar_7;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_6 = tmpvar_8;
					  highp vec3 tmpvar_9;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2);
					  tmpvar_9 = normalize(tmpvar_10);
					  tmpvar_7 = xlv_COLOR0;
					  lowp vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 diffuseSample_13;
					  highp vec4 nightSample_14;
					  highp vec4 daySample_15;
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_15 = tmpvar_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_14 = tmpvar_17;
					  diffuseSample_13 = (mix (nightSample_14, daySample_15, vec4(_DayWeight)) * _Color);
					  diffuseSample_13.xyz = (diffuseSample_13.xyz * tmpvar_7.xyz);
					  tmpvar_11 = diffuseSample_13.xyz;
					  tmpvar_12 = diffuseSample_13.w;
					  mediump float realtimeShadowAttenuation_18;
					  highp vec4 v_19;
					  v_19.x = unity_MatrixV[0].z;
					  v_19.y = unity_MatrixV[1].z;
					  v_19.z = unity_MatrixV[2].z;
					  v_19.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = clamp (((
					    mix (dot (tmpvar_10, v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_21 = tmpvar_22;
					  realtimeShadowAttenuation_18 = 1.0;
					  lowp float tmpvar_23;
					  highp vec4 tmpvar_24;
					  tmpvar_24 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
					  mediump float tmpvar_25;
					  if ((tmpvar_24.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
					    tmpvar_25 = _LightShadowData.x;
					  } else {
					    tmpvar_25 = 1.0;
					  };
					  tmpvar_23 = tmpvar_25;
					  realtimeShadowAttenuation_18 = tmpvar_23;
					  mediump float tmpvar_26;
					  tmpvar_26 = mix (realtimeShadowAttenuation_18, 1.0, tmpvar_21);
					  shadow_5 = tmpvar_26;
					  lowp float tmpvar_27;
					  highp vec4 tmpvar_28;
					  tmpvar_28 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
					  tmpvar_27 = tmpvar_28.w;
					  lowp float tmpvar_29;
					  highp vec4 tmpvar_30;
					  tmpvar_30 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
					  tmpvar_29 = tmpvar_30.x;
					  highp float tmpvar_31;
					  tmpvar_31 = (((
					    float((xlv_TEXCOORD3.z > 0.0))
					   * tmpvar_27) * tmpvar_29) * shadow_5);
					  atten_4 = tmpvar_31;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_32;
					  mediump vec4 c_33;
					  highp vec3 tmpvar_34;
					  tmpvar_34 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_35;
					  mediump vec3 albedo_36;
					  albedo_36 = tmpvar_11;
					  mediump vec3 tmpvar_37;
					  tmpvar_37 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_36, vec3(_Metallic));
					  tmpvar_35 = (albedo_36 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_32 = tmpvar_35;
					  mediump vec3 diffColor_38;
					  diffColor_38 = tmpvar_32;
					  mediump float alpha_39;
					  alpha_39 = tmpvar_12;
					  tmpvar_32 = diffColor_38;
					  mediump vec3 diffColor_40;
					  diffColor_40 = tmpvar_32;
					  mediump vec3 color_41;
					  highp float specularTerm_42;
					  highp float a2_43;
					  mediump float roughness_44;
					  mediump float perceptualRoughness_45;
					  highp vec3 tmpvar_46;
					  highp vec3 inVec_47;
					  inVec_47 = (tmpvar_2 + tmpvar_9);
					  tmpvar_46 = (inVec_47 * inversesqrt(max (0.001, 
					    dot (inVec_47, inVec_47)
					  )));
					  mediump float tmpvar_48;
					  highp float tmpvar_49;
					  tmpvar_49 = clamp (dot (tmpvar_34, tmpvar_2), 0.0, 1.0);
					  tmpvar_48 = tmpvar_49;
					  highp float tmpvar_50;
					  tmpvar_50 = clamp (dot (tmpvar_34, tmpvar_46), 0.0, 1.0);
					  highp float tmpvar_51;
					  highp float smoothness_52;
					  smoothness_52 = _Glossiness;
					  tmpvar_51 = (1.0 - smoothness_52);
					  perceptualRoughness_45 = tmpvar_51;
					  highp float tmpvar_53;
					  highp float perceptualRoughness_54;
					  perceptualRoughness_54 = perceptualRoughness_45;
					  tmpvar_53 = (perceptualRoughness_54 * perceptualRoughness_54);
					  roughness_44 = tmpvar_53;
					  mediump float tmpvar_55;
					  tmpvar_55 = (roughness_44 * roughness_44);
					  a2_43 = tmpvar_55;
					  specularTerm_42 = ((roughness_44 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_46), 0.0, 1.0)) * (1.5 + roughness_44))
					   * 
					    (((tmpvar_50 * tmpvar_50) * (a2_43 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_56;
					  tmpvar_56 = clamp (specularTerm_42, 0.0, 100.0);
					  specularTerm_42 = tmpvar_56;
					  highp vec3 tmpvar_57;
					  tmpvar_57 = (((diffColor_40 + 
					    (tmpvar_56 * tmpvar_37)
					  ) * tmpvar_1) * tmpvar_48);
					  color_41 = tmpvar_57;
					  mediump vec4 tmpvar_58;
					  tmpvar_58.w = 1.0;
					  tmpvar_58.xyz = color_41;
					  c_33.xyz = tmpvar_58.xyz;
					  c_33.w = alpha_39;
					  c_3.xyz = c_33.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					lowp vec3 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_6;
					lowp float u_xlat10_6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_7;
					lowp vec3 u_xlat10_7;
					bool u_xlatb7;
					mediump float u_xlat16_12;
					float u_xlat18;
					mediump float u_xlat16_22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat18 = u_xlat18 + u_xlat18;
					    u_xlat1.xyz = u_xlat2.xyz * (-vec3(u_xlat18)) + u_xlat1.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat2.x = u_xlat18 * u_xlat18;
					    u_xlat2.y = (-_Glossiness) + 1.0;
					    u_xlat18 = texture(unity_NHxRoughness, u_xlat2.xy).x;
					    u_xlat18 = u_xlat18 * 16.0;
					    u_xlat10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_7.xyz = u_xlat10_7.xyz + (-u_xlat10_2.xyz);
					    u_xlat7.xyz = vec3(_DayWeight) * u_xlat16_7.xyz + u_xlat10_2.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat7.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz;
					    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = u_xlat7.xyz * vec3(u_xlat16_22) + u_xlat16_4.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = (-u_xlat0.x) + u_xlat6.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat2 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat2 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD2.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD2.zzzz + u_xlat2;
					    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_WorldToShadow[3];
					    u_xlat6.xyz = u_xlat2.xyz / u_xlat2.www;
					    vec3 txVec0 = vec3(u_xlat6.xy,u_xlat6.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_12 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_6 = u_xlat10_6 * u_xlat16_12 + _LightShadowData.x;
					    u_xlat16_22 = (-u_xlat16_6) + 1.0;
					    u_xlat16_22 = u_xlat0.x * u_xlat16_22 + u_xlat16_6;
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat7.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat7.xy = u_xlat7.xy + vec2(0.5, 0.5);
					    u_xlat18 = texture(_LightTexture0, u_xlat7.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb7 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb7 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_5.x = (u_xlatb7) ? 1.0 : 0.0;
					    u_xlat16_5.x = u_xlat18 * u_xlat16_5.x;
					    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
					    u_xlat16_22 = u_xlat16_22 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_22) * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat1.xxx * u_xlat16_5.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					lowp float u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump float u_xlat16_5;
					mediump float u_xlat16_7;
					float u_xlat10;
					float u_xlat15;
					mediump float u_xlat16_15;
					mediump float u_xlat16_16;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat15 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat15 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_5 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_0 = u_xlat10_0 * u_xlat16_5 + _LightShadowData.x;
					    u_xlat16_7 = (-u_xlat16_0) + 1.0;
					    u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat5.x = (-u_xlat10) + u_xlat5.x;
					    u_xlat5.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat10;
					    u_xlat5.x = u_xlat5.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
					#else
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					#endif
					    u_xlat16_7 = u_xlat5.x * u_xlat16_7 + u_xlat16_0;
					    u_xlat16_2.x = u_xlat16_7 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat0.xxx + u_xlat5.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat16_16 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_16 * u_xlat16_16 + 1.5;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat0.x = u_xlat0.x * u_xlat16_3;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
					#else
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					#endif
					    u_xlat10 = u_xlat1.x * u_xlat1.x;
					    u_xlat16_15 = u_xlat16_16 * u_xlat16_16 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat16_15 + 1.00001001;
					    u_xlat0.x = u_xlat10 * u_xlat0.x;
					    u_xlat0.x = u_xlat16_16 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_3.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz + (-u_xlat10_3.xyz);
					    u_xlat1.xyz = vec3(_DayWeight) * u_xlat16_1.xyz + u_xlat10_3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_17 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xzw = u_xlat1.xyz * vec3(u_xlat16_17) + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat5.xxx * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					lowp float u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump float u_xlat16_5;
					mediump float u_xlat16_7;
					float u_xlat10;
					float u_xlat15;
					mediump float u_xlat16_15;
					mediump float u_xlat16_16;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat15 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat15 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_5 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_0 = u_xlat10_0 * u_xlat16_5 + _LightShadowData.x;
					    u_xlat16_7 = (-u_xlat16_0) + 1.0;
					    u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat5.x = (-u_xlat10) + u_xlat5.x;
					    u_xlat5.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat10;
					    u_xlat5.x = u_xlat5.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
					#else
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					#endif
					    u_xlat16_7 = u_xlat5.x * u_xlat16_7 + u_xlat16_0;
					    u_xlat16_2.x = u_xlat16_7 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat0.xxx + u_xlat5.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat16_16 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_16 * u_xlat16_16 + 1.5;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat0.x = u_xlat0.x * u_xlat16_3;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
					#else
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					#endif
					    u_xlat10 = u_xlat1.x * u_xlat1.x;
					    u_xlat16_15 = u_xlat16_16 * u_xlat16_16 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat16_15 + 1.00001001;
					    u_xlat0.x = u_xlat10 * u_xlat0.x;
					    u_xlat0.x = u_xlat16_16 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_3.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz + (-u_xlat10_3.xyz);
					    u_xlat1.xyz = vec3(_DayWeight) * u_xlat16_1.xyz + u_xlat10_3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_17 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xzw = u_xlat1.xyz * vec3(u_xlat16_17) + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat5.xxx * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1.w = 1.0;
					  tmpvar_1.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_2;
					  tmpvar_2[0] = unity_WorldToObject[0].xyz;
					  tmpvar_2[1] = unity_WorldToObject[1].xyz;
					  tmpvar_2[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_2));
					  highp vec4 tmpvar_3;
					  tmpvar_3 = (unity_ObjectToWorld * _glesVertex);
					  xlv_TEXCOORD2 = tmpvar_3.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_3);
					  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_3);
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _ShadowOffsets[4];
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  lowp float shadow_5;
					  lowp vec3 lightDir_6;
					  highp vec4 tmpvar_7;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_6 = tmpvar_8;
					  highp vec3 tmpvar_9;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2);
					  tmpvar_9 = normalize(tmpvar_10);
					  tmpvar_7 = xlv_COLOR0;
					  lowp vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 diffuseSample_13;
					  highp vec4 nightSample_14;
					  highp vec4 daySample_15;
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_15 = tmpvar_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_14 = tmpvar_17;
					  diffuseSample_13 = (mix (nightSample_14, daySample_15, vec4(_DayWeight)) * _Color);
					  diffuseSample_13.xyz = (diffuseSample_13.xyz * tmpvar_7.xyz);
					  tmpvar_11 = diffuseSample_13.xyz;
					  tmpvar_12 = diffuseSample_13.w;
					  mediump float realtimeShadowAttenuation_18;
					  highp vec4 v_19;
					  v_19.x = unity_MatrixV[0].z;
					  v_19.y = unity_MatrixV[1].z;
					  v_19.z = unity_MatrixV[2].z;
					  v_19.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = clamp (((
					    mix (dot (tmpvar_10, v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_21 = tmpvar_22;
					  realtimeShadowAttenuation_18 = 1.0;
					  lowp float tmpvar_23;
					  highp vec4 shadowVals_24;
					  highp vec3 tmpvar_25;
					  tmpvar_25 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
					  shadowVals_24.x = texture2D (_ShadowMapTexture, (tmpvar_25.xy + _ShadowOffsets[0].xy)).x;
					  shadowVals_24.y = texture2D (_ShadowMapTexture, (tmpvar_25.xy + _ShadowOffsets[1].xy)).x;
					  shadowVals_24.z = texture2D (_ShadowMapTexture, (tmpvar_25.xy + _ShadowOffsets[2].xy)).x;
					  shadowVals_24.w = texture2D (_ShadowMapTexture, (tmpvar_25.xy + _ShadowOffsets[3].xy)).x;
					  bvec4 tmpvar_26;
					  tmpvar_26 = lessThan (shadowVals_24, tmpvar_25.zzzz);
					  mediump vec4 tmpvar_27;
					  tmpvar_27 = _LightShadowData.xxxx;
					  mediump float tmpvar_28;
					  if (tmpvar_26.x) {
					    tmpvar_28 = tmpvar_27.x;
					  } else {
					    tmpvar_28 = 1.0;
					  };
					  mediump float tmpvar_29;
					  if (tmpvar_26.y) {
					    tmpvar_29 = tmpvar_27.y;
					  } else {
					    tmpvar_29 = 1.0;
					  };
					  mediump float tmpvar_30;
					  if (tmpvar_26.z) {
					    tmpvar_30 = tmpvar_27.z;
					  } else {
					    tmpvar_30 = 1.0;
					  };
					  mediump float tmpvar_31;
					  if (tmpvar_26.w) {
					    tmpvar_31 = tmpvar_27.w;
					  } else {
					    tmpvar_31 = 1.0;
					  };
					  mediump vec4 tmpvar_32;
					  tmpvar_32.x = tmpvar_28;
					  tmpvar_32.y = tmpvar_29;
					  tmpvar_32.z = tmpvar_30;
					  tmpvar_32.w = tmpvar_31;
					  mediump float tmpvar_33;
					  tmpvar_33 = dot (tmpvar_32, vec4(0.25, 0.25, 0.25, 0.25));
					  tmpvar_23 = tmpvar_33;
					  realtimeShadowAttenuation_18 = tmpvar_23;
					  mediump float tmpvar_34;
					  tmpvar_34 = mix (realtimeShadowAttenuation_18, 1.0, tmpvar_21);
					  shadow_5 = tmpvar_34;
					  lowp float tmpvar_35;
					  highp vec4 tmpvar_36;
					  tmpvar_36 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
					  tmpvar_35 = tmpvar_36.w;
					  lowp float tmpvar_37;
					  highp vec4 tmpvar_38;
					  tmpvar_38 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
					  tmpvar_37 = tmpvar_38.x;
					  highp float tmpvar_39;
					  tmpvar_39 = (((
					    float((xlv_TEXCOORD3.z > 0.0))
					   * tmpvar_35) * tmpvar_37) * shadow_5);
					  atten_4 = tmpvar_39;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_40;
					  mediump vec4 c_41;
					  highp vec3 tmpvar_42;
					  tmpvar_42 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_43;
					  mediump vec3 albedo_44;
					  albedo_44 = tmpvar_11;
					  tmpvar_43 = (albedo_44 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_40 = tmpvar_43;
					  mediump vec3 diffColor_45;
					  diffColor_45 = tmpvar_40;
					  mediump float alpha_46;
					  alpha_46 = tmpvar_12;
					  tmpvar_40 = diffColor_45;
					  mediump vec3 diffColor_47;
					  diffColor_47 = tmpvar_40;
					  mediump vec2 rlPow4AndFresnelTerm_48;
					  mediump float tmpvar_49;
					  highp float tmpvar_50;
					  tmpvar_50 = clamp (dot (tmpvar_42, tmpvar_2), 0.0, 1.0);
					  tmpvar_49 = tmpvar_50;
					  mediump float tmpvar_51;
					  highp float tmpvar_52;
					  tmpvar_52 = clamp (dot (tmpvar_42, tmpvar_9), 0.0, 1.0);
					  tmpvar_51 = tmpvar_52;
					  highp vec2 tmpvar_53;
					  tmpvar_53.x = dot ((tmpvar_9 - (2.0 * 
					    (dot (tmpvar_42, tmpvar_9) * tmpvar_42)
					  )), tmpvar_2);
					  tmpvar_53.y = (1.0 - tmpvar_51);
					  highp vec2 tmpvar_54;
					  tmpvar_54 = ((tmpvar_53 * tmpvar_53) * (tmpvar_53 * tmpvar_53));
					  rlPow4AndFresnelTerm_48 = tmpvar_54;
					  mediump float tmpvar_55;
					  tmpvar_55 = rlPow4AndFresnelTerm_48.x;
					  mediump float specular_56;
					  highp float smoothness_57;
					  smoothness_57 = _Glossiness;
					  highp vec2 tmpvar_58;
					  tmpvar_58.x = tmpvar_55;
					  tmpvar_58.y = (1.0 - smoothness_57);
					  highp float tmpvar_59;
					  tmpvar_59 = (texture2D (unity_NHxRoughness, tmpvar_58).x * 16.0);
					  specular_56 = tmpvar_59;
					  mediump vec4 tmpvar_60;
					  tmpvar_60.w = 1.0;
					  tmpvar_60.xyz = ((diffColor_47 + (specular_56 * 
					    mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_44, vec3(_Metallic))
					  )) * (tmpvar_1 * tmpvar_49));
					  c_41.xyz = tmpvar_60.xyz;
					  c_41.w = alpha_46;
					  c_3.xyz = c_41.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1.w = 1.0;
					  tmpvar_1.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_2;
					  tmpvar_2[0] = unity_WorldToObject[0].xyz;
					  tmpvar_2[1] = unity_WorldToObject[1].xyz;
					  tmpvar_2[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_2));
					  highp vec4 tmpvar_3;
					  tmpvar_3 = (unity_ObjectToWorld * _glesVertex);
					  xlv_TEXCOORD2 = tmpvar_3.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_3);
					  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_3);
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _ShadowOffsets[4];
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  lowp float shadow_5;
					  lowp vec3 lightDir_6;
					  highp vec4 tmpvar_7;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_6 = tmpvar_8;
					  highp vec3 tmpvar_9;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2);
					  tmpvar_9 = normalize(tmpvar_10);
					  tmpvar_7 = xlv_COLOR0;
					  lowp vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 diffuseSample_13;
					  highp vec4 nightSample_14;
					  highp vec4 daySample_15;
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_15 = tmpvar_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_14 = tmpvar_17;
					  diffuseSample_13 = (mix (nightSample_14, daySample_15, vec4(_DayWeight)) * _Color);
					  diffuseSample_13.xyz = (diffuseSample_13.xyz * tmpvar_7.xyz);
					  tmpvar_11 = diffuseSample_13.xyz;
					  tmpvar_12 = diffuseSample_13.w;
					  mediump float realtimeShadowAttenuation_18;
					  highp vec4 v_19;
					  v_19.x = unity_MatrixV[0].z;
					  v_19.y = unity_MatrixV[1].z;
					  v_19.z = unity_MatrixV[2].z;
					  v_19.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = clamp (((
					    mix (dot (tmpvar_10, v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_21 = tmpvar_22;
					  realtimeShadowAttenuation_18 = 1.0;
					  lowp float tmpvar_23;
					  highp vec4 shadowVals_24;
					  highp vec3 tmpvar_25;
					  tmpvar_25 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
					  shadowVals_24.x = texture2D (_ShadowMapTexture, (tmpvar_25.xy + _ShadowOffsets[0].xy)).x;
					  shadowVals_24.y = texture2D (_ShadowMapTexture, (tmpvar_25.xy + _ShadowOffsets[1].xy)).x;
					  shadowVals_24.z = texture2D (_ShadowMapTexture, (tmpvar_25.xy + _ShadowOffsets[2].xy)).x;
					  shadowVals_24.w = texture2D (_ShadowMapTexture, (tmpvar_25.xy + _ShadowOffsets[3].xy)).x;
					  bvec4 tmpvar_26;
					  tmpvar_26 = lessThan (shadowVals_24, tmpvar_25.zzzz);
					  mediump vec4 tmpvar_27;
					  tmpvar_27 = _LightShadowData.xxxx;
					  mediump float tmpvar_28;
					  if (tmpvar_26.x) {
					    tmpvar_28 = tmpvar_27.x;
					  } else {
					    tmpvar_28 = 1.0;
					  };
					  mediump float tmpvar_29;
					  if (tmpvar_26.y) {
					    tmpvar_29 = tmpvar_27.y;
					  } else {
					    tmpvar_29 = 1.0;
					  };
					  mediump float tmpvar_30;
					  if (tmpvar_26.z) {
					    tmpvar_30 = tmpvar_27.z;
					  } else {
					    tmpvar_30 = 1.0;
					  };
					  mediump float tmpvar_31;
					  if (tmpvar_26.w) {
					    tmpvar_31 = tmpvar_27.w;
					  } else {
					    tmpvar_31 = 1.0;
					  };
					  mediump vec4 tmpvar_32;
					  tmpvar_32.x = tmpvar_28;
					  tmpvar_32.y = tmpvar_29;
					  tmpvar_32.z = tmpvar_30;
					  tmpvar_32.w = tmpvar_31;
					  mediump float tmpvar_33;
					  tmpvar_33 = dot (tmpvar_32, vec4(0.25, 0.25, 0.25, 0.25));
					  tmpvar_23 = tmpvar_33;
					  realtimeShadowAttenuation_18 = tmpvar_23;
					  mediump float tmpvar_34;
					  tmpvar_34 = mix (realtimeShadowAttenuation_18, 1.0, tmpvar_21);
					  shadow_5 = tmpvar_34;
					  lowp float tmpvar_35;
					  highp vec4 tmpvar_36;
					  tmpvar_36 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
					  tmpvar_35 = tmpvar_36.w;
					  lowp float tmpvar_37;
					  highp vec4 tmpvar_38;
					  tmpvar_38 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
					  tmpvar_37 = tmpvar_38.x;
					  highp float tmpvar_39;
					  tmpvar_39 = (((
					    float((xlv_TEXCOORD3.z > 0.0))
					   * tmpvar_35) * tmpvar_37) * shadow_5);
					  atten_4 = tmpvar_39;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_40;
					  mediump vec4 c_41;
					  highp vec3 tmpvar_42;
					  tmpvar_42 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_43;
					  mediump vec3 albedo_44;
					  albedo_44 = tmpvar_11;
					  mediump vec3 tmpvar_45;
					  tmpvar_45 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_44, vec3(_Metallic));
					  tmpvar_43 = (albedo_44 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_40 = tmpvar_43;
					  mediump vec3 diffColor_46;
					  diffColor_46 = tmpvar_40;
					  mediump float alpha_47;
					  alpha_47 = tmpvar_12;
					  tmpvar_40 = diffColor_46;
					  mediump vec3 diffColor_48;
					  diffColor_48 = tmpvar_40;
					  mediump vec3 color_49;
					  highp float specularTerm_50;
					  highp float a2_51;
					  mediump float roughness_52;
					  mediump float perceptualRoughness_53;
					  highp vec3 tmpvar_54;
					  highp vec3 inVec_55;
					  inVec_55 = (tmpvar_2 + tmpvar_9);
					  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
					    dot (inVec_55, inVec_55)
					  )));
					  mediump float tmpvar_56;
					  highp float tmpvar_57;
					  tmpvar_57 = clamp (dot (tmpvar_42, tmpvar_2), 0.0, 1.0);
					  tmpvar_56 = tmpvar_57;
					  highp float tmpvar_58;
					  tmpvar_58 = clamp (dot (tmpvar_42, tmpvar_54), 0.0, 1.0);
					  highp float tmpvar_59;
					  highp float smoothness_60;
					  smoothness_60 = _Glossiness;
					  tmpvar_59 = (1.0 - smoothness_60);
					  perceptualRoughness_53 = tmpvar_59;
					  highp float tmpvar_61;
					  highp float perceptualRoughness_62;
					  perceptualRoughness_62 = perceptualRoughness_53;
					  tmpvar_61 = (perceptualRoughness_62 * perceptualRoughness_62);
					  roughness_52 = tmpvar_61;
					  mediump float tmpvar_63;
					  tmpvar_63 = (roughness_52 * roughness_52);
					  a2_51 = tmpvar_63;
					  specularTerm_50 = ((roughness_52 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
					   * 
					    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_64;
					  tmpvar_64 = clamp (specularTerm_50, 0.0, 100.0);
					  specularTerm_50 = tmpvar_64;
					  highp vec3 tmpvar_65;
					  tmpvar_65 = (((diffColor_48 + 
					    (tmpvar_64 * tmpvar_45)
					  ) * tmpvar_1) * tmpvar_56);
					  color_49 = tmpvar_65;
					  mediump vec4 tmpvar_66;
					  tmpvar_66.w = 1.0;
					  tmpvar_66.xyz = color_49;
					  c_41.xyz = tmpvar_66.xyz;
					  c_41.w = alpha_47;
					  c_3.xyz = c_41.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1.w = 1.0;
					  tmpvar_1.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_2;
					  tmpvar_2[0] = unity_WorldToObject[0].xyz;
					  tmpvar_2[1] = unity_WorldToObject[1].xyz;
					  tmpvar_2[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_2));
					  highp vec4 tmpvar_3;
					  tmpvar_3 = (unity_ObjectToWorld * _glesVertex);
					  xlv_TEXCOORD2 = tmpvar_3.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_3);
					  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_3);
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _ShadowOffsets[4];
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  lowp float shadow_5;
					  lowp vec3 lightDir_6;
					  highp vec4 tmpvar_7;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_6 = tmpvar_8;
					  highp vec3 tmpvar_9;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2);
					  tmpvar_9 = normalize(tmpvar_10);
					  tmpvar_7 = xlv_COLOR0;
					  lowp vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 diffuseSample_13;
					  highp vec4 nightSample_14;
					  highp vec4 daySample_15;
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_15 = tmpvar_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_14 = tmpvar_17;
					  diffuseSample_13 = (mix (nightSample_14, daySample_15, vec4(_DayWeight)) * _Color);
					  diffuseSample_13.xyz = (diffuseSample_13.xyz * tmpvar_7.xyz);
					  tmpvar_11 = diffuseSample_13.xyz;
					  tmpvar_12 = diffuseSample_13.w;
					  mediump float realtimeShadowAttenuation_18;
					  highp vec4 v_19;
					  v_19.x = unity_MatrixV[0].z;
					  v_19.y = unity_MatrixV[1].z;
					  v_19.z = unity_MatrixV[2].z;
					  v_19.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = clamp (((
					    mix (dot (tmpvar_10, v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_21 = tmpvar_22;
					  realtimeShadowAttenuation_18 = 1.0;
					  lowp float tmpvar_23;
					  highp vec4 shadowVals_24;
					  highp vec3 tmpvar_25;
					  tmpvar_25 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
					  shadowVals_24.x = texture2D (_ShadowMapTexture, (tmpvar_25.xy + _ShadowOffsets[0].xy)).x;
					  shadowVals_24.y = texture2D (_ShadowMapTexture, (tmpvar_25.xy + _ShadowOffsets[1].xy)).x;
					  shadowVals_24.z = texture2D (_ShadowMapTexture, (tmpvar_25.xy + _ShadowOffsets[2].xy)).x;
					  shadowVals_24.w = texture2D (_ShadowMapTexture, (tmpvar_25.xy + _ShadowOffsets[3].xy)).x;
					  bvec4 tmpvar_26;
					  tmpvar_26 = lessThan (shadowVals_24, tmpvar_25.zzzz);
					  mediump vec4 tmpvar_27;
					  tmpvar_27 = _LightShadowData.xxxx;
					  mediump float tmpvar_28;
					  if (tmpvar_26.x) {
					    tmpvar_28 = tmpvar_27.x;
					  } else {
					    tmpvar_28 = 1.0;
					  };
					  mediump float tmpvar_29;
					  if (tmpvar_26.y) {
					    tmpvar_29 = tmpvar_27.y;
					  } else {
					    tmpvar_29 = 1.0;
					  };
					  mediump float tmpvar_30;
					  if (tmpvar_26.z) {
					    tmpvar_30 = tmpvar_27.z;
					  } else {
					    tmpvar_30 = 1.0;
					  };
					  mediump float tmpvar_31;
					  if (tmpvar_26.w) {
					    tmpvar_31 = tmpvar_27.w;
					  } else {
					    tmpvar_31 = 1.0;
					  };
					  mediump vec4 tmpvar_32;
					  tmpvar_32.x = tmpvar_28;
					  tmpvar_32.y = tmpvar_29;
					  tmpvar_32.z = tmpvar_30;
					  tmpvar_32.w = tmpvar_31;
					  mediump float tmpvar_33;
					  tmpvar_33 = dot (tmpvar_32, vec4(0.25, 0.25, 0.25, 0.25));
					  tmpvar_23 = tmpvar_33;
					  realtimeShadowAttenuation_18 = tmpvar_23;
					  mediump float tmpvar_34;
					  tmpvar_34 = mix (realtimeShadowAttenuation_18, 1.0, tmpvar_21);
					  shadow_5 = tmpvar_34;
					  lowp float tmpvar_35;
					  highp vec4 tmpvar_36;
					  tmpvar_36 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
					  tmpvar_35 = tmpvar_36.w;
					  lowp float tmpvar_37;
					  highp vec4 tmpvar_38;
					  tmpvar_38 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
					  tmpvar_37 = tmpvar_38.x;
					  highp float tmpvar_39;
					  tmpvar_39 = (((
					    float((xlv_TEXCOORD3.z > 0.0))
					   * tmpvar_35) * tmpvar_37) * shadow_5);
					  atten_4 = tmpvar_39;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_40;
					  mediump vec4 c_41;
					  highp vec3 tmpvar_42;
					  tmpvar_42 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_43;
					  mediump vec3 albedo_44;
					  albedo_44 = tmpvar_11;
					  mediump vec3 tmpvar_45;
					  tmpvar_45 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_44, vec3(_Metallic));
					  tmpvar_43 = (albedo_44 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_40 = tmpvar_43;
					  mediump vec3 diffColor_46;
					  diffColor_46 = tmpvar_40;
					  mediump float alpha_47;
					  alpha_47 = tmpvar_12;
					  tmpvar_40 = diffColor_46;
					  mediump vec3 diffColor_48;
					  diffColor_48 = tmpvar_40;
					  mediump vec3 color_49;
					  highp float specularTerm_50;
					  highp float a2_51;
					  mediump float roughness_52;
					  mediump float perceptualRoughness_53;
					  highp vec3 tmpvar_54;
					  highp vec3 inVec_55;
					  inVec_55 = (tmpvar_2 + tmpvar_9);
					  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
					    dot (inVec_55, inVec_55)
					  )));
					  mediump float tmpvar_56;
					  highp float tmpvar_57;
					  tmpvar_57 = clamp (dot (tmpvar_42, tmpvar_2), 0.0, 1.0);
					  tmpvar_56 = tmpvar_57;
					  highp float tmpvar_58;
					  tmpvar_58 = clamp (dot (tmpvar_42, tmpvar_54), 0.0, 1.0);
					  highp float tmpvar_59;
					  highp float smoothness_60;
					  smoothness_60 = _Glossiness;
					  tmpvar_59 = (1.0 - smoothness_60);
					  perceptualRoughness_53 = tmpvar_59;
					  highp float tmpvar_61;
					  highp float perceptualRoughness_62;
					  perceptualRoughness_62 = perceptualRoughness_53;
					  tmpvar_61 = (perceptualRoughness_62 * perceptualRoughness_62);
					  roughness_52 = tmpvar_61;
					  mediump float tmpvar_63;
					  tmpvar_63 = (roughness_52 * roughness_52);
					  a2_51 = tmpvar_63;
					  specularTerm_50 = ((roughness_52 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
					   * 
					    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_64;
					  tmpvar_64 = clamp (specularTerm_50, 0.0, 100.0);
					  specularTerm_50 = tmpvar_64;
					  highp vec3 tmpvar_65;
					  tmpvar_65 = (((diffColor_48 + 
					    (tmpvar_64 * tmpvar_45)
					  ) * tmpvar_1) * tmpvar_56);
					  color_49 = tmpvar_65;
					  mediump vec4 tmpvar_66;
					  tmpvar_66.w = 1.0;
					  tmpvar_66.xyz = color_49;
					  c_41.xyz = tmpvar_66.xyz;
					  c_41.w = alpha_47;
					  c_3.xyz = c_41.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _ShadowOffsets[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					lowp vec3 u_xlat10_5;
					mediump float u_xlat16_7;
					float u_xlat10;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat15 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat15 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    u_xlat1.xyz = u_xlat0.xyz + _ShadowOffsets[0].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = u_xlat0.xyz + _ShadowOffsets[1].xyz;
					    vec3 txVec1 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = u_xlat0.xyz + _ShadowOffsets[2].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + _ShadowOffsets[3].xyz;
					    vec3 txVec2 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_5.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_5.x + _LightShadowData.x;
					    u_xlat16_7 = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat5.x = (-u_xlat10) + u_xlat5.x;
					    u_xlat5.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat10;
					    u_xlat5.x = u_xlat5.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
					#else
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					#endif
					    u_xlat16_7 = u_xlat5.x * u_xlat16_7 + u_xlat0.x;
					    u_xlat16_2.x = u_xlat16_7 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat16_2.xyz = vec3(u_xlat15) * u_xlat16_2.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(u_xlat15)) + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_Glossiness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_5.xyz = u_xlat10_5.xyz + (-u_xlat10_1.xyz);
					    u_xlat5.xyz = vec3(_DayWeight) * u_xlat16_5.xyz + u_xlat10_1.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat5.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat5.xyz = u_xlat5.xyz * vs_COLOR0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_17 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat16_17) + u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _ShadowOffsets[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump float u_xlat16_5;
					mediump float u_xlat16_7;
					float u_xlat10;
					float u_xlat15;
					mediump float u_xlat16_15;
					mediump float u_xlat16_16;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat15 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat15 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    u_xlat1.xyz = u_xlat0.xyz + _ShadowOffsets[0].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = u_xlat0.xyz + _ShadowOffsets[1].xyz;
					    vec3 txVec1 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = u_xlat0.xyz + _ShadowOffsets[2].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + _ShadowOffsets[3].xyz;
					    vec3 txVec2 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_5 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_5 + _LightShadowData.x;
					    u_xlat16_7 = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat5.x = (-u_xlat10) + u_xlat5.x;
					    u_xlat5.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat10;
					    u_xlat5.x = u_xlat5.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
					#else
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					#endif
					    u_xlat16_7 = u_xlat5.x * u_xlat16_7 + u_xlat0.x;
					    u_xlat16_2.x = u_xlat16_7 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat0.xxx + u_xlat5.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat16_16 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_16 * u_xlat16_16 + 1.5;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat0.x = u_xlat0.x * u_xlat16_3;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
					#else
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					#endif
					    u_xlat10 = u_xlat1.x * u_xlat1.x;
					    u_xlat16_15 = u_xlat16_16 * u_xlat16_16 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat16_15 + 1.00001001;
					    u_xlat0.x = u_xlat10 * u_xlat0.x;
					    u_xlat0.x = u_xlat16_16 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_3.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz + (-u_xlat10_3.xyz);
					    u_xlat1.xyz = vec3(_DayWeight) * u_xlat16_1.xyz + u_xlat10_3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_17 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xzw = u_xlat1.xyz * vec3(u_xlat16_17) + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat5.xxx * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _ShadowOffsets[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump float u_xlat16_5;
					mediump float u_xlat16_7;
					float u_xlat10;
					float u_xlat15;
					mediump float u_xlat16_15;
					mediump float u_xlat16_16;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat15 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat15 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    u_xlat1.xyz = u_xlat0.xyz + _ShadowOffsets[0].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = u_xlat0.xyz + _ShadowOffsets[1].xyz;
					    vec3 txVec1 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = u_xlat0.xyz + _ShadowOffsets[2].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + _ShadowOffsets[3].xyz;
					    vec3 txVec2 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_5 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_5 + _LightShadowData.x;
					    u_xlat16_7 = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat5.x = (-u_xlat10) + u_xlat5.x;
					    u_xlat5.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat10;
					    u_xlat5.x = u_xlat5.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
					#else
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					#endif
					    u_xlat16_7 = u_xlat5.x * u_xlat16_7 + u_xlat0.x;
					    u_xlat16_2.x = u_xlat16_7 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat0.xxx + u_xlat5.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat16_16 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_16 * u_xlat16_16 + 1.5;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat0.x = u_xlat0.x * u_xlat16_3;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
					#else
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					#endif
					    u_xlat10 = u_xlat1.x * u_xlat1.x;
					    u_xlat16_15 = u_xlat16_16 * u_xlat16_16 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat16_15 + 1.00001001;
					    u_xlat0.x = u_xlat10 * u_xlat0.x;
					    u_xlat0.x = u_xlat16_16 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_3.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz + (-u_xlat10_3.xyz);
					    u_xlat1.xyz = vec3(_DayWeight) * u_xlat16_1.xyz + u_xlat10_3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_17 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xzw = u_xlat1.xyz * vec3(u_xlat16_17) + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat5.xxx * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1.w = 1.0;
					  tmpvar_1.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_2;
					  tmpvar_2[0] = unity_WorldToObject[0].xyz;
					  tmpvar_2[1] = unity_WorldToObject[1].xyz;
					  tmpvar_2[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_2));
					  highp vec4 tmpvar_3;
					  tmpvar_3 = (unity_ObjectToWorld * _glesVertex);
					  xlv_TEXCOORD2 = tmpvar_3.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_3);
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  lowp vec3 lightDir_5;
					  highp vec4 tmpvar_6;
					  mediump vec3 tmpvar_7;
					  tmpvar_7 = _WorldSpaceLightPos0.xyz;
					  lightDir_5 = tmpvar_7;
					  highp vec3 tmpvar_8;
					  highp vec3 tmpvar_9;
					  tmpvar_9 = (_WorldSpaceCameraPos - xlv_TEXCOORD2);
					  tmpvar_8 = normalize(tmpvar_9);
					  tmpvar_6 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  lowp float tmpvar_11;
					  highp vec4 diffuseSample_12;
					  highp vec4 nightSample_13;
					  highp vec4 daySample_14;
					  lowp vec4 tmpvar_15;
					  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_14 = tmpvar_15;
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_13 = tmpvar_16;
					  diffuseSample_12 = (mix (nightSample_13, daySample_14, vec4(_DayWeight)) * _Color);
					  diffuseSample_12.xyz = (diffuseSample_12.xyz * tmpvar_6.xyz);
					  tmpvar_10 = diffuseSample_12.xyz;
					  tmpvar_11 = diffuseSample_12.w;
					  mediump float realtimeShadowAttenuation_17;
					  highp vec4 v_18;
					  v_18.x = unity_MatrixV[0].z;
					  v_18.y = unity_MatrixV[1].z;
					  v_18.z = unity_MatrixV[2].z;
					  v_18.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_19;
					  tmpvar_19 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_20;
					  highp float tmpvar_21;
					  tmpvar_21 = clamp (((
					    mix (dot (tmpvar_9, v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_20 = tmpvar_21;
					  lowp float tmpvar_22;
					  highp float lightShadowDataX_23;
					  mediump float tmpvar_24;
					  tmpvar_24 = _LightShadowData.x;
					  lightShadowDataX_23 = tmpvar_24;
					  highp float tmpvar_25;
					  tmpvar_25 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_23);
					  tmpvar_22 = tmpvar_25;
					  realtimeShadowAttenuation_17 = tmpvar_22;
					  mediump float tmpvar_26;
					  tmpvar_26 = mix (realtimeShadowAttenuation_17, 1.0, tmpvar_20);
					  atten_4 = tmpvar_26;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_5;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_27;
					  mediump vec4 c_28;
					  highp vec3 tmpvar_29;
					  tmpvar_29 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_30;
					  mediump vec3 albedo_31;
					  albedo_31 = tmpvar_10;
					  tmpvar_30 = (albedo_31 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_27 = tmpvar_30;
					  mediump vec3 diffColor_32;
					  diffColor_32 = tmpvar_27;
					  mediump float alpha_33;
					  alpha_33 = tmpvar_11;
					  tmpvar_27 = diffColor_32;
					  mediump vec3 diffColor_34;
					  diffColor_34 = tmpvar_27;
					  mediump vec2 rlPow4AndFresnelTerm_35;
					  mediump float tmpvar_36;
					  highp float tmpvar_37;
					  tmpvar_37 = clamp (dot (tmpvar_29, tmpvar_2), 0.0, 1.0);
					  tmpvar_36 = tmpvar_37;
					  mediump float tmpvar_38;
					  highp float tmpvar_39;
					  tmpvar_39 = clamp (dot (tmpvar_29, tmpvar_8), 0.0, 1.0);
					  tmpvar_38 = tmpvar_39;
					  highp vec2 tmpvar_40;
					  tmpvar_40.x = dot ((tmpvar_8 - (2.0 * 
					    (dot (tmpvar_29, tmpvar_8) * tmpvar_29)
					  )), tmpvar_2);
					  tmpvar_40.y = (1.0 - tmpvar_38);
					  highp vec2 tmpvar_41;
					  tmpvar_41 = ((tmpvar_40 * tmpvar_40) * (tmpvar_40 * tmpvar_40));
					  rlPow4AndFresnelTerm_35 = tmpvar_41;
					  mediump float tmpvar_42;
					  tmpvar_42 = rlPow4AndFresnelTerm_35.x;
					  mediump float specular_43;
					  highp float smoothness_44;
					  smoothness_44 = _Glossiness;
					  highp vec2 tmpvar_45;
					  tmpvar_45.x = tmpvar_42;
					  tmpvar_45.y = (1.0 - smoothness_44);
					  highp float tmpvar_46;
					  tmpvar_46 = (texture2D (unity_NHxRoughness, tmpvar_45).x * 16.0);
					  specular_43 = tmpvar_46;
					  mediump vec4 tmpvar_47;
					  tmpvar_47.w = 1.0;
					  tmpvar_47.xyz = ((diffColor_34 + (specular_43 * 
					    mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_31, vec3(_Metallic))
					  )) * (tmpvar_1 * tmpvar_36));
					  c_28.xyz = tmpvar_47.xyz;
					  c_28.w = alpha_33;
					  c_3.xyz = c_28.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1.w = 1.0;
					  tmpvar_1.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_2;
					  tmpvar_2[0] = unity_WorldToObject[0].xyz;
					  tmpvar_2[1] = unity_WorldToObject[1].xyz;
					  tmpvar_2[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_2));
					  highp vec4 tmpvar_3;
					  tmpvar_3 = (unity_ObjectToWorld * _glesVertex);
					  xlv_TEXCOORD2 = tmpvar_3.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_3);
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  lowp vec3 lightDir_5;
					  highp vec4 tmpvar_6;
					  mediump vec3 tmpvar_7;
					  tmpvar_7 = _WorldSpaceLightPos0.xyz;
					  lightDir_5 = tmpvar_7;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = (_WorldSpaceCameraPos - xlv_TEXCOORD2);
					  tmpvar_6 = xlv_COLOR0;
					  lowp vec3 tmpvar_9;
					  lowp float tmpvar_10;
					  highp vec4 diffuseSample_11;
					  highp vec4 nightSample_12;
					  highp vec4 daySample_13;
					  lowp vec4 tmpvar_14;
					  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_13 = tmpvar_14;
					  lowp vec4 tmpvar_15;
					  tmpvar_15 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_12 = tmpvar_15;
					  diffuseSample_11 = (mix (nightSample_12, daySample_13, vec4(_DayWeight)) * _Color);
					  diffuseSample_11.xyz = (diffuseSample_11.xyz * tmpvar_6.xyz);
					  tmpvar_9 = diffuseSample_11.xyz;
					  tmpvar_10 = diffuseSample_11.w;
					  mediump float realtimeShadowAttenuation_16;
					  highp vec4 v_17;
					  v_17.x = unity_MatrixV[0].z;
					  v_17.y = unity_MatrixV[1].z;
					  v_17.z = unity_MatrixV[2].z;
					  v_17.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_18;
					  tmpvar_18 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_19;
					  highp float tmpvar_20;
					  tmpvar_20 = clamp (((
					    mix (dot (tmpvar_8, v_17.xyz), sqrt(dot (tmpvar_18, tmpvar_18)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_19 = tmpvar_20;
					  lowp float tmpvar_21;
					  highp float lightShadowDataX_22;
					  mediump float tmpvar_23;
					  tmpvar_23 = _LightShadowData.x;
					  lightShadowDataX_22 = tmpvar_23;
					  highp float tmpvar_24;
					  tmpvar_24 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_22);
					  tmpvar_21 = tmpvar_24;
					  realtimeShadowAttenuation_16 = tmpvar_21;
					  mediump float tmpvar_25;
					  tmpvar_25 = mix (realtimeShadowAttenuation_16, 1.0, tmpvar_19);
					  atten_4 = tmpvar_25;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_5;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_26;
					  mediump vec4 c_27;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_29;
					  mediump vec3 albedo_30;
					  albedo_30 = tmpvar_9;
					  mediump vec3 tmpvar_31;
					  tmpvar_31 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_30, vec3(_Metallic));
					  tmpvar_29 = (albedo_30 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_26 = tmpvar_29;
					  mediump vec3 diffColor_32;
					  diffColor_32 = tmpvar_26;
					  mediump float alpha_33;
					  alpha_33 = tmpvar_10;
					  tmpvar_26 = diffColor_32;
					  mediump vec3 diffColor_34;
					  diffColor_34 = tmpvar_26;
					  mediump vec3 color_35;
					  highp float specularTerm_36;
					  highp float a2_37;
					  mediump float roughness_38;
					  mediump float perceptualRoughness_39;
					  highp vec3 tmpvar_40;
					  highp vec3 inVec_41;
					  inVec_41 = (tmpvar_2 + normalize(tmpvar_8));
					  tmpvar_40 = (inVec_41 * inversesqrt(max (0.001, 
					    dot (inVec_41, inVec_41)
					  )));
					  mediump float tmpvar_42;
					  highp float tmpvar_43;
					  tmpvar_43 = clamp (dot (tmpvar_28, tmpvar_2), 0.0, 1.0);
					  tmpvar_42 = tmpvar_43;
					  highp float tmpvar_44;
					  tmpvar_44 = clamp (dot (tmpvar_28, tmpvar_40), 0.0, 1.0);
					  highp float tmpvar_45;
					  highp float smoothness_46;
					  smoothness_46 = _Glossiness;
					  tmpvar_45 = (1.0 - smoothness_46);
					  perceptualRoughness_39 = tmpvar_45;
					  highp float tmpvar_47;
					  highp float perceptualRoughness_48;
					  perceptualRoughness_48 = perceptualRoughness_39;
					  tmpvar_47 = (perceptualRoughness_48 * perceptualRoughness_48);
					  roughness_38 = tmpvar_47;
					  mediump float tmpvar_49;
					  tmpvar_49 = (roughness_38 * roughness_38);
					  a2_37 = tmpvar_49;
					  specularTerm_36 = ((roughness_38 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_40), 0.0, 1.0)) * (1.5 + roughness_38))
					   * 
					    (((tmpvar_44 * tmpvar_44) * (a2_37 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_50;
					  tmpvar_50 = clamp (specularTerm_36, 0.0, 100.0);
					  specularTerm_36 = tmpvar_50;
					  highp vec3 tmpvar_51;
					  tmpvar_51 = (((diffColor_34 + 
					    (tmpvar_50 * tmpvar_31)
					  ) * tmpvar_1) * tmpvar_42);
					  color_35 = tmpvar_51;
					  mediump vec4 tmpvar_52;
					  tmpvar_52.w = 1.0;
					  tmpvar_52.xyz = color_35;
					  c_27.xyz = tmpvar_52.xyz;
					  c_27.w = alpha_33;
					  c_3.xyz = c_27.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1.w = 1.0;
					  tmpvar_1.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_2;
					  tmpvar_2[0] = unity_WorldToObject[0].xyz;
					  tmpvar_2[1] = unity_WorldToObject[1].xyz;
					  tmpvar_2[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_2));
					  highp vec4 tmpvar_3;
					  tmpvar_3 = (unity_ObjectToWorld * _glesVertex);
					  xlv_TEXCOORD2 = tmpvar_3.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_3);
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  lowp vec3 lightDir_5;
					  highp vec4 tmpvar_6;
					  mediump vec3 tmpvar_7;
					  tmpvar_7 = _WorldSpaceLightPos0.xyz;
					  lightDir_5 = tmpvar_7;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = (_WorldSpaceCameraPos - xlv_TEXCOORD2);
					  tmpvar_6 = xlv_COLOR0;
					  lowp vec3 tmpvar_9;
					  lowp float tmpvar_10;
					  highp vec4 diffuseSample_11;
					  highp vec4 nightSample_12;
					  highp vec4 daySample_13;
					  lowp vec4 tmpvar_14;
					  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_13 = tmpvar_14;
					  lowp vec4 tmpvar_15;
					  tmpvar_15 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_12 = tmpvar_15;
					  diffuseSample_11 = (mix (nightSample_12, daySample_13, vec4(_DayWeight)) * _Color);
					  diffuseSample_11.xyz = (diffuseSample_11.xyz * tmpvar_6.xyz);
					  tmpvar_9 = diffuseSample_11.xyz;
					  tmpvar_10 = diffuseSample_11.w;
					  mediump float realtimeShadowAttenuation_16;
					  highp vec4 v_17;
					  v_17.x = unity_MatrixV[0].z;
					  v_17.y = unity_MatrixV[1].z;
					  v_17.z = unity_MatrixV[2].z;
					  v_17.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_18;
					  tmpvar_18 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_19;
					  highp float tmpvar_20;
					  tmpvar_20 = clamp (((
					    mix (dot (tmpvar_8, v_17.xyz), sqrt(dot (tmpvar_18, tmpvar_18)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_19 = tmpvar_20;
					  lowp float tmpvar_21;
					  highp float lightShadowDataX_22;
					  mediump float tmpvar_23;
					  tmpvar_23 = _LightShadowData.x;
					  lightShadowDataX_22 = tmpvar_23;
					  highp float tmpvar_24;
					  tmpvar_24 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_22);
					  tmpvar_21 = tmpvar_24;
					  realtimeShadowAttenuation_16 = tmpvar_21;
					  mediump float tmpvar_25;
					  tmpvar_25 = mix (realtimeShadowAttenuation_16, 1.0, tmpvar_19);
					  atten_4 = tmpvar_25;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_5;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_26;
					  mediump vec4 c_27;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_29;
					  mediump vec3 albedo_30;
					  albedo_30 = tmpvar_9;
					  mediump vec3 tmpvar_31;
					  tmpvar_31 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_30, vec3(_Metallic));
					  tmpvar_29 = (albedo_30 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_26 = tmpvar_29;
					  mediump vec3 diffColor_32;
					  diffColor_32 = tmpvar_26;
					  mediump float alpha_33;
					  alpha_33 = tmpvar_10;
					  tmpvar_26 = diffColor_32;
					  mediump vec3 diffColor_34;
					  diffColor_34 = tmpvar_26;
					  mediump vec3 color_35;
					  highp float specularTerm_36;
					  highp float a2_37;
					  mediump float roughness_38;
					  mediump float perceptualRoughness_39;
					  highp vec3 tmpvar_40;
					  highp vec3 inVec_41;
					  inVec_41 = (tmpvar_2 + normalize(tmpvar_8));
					  tmpvar_40 = (inVec_41 * inversesqrt(max (0.001, 
					    dot (inVec_41, inVec_41)
					  )));
					  mediump float tmpvar_42;
					  highp float tmpvar_43;
					  tmpvar_43 = clamp (dot (tmpvar_28, tmpvar_2), 0.0, 1.0);
					  tmpvar_42 = tmpvar_43;
					  highp float tmpvar_44;
					  tmpvar_44 = clamp (dot (tmpvar_28, tmpvar_40), 0.0, 1.0);
					  highp float tmpvar_45;
					  highp float smoothness_46;
					  smoothness_46 = _Glossiness;
					  tmpvar_45 = (1.0 - smoothness_46);
					  perceptualRoughness_39 = tmpvar_45;
					  highp float tmpvar_47;
					  highp float perceptualRoughness_48;
					  perceptualRoughness_48 = perceptualRoughness_39;
					  tmpvar_47 = (perceptualRoughness_48 * perceptualRoughness_48);
					  roughness_38 = tmpvar_47;
					  mediump float tmpvar_49;
					  tmpvar_49 = (roughness_38 * roughness_38);
					  a2_37 = tmpvar_49;
					  specularTerm_36 = ((roughness_38 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_40), 0.0, 1.0)) * (1.5 + roughness_38))
					   * 
					    (((tmpvar_44 * tmpvar_44) * (a2_37 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_50;
					  tmpvar_50 = clamp (specularTerm_36, 0.0, 100.0);
					  specularTerm_36 = tmpvar_50;
					  highp vec3 tmpvar_51;
					  tmpvar_51 = (((diffColor_34 + 
					    (tmpvar_50 * tmpvar_31)
					  ) * tmpvar_1) * tmpvar_42);
					  color_35 = tmpvar_51;
					  mediump vec4 tmpvar_52;
					  tmpvar_52.w = 1.0;
					  tmpvar_52.xyz = color_35;
					  c_27.xyz = tmpvar_52.xyz;
					  c_27.w = alpha_33;
					  c_3.xyz = c_27.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					lowp float u_xlat10_5;
					vec3 u_xlat6;
					mediump vec3 u_xlat16_6;
					lowp vec3 u_xlat10_6;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat1.xyz = u_xlat2.xyz * (-vec3(u_xlat15)) + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat1.x = u_xlat1.x * 16.0;
					    u_xlat10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_6.xyz + (-u_xlat10_2.xyz);
					    u_xlat6.xyz = vec3(_DayWeight) * u_xlat16_6.xyz + u_xlat10_2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _Color.xyz;
					    u_xlat16_3.xyz = u_xlat6.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_3.xyz = u_xlat1.xxx * u_xlat16_3.xyz;
					    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_3.xyz = u_xlat6.xyz * vec3(u_xlat16_18) + u_xlat16_3.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_18 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_18 = u_xlat10_5 * u_xlat16_18 + _LightShadowData.x;
					    u_xlat16_4.x = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = u_xlat0.x * u_xlat16_4.x + u_xlat16_18;
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * _LightColor0.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat15) * u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					lowp float u_xlat10_4;
					float u_xlat5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_9;
					float u_xlat12;
					mediump float u_xlat16_13;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat16_13 = (-_Glossiness) + 1.0;
					    u_xlat16_2 = u_xlat16_13 * u_xlat16_13 + 1.5;
					    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;
					    u_xlat12 = u_xlat12 * u_xlat16_2;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD1.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat16_9 = u_xlat16_13 * u_xlat16_13 + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_9 + 1.00001001;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat12 = u_xlat16_13 / u_xlat12;
					    u_xlat12 = u_xlat12 + -9.99999975e-05;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = min(u_xlat12, 100.0);
					    u_xlat10_1.xzw = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xzw = u_xlat10_1.xzw + (-u_xlat10_2.xyz);
					    u_xlat1.xzw = vec3(_DayWeight) * u_xlat16_1.xzw + u_xlat10_2.xyz;
					    u_xlat1.xzw = u_xlat1.xzw * _Color.xyz;
					    u_xlat16_3.xyz = u_xlat1.xzw * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat1.xzw = u_xlat1.xzw * vs_COLOR0.xyz;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xzw = u_xlat1.xzw * u_xlat16_3.xxx + u_xlat2.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat4.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = (-u_xlat0.x) + u_xlat4.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
					    u_xlat10_4 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat10_4 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_7 = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_7 + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat1.xzw * u_xlat16_3.xyz;
					    u_xlat0.xyz = vec3(u_xlat5) * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					lowp float u_xlat10_4;
					float u_xlat5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_9;
					float u_xlat12;
					mediump float u_xlat16_13;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat16_13 = (-_Glossiness) + 1.0;
					    u_xlat16_2 = u_xlat16_13 * u_xlat16_13 + 1.5;
					    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;
					    u_xlat12 = u_xlat12 * u_xlat16_2;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD1.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat16_9 = u_xlat16_13 * u_xlat16_13 + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_9 + 1.00001001;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat12 = u_xlat16_13 / u_xlat12;
					    u_xlat12 = u_xlat12 + -9.99999975e-05;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = min(u_xlat12, 100.0);
					    u_xlat10_1.xzw = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xzw = u_xlat10_1.xzw + (-u_xlat10_2.xyz);
					    u_xlat1.xzw = vec3(_DayWeight) * u_xlat16_1.xzw + u_xlat10_2.xyz;
					    u_xlat1.xzw = u_xlat1.xzw * _Color.xyz;
					    u_xlat16_3.xyz = u_xlat1.xzw * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat1.xzw = u_xlat1.xzw * vs_COLOR0.xyz;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xzw = u_xlat1.xzw * u_xlat16_3.xxx + u_xlat2.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat4.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = (-u_xlat0.x) + u_xlat4.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
					    u_xlat10_4 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat10_4 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_7 = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_7 + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat1.xzw * u_xlat16_3.xyz;
					    u_xlat0.xyz = vec3(u_xlat5) * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec2 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1.w = 1.0;
					  tmpvar_1.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_2;
					  tmpvar_2[0] = unity_WorldToObject[0].xyz;
					  tmpvar_2[1] = unity_WorldToObject[1].xyz;
					  tmpvar_2[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_2));
					  highp vec4 tmpvar_3;
					  tmpvar_3 = (unity_ObjectToWorld * _glesVertex);
					  xlv_TEXCOORD2 = tmpvar_3.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_3).xy;
					  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_3);
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec2 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  lowp float shadow_5;
					  lowp vec3 lightDir_6;
					  highp vec4 tmpvar_7;
					  mediump vec3 tmpvar_8;
					  tmpvar_8 = _WorldSpaceLightPos0.xyz;
					  lightDir_6 = tmpvar_8;
					  highp vec3 tmpvar_9;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2);
					  tmpvar_9 = normalize(tmpvar_10);
					  tmpvar_7 = xlv_COLOR0;
					  lowp vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 diffuseSample_13;
					  highp vec4 nightSample_14;
					  highp vec4 daySample_15;
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_15 = tmpvar_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_14 = tmpvar_17;
					  diffuseSample_13 = (mix (nightSample_14, daySample_15, vec4(_DayWeight)) * _Color);
					  diffuseSample_13.xyz = (diffuseSample_13.xyz * tmpvar_7.xyz);
					  tmpvar_11 = diffuseSample_13.xyz;
					  tmpvar_12 = diffuseSample_13.w;
					  mediump float realtimeShadowAttenuation_18;
					  highp vec4 v_19;
					  v_19.x = unity_MatrixV[0].z;
					  v_19.y = unity_MatrixV[1].z;
					  v_19.z = unity_MatrixV[2].z;
					  v_19.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = clamp (((
					    mix (dot (tmpvar_10, v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_21 = tmpvar_22;
					  lowp float tmpvar_23;
					  highp float lightShadowDataX_24;
					  mediump float tmpvar_25;
					  tmpvar_25 = _LightShadowData.x;
					  lightShadowDataX_24 = tmpvar_25;
					  highp float tmpvar_26;
					  tmpvar_26 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_24);
					  tmpvar_23 = tmpvar_26;
					  realtimeShadowAttenuation_18 = tmpvar_23;
					  mediump float tmpvar_27;
					  tmpvar_27 = mix (realtimeShadowAttenuation_18, 1.0, tmpvar_21);
					  shadow_5 = tmpvar_27;
					  highp float tmpvar_28;
					  tmpvar_28 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * shadow_5);
					  atten_4 = tmpvar_28;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_29;
					  mediump vec4 c_30;
					  highp vec3 tmpvar_31;
					  tmpvar_31 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_32;
					  mediump vec3 albedo_33;
					  albedo_33 = tmpvar_11;
					  tmpvar_32 = (albedo_33 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_29 = tmpvar_32;
					  mediump vec3 diffColor_34;
					  diffColor_34 = tmpvar_29;
					  mediump float alpha_35;
					  alpha_35 = tmpvar_12;
					  tmpvar_29 = diffColor_34;
					  mediump vec3 diffColor_36;
					  diffColor_36 = tmpvar_29;
					  mediump vec2 rlPow4AndFresnelTerm_37;
					  mediump float tmpvar_38;
					  highp float tmpvar_39;
					  tmpvar_39 = clamp (dot (tmpvar_31, tmpvar_2), 0.0, 1.0);
					  tmpvar_38 = tmpvar_39;
					  mediump float tmpvar_40;
					  highp float tmpvar_41;
					  tmpvar_41 = clamp (dot (tmpvar_31, tmpvar_9), 0.0, 1.0);
					  tmpvar_40 = tmpvar_41;
					  highp vec2 tmpvar_42;
					  tmpvar_42.x = dot ((tmpvar_9 - (2.0 * 
					    (dot (tmpvar_31, tmpvar_9) * tmpvar_31)
					  )), tmpvar_2);
					  tmpvar_42.y = (1.0 - tmpvar_40);
					  highp vec2 tmpvar_43;
					  tmpvar_43 = ((tmpvar_42 * tmpvar_42) * (tmpvar_42 * tmpvar_42));
					  rlPow4AndFresnelTerm_37 = tmpvar_43;
					  mediump float tmpvar_44;
					  tmpvar_44 = rlPow4AndFresnelTerm_37.x;
					  mediump float specular_45;
					  highp float smoothness_46;
					  smoothness_46 = _Glossiness;
					  highp vec2 tmpvar_47;
					  tmpvar_47.x = tmpvar_44;
					  tmpvar_47.y = (1.0 - smoothness_46);
					  highp float tmpvar_48;
					  tmpvar_48 = (texture2D (unity_NHxRoughness, tmpvar_47).x * 16.0);
					  specular_45 = tmpvar_48;
					  mediump vec4 tmpvar_49;
					  tmpvar_49.w = 1.0;
					  tmpvar_49.xyz = ((diffColor_36 + (specular_45 * 
					    mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_33, vec3(_Metallic))
					  )) * (tmpvar_1 * tmpvar_38));
					  c_30.xyz = tmpvar_49.xyz;
					  c_30.w = alpha_35;
					  c_3.xyz = c_30.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec2 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1.w = 1.0;
					  tmpvar_1.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_2;
					  tmpvar_2[0] = unity_WorldToObject[0].xyz;
					  tmpvar_2[1] = unity_WorldToObject[1].xyz;
					  tmpvar_2[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_2));
					  highp vec4 tmpvar_3;
					  tmpvar_3 = (unity_ObjectToWorld * _glesVertex);
					  xlv_TEXCOORD2 = tmpvar_3.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_3).xy;
					  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_3);
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec2 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  lowp float shadow_5;
					  lowp vec3 lightDir_6;
					  highp vec4 tmpvar_7;
					  mediump vec3 tmpvar_8;
					  tmpvar_8 = _WorldSpaceLightPos0.xyz;
					  lightDir_6 = tmpvar_8;
					  highp vec3 tmpvar_9;
					  tmpvar_9 = (_WorldSpaceCameraPos - xlv_TEXCOORD2);
					  tmpvar_7 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  lowp float tmpvar_11;
					  highp vec4 diffuseSample_12;
					  highp vec4 nightSample_13;
					  highp vec4 daySample_14;
					  lowp vec4 tmpvar_15;
					  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_14 = tmpvar_15;
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_13 = tmpvar_16;
					  diffuseSample_12 = (mix (nightSample_13, daySample_14, vec4(_DayWeight)) * _Color);
					  diffuseSample_12.xyz = (diffuseSample_12.xyz * tmpvar_7.xyz);
					  tmpvar_10 = diffuseSample_12.xyz;
					  tmpvar_11 = diffuseSample_12.w;
					  mediump float realtimeShadowAttenuation_17;
					  highp vec4 v_18;
					  v_18.x = unity_MatrixV[0].z;
					  v_18.y = unity_MatrixV[1].z;
					  v_18.z = unity_MatrixV[2].z;
					  v_18.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_19;
					  tmpvar_19 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_20;
					  highp float tmpvar_21;
					  tmpvar_21 = clamp (((
					    mix (dot (tmpvar_9, v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_20 = tmpvar_21;
					  lowp float tmpvar_22;
					  highp float lightShadowDataX_23;
					  mediump float tmpvar_24;
					  tmpvar_24 = _LightShadowData.x;
					  lightShadowDataX_23 = tmpvar_24;
					  highp float tmpvar_25;
					  tmpvar_25 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_23);
					  tmpvar_22 = tmpvar_25;
					  realtimeShadowAttenuation_17 = tmpvar_22;
					  mediump float tmpvar_26;
					  tmpvar_26 = mix (realtimeShadowAttenuation_17, 1.0, tmpvar_20);
					  shadow_5 = tmpvar_26;
					  highp float tmpvar_27;
					  tmpvar_27 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * shadow_5);
					  atten_4 = tmpvar_27;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_28;
					  mediump vec4 c_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_31;
					  mediump vec3 albedo_32;
					  albedo_32 = tmpvar_10;
					  mediump vec3 tmpvar_33;
					  tmpvar_33 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_32, vec3(_Metallic));
					  tmpvar_31 = (albedo_32 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_28 = tmpvar_31;
					  mediump vec3 diffColor_34;
					  diffColor_34 = tmpvar_28;
					  mediump float alpha_35;
					  alpha_35 = tmpvar_11;
					  tmpvar_28 = diffColor_34;
					  mediump vec3 diffColor_36;
					  diffColor_36 = tmpvar_28;
					  mediump vec3 color_37;
					  highp float specularTerm_38;
					  highp float a2_39;
					  mediump float roughness_40;
					  mediump float perceptualRoughness_41;
					  highp vec3 tmpvar_42;
					  highp vec3 inVec_43;
					  inVec_43 = (tmpvar_2 + normalize(tmpvar_9));
					  tmpvar_42 = (inVec_43 * inversesqrt(max (0.001, 
					    dot (inVec_43, inVec_43)
					  )));
					  mediump float tmpvar_44;
					  highp float tmpvar_45;
					  tmpvar_45 = clamp (dot (tmpvar_30, tmpvar_2), 0.0, 1.0);
					  tmpvar_44 = tmpvar_45;
					  highp float tmpvar_46;
					  tmpvar_46 = clamp (dot (tmpvar_30, tmpvar_42), 0.0, 1.0);
					  highp float tmpvar_47;
					  highp float smoothness_48;
					  smoothness_48 = _Glossiness;
					  tmpvar_47 = (1.0 - smoothness_48);
					  perceptualRoughness_41 = tmpvar_47;
					  highp float tmpvar_49;
					  highp float perceptualRoughness_50;
					  perceptualRoughness_50 = perceptualRoughness_41;
					  tmpvar_49 = (perceptualRoughness_50 * perceptualRoughness_50);
					  roughness_40 = tmpvar_49;
					  mediump float tmpvar_51;
					  tmpvar_51 = (roughness_40 * roughness_40);
					  a2_39 = tmpvar_51;
					  specularTerm_38 = ((roughness_40 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_42), 0.0, 1.0)) * (1.5 + roughness_40))
					   * 
					    (((tmpvar_46 * tmpvar_46) * (a2_39 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_52;
					  tmpvar_52 = clamp (specularTerm_38, 0.0, 100.0);
					  specularTerm_38 = tmpvar_52;
					  highp vec3 tmpvar_53;
					  tmpvar_53 = (((diffColor_36 + 
					    (tmpvar_52 * tmpvar_33)
					  ) * tmpvar_1) * tmpvar_44);
					  color_37 = tmpvar_53;
					  mediump vec4 tmpvar_54;
					  tmpvar_54.w = 1.0;
					  tmpvar_54.xyz = color_37;
					  c_29.xyz = tmpvar_54.xyz;
					  c_29.w = alpha_35;
					  c_3.xyz = c_29.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec2 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1.w = 1.0;
					  tmpvar_1.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_2;
					  tmpvar_2[0] = unity_WorldToObject[0].xyz;
					  tmpvar_2[1] = unity_WorldToObject[1].xyz;
					  tmpvar_2[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_2));
					  highp vec4 tmpvar_3;
					  tmpvar_3 = (unity_ObjectToWorld * _glesVertex);
					  xlv_TEXCOORD2 = tmpvar_3.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_3).xy;
					  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_3);
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec2 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  lowp float shadow_5;
					  lowp vec3 lightDir_6;
					  highp vec4 tmpvar_7;
					  mediump vec3 tmpvar_8;
					  tmpvar_8 = _WorldSpaceLightPos0.xyz;
					  lightDir_6 = tmpvar_8;
					  highp vec3 tmpvar_9;
					  tmpvar_9 = (_WorldSpaceCameraPos - xlv_TEXCOORD2);
					  tmpvar_7 = xlv_COLOR0;
					  lowp vec3 tmpvar_10;
					  lowp float tmpvar_11;
					  highp vec4 diffuseSample_12;
					  highp vec4 nightSample_13;
					  highp vec4 daySample_14;
					  lowp vec4 tmpvar_15;
					  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_14 = tmpvar_15;
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_13 = tmpvar_16;
					  diffuseSample_12 = (mix (nightSample_13, daySample_14, vec4(_DayWeight)) * _Color);
					  diffuseSample_12.xyz = (diffuseSample_12.xyz * tmpvar_7.xyz);
					  tmpvar_10 = diffuseSample_12.xyz;
					  tmpvar_11 = diffuseSample_12.w;
					  mediump float realtimeShadowAttenuation_17;
					  highp vec4 v_18;
					  v_18.x = unity_MatrixV[0].z;
					  v_18.y = unity_MatrixV[1].z;
					  v_18.z = unity_MatrixV[2].z;
					  v_18.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_19;
					  tmpvar_19 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_20;
					  highp float tmpvar_21;
					  tmpvar_21 = clamp (((
					    mix (dot (tmpvar_9, v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_20 = tmpvar_21;
					  lowp float tmpvar_22;
					  highp float lightShadowDataX_23;
					  mediump float tmpvar_24;
					  tmpvar_24 = _LightShadowData.x;
					  lightShadowDataX_23 = tmpvar_24;
					  highp float tmpvar_25;
					  tmpvar_25 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_23);
					  tmpvar_22 = tmpvar_25;
					  realtimeShadowAttenuation_17 = tmpvar_22;
					  mediump float tmpvar_26;
					  tmpvar_26 = mix (realtimeShadowAttenuation_17, 1.0, tmpvar_20);
					  shadow_5 = tmpvar_26;
					  highp float tmpvar_27;
					  tmpvar_27 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * shadow_5);
					  atten_4 = tmpvar_27;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_28;
					  mediump vec4 c_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_31;
					  mediump vec3 albedo_32;
					  albedo_32 = tmpvar_10;
					  mediump vec3 tmpvar_33;
					  tmpvar_33 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_32, vec3(_Metallic));
					  tmpvar_31 = (albedo_32 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_28 = tmpvar_31;
					  mediump vec3 diffColor_34;
					  diffColor_34 = tmpvar_28;
					  mediump float alpha_35;
					  alpha_35 = tmpvar_11;
					  tmpvar_28 = diffColor_34;
					  mediump vec3 diffColor_36;
					  diffColor_36 = tmpvar_28;
					  mediump vec3 color_37;
					  highp float specularTerm_38;
					  highp float a2_39;
					  mediump float roughness_40;
					  mediump float perceptualRoughness_41;
					  highp vec3 tmpvar_42;
					  highp vec3 inVec_43;
					  inVec_43 = (tmpvar_2 + normalize(tmpvar_9));
					  tmpvar_42 = (inVec_43 * inversesqrt(max (0.001, 
					    dot (inVec_43, inVec_43)
					  )));
					  mediump float tmpvar_44;
					  highp float tmpvar_45;
					  tmpvar_45 = clamp (dot (tmpvar_30, tmpvar_2), 0.0, 1.0);
					  tmpvar_44 = tmpvar_45;
					  highp float tmpvar_46;
					  tmpvar_46 = clamp (dot (tmpvar_30, tmpvar_42), 0.0, 1.0);
					  highp float tmpvar_47;
					  highp float smoothness_48;
					  smoothness_48 = _Glossiness;
					  tmpvar_47 = (1.0 - smoothness_48);
					  perceptualRoughness_41 = tmpvar_47;
					  highp float tmpvar_49;
					  highp float perceptualRoughness_50;
					  perceptualRoughness_50 = perceptualRoughness_41;
					  tmpvar_49 = (perceptualRoughness_50 * perceptualRoughness_50);
					  roughness_40 = tmpvar_49;
					  mediump float tmpvar_51;
					  tmpvar_51 = (roughness_40 * roughness_40);
					  a2_39 = tmpvar_51;
					  specularTerm_38 = ((roughness_40 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_42), 0.0, 1.0)) * (1.5 + roughness_40))
					   * 
					    (((tmpvar_46 * tmpvar_46) * (a2_39 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_52;
					  tmpvar_52 = clamp (specularTerm_38, 0.0, 100.0);
					  specularTerm_38 = tmpvar_52;
					  highp vec3 tmpvar_53;
					  tmpvar_53 = (((diffColor_36 + 
					    (tmpvar_52 * tmpvar_33)
					  ) * tmpvar_1) * tmpvar_44);
					  color_37 = tmpvar_53;
					  mediump vec4 tmpvar_54;
					  tmpvar_54.w = 1.0;
					  tmpvar_54.xyz = color_37;
					  c_29.xyz = tmpvar_54.xyz;
					  c_29.w = alpha_35;
					  c_3.xyz = c_29.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					lowp float u_xlat10_5;
					vec3 u_xlat6;
					mediump vec3 u_xlat16_6;
					lowp vec3 u_xlat10_6;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat1.xyz = u_xlat2.xyz * (-vec3(u_xlat15)) + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat1.x = u_xlat1.x * 16.0;
					    u_xlat10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_6.xyz + (-u_xlat10_2.xyz);
					    u_xlat6.xyz = vec3(_DayWeight) * u_xlat16_6.xyz + u_xlat10_2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _Color.xyz;
					    u_xlat16_3.xyz = u_xlat6.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_3.xyz = u_xlat1.xxx * u_xlat16_3.xyz;
					    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_3.xyz = u_xlat6.xyz * vec3(u_xlat16_18) + u_xlat16_3.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_18 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_18 = u_xlat10_5 * u_xlat16_18 + _LightShadowData.x;
					    u_xlat16_4.x = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = u_xlat0.x * u_xlat16_4.x + u_xlat16_18;
					    u_xlat0.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
					    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat15) * u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTexture0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					lowp float u_xlat10_4;
					float u_xlat5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_9;
					float u_xlat12;
					mediump float u_xlat16_13;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat16_13 = (-_Glossiness) + 1.0;
					    u_xlat16_2 = u_xlat16_13 * u_xlat16_13 + 1.5;
					    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;
					    u_xlat12 = u_xlat12 * u_xlat16_2;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD1.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat16_9 = u_xlat16_13 * u_xlat16_13 + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_9 + 1.00001001;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat12 = u_xlat16_13 / u_xlat12;
					    u_xlat12 = u_xlat12 + -9.99999975e-05;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = min(u_xlat12, 100.0);
					    u_xlat10_1.xzw = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xzw = u_xlat10_1.xzw + (-u_xlat10_2.xyz);
					    u_xlat1.xzw = vec3(_DayWeight) * u_xlat16_1.xzw + u_xlat10_2.xyz;
					    u_xlat1.xzw = u_xlat1.xzw * _Color.xyz;
					    u_xlat16_3.xyz = u_xlat1.xzw * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat1.xzw = u_xlat1.xzw * vs_COLOR0.xyz;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xzw = u_xlat1.xzw * u_xlat16_3.xxx + u_xlat2.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat4.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = (-u_xlat0.x) + u_xlat4.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
					    u_xlat10_4 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat10_4 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_7 = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_7 + u_xlat16_3.x;
					    u_xlat0.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
					    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat1.xzw * u_xlat16_3.xyz;
					    u_xlat0.xyz = vec3(u_xlat5) * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTexture0;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					lowp float u_xlat10_4;
					float u_xlat5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_9;
					float u_xlat12;
					mediump float u_xlat16_13;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat16_13 = (-_Glossiness) + 1.0;
					    u_xlat16_2 = u_xlat16_13 * u_xlat16_13 + 1.5;
					    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;
					    u_xlat12 = u_xlat12 * u_xlat16_2;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD1.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat16_9 = u_xlat16_13 * u_xlat16_13 + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_9 + 1.00001001;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat12 = u_xlat16_13 / u_xlat12;
					    u_xlat12 = u_xlat12 + -9.99999975e-05;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = min(u_xlat12, 100.0);
					    u_xlat10_1.xzw = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xzw = u_xlat10_1.xzw + (-u_xlat10_2.xyz);
					    u_xlat1.xzw = vec3(_DayWeight) * u_xlat16_1.xzw + u_xlat10_2.xyz;
					    u_xlat1.xzw = u_xlat1.xzw * _Color.xyz;
					    u_xlat16_3.xyz = u_xlat1.xzw * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat1.xzw = u_xlat1.xzw * vs_COLOR0.xyz;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xzw = u_xlat1.xzw * u_xlat16_3.xxx + u_xlat2.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat4.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = (-u_xlat0.x) + u_xlat4.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
					    u_xlat10_4 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat10_4 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_7 = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_7 + u_xlat16_3.x;
					    u_xlat0.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
					    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat1.xzw * u_xlat16_3.xyz;
					    u_xlat0.xyz = vec3(u_xlat5) * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _LightPositionRange;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = (tmpvar_4.xyz - _LightPositionRange.xyz);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = tmpvar_4.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4).xyz;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform highp vec4 _LightPositionRange;
					uniform highp vec4 _LightProjectionParams;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  lowp float shadow_5;
					  lowp vec3 lightDir_6;
					  highp vec4 tmpvar_7;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_6 = tmpvar_8;
					  highp vec3 tmpvar_9;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2);
					  tmpvar_9 = normalize(tmpvar_10);
					  tmpvar_7 = xlv_COLOR0;
					  lowp vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 diffuseSample_13;
					  highp vec4 nightSample_14;
					  highp vec4 daySample_15;
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_15 = tmpvar_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_14 = tmpvar_17;
					  diffuseSample_13 = (mix (nightSample_14, daySample_15, vec4(_DayWeight)) * _Color);
					  diffuseSample_13.xyz = (diffuseSample_13.xyz * tmpvar_7.xyz);
					  tmpvar_11 = diffuseSample_13.xyz;
					  tmpvar_12 = diffuseSample_13.w;
					  highp vec4 tmpvar_18;
					  tmpvar_18.w = 1.0;
					  tmpvar_18.xyz = xlv_TEXCOORD2;
					  highp vec3 tmpvar_19;
					  tmpvar_19 = (unity_WorldToLight * tmpvar_18).xyz;
					  highp vec4 v_20;
					  v_20.x = unity_MatrixV[0].z;
					  v_20.y = unity_MatrixV[1].z;
					  v_20.z = unity_MatrixV[2].z;
					  v_20.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_21;
					  tmpvar_21 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  tmpvar_23 = clamp (((
					    mix (dot (tmpvar_10, v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_22 = tmpvar_23;
					  highp vec3 vec_24;
					  vec_24 = (xlv_TEXCOORD2 - _LightPositionRange.xyz);
					  mediump float shadowVal_25;
					  highp float mydist_26;
					  mydist_26 = ((sqrt(
					    dot (vec_24, vec_24)
					  ) * _LightPositionRange.w) * _LightProjectionParams.w);
					  lowp vec4 tmpvar_27;
					  tmpvar_27 = textureCube (_ShadowMapTexture, vec_24);
					  highp vec4 vals_28;
					  vals_28 = tmpvar_27;
					  highp float tmpvar_29;
					  tmpvar_29 = dot (vals_28, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
					  shadowVal_25 = tmpvar_29;
					  mediump float tmpvar_30;
					  if ((shadowVal_25 < mydist_26)) {
					    tmpvar_30 = _LightShadowData.x;
					  } else {
					    tmpvar_30 = 1.0;
					  };
					  mediump float tmpvar_31;
					  tmpvar_31 = mix (tmpvar_30, 1.0, tmpvar_22);
					  shadow_5 = tmpvar_31;
					  highp float tmpvar_32;
					  tmpvar_32 = (texture2D (_LightTexture0, vec2(dot (tmpvar_19, tmpvar_19))).x * shadow_5);
					  atten_4 = tmpvar_32;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_33;
					  mediump vec4 c_34;
					  highp vec3 tmpvar_35;
					  tmpvar_35 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_36;
					  mediump vec3 albedo_37;
					  albedo_37 = tmpvar_11;
					  tmpvar_36 = (albedo_37 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_33 = tmpvar_36;
					  mediump vec3 diffColor_38;
					  diffColor_38 = tmpvar_33;
					  mediump float alpha_39;
					  alpha_39 = tmpvar_12;
					  tmpvar_33 = diffColor_38;
					  mediump vec3 diffColor_40;
					  diffColor_40 = tmpvar_33;
					  mediump vec2 rlPow4AndFresnelTerm_41;
					  mediump float tmpvar_42;
					  highp float tmpvar_43;
					  tmpvar_43 = clamp (dot (tmpvar_35, tmpvar_2), 0.0, 1.0);
					  tmpvar_42 = tmpvar_43;
					  mediump float tmpvar_44;
					  highp float tmpvar_45;
					  tmpvar_45 = clamp (dot (tmpvar_35, tmpvar_9), 0.0, 1.0);
					  tmpvar_44 = tmpvar_45;
					  highp vec2 tmpvar_46;
					  tmpvar_46.x = dot ((tmpvar_9 - (2.0 * 
					    (dot (tmpvar_35, tmpvar_9) * tmpvar_35)
					  )), tmpvar_2);
					  tmpvar_46.y = (1.0 - tmpvar_44);
					  highp vec2 tmpvar_47;
					  tmpvar_47 = ((tmpvar_46 * tmpvar_46) * (tmpvar_46 * tmpvar_46));
					  rlPow4AndFresnelTerm_41 = tmpvar_47;
					  mediump float tmpvar_48;
					  tmpvar_48 = rlPow4AndFresnelTerm_41.x;
					  mediump float specular_49;
					  highp float smoothness_50;
					  smoothness_50 = _Glossiness;
					  highp vec2 tmpvar_51;
					  tmpvar_51.x = tmpvar_48;
					  tmpvar_51.y = (1.0 - smoothness_50);
					  highp float tmpvar_52;
					  tmpvar_52 = (texture2D (unity_NHxRoughness, tmpvar_51).x * 16.0);
					  specular_49 = tmpvar_52;
					  mediump vec4 tmpvar_53;
					  tmpvar_53.w = 1.0;
					  tmpvar_53.xyz = ((diffColor_40 + (specular_49 * 
					    mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_37, vec3(_Metallic))
					  )) * (tmpvar_1 * tmpvar_42));
					  c_34.xyz = tmpvar_53.xyz;
					  c_34.w = alpha_39;
					  c_3.xyz = c_34.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _LightPositionRange;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = (tmpvar_4.xyz - _LightPositionRange.xyz);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = tmpvar_4.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4).xyz;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform highp vec4 _LightPositionRange;
					uniform highp vec4 _LightProjectionParams;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp vec4 _LightColor0;
					uniform lowp samplerCube _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  lowp float shadow_5;
					  lowp vec3 lightDir_6;
					  highp vec4 tmpvar_7;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_6 = tmpvar_8;
					  highp vec3 tmpvar_9;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2);
					  tmpvar_9 = normalize(tmpvar_10);
					  tmpvar_7 = xlv_COLOR0;
					  lowp vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 diffuseSample_13;
					  highp vec4 nightSample_14;
					  highp vec4 daySample_15;
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_15 = tmpvar_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_14 = tmpvar_17;
					  diffuseSample_13 = (mix (nightSample_14, daySample_15, vec4(_DayWeight)) * _Color);
					  diffuseSample_13.xyz = (diffuseSample_13.xyz * tmpvar_7.xyz);
					  tmpvar_11 = diffuseSample_13.xyz;
					  tmpvar_12 = diffuseSample_13.w;
					  highp vec4 tmpvar_18;
					  tmpvar_18.w = 1.0;
					  tmpvar_18.xyz = xlv_TEXCOORD2;
					  highp vec3 tmpvar_19;
					  tmpvar_19 = (unity_WorldToLight * tmpvar_18).xyz;
					  highp vec4 v_20;
					  v_20.x = unity_MatrixV[0].z;
					  v_20.y = unity_MatrixV[1].z;
					  v_20.z = unity_MatrixV[2].z;
					  v_20.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_21;
					  tmpvar_21 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  tmpvar_23 = clamp (((
					    mix (dot (tmpvar_10, v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_22 = tmpvar_23;
					  highp vec3 vec_24;
					  vec_24 = (xlv_TEXCOORD2 - _LightPositionRange.xyz);
					  mediump float shadowVal_25;
					  highp float mydist_26;
					  mydist_26 = ((sqrt(
					    dot (vec_24, vec_24)
					  ) * _LightPositionRange.w) * _LightProjectionParams.w);
					  lowp vec4 tmpvar_27;
					  tmpvar_27 = textureCube (_ShadowMapTexture, vec_24);
					  highp vec4 vals_28;
					  vals_28 = tmpvar_27;
					  highp float tmpvar_29;
					  tmpvar_29 = dot (vals_28, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
					  shadowVal_25 = tmpvar_29;
					  mediump float tmpvar_30;
					  if ((shadowVal_25 < mydist_26)) {
					    tmpvar_30 = _LightShadowData.x;
					  } else {
					    tmpvar_30 = 1.0;
					  };
					  mediump float tmpvar_31;
					  tmpvar_31 = mix (tmpvar_30, 1.0, tmpvar_22);
					  shadow_5 = tmpvar_31;
					  highp float tmpvar_32;
					  tmpvar_32 = (texture2D (_LightTexture0, vec2(dot (tmpvar_19, tmpvar_19))).x * shadow_5);
					  atten_4 = tmpvar_32;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_33;
					  mediump vec4 c_34;
					  highp vec3 tmpvar_35;
					  tmpvar_35 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_36;
					  mediump vec3 albedo_37;
					  albedo_37 = tmpvar_11;
					  mediump vec3 tmpvar_38;
					  tmpvar_38 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_37, vec3(_Metallic));
					  tmpvar_36 = (albedo_37 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_33 = tmpvar_36;
					  mediump vec3 diffColor_39;
					  diffColor_39 = tmpvar_33;
					  mediump float alpha_40;
					  alpha_40 = tmpvar_12;
					  tmpvar_33 = diffColor_39;
					  mediump vec3 diffColor_41;
					  diffColor_41 = tmpvar_33;
					  mediump vec3 color_42;
					  highp float specularTerm_43;
					  highp float a2_44;
					  mediump float roughness_45;
					  mediump float perceptualRoughness_46;
					  highp vec3 tmpvar_47;
					  highp vec3 inVec_48;
					  inVec_48 = (tmpvar_2 + tmpvar_9);
					  tmpvar_47 = (inVec_48 * inversesqrt(max (0.001, 
					    dot (inVec_48, inVec_48)
					  )));
					  mediump float tmpvar_49;
					  highp float tmpvar_50;
					  tmpvar_50 = clamp (dot (tmpvar_35, tmpvar_2), 0.0, 1.0);
					  tmpvar_49 = tmpvar_50;
					  highp float tmpvar_51;
					  tmpvar_51 = clamp (dot (tmpvar_35, tmpvar_47), 0.0, 1.0);
					  highp float tmpvar_52;
					  highp float smoothness_53;
					  smoothness_53 = _Glossiness;
					  tmpvar_52 = (1.0 - smoothness_53);
					  perceptualRoughness_46 = tmpvar_52;
					  highp float tmpvar_54;
					  highp float perceptualRoughness_55;
					  perceptualRoughness_55 = perceptualRoughness_46;
					  tmpvar_54 = (perceptualRoughness_55 * perceptualRoughness_55);
					  roughness_45 = tmpvar_54;
					  mediump float tmpvar_56;
					  tmpvar_56 = (roughness_45 * roughness_45);
					  a2_44 = tmpvar_56;
					  specularTerm_43 = ((roughness_45 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_47), 0.0, 1.0)) * (1.5 + roughness_45))
					   * 
					    (((tmpvar_51 * tmpvar_51) * (a2_44 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_57;
					  tmpvar_57 = clamp (specularTerm_43, 0.0, 100.0);
					  specularTerm_43 = tmpvar_57;
					  highp vec3 tmpvar_58;
					  tmpvar_58 = (((diffColor_41 + 
					    (tmpvar_57 * tmpvar_38)
					  ) * tmpvar_1) * tmpvar_49);
					  color_42 = tmpvar_58;
					  mediump vec4 tmpvar_59;
					  tmpvar_59.w = 1.0;
					  tmpvar_59.xyz = color_42;
					  c_34.xyz = tmpvar_59.xyz;
					  c_34.w = alpha_40;
					  c_3.xyz = c_34.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _LightPositionRange;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = (tmpvar_4.xyz - _LightPositionRange.xyz);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = tmpvar_4.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4).xyz;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform highp vec4 _LightPositionRange;
					uniform highp vec4 _LightProjectionParams;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp vec4 _LightColor0;
					uniform lowp samplerCube _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  lowp float shadow_5;
					  lowp vec3 lightDir_6;
					  highp vec4 tmpvar_7;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_6 = tmpvar_8;
					  highp vec3 tmpvar_9;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2);
					  tmpvar_9 = normalize(tmpvar_10);
					  tmpvar_7 = xlv_COLOR0;
					  lowp vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 diffuseSample_13;
					  highp vec4 nightSample_14;
					  highp vec4 daySample_15;
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_15 = tmpvar_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_14 = tmpvar_17;
					  diffuseSample_13 = (mix (nightSample_14, daySample_15, vec4(_DayWeight)) * _Color);
					  diffuseSample_13.xyz = (diffuseSample_13.xyz * tmpvar_7.xyz);
					  tmpvar_11 = diffuseSample_13.xyz;
					  tmpvar_12 = diffuseSample_13.w;
					  highp vec4 tmpvar_18;
					  tmpvar_18.w = 1.0;
					  tmpvar_18.xyz = xlv_TEXCOORD2;
					  highp vec3 tmpvar_19;
					  tmpvar_19 = (unity_WorldToLight * tmpvar_18).xyz;
					  highp vec4 v_20;
					  v_20.x = unity_MatrixV[0].z;
					  v_20.y = unity_MatrixV[1].z;
					  v_20.z = unity_MatrixV[2].z;
					  v_20.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_21;
					  tmpvar_21 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  tmpvar_23 = clamp (((
					    mix (dot (tmpvar_10, v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_22 = tmpvar_23;
					  highp vec3 vec_24;
					  vec_24 = (xlv_TEXCOORD2 - _LightPositionRange.xyz);
					  mediump float shadowVal_25;
					  highp float mydist_26;
					  mydist_26 = ((sqrt(
					    dot (vec_24, vec_24)
					  ) * _LightPositionRange.w) * _LightProjectionParams.w);
					  lowp vec4 tmpvar_27;
					  tmpvar_27 = textureCube (_ShadowMapTexture, vec_24);
					  highp vec4 vals_28;
					  vals_28 = tmpvar_27;
					  highp float tmpvar_29;
					  tmpvar_29 = dot (vals_28, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
					  shadowVal_25 = tmpvar_29;
					  mediump float tmpvar_30;
					  if ((shadowVal_25 < mydist_26)) {
					    tmpvar_30 = _LightShadowData.x;
					  } else {
					    tmpvar_30 = 1.0;
					  };
					  mediump float tmpvar_31;
					  tmpvar_31 = mix (tmpvar_30, 1.0, tmpvar_22);
					  shadow_5 = tmpvar_31;
					  highp float tmpvar_32;
					  tmpvar_32 = (texture2D (_LightTexture0, vec2(dot (tmpvar_19, tmpvar_19))).x * shadow_5);
					  atten_4 = tmpvar_32;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_33;
					  mediump vec4 c_34;
					  highp vec3 tmpvar_35;
					  tmpvar_35 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_36;
					  mediump vec3 albedo_37;
					  albedo_37 = tmpvar_11;
					  mediump vec3 tmpvar_38;
					  tmpvar_38 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_37, vec3(_Metallic));
					  tmpvar_36 = (albedo_37 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_33 = tmpvar_36;
					  mediump vec3 diffColor_39;
					  diffColor_39 = tmpvar_33;
					  mediump float alpha_40;
					  alpha_40 = tmpvar_12;
					  tmpvar_33 = diffColor_39;
					  mediump vec3 diffColor_41;
					  diffColor_41 = tmpvar_33;
					  mediump vec3 color_42;
					  highp float specularTerm_43;
					  highp float a2_44;
					  mediump float roughness_45;
					  mediump float perceptualRoughness_46;
					  highp vec3 tmpvar_47;
					  highp vec3 inVec_48;
					  inVec_48 = (tmpvar_2 + tmpvar_9);
					  tmpvar_47 = (inVec_48 * inversesqrt(max (0.001, 
					    dot (inVec_48, inVec_48)
					  )));
					  mediump float tmpvar_49;
					  highp float tmpvar_50;
					  tmpvar_50 = clamp (dot (tmpvar_35, tmpvar_2), 0.0, 1.0);
					  tmpvar_49 = tmpvar_50;
					  highp float tmpvar_51;
					  tmpvar_51 = clamp (dot (tmpvar_35, tmpvar_47), 0.0, 1.0);
					  highp float tmpvar_52;
					  highp float smoothness_53;
					  smoothness_53 = _Glossiness;
					  tmpvar_52 = (1.0 - smoothness_53);
					  perceptualRoughness_46 = tmpvar_52;
					  highp float tmpvar_54;
					  highp float perceptualRoughness_55;
					  perceptualRoughness_55 = perceptualRoughness_46;
					  tmpvar_54 = (perceptualRoughness_55 * perceptualRoughness_55);
					  roughness_45 = tmpvar_54;
					  mediump float tmpvar_56;
					  tmpvar_56 = (roughness_45 * roughness_45);
					  a2_44 = tmpvar_56;
					  specularTerm_43 = ((roughness_45 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_47), 0.0, 1.0)) * (1.5 + roughness_45))
					   * 
					    (((tmpvar_51 * tmpvar_51) * (a2_44 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_57;
					  tmpvar_57 = clamp (specularTerm_43, 0.0, 100.0);
					  specularTerm_43 = tmpvar_57;
					  highp vec3 tmpvar_58;
					  tmpvar_58 = (((diffColor_41 + 
					    (tmpvar_57 * tmpvar_38)
					  ) * tmpvar_1) * tmpvar_49);
					  color_42 = tmpvar_58;
					  mediump vec4 tmpvar_59;
					  tmpvar_59.w = 1.0;
					  tmpvar_59.xyz = color_42;
					  c_34.xyz = tmpvar_59.xyz;
					  c_34.w = alpha_40;
					  c_3.xyz = c_34.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					lowp vec3 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					lowp float u_xlat10_6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_7;
					lowp vec3 u_xlat10_7;
					float u_xlat18;
					mediump float u_xlat16_22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat18 = u_xlat18 + u_xlat18;
					    u_xlat1.xyz = u_xlat2.xyz * (-vec3(u_xlat18)) + u_xlat1.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat2.x = u_xlat18 * u_xlat18;
					    u_xlat2.y = (-_Glossiness) + 1.0;
					    u_xlat18 = texture(unity_NHxRoughness, u_xlat2.xy).x;
					    u_xlat18 = u_xlat18 * 16.0;
					    u_xlat10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_7.xyz = u_xlat10_7.xyz + (-u_xlat10_2.xyz);
					    u_xlat7.xyz = vec3(_DayWeight) * u_xlat16_7.xyz + u_xlat10_2.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat7.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz;
					    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = u_xlat7.xyz * vec3(u_xlat16_22) + u_xlat16_4.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = (-u_xlat0.x) + u_xlat6.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat6.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat7.x = max(abs(u_xlat6.y), abs(u_xlat6.x));
					    u_xlat7.x = max(abs(u_xlat6.z), u_xlat7.x);
					    u_xlat7.x = u_xlat7.x + (-_LightProjectionParams.z);
					    u_xlat7.x = max(u_xlat7.x, 9.99999975e-06);
					    u_xlat7.x = u_xlat7.x * _LightProjectionParams.w;
					    u_xlat7.x = _LightProjectionParams.y / u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + (-_LightProjectionParams.x);
					    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat7.x);
					    u_xlat10_6 = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat16_22 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_22 = u_xlat10_6 * u_xlat16_22 + _LightShadowData.x;
					    u_xlat16_5.x = (-u_xlat16_22) + 1.0;
					    u_xlat16_22 = u_xlat0.x * u_xlat16_5.x + u_xlat16_22;
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_22 * u_xlat0.x;
					    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat1.xxx * u_xlat16_5.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTexture0;
					uniform lowp samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump float u_xlat16_6;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_16;
					float u_xlat17;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat15 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat15 = max(abs(u_xlat0.z), u_xlat15);
					    u_xlat15 = u_xlat15 + (-_LightProjectionParams.z);
					    u_xlat15 = max(u_xlat15, 9.99999975e-06);
					    u_xlat15 = u_xlat15 * _LightProjectionParams.w;
					    u_xlat15 = _LightProjectionParams.y / u_xlat15;
					    u_xlat15 = u_xlat15 + (-_LightProjectionParams.x);
					    vec4 txVec0 = vec4(u_xlat0.xyz,u_xlat15);
					    u_xlat10_0 = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
					    u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_1.x * u_xlat0.x;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat16_17 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_17 * u_xlat16_17 + 1.5;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat15 = u_xlat15 * u_xlat16_3;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
					#else
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_10 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat15;
					    u_xlat0.x = u_xlat16_17 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_3.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_2.xyz + (-u_xlat10_3.xyz);
					    u_xlat2.xyz = vec3(_DayWeight) * u_xlat16_2.xyz + u_xlat10_3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_16 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xzw = u_xlat2.xyz * vec3(u_xlat16_16) + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat16_1.xyz * u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat5.xxx * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTexture0;
					uniform lowp samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump float u_xlat16_6;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_16;
					float u_xlat17;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat15 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat15 = max(abs(u_xlat0.z), u_xlat15);
					    u_xlat15 = u_xlat15 + (-_LightProjectionParams.z);
					    u_xlat15 = max(u_xlat15, 9.99999975e-06);
					    u_xlat15 = u_xlat15 * _LightProjectionParams.w;
					    u_xlat15 = _LightProjectionParams.y / u_xlat15;
					    u_xlat15 = u_xlat15 + (-_LightProjectionParams.x);
					    vec4 txVec0 = vec4(u_xlat0.xyz,u_xlat15);
					    u_xlat10_0 = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
					    u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_1.x * u_xlat0.x;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat16_17 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_17 * u_xlat16_17 + 1.5;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat15 = u_xlat15 * u_xlat16_3;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
					#else
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_10 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat15;
					    u_xlat0.x = u_xlat16_17 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_3.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_2.xyz + (-u_xlat10_3.xyz);
					    u_xlat2.xyz = vec3(_DayWeight) * u_xlat16_2.xyz + u_xlat10_3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_16 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xzw = u_xlat2.xyz * vec3(u_xlat16_16) + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat16_1.xyz * u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat5.xxx * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _LightPositionRange;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = (tmpvar_4.xyz - _LightPositionRange.xyz);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = tmpvar_4.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4).xyz;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform highp vec4 _LightPositionRange;
					uniform highp vec4 _LightProjectionParams;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  lowp float shadow_5;
					  lowp vec3 lightDir_6;
					  highp vec4 tmpvar_7;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_6 = tmpvar_8;
					  highp vec3 tmpvar_9;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2);
					  tmpvar_9 = normalize(tmpvar_10);
					  tmpvar_7 = xlv_COLOR0;
					  lowp vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 diffuseSample_13;
					  highp vec4 nightSample_14;
					  highp vec4 daySample_15;
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_15 = tmpvar_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_14 = tmpvar_17;
					  diffuseSample_13 = (mix (nightSample_14, daySample_15, vec4(_DayWeight)) * _Color);
					  diffuseSample_13.xyz = (diffuseSample_13.xyz * tmpvar_7.xyz);
					  tmpvar_11 = diffuseSample_13.xyz;
					  tmpvar_12 = diffuseSample_13.w;
					  highp vec4 tmpvar_18;
					  tmpvar_18.w = 1.0;
					  tmpvar_18.xyz = xlv_TEXCOORD2;
					  highp vec3 tmpvar_19;
					  tmpvar_19 = (unity_WorldToLight * tmpvar_18).xyz;
					  highp vec4 v_20;
					  v_20.x = unity_MatrixV[0].z;
					  v_20.y = unity_MatrixV[1].z;
					  v_20.z = unity_MatrixV[2].z;
					  v_20.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_21;
					  tmpvar_21 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  tmpvar_23 = clamp (((
					    mix (dot (tmpvar_10, v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_22 = tmpvar_23;
					  highp vec3 vec_24;
					  vec_24 = (xlv_TEXCOORD2 - _LightPositionRange.xyz);
					  highp vec4 shadowVals_25;
					  highp float mydist_26;
					  mydist_26 = ((sqrt(
					    dot (vec_24, vec_24)
					  ) * _LightPositionRange.w) * _LightProjectionParams.w);
					  highp vec4 tmpvar_27;
					  tmpvar_27.w = 0.0;
					  tmpvar_27.xyz = (vec_24 + vec3(0.0078125, 0.0078125, 0.0078125));
					  highp vec4 tmpvar_28;
					  lowp vec4 tmpvar_29;
					  tmpvar_29 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_27.xyz, 0.0);
					  tmpvar_28 = tmpvar_29;
					  shadowVals_25.x = dot (tmpvar_28, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
					  highp vec4 tmpvar_30;
					  tmpvar_30.w = 0.0;
					  tmpvar_30.xyz = (vec_24 + vec3(-0.0078125, -0.0078125, 0.0078125));
					  highp vec4 tmpvar_31;
					  lowp vec4 tmpvar_32;
					  tmpvar_32 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_30.xyz, 0.0);
					  tmpvar_31 = tmpvar_32;
					  shadowVals_25.y = dot (tmpvar_31, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
					  highp vec4 tmpvar_33;
					  tmpvar_33.w = 0.0;
					  tmpvar_33.xyz = (vec_24 + vec3(-0.0078125, 0.0078125, -0.0078125));
					  highp vec4 tmpvar_34;
					  lowp vec4 tmpvar_35;
					  tmpvar_35 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_33.xyz, 0.0);
					  tmpvar_34 = tmpvar_35;
					  shadowVals_25.z = dot (tmpvar_34, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
					  highp vec4 tmpvar_36;
					  tmpvar_36.w = 0.0;
					  tmpvar_36.xyz = (vec_24 + vec3(0.0078125, -0.0078125, -0.0078125));
					  highp vec4 tmpvar_37;
					  lowp vec4 tmpvar_38;
					  tmpvar_38 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_36.xyz, 0.0);
					  tmpvar_37 = tmpvar_38;
					  shadowVals_25.w = dot (tmpvar_37, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
					  bvec4 tmpvar_39;
					  tmpvar_39 = lessThan (shadowVals_25, vec4(mydist_26));
					  mediump vec4 tmpvar_40;
					  tmpvar_40 = _LightShadowData.xxxx;
					  mediump float tmpvar_41;
					  if (tmpvar_39.x) {
					    tmpvar_41 = tmpvar_40.x;
					  } else {
					    tmpvar_41 = 1.0;
					  };
					  mediump float tmpvar_42;
					  if (tmpvar_39.y) {
					    tmpvar_42 = tmpvar_40.y;
					  } else {
					    tmpvar_42 = 1.0;
					  };
					  mediump float tmpvar_43;
					  if (tmpvar_39.z) {
					    tmpvar_43 = tmpvar_40.z;
					  } else {
					    tmpvar_43 = 1.0;
					  };
					  mediump float tmpvar_44;
					  if (tmpvar_39.w) {
					    tmpvar_44 = tmpvar_40.w;
					  } else {
					    tmpvar_44 = 1.0;
					  };
					  mediump vec4 tmpvar_45;
					  tmpvar_45.x = tmpvar_41;
					  tmpvar_45.y = tmpvar_42;
					  tmpvar_45.z = tmpvar_43;
					  tmpvar_45.w = tmpvar_44;
					  mediump float tmpvar_46;
					  tmpvar_46 = mix (dot (tmpvar_45, vec4(0.25, 0.25, 0.25, 0.25)), 1.0, tmpvar_22);
					  shadow_5 = tmpvar_46;
					  highp float tmpvar_47;
					  tmpvar_47 = (texture2D (_LightTexture0, vec2(dot (tmpvar_19, tmpvar_19))).x * shadow_5);
					  atten_4 = tmpvar_47;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_48;
					  mediump vec4 c_49;
					  highp vec3 tmpvar_50;
					  tmpvar_50 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_51;
					  mediump vec3 albedo_52;
					  albedo_52 = tmpvar_11;
					  tmpvar_51 = (albedo_52 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_48 = tmpvar_51;
					  mediump vec3 diffColor_53;
					  diffColor_53 = tmpvar_48;
					  mediump float alpha_54;
					  alpha_54 = tmpvar_12;
					  tmpvar_48 = diffColor_53;
					  mediump vec3 diffColor_55;
					  diffColor_55 = tmpvar_48;
					  mediump vec2 rlPow4AndFresnelTerm_56;
					  mediump float tmpvar_57;
					  highp float tmpvar_58;
					  tmpvar_58 = clamp (dot (tmpvar_50, tmpvar_2), 0.0, 1.0);
					  tmpvar_57 = tmpvar_58;
					  mediump float tmpvar_59;
					  highp float tmpvar_60;
					  tmpvar_60 = clamp (dot (tmpvar_50, tmpvar_9), 0.0, 1.0);
					  tmpvar_59 = tmpvar_60;
					  highp vec2 tmpvar_61;
					  tmpvar_61.x = dot ((tmpvar_9 - (2.0 * 
					    (dot (tmpvar_50, tmpvar_9) * tmpvar_50)
					  )), tmpvar_2);
					  tmpvar_61.y = (1.0 - tmpvar_59);
					  highp vec2 tmpvar_62;
					  tmpvar_62 = ((tmpvar_61 * tmpvar_61) * (tmpvar_61 * tmpvar_61));
					  rlPow4AndFresnelTerm_56 = tmpvar_62;
					  mediump float tmpvar_63;
					  tmpvar_63 = rlPow4AndFresnelTerm_56.x;
					  mediump float specular_64;
					  highp float smoothness_65;
					  smoothness_65 = _Glossiness;
					  highp vec2 tmpvar_66;
					  tmpvar_66.x = tmpvar_63;
					  tmpvar_66.y = (1.0 - smoothness_65);
					  highp float tmpvar_67;
					  tmpvar_67 = (texture2D (unity_NHxRoughness, tmpvar_66).x * 16.0);
					  specular_64 = tmpvar_67;
					  mediump vec4 tmpvar_68;
					  tmpvar_68.w = 1.0;
					  tmpvar_68.xyz = ((diffColor_55 + (specular_64 * 
					    mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_52, vec3(_Metallic))
					  )) * (tmpvar_1 * tmpvar_57));
					  c_49.xyz = tmpvar_68.xyz;
					  c_49.w = alpha_54;
					  c_3.xyz = c_49.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _LightPositionRange;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = (tmpvar_4.xyz - _LightPositionRange.xyz);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = tmpvar_4.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4).xyz;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform highp vec4 _LightPositionRange;
					uniform highp vec4 _LightProjectionParams;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp vec4 _LightColor0;
					uniform lowp samplerCube _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  lowp float shadow_5;
					  lowp vec3 lightDir_6;
					  highp vec4 tmpvar_7;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_6 = tmpvar_8;
					  highp vec3 tmpvar_9;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2);
					  tmpvar_9 = normalize(tmpvar_10);
					  tmpvar_7 = xlv_COLOR0;
					  lowp vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 diffuseSample_13;
					  highp vec4 nightSample_14;
					  highp vec4 daySample_15;
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_15 = tmpvar_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_14 = tmpvar_17;
					  diffuseSample_13 = (mix (nightSample_14, daySample_15, vec4(_DayWeight)) * _Color);
					  diffuseSample_13.xyz = (diffuseSample_13.xyz * tmpvar_7.xyz);
					  tmpvar_11 = diffuseSample_13.xyz;
					  tmpvar_12 = diffuseSample_13.w;
					  highp vec4 tmpvar_18;
					  tmpvar_18.w = 1.0;
					  tmpvar_18.xyz = xlv_TEXCOORD2;
					  highp vec3 tmpvar_19;
					  tmpvar_19 = (unity_WorldToLight * tmpvar_18).xyz;
					  highp vec4 v_20;
					  v_20.x = unity_MatrixV[0].z;
					  v_20.y = unity_MatrixV[1].z;
					  v_20.z = unity_MatrixV[2].z;
					  v_20.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_21;
					  tmpvar_21 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  tmpvar_23 = clamp (((
					    mix (dot (tmpvar_10, v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_22 = tmpvar_23;
					  highp vec3 vec_24;
					  vec_24 = (xlv_TEXCOORD2 - _LightPositionRange.xyz);
					  highp vec4 shadowVals_25;
					  highp float mydist_26;
					  mydist_26 = ((sqrt(
					    dot (vec_24, vec_24)
					  ) * _LightPositionRange.w) * _LightProjectionParams.w);
					  highp vec4 tmpvar_27;
					  tmpvar_27.w = 0.0;
					  tmpvar_27.xyz = (vec_24 + vec3(0.0078125, 0.0078125, 0.0078125));
					  highp vec4 tmpvar_28;
					  lowp vec4 tmpvar_29;
					  tmpvar_29 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_27.xyz, 0.0);
					  tmpvar_28 = tmpvar_29;
					  shadowVals_25.x = dot (tmpvar_28, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
					  highp vec4 tmpvar_30;
					  tmpvar_30.w = 0.0;
					  tmpvar_30.xyz = (vec_24 + vec3(-0.0078125, -0.0078125, 0.0078125));
					  highp vec4 tmpvar_31;
					  lowp vec4 tmpvar_32;
					  tmpvar_32 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_30.xyz, 0.0);
					  tmpvar_31 = tmpvar_32;
					  shadowVals_25.y = dot (tmpvar_31, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
					  highp vec4 tmpvar_33;
					  tmpvar_33.w = 0.0;
					  tmpvar_33.xyz = (vec_24 + vec3(-0.0078125, 0.0078125, -0.0078125));
					  highp vec4 tmpvar_34;
					  lowp vec4 tmpvar_35;
					  tmpvar_35 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_33.xyz, 0.0);
					  tmpvar_34 = tmpvar_35;
					  shadowVals_25.z = dot (tmpvar_34, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
					  highp vec4 tmpvar_36;
					  tmpvar_36.w = 0.0;
					  tmpvar_36.xyz = (vec_24 + vec3(0.0078125, -0.0078125, -0.0078125));
					  highp vec4 tmpvar_37;
					  lowp vec4 tmpvar_38;
					  tmpvar_38 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_36.xyz, 0.0);
					  tmpvar_37 = tmpvar_38;
					  shadowVals_25.w = dot (tmpvar_37, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
					  bvec4 tmpvar_39;
					  tmpvar_39 = lessThan (shadowVals_25, vec4(mydist_26));
					  mediump vec4 tmpvar_40;
					  tmpvar_40 = _LightShadowData.xxxx;
					  mediump float tmpvar_41;
					  if (tmpvar_39.x) {
					    tmpvar_41 = tmpvar_40.x;
					  } else {
					    tmpvar_41 = 1.0;
					  };
					  mediump float tmpvar_42;
					  if (tmpvar_39.y) {
					    tmpvar_42 = tmpvar_40.y;
					  } else {
					    tmpvar_42 = 1.0;
					  };
					  mediump float tmpvar_43;
					  if (tmpvar_39.z) {
					    tmpvar_43 = tmpvar_40.z;
					  } else {
					    tmpvar_43 = 1.0;
					  };
					  mediump float tmpvar_44;
					  if (tmpvar_39.w) {
					    tmpvar_44 = tmpvar_40.w;
					  } else {
					    tmpvar_44 = 1.0;
					  };
					  mediump vec4 tmpvar_45;
					  tmpvar_45.x = tmpvar_41;
					  tmpvar_45.y = tmpvar_42;
					  tmpvar_45.z = tmpvar_43;
					  tmpvar_45.w = tmpvar_44;
					  mediump float tmpvar_46;
					  tmpvar_46 = mix (dot (tmpvar_45, vec4(0.25, 0.25, 0.25, 0.25)), 1.0, tmpvar_22);
					  shadow_5 = tmpvar_46;
					  highp float tmpvar_47;
					  tmpvar_47 = (texture2D (_LightTexture0, vec2(dot (tmpvar_19, tmpvar_19))).x * shadow_5);
					  atten_4 = tmpvar_47;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_48;
					  mediump vec4 c_49;
					  highp vec3 tmpvar_50;
					  tmpvar_50 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_51;
					  mediump vec3 albedo_52;
					  albedo_52 = tmpvar_11;
					  mediump vec3 tmpvar_53;
					  tmpvar_53 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_52, vec3(_Metallic));
					  tmpvar_51 = (albedo_52 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_48 = tmpvar_51;
					  mediump vec3 diffColor_54;
					  diffColor_54 = tmpvar_48;
					  mediump float alpha_55;
					  alpha_55 = tmpvar_12;
					  tmpvar_48 = diffColor_54;
					  mediump vec3 diffColor_56;
					  diffColor_56 = tmpvar_48;
					  mediump vec3 color_57;
					  highp float specularTerm_58;
					  highp float a2_59;
					  mediump float roughness_60;
					  mediump float perceptualRoughness_61;
					  highp vec3 tmpvar_62;
					  highp vec3 inVec_63;
					  inVec_63 = (tmpvar_2 + tmpvar_9);
					  tmpvar_62 = (inVec_63 * inversesqrt(max (0.001, 
					    dot (inVec_63, inVec_63)
					  )));
					  mediump float tmpvar_64;
					  highp float tmpvar_65;
					  tmpvar_65 = clamp (dot (tmpvar_50, tmpvar_2), 0.0, 1.0);
					  tmpvar_64 = tmpvar_65;
					  highp float tmpvar_66;
					  tmpvar_66 = clamp (dot (tmpvar_50, tmpvar_62), 0.0, 1.0);
					  highp float tmpvar_67;
					  highp float smoothness_68;
					  smoothness_68 = _Glossiness;
					  tmpvar_67 = (1.0 - smoothness_68);
					  perceptualRoughness_61 = tmpvar_67;
					  highp float tmpvar_69;
					  highp float perceptualRoughness_70;
					  perceptualRoughness_70 = perceptualRoughness_61;
					  tmpvar_69 = (perceptualRoughness_70 * perceptualRoughness_70);
					  roughness_60 = tmpvar_69;
					  mediump float tmpvar_71;
					  tmpvar_71 = (roughness_60 * roughness_60);
					  a2_59 = tmpvar_71;
					  specularTerm_58 = ((roughness_60 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_62), 0.0, 1.0)) * (1.5 + roughness_60))
					   * 
					    (((tmpvar_66 * tmpvar_66) * (a2_59 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_72;
					  tmpvar_72 = clamp (specularTerm_58, 0.0, 100.0);
					  specularTerm_58 = tmpvar_72;
					  highp vec3 tmpvar_73;
					  tmpvar_73 = (((diffColor_56 + 
					    (tmpvar_72 * tmpvar_53)
					  ) * tmpvar_1) * tmpvar_64);
					  color_57 = tmpvar_73;
					  mediump vec4 tmpvar_74;
					  tmpvar_74.w = 1.0;
					  tmpvar_74.xyz = color_57;
					  c_49.xyz = tmpvar_74.xyz;
					  c_49.w = alpha_55;
					  c_3.xyz = c_49.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _LightPositionRange;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = (tmpvar_4.xyz - _LightPositionRange.xyz);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = tmpvar_4.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4).xyz;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform highp vec4 _LightPositionRange;
					uniform highp vec4 _LightProjectionParams;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp vec4 _LightColor0;
					uniform lowp samplerCube _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  lowp float shadow_5;
					  lowp vec3 lightDir_6;
					  highp vec4 tmpvar_7;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_6 = tmpvar_8;
					  highp vec3 tmpvar_9;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2);
					  tmpvar_9 = normalize(tmpvar_10);
					  tmpvar_7 = xlv_COLOR0;
					  lowp vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 diffuseSample_13;
					  highp vec4 nightSample_14;
					  highp vec4 daySample_15;
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_15 = tmpvar_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_14 = tmpvar_17;
					  diffuseSample_13 = (mix (nightSample_14, daySample_15, vec4(_DayWeight)) * _Color);
					  diffuseSample_13.xyz = (diffuseSample_13.xyz * tmpvar_7.xyz);
					  tmpvar_11 = diffuseSample_13.xyz;
					  tmpvar_12 = diffuseSample_13.w;
					  highp vec4 tmpvar_18;
					  tmpvar_18.w = 1.0;
					  tmpvar_18.xyz = xlv_TEXCOORD2;
					  highp vec3 tmpvar_19;
					  tmpvar_19 = (unity_WorldToLight * tmpvar_18).xyz;
					  highp vec4 v_20;
					  v_20.x = unity_MatrixV[0].z;
					  v_20.y = unity_MatrixV[1].z;
					  v_20.z = unity_MatrixV[2].z;
					  v_20.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_21;
					  tmpvar_21 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_22;
					  highp float tmpvar_23;
					  tmpvar_23 = clamp (((
					    mix (dot (tmpvar_10, v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_22 = tmpvar_23;
					  highp vec3 vec_24;
					  vec_24 = (xlv_TEXCOORD2 - _LightPositionRange.xyz);
					  highp vec4 shadowVals_25;
					  highp float mydist_26;
					  mydist_26 = ((sqrt(
					    dot (vec_24, vec_24)
					  ) * _LightPositionRange.w) * _LightProjectionParams.w);
					  highp vec4 tmpvar_27;
					  tmpvar_27.w = 0.0;
					  tmpvar_27.xyz = (vec_24 + vec3(0.0078125, 0.0078125, 0.0078125));
					  highp vec4 tmpvar_28;
					  lowp vec4 tmpvar_29;
					  tmpvar_29 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_27.xyz, 0.0);
					  tmpvar_28 = tmpvar_29;
					  shadowVals_25.x = dot (tmpvar_28, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
					  highp vec4 tmpvar_30;
					  tmpvar_30.w = 0.0;
					  tmpvar_30.xyz = (vec_24 + vec3(-0.0078125, -0.0078125, 0.0078125));
					  highp vec4 tmpvar_31;
					  lowp vec4 tmpvar_32;
					  tmpvar_32 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_30.xyz, 0.0);
					  tmpvar_31 = tmpvar_32;
					  shadowVals_25.y = dot (tmpvar_31, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
					  highp vec4 tmpvar_33;
					  tmpvar_33.w = 0.0;
					  tmpvar_33.xyz = (vec_24 + vec3(-0.0078125, 0.0078125, -0.0078125));
					  highp vec4 tmpvar_34;
					  lowp vec4 tmpvar_35;
					  tmpvar_35 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_33.xyz, 0.0);
					  tmpvar_34 = tmpvar_35;
					  shadowVals_25.z = dot (tmpvar_34, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
					  highp vec4 tmpvar_36;
					  tmpvar_36.w = 0.0;
					  tmpvar_36.xyz = (vec_24 + vec3(0.0078125, -0.0078125, -0.0078125));
					  highp vec4 tmpvar_37;
					  lowp vec4 tmpvar_38;
					  tmpvar_38 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_36.xyz, 0.0);
					  tmpvar_37 = tmpvar_38;
					  shadowVals_25.w = dot (tmpvar_37, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
					  bvec4 tmpvar_39;
					  tmpvar_39 = lessThan (shadowVals_25, vec4(mydist_26));
					  mediump vec4 tmpvar_40;
					  tmpvar_40 = _LightShadowData.xxxx;
					  mediump float tmpvar_41;
					  if (tmpvar_39.x) {
					    tmpvar_41 = tmpvar_40.x;
					  } else {
					    tmpvar_41 = 1.0;
					  };
					  mediump float tmpvar_42;
					  if (tmpvar_39.y) {
					    tmpvar_42 = tmpvar_40.y;
					  } else {
					    tmpvar_42 = 1.0;
					  };
					  mediump float tmpvar_43;
					  if (tmpvar_39.z) {
					    tmpvar_43 = tmpvar_40.z;
					  } else {
					    tmpvar_43 = 1.0;
					  };
					  mediump float tmpvar_44;
					  if (tmpvar_39.w) {
					    tmpvar_44 = tmpvar_40.w;
					  } else {
					    tmpvar_44 = 1.0;
					  };
					  mediump vec4 tmpvar_45;
					  tmpvar_45.x = tmpvar_41;
					  tmpvar_45.y = tmpvar_42;
					  tmpvar_45.z = tmpvar_43;
					  tmpvar_45.w = tmpvar_44;
					  mediump float tmpvar_46;
					  tmpvar_46 = mix (dot (tmpvar_45, vec4(0.25, 0.25, 0.25, 0.25)), 1.0, tmpvar_22);
					  shadow_5 = tmpvar_46;
					  highp float tmpvar_47;
					  tmpvar_47 = (texture2D (_LightTexture0, vec2(dot (tmpvar_19, tmpvar_19))).x * shadow_5);
					  atten_4 = tmpvar_47;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_48;
					  mediump vec4 c_49;
					  highp vec3 tmpvar_50;
					  tmpvar_50 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_51;
					  mediump vec3 albedo_52;
					  albedo_52 = tmpvar_11;
					  mediump vec3 tmpvar_53;
					  tmpvar_53 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_52, vec3(_Metallic));
					  tmpvar_51 = (albedo_52 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_48 = tmpvar_51;
					  mediump vec3 diffColor_54;
					  diffColor_54 = tmpvar_48;
					  mediump float alpha_55;
					  alpha_55 = tmpvar_12;
					  tmpvar_48 = diffColor_54;
					  mediump vec3 diffColor_56;
					  diffColor_56 = tmpvar_48;
					  mediump vec3 color_57;
					  highp float specularTerm_58;
					  highp float a2_59;
					  mediump float roughness_60;
					  mediump float perceptualRoughness_61;
					  highp vec3 tmpvar_62;
					  highp vec3 inVec_63;
					  inVec_63 = (tmpvar_2 + tmpvar_9);
					  tmpvar_62 = (inVec_63 * inversesqrt(max (0.001, 
					    dot (inVec_63, inVec_63)
					  )));
					  mediump float tmpvar_64;
					  highp float tmpvar_65;
					  tmpvar_65 = clamp (dot (tmpvar_50, tmpvar_2), 0.0, 1.0);
					  tmpvar_64 = tmpvar_65;
					  highp float tmpvar_66;
					  tmpvar_66 = clamp (dot (tmpvar_50, tmpvar_62), 0.0, 1.0);
					  highp float tmpvar_67;
					  highp float smoothness_68;
					  smoothness_68 = _Glossiness;
					  tmpvar_67 = (1.0 - smoothness_68);
					  perceptualRoughness_61 = tmpvar_67;
					  highp float tmpvar_69;
					  highp float perceptualRoughness_70;
					  perceptualRoughness_70 = perceptualRoughness_61;
					  tmpvar_69 = (perceptualRoughness_70 * perceptualRoughness_70);
					  roughness_60 = tmpvar_69;
					  mediump float tmpvar_71;
					  tmpvar_71 = (roughness_60 * roughness_60);
					  a2_59 = tmpvar_71;
					  specularTerm_58 = ((roughness_60 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_62), 0.0, 1.0)) * (1.5 + roughness_60))
					   * 
					    (((tmpvar_66 * tmpvar_66) * (a2_59 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_72;
					  tmpvar_72 = clamp (specularTerm_58, 0.0, 100.0);
					  specularTerm_58 = tmpvar_72;
					  highp vec3 tmpvar_73;
					  tmpvar_73 = (((diffColor_56 + 
					    (tmpvar_72 * tmpvar_53)
					  ) * tmpvar_1) * tmpvar_64);
					  color_57 = tmpvar_73;
					  mediump vec4 tmpvar_74;
					  tmpvar_74.w = 1.0;
					  tmpvar_74.xyz = color_57;
					  c_49.xyz = tmpvar_74.xyz;
					  c_49.w = alpha_55;
					  c_3.xyz = c_49.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					lowp vec3 u_xlat10_5;
					mediump float u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat15 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat15 = max(abs(u_xlat0.z), u_xlat15);
					    u_xlat15 = u_xlat15 + (-_LightProjectionParams.z);
					    u_xlat15 = max(u_xlat15, 9.99999975e-06);
					    u_xlat15 = u_xlat15 * _LightProjectionParams.w;
					    u_xlat15 = _LightProjectionParams.y / u_xlat15;
					    u_xlat15 = u_xlat15 + (-_LightProjectionParams.x);
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat15);
					    u_xlat1.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat15);
					    u_xlat1.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat15);
					    u_xlat1.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat15);
					    u_xlat1.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8 = (-u_xlat16_3.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8 + u_xlat16_3.x;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat2.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_Glossiness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_5.xyz = u_xlat10_5.xyz + (-u_xlat10_1.xyz);
					    u_xlat5.xyz = vec3(_DayWeight) * u_xlat16_5.xyz + u_xlat10_1.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat5.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat5.xyz = u_xlat5.xyz * vs_COLOR0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat16_18) + u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTexture0;
					uniform lowp samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump float u_xlat16_8;
					mediump float u_xlat16_10;
					float u_xlat15;
					float u_xlat16;
					mediump float u_xlat16_16;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat15 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat15 = max(abs(u_xlat0.z), u_xlat15);
					    u_xlat15 = u_xlat15 + (-_LightProjectionParams.z);
					    u_xlat15 = max(u_xlat15, 9.99999975e-06);
					    u_xlat15 = u_xlat15 * _LightProjectionParams.w;
					    u_xlat15 = _LightProjectionParams.y / u_xlat15;
					    u_xlat15 = u_xlat15 + (-_LightProjectionParams.x);
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat15);
					    u_xlat1.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat15);
					    u_xlat1.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat15);
					    u_xlat1.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat15);
					    u_xlat1.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8 = (-u_xlat16_3.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8 + u_xlat16_3.x;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat16_16 = (-_Glossiness) + 1.0;
					    u_xlat16_2 = u_xlat16_16 * u_xlat16_16 + 1.5;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat15 = u_xlat15 * u_xlat16_2;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD1.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
					#else
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_10 = u_xlat16_16 * u_xlat16_16 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_10 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat15;
					    u_xlat0.x = u_xlat16_16 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat1.xyz = vec3(_DayWeight) * u_xlat16_1.xyz + u_xlat10_2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xzw = u_xlat1.xyz * vec3(u_xlat16_18) + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat5.xxx * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTexture0;
					uniform lowp samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump float u_xlat16_8;
					mediump float u_xlat16_10;
					float u_xlat15;
					float u_xlat16;
					mediump float u_xlat16_16;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat15 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat15 = max(abs(u_xlat0.z), u_xlat15);
					    u_xlat15 = u_xlat15 + (-_LightProjectionParams.z);
					    u_xlat15 = max(u_xlat15, 9.99999975e-06);
					    u_xlat15 = u_xlat15 * _LightProjectionParams.w;
					    u_xlat15 = _LightProjectionParams.y / u_xlat15;
					    u_xlat15 = u_xlat15 + (-_LightProjectionParams.x);
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat15);
					    u_xlat1.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat15);
					    u_xlat1.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat15);
					    u_xlat1.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat15);
					    u_xlat1.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8 = (-u_xlat16_3.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8 + u_xlat16_3.x;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat16_16 = (-_Glossiness) + 1.0;
					    u_xlat16_2 = u_xlat16_16 * u_xlat16_16 + 1.5;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat15 = u_xlat15 * u_xlat16_2;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD1.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
					#else
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_10 = u_xlat16_16 * u_xlat16_16 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_10 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat15;
					    u_xlat0.x = u_xlat16_16 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat1.xyz = vec3(_DayWeight) * u_xlat16_1.xyz + u_xlat10_2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xzw = u_xlat1.xyz * vec3(u_xlat16_18) + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat5.xxx * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _LightPositionRange;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = (tmpvar_4.xyz - _LightPositionRange.xyz);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = tmpvar_4.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4).xyz;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform highp vec4 _LightPositionRange;
					uniform highp vec4 _LightProjectionParams;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube _ShadowMapTexture;
					uniform highp samplerCube _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec3 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  lowp float shadow_5;
					  lowp vec3 lightDir_6;
					  highp vec4 tmpvar_7;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_6 = tmpvar_8;
					  highp vec3 tmpvar_9;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2);
					  tmpvar_9 = normalize(tmpvar_10);
					  tmpvar_7 = xlv_COLOR0;
					  lowp vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 diffuseSample_13;
					  highp vec4 nightSample_14;
					  highp vec4 daySample_15;
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_15 = tmpvar_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_14 = tmpvar_17;
					  diffuseSample_13 = (mix (nightSample_14, daySample_15, vec4(_DayWeight)) * _Color);
					  diffuseSample_13.xyz = (diffuseSample_13.xyz * tmpvar_7.xyz);
					  tmpvar_11 = diffuseSample_13.xyz;
					  tmpvar_12 = diffuseSample_13.w;
					  highp vec4 v_18;
					  v_18.x = unity_MatrixV[0].z;
					  v_18.y = unity_MatrixV[1].z;
					  v_18.z = unity_MatrixV[2].z;
					  v_18.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_19;
					  tmpvar_19 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_20;
					  highp float tmpvar_21;
					  tmpvar_21 = clamp (((
					    mix (dot (tmpvar_10, v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_20 = tmpvar_21;
					  highp vec3 vec_22;
					  vec_22 = (xlv_TEXCOORD2 - _LightPositionRange.xyz);
					  mediump float shadowVal_23;
					  highp float mydist_24;
					  mydist_24 = ((sqrt(
					    dot (vec_22, vec_22)
					  ) * _LightPositionRange.w) * _LightProjectionParams.w);
					  lowp vec4 tmpvar_25;
					  tmpvar_25 = textureCube (_ShadowMapTexture, vec_22);
					  highp vec4 vals_26;
					  vals_26 = tmpvar_25;
					  highp float tmpvar_27;
					  tmpvar_27 = dot (vals_26, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
					  shadowVal_23 = tmpvar_27;
					  mediump float tmpvar_28;
					  if ((shadowVal_23 < mydist_24)) {
					    tmpvar_28 = _LightShadowData.x;
					  } else {
					    tmpvar_28 = 1.0;
					  };
					  mediump float tmpvar_29;
					  tmpvar_29 = mix (tmpvar_28, 1.0, tmpvar_20);
					  shadow_5 = tmpvar_29;
					  highp float tmpvar_30;
					  tmpvar_30 = ((texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).x * textureCube (_LightTexture0, xlv_TEXCOORD3).w) * shadow_5);
					  atten_4 = tmpvar_30;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_31;
					  mediump vec4 c_32;
					  highp vec3 tmpvar_33;
					  tmpvar_33 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_34;
					  mediump vec3 albedo_35;
					  albedo_35 = tmpvar_11;
					  tmpvar_34 = (albedo_35 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_31 = tmpvar_34;
					  mediump vec3 diffColor_36;
					  diffColor_36 = tmpvar_31;
					  mediump float alpha_37;
					  alpha_37 = tmpvar_12;
					  tmpvar_31 = diffColor_36;
					  mediump vec3 diffColor_38;
					  diffColor_38 = tmpvar_31;
					  mediump vec2 rlPow4AndFresnelTerm_39;
					  mediump float tmpvar_40;
					  highp float tmpvar_41;
					  tmpvar_41 = clamp (dot (tmpvar_33, tmpvar_2), 0.0, 1.0);
					  tmpvar_40 = tmpvar_41;
					  mediump float tmpvar_42;
					  highp float tmpvar_43;
					  tmpvar_43 = clamp (dot (tmpvar_33, tmpvar_9), 0.0, 1.0);
					  tmpvar_42 = tmpvar_43;
					  highp vec2 tmpvar_44;
					  tmpvar_44.x = dot ((tmpvar_9 - (2.0 * 
					    (dot (tmpvar_33, tmpvar_9) * tmpvar_33)
					  )), tmpvar_2);
					  tmpvar_44.y = (1.0 - tmpvar_42);
					  highp vec2 tmpvar_45;
					  tmpvar_45 = ((tmpvar_44 * tmpvar_44) * (tmpvar_44 * tmpvar_44));
					  rlPow4AndFresnelTerm_39 = tmpvar_45;
					  mediump float tmpvar_46;
					  tmpvar_46 = rlPow4AndFresnelTerm_39.x;
					  mediump float specular_47;
					  highp float smoothness_48;
					  smoothness_48 = _Glossiness;
					  highp vec2 tmpvar_49;
					  tmpvar_49.x = tmpvar_46;
					  tmpvar_49.y = (1.0 - smoothness_48);
					  highp float tmpvar_50;
					  tmpvar_50 = (texture2D (unity_NHxRoughness, tmpvar_49).x * 16.0);
					  specular_47 = tmpvar_50;
					  mediump vec4 tmpvar_51;
					  tmpvar_51.w = 1.0;
					  tmpvar_51.xyz = ((diffColor_38 + (specular_47 * 
					    mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_35, vec3(_Metallic))
					  )) * (tmpvar_1 * tmpvar_40));
					  c_32.xyz = tmpvar_51.xyz;
					  c_32.w = alpha_37;
					  c_3.xyz = c_32.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _LightPositionRange;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = (tmpvar_4.xyz - _LightPositionRange.xyz);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = tmpvar_4.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4).xyz;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform highp vec4 _LightPositionRange;
					uniform highp vec4 _LightProjectionParams;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp vec4 _LightColor0;
					uniform lowp samplerCube _ShadowMapTexture;
					uniform highp samplerCube _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec3 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  lowp float shadow_5;
					  lowp vec3 lightDir_6;
					  highp vec4 tmpvar_7;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_6 = tmpvar_8;
					  highp vec3 tmpvar_9;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2);
					  tmpvar_9 = normalize(tmpvar_10);
					  tmpvar_7 = xlv_COLOR0;
					  lowp vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 diffuseSample_13;
					  highp vec4 nightSample_14;
					  highp vec4 daySample_15;
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_15 = tmpvar_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_14 = tmpvar_17;
					  diffuseSample_13 = (mix (nightSample_14, daySample_15, vec4(_DayWeight)) * _Color);
					  diffuseSample_13.xyz = (diffuseSample_13.xyz * tmpvar_7.xyz);
					  tmpvar_11 = diffuseSample_13.xyz;
					  tmpvar_12 = diffuseSample_13.w;
					  highp vec4 v_18;
					  v_18.x = unity_MatrixV[0].z;
					  v_18.y = unity_MatrixV[1].z;
					  v_18.z = unity_MatrixV[2].z;
					  v_18.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_19;
					  tmpvar_19 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_20;
					  highp float tmpvar_21;
					  tmpvar_21 = clamp (((
					    mix (dot (tmpvar_10, v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_20 = tmpvar_21;
					  highp vec3 vec_22;
					  vec_22 = (xlv_TEXCOORD2 - _LightPositionRange.xyz);
					  mediump float shadowVal_23;
					  highp float mydist_24;
					  mydist_24 = ((sqrt(
					    dot (vec_22, vec_22)
					  ) * _LightPositionRange.w) * _LightProjectionParams.w);
					  lowp vec4 tmpvar_25;
					  tmpvar_25 = textureCube (_ShadowMapTexture, vec_22);
					  highp vec4 vals_26;
					  vals_26 = tmpvar_25;
					  highp float tmpvar_27;
					  tmpvar_27 = dot (vals_26, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
					  shadowVal_23 = tmpvar_27;
					  mediump float tmpvar_28;
					  if ((shadowVal_23 < mydist_24)) {
					    tmpvar_28 = _LightShadowData.x;
					  } else {
					    tmpvar_28 = 1.0;
					  };
					  mediump float tmpvar_29;
					  tmpvar_29 = mix (tmpvar_28, 1.0, tmpvar_20);
					  shadow_5 = tmpvar_29;
					  highp float tmpvar_30;
					  tmpvar_30 = ((texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).x * textureCube (_LightTexture0, xlv_TEXCOORD3).w) * shadow_5);
					  atten_4 = tmpvar_30;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_31;
					  mediump vec4 c_32;
					  highp vec3 tmpvar_33;
					  tmpvar_33 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_34;
					  mediump vec3 albedo_35;
					  albedo_35 = tmpvar_11;
					  mediump vec3 tmpvar_36;
					  tmpvar_36 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_35, vec3(_Metallic));
					  tmpvar_34 = (albedo_35 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_31 = tmpvar_34;
					  mediump vec3 diffColor_37;
					  diffColor_37 = tmpvar_31;
					  mediump float alpha_38;
					  alpha_38 = tmpvar_12;
					  tmpvar_31 = diffColor_37;
					  mediump vec3 diffColor_39;
					  diffColor_39 = tmpvar_31;
					  mediump vec3 color_40;
					  highp float specularTerm_41;
					  highp float a2_42;
					  mediump float roughness_43;
					  mediump float perceptualRoughness_44;
					  highp vec3 tmpvar_45;
					  highp vec3 inVec_46;
					  inVec_46 = (tmpvar_2 + tmpvar_9);
					  tmpvar_45 = (inVec_46 * inversesqrt(max (0.001, 
					    dot (inVec_46, inVec_46)
					  )));
					  mediump float tmpvar_47;
					  highp float tmpvar_48;
					  tmpvar_48 = clamp (dot (tmpvar_33, tmpvar_2), 0.0, 1.0);
					  tmpvar_47 = tmpvar_48;
					  highp float tmpvar_49;
					  tmpvar_49 = clamp (dot (tmpvar_33, tmpvar_45), 0.0, 1.0);
					  highp float tmpvar_50;
					  highp float smoothness_51;
					  smoothness_51 = _Glossiness;
					  tmpvar_50 = (1.0 - smoothness_51);
					  perceptualRoughness_44 = tmpvar_50;
					  highp float tmpvar_52;
					  highp float perceptualRoughness_53;
					  perceptualRoughness_53 = perceptualRoughness_44;
					  tmpvar_52 = (perceptualRoughness_53 * perceptualRoughness_53);
					  roughness_43 = tmpvar_52;
					  mediump float tmpvar_54;
					  tmpvar_54 = (roughness_43 * roughness_43);
					  a2_42 = tmpvar_54;
					  specularTerm_41 = ((roughness_43 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_45), 0.0, 1.0)) * (1.5 + roughness_43))
					   * 
					    (((tmpvar_49 * tmpvar_49) * (a2_42 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_55;
					  tmpvar_55 = clamp (specularTerm_41, 0.0, 100.0);
					  specularTerm_41 = tmpvar_55;
					  highp vec3 tmpvar_56;
					  tmpvar_56 = (((diffColor_39 + 
					    (tmpvar_55 * tmpvar_36)
					  ) * tmpvar_1) * tmpvar_47);
					  color_40 = tmpvar_56;
					  mediump vec4 tmpvar_57;
					  tmpvar_57.w = 1.0;
					  tmpvar_57.xyz = color_40;
					  c_32.xyz = tmpvar_57.xyz;
					  c_32.w = alpha_38;
					  c_3.xyz = c_32.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _LightPositionRange;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = (tmpvar_4.xyz - _LightPositionRange.xyz);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = tmpvar_4.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4).xyz;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform highp vec4 _LightPositionRange;
					uniform highp vec4 _LightProjectionParams;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp vec4 _LightColor0;
					uniform lowp samplerCube _ShadowMapTexture;
					uniform highp samplerCube _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec3 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  lowp float shadow_5;
					  lowp vec3 lightDir_6;
					  highp vec4 tmpvar_7;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_6 = tmpvar_8;
					  highp vec3 tmpvar_9;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2);
					  tmpvar_9 = normalize(tmpvar_10);
					  tmpvar_7 = xlv_COLOR0;
					  lowp vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 diffuseSample_13;
					  highp vec4 nightSample_14;
					  highp vec4 daySample_15;
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_15 = tmpvar_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_14 = tmpvar_17;
					  diffuseSample_13 = (mix (nightSample_14, daySample_15, vec4(_DayWeight)) * _Color);
					  diffuseSample_13.xyz = (diffuseSample_13.xyz * tmpvar_7.xyz);
					  tmpvar_11 = diffuseSample_13.xyz;
					  tmpvar_12 = diffuseSample_13.w;
					  highp vec4 v_18;
					  v_18.x = unity_MatrixV[0].z;
					  v_18.y = unity_MatrixV[1].z;
					  v_18.z = unity_MatrixV[2].z;
					  v_18.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_19;
					  tmpvar_19 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_20;
					  highp float tmpvar_21;
					  tmpvar_21 = clamp (((
					    mix (dot (tmpvar_10, v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_20 = tmpvar_21;
					  highp vec3 vec_22;
					  vec_22 = (xlv_TEXCOORD2 - _LightPositionRange.xyz);
					  mediump float shadowVal_23;
					  highp float mydist_24;
					  mydist_24 = ((sqrt(
					    dot (vec_22, vec_22)
					  ) * _LightPositionRange.w) * _LightProjectionParams.w);
					  lowp vec4 tmpvar_25;
					  tmpvar_25 = textureCube (_ShadowMapTexture, vec_22);
					  highp vec4 vals_26;
					  vals_26 = tmpvar_25;
					  highp float tmpvar_27;
					  tmpvar_27 = dot (vals_26, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
					  shadowVal_23 = tmpvar_27;
					  mediump float tmpvar_28;
					  if ((shadowVal_23 < mydist_24)) {
					    tmpvar_28 = _LightShadowData.x;
					  } else {
					    tmpvar_28 = 1.0;
					  };
					  mediump float tmpvar_29;
					  tmpvar_29 = mix (tmpvar_28, 1.0, tmpvar_20);
					  shadow_5 = tmpvar_29;
					  highp float tmpvar_30;
					  tmpvar_30 = ((texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).x * textureCube (_LightTexture0, xlv_TEXCOORD3).w) * shadow_5);
					  atten_4 = tmpvar_30;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_31;
					  mediump vec4 c_32;
					  highp vec3 tmpvar_33;
					  tmpvar_33 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_34;
					  mediump vec3 albedo_35;
					  albedo_35 = tmpvar_11;
					  mediump vec3 tmpvar_36;
					  tmpvar_36 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_35, vec3(_Metallic));
					  tmpvar_34 = (albedo_35 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_31 = tmpvar_34;
					  mediump vec3 diffColor_37;
					  diffColor_37 = tmpvar_31;
					  mediump float alpha_38;
					  alpha_38 = tmpvar_12;
					  tmpvar_31 = diffColor_37;
					  mediump vec3 diffColor_39;
					  diffColor_39 = tmpvar_31;
					  mediump vec3 color_40;
					  highp float specularTerm_41;
					  highp float a2_42;
					  mediump float roughness_43;
					  mediump float perceptualRoughness_44;
					  highp vec3 tmpvar_45;
					  highp vec3 inVec_46;
					  inVec_46 = (tmpvar_2 + tmpvar_9);
					  tmpvar_45 = (inVec_46 * inversesqrt(max (0.001, 
					    dot (inVec_46, inVec_46)
					  )));
					  mediump float tmpvar_47;
					  highp float tmpvar_48;
					  tmpvar_48 = clamp (dot (tmpvar_33, tmpvar_2), 0.0, 1.0);
					  tmpvar_47 = tmpvar_48;
					  highp float tmpvar_49;
					  tmpvar_49 = clamp (dot (tmpvar_33, tmpvar_45), 0.0, 1.0);
					  highp float tmpvar_50;
					  highp float smoothness_51;
					  smoothness_51 = _Glossiness;
					  tmpvar_50 = (1.0 - smoothness_51);
					  perceptualRoughness_44 = tmpvar_50;
					  highp float tmpvar_52;
					  highp float perceptualRoughness_53;
					  perceptualRoughness_53 = perceptualRoughness_44;
					  tmpvar_52 = (perceptualRoughness_53 * perceptualRoughness_53);
					  roughness_43 = tmpvar_52;
					  mediump float tmpvar_54;
					  tmpvar_54 = (roughness_43 * roughness_43);
					  a2_42 = tmpvar_54;
					  specularTerm_41 = ((roughness_43 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_45), 0.0, 1.0)) * (1.5 + roughness_43))
					   * 
					    (((tmpvar_49 * tmpvar_49) * (a2_42 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_55;
					  tmpvar_55 = clamp (specularTerm_41, 0.0, 100.0);
					  specularTerm_41 = tmpvar_55;
					  highp vec3 tmpvar_56;
					  tmpvar_56 = (((diffColor_39 + 
					    (tmpvar_55 * tmpvar_36)
					  ) * tmpvar_1) * tmpvar_47);
					  color_40 = tmpvar_56;
					  mediump vec4 tmpvar_57;
					  tmpvar_57.w = 1.0;
					  tmpvar_57.xyz = color_40;
					  c_32.xyz = tmpvar_57.xyz;
					  c_32.w = alpha_38;
					  c_3.xyz = c_32.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					lowp vec3 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					lowp float u_xlat10_6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_7;
					lowp vec3 u_xlat10_7;
					float u_xlat18;
					mediump float u_xlat16_22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat18 = u_xlat18 + u_xlat18;
					    u_xlat1.xyz = u_xlat2.xyz * (-vec3(u_xlat18)) + u_xlat1.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat2.x = u_xlat18 * u_xlat18;
					    u_xlat2.y = (-_Glossiness) + 1.0;
					    u_xlat18 = texture(unity_NHxRoughness, u_xlat2.xy).x;
					    u_xlat18 = u_xlat18 * 16.0;
					    u_xlat10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_7.xyz = u_xlat10_7.xyz + (-u_xlat10_2.xyz);
					    u_xlat7.xyz = vec3(_DayWeight) * u_xlat16_7.xyz + u_xlat10_2.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat7.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz;
					    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = u_xlat7.xyz * vec3(u_xlat16_22) + u_xlat16_4.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = (-u_xlat0.x) + u_xlat6.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat6.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat7.x = max(abs(u_xlat6.y), abs(u_xlat6.x));
					    u_xlat7.x = max(abs(u_xlat6.z), u_xlat7.x);
					    u_xlat7.x = u_xlat7.x + (-_LightProjectionParams.z);
					    u_xlat7.x = max(u_xlat7.x, 9.99999975e-06);
					    u_xlat7.x = u_xlat7.x * _LightProjectionParams.w;
					    u_xlat7.x = _LightProjectionParams.y / u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + (-_LightProjectionParams.x);
					    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat7.x);
					    u_xlat10_6 = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat16_22 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_22 = u_xlat10_6 * u_xlat16_22 + _LightShadowData.x;
					    u_xlat16_5.x = (-u_xlat16_22) + 1.0;
					    u_xlat16_22 = u_xlat0.x * u_xlat16_5.x + u_xlat16_22;
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
					    u_xlat6.x = texture(_LightTextureB0, vec2(u_xlat18)).x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.x = u_xlat16_22 * u_xlat0.x;
					    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat1.xxx * u_xlat16_5.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					lowp float u_xlat10_5;
					mediump float u_xlat16_7;
					float u_xlat10;
					float u_xlat15;
					mediump float u_xlat16_15;
					mediump float u_xlat16_16;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
					    u_xlat5.x = texture(_LightTextureB0, vec2(u_xlat15)).x;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat5.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.x = max(abs(u_xlat5.y), abs(u_xlat5.x));
					    u_xlat1.x = max(abs(u_xlat5.z), u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_LightProjectionParams.z);
					    u_xlat1.x = max(u_xlat1.x, 9.99999975e-06);
					    u_xlat1.x = u_xlat1.x * _LightProjectionParams.w;
					    u_xlat1.x = _LightProjectionParams.y / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + (-_LightProjectionParams.x);
					    vec4 txVec0 = vec4(u_xlat5.xyz,u_xlat1.x);
					    u_xlat10_5 = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
					    u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
					    u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat5.x = (-u_xlat10) + u_xlat5.x;
					    u_xlat5.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat10;
					    u_xlat5.x = u_xlat5.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
					#else
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = u_xlat5.x * u_xlat16_7 + u_xlat16_2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat0.xxx + u_xlat5.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat16_16 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_16 * u_xlat16_16 + 1.5;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat0.x = u_xlat0.x * u_xlat16_3;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
					#else
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					#endif
					    u_xlat10 = u_xlat1.x * u_xlat1.x;
					    u_xlat16_15 = u_xlat16_16 * u_xlat16_16 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat16_15 + 1.00001001;
					    u_xlat0.x = u_xlat10 * u_xlat0.x;
					    u_xlat0.x = u_xlat16_16 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_3.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz + (-u_xlat10_3.xyz);
					    u_xlat1.xyz = vec3(_DayWeight) * u_xlat16_1.xyz + u_xlat10_3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_17 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xzw = u_xlat1.xyz * vec3(u_xlat16_17) + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat5.xxx * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					lowp float u_xlat10_5;
					mediump float u_xlat16_7;
					float u_xlat10;
					float u_xlat15;
					mediump float u_xlat16_15;
					mediump float u_xlat16_16;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
					    u_xlat5.x = texture(_LightTextureB0, vec2(u_xlat15)).x;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat5.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.x = max(abs(u_xlat5.y), abs(u_xlat5.x));
					    u_xlat1.x = max(abs(u_xlat5.z), u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_LightProjectionParams.z);
					    u_xlat1.x = max(u_xlat1.x, 9.99999975e-06);
					    u_xlat1.x = u_xlat1.x * _LightProjectionParams.w;
					    u_xlat1.x = _LightProjectionParams.y / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + (-_LightProjectionParams.x);
					    vec4 txVec0 = vec4(u_xlat5.xyz,u_xlat1.x);
					    u_xlat10_5 = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
					    u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
					    u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat5.x = (-u_xlat10) + u_xlat5.x;
					    u_xlat5.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat10;
					    u_xlat5.x = u_xlat5.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
					#else
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = u_xlat5.x * u_xlat16_7 + u_xlat16_2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat0.xxx + u_xlat5.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat16_16 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_16 * u_xlat16_16 + 1.5;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat0.x = u_xlat0.x * u_xlat16_3;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
					#else
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					#endif
					    u_xlat10 = u_xlat1.x * u_xlat1.x;
					    u_xlat16_15 = u_xlat16_16 * u_xlat16_16 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat16_15 + 1.00001001;
					    u_xlat0.x = u_xlat10 * u_xlat0.x;
					    u_xlat0.x = u_xlat16_16 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_3.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz + (-u_xlat10_3.xyz);
					    u_xlat1.xyz = vec3(_DayWeight) * u_xlat16_1.xyz + u_xlat10_3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_17 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xzw = u_xlat1.xyz * vec3(u_xlat16_17) + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat5.xxx * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _LightPositionRange;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = (tmpvar_4.xyz - _LightPositionRange.xyz);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = tmpvar_4.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4).xyz;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform highp vec4 _LightPositionRange;
					uniform highp vec4 _LightProjectionParams;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube _ShadowMapTexture;
					uniform highp samplerCube _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec3 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  lowp float shadow_5;
					  lowp vec3 lightDir_6;
					  highp vec4 tmpvar_7;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_6 = tmpvar_8;
					  highp vec3 tmpvar_9;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2);
					  tmpvar_9 = normalize(tmpvar_10);
					  tmpvar_7 = xlv_COLOR0;
					  lowp vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 diffuseSample_13;
					  highp vec4 nightSample_14;
					  highp vec4 daySample_15;
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_15 = tmpvar_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_14 = tmpvar_17;
					  diffuseSample_13 = (mix (nightSample_14, daySample_15, vec4(_DayWeight)) * _Color);
					  diffuseSample_13.xyz = (diffuseSample_13.xyz * tmpvar_7.xyz);
					  tmpvar_11 = diffuseSample_13.xyz;
					  tmpvar_12 = diffuseSample_13.w;
					  highp vec4 v_18;
					  v_18.x = unity_MatrixV[0].z;
					  v_18.y = unity_MatrixV[1].z;
					  v_18.z = unity_MatrixV[2].z;
					  v_18.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_19;
					  tmpvar_19 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_20;
					  highp float tmpvar_21;
					  tmpvar_21 = clamp (((
					    mix (dot (tmpvar_10, v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_20 = tmpvar_21;
					  highp vec3 vec_22;
					  vec_22 = (xlv_TEXCOORD2 - _LightPositionRange.xyz);
					  highp vec4 shadowVals_23;
					  highp float mydist_24;
					  mydist_24 = ((sqrt(
					    dot (vec_22, vec_22)
					  ) * _LightPositionRange.w) * _LightProjectionParams.w);
					  highp vec4 tmpvar_25;
					  tmpvar_25.w = 0.0;
					  tmpvar_25.xyz = (vec_22 + vec3(0.0078125, 0.0078125, 0.0078125));
					  highp vec4 tmpvar_26;
					  lowp vec4 tmpvar_27;
					  tmpvar_27 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_25.xyz, 0.0);
					  tmpvar_26 = tmpvar_27;
					  shadowVals_23.x = dot (tmpvar_26, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
					  highp vec4 tmpvar_28;
					  tmpvar_28.w = 0.0;
					  tmpvar_28.xyz = (vec_22 + vec3(-0.0078125, -0.0078125, 0.0078125));
					  highp vec4 tmpvar_29;
					  lowp vec4 tmpvar_30;
					  tmpvar_30 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_28.xyz, 0.0);
					  tmpvar_29 = tmpvar_30;
					  shadowVals_23.y = dot (tmpvar_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
					  highp vec4 tmpvar_31;
					  tmpvar_31.w = 0.0;
					  tmpvar_31.xyz = (vec_22 + vec3(-0.0078125, 0.0078125, -0.0078125));
					  highp vec4 tmpvar_32;
					  lowp vec4 tmpvar_33;
					  tmpvar_33 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_31.xyz, 0.0);
					  tmpvar_32 = tmpvar_33;
					  shadowVals_23.z = dot (tmpvar_32, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
					  highp vec4 tmpvar_34;
					  tmpvar_34.w = 0.0;
					  tmpvar_34.xyz = (vec_22 + vec3(0.0078125, -0.0078125, -0.0078125));
					  highp vec4 tmpvar_35;
					  lowp vec4 tmpvar_36;
					  tmpvar_36 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_34.xyz, 0.0);
					  tmpvar_35 = tmpvar_36;
					  shadowVals_23.w = dot (tmpvar_35, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
					  bvec4 tmpvar_37;
					  tmpvar_37 = lessThan (shadowVals_23, vec4(mydist_24));
					  mediump vec4 tmpvar_38;
					  tmpvar_38 = _LightShadowData.xxxx;
					  mediump float tmpvar_39;
					  if (tmpvar_37.x) {
					    tmpvar_39 = tmpvar_38.x;
					  } else {
					    tmpvar_39 = 1.0;
					  };
					  mediump float tmpvar_40;
					  if (tmpvar_37.y) {
					    tmpvar_40 = tmpvar_38.y;
					  } else {
					    tmpvar_40 = 1.0;
					  };
					  mediump float tmpvar_41;
					  if (tmpvar_37.z) {
					    tmpvar_41 = tmpvar_38.z;
					  } else {
					    tmpvar_41 = 1.0;
					  };
					  mediump float tmpvar_42;
					  if (tmpvar_37.w) {
					    tmpvar_42 = tmpvar_38.w;
					  } else {
					    tmpvar_42 = 1.0;
					  };
					  mediump vec4 tmpvar_43;
					  tmpvar_43.x = tmpvar_39;
					  tmpvar_43.y = tmpvar_40;
					  tmpvar_43.z = tmpvar_41;
					  tmpvar_43.w = tmpvar_42;
					  mediump float tmpvar_44;
					  tmpvar_44 = mix (dot (tmpvar_43, vec4(0.25, 0.25, 0.25, 0.25)), 1.0, tmpvar_20);
					  shadow_5 = tmpvar_44;
					  highp float tmpvar_45;
					  tmpvar_45 = ((texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).x * textureCube (_LightTexture0, xlv_TEXCOORD3).w) * shadow_5);
					  atten_4 = tmpvar_45;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_46;
					  mediump vec4 c_47;
					  highp vec3 tmpvar_48;
					  tmpvar_48 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_49;
					  mediump vec3 albedo_50;
					  albedo_50 = tmpvar_11;
					  tmpvar_49 = (albedo_50 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_46 = tmpvar_49;
					  mediump vec3 diffColor_51;
					  diffColor_51 = tmpvar_46;
					  mediump float alpha_52;
					  alpha_52 = tmpvar_12;
					  tmpvar_46 = diffColor_51;
					  mediump vec3 diffColor_53;
					  diffColor_53 = tmpvar_46;
					  mediump vec2 rlPow4AndFresnelTerm_54;
					  mediump float tmpvar_55;
					  highp float tmpvar_56;
					  tmpvar_56 = clamp (dot (tmpvar_48, tmpvar_2), 0.0, 1.0);
					  tmpvar_55 = tmpvar_56;
					  mediump float tmpvar_57;
					  highp float tmpvar_58;
					  tmpvar_58 = clamp (dot (tmpvar_48, tmpvar_9), 0.0, 1.0);
					  tmpvar_57 = tmpvar_58;
					  highp vec2 tmpvar_59;
					  tmpvar_59.x = dot ((tmpvar_9 - (2.0 * 
					    (dot (tmpvar_48, tmpvar_9) * tmpvar_48)
					  )), tmpvar_2);
					  tmpvar_59.y = (1.0 - tmpvar_57);
					  highp vec2 tmpvar_60;
					  tmpvar_60 = ((tmpvar_59 * tmpvar_59) * (tmpvar_59 * tmpvar_59));
					  rlPow4AndFresnelTerm_54 = tmpvar_60;
					  mediump float tmpvar_61;
					  tmpvar_61 = rlPow4AndFresnelTerm_54.x;
					  mediump float specular_62;
					  highp float smoothness_63;
					  smoothness_63 = _Glossiness;
					  highp vec2 tmpvar_64;
					  tmpvar_64.x = tmpvar_61;
					  tmpvar_64.y = (1.0 - smoothness_63);
					  highp float tmpvar_65;
					  tmpvar_65 = (texture2D (unity_NHxRoughness, tmpvar_64).x * 16.0);
					  specular_62 = tmpvar_65;
					  mediump vec4 tmpvar_66;
					  tmpvar_66.w = 1.0;
					  tmpvar_66.xyz = ((diffColor_53 + (specular_62 * 
					    mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_50, vec3(_Metallic))
					  )) * (tmpvar_1 * tmpvar_55));
					  c_47.xyz = tmpvar_66.xyz;
					  c_47.w = alpha_52;
					  c_3.xyz = c_47.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _LightPositionRange;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = (tmpvar_4.xyz - _LightPositionRange.xyz);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = tmpvar_4.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4).xyz;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform highp vec4 _LightPositionRange;
					uniform highp vec4 _LightProjectionParams;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp vec4 _LightColor0;
					uniform lowp samplerCube _ShadowMapTexture;
					uniform highp samplerCube _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec3 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  lowp float shadow_5;
					  lowp vec3 lightDir_6;
					  highp vec4 tmpvar_7;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_6 = tmpvar_8;
					  highp vec3 tmpvar_9;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2);
					  tmpvar_9 = normalize(tmpvar_10);
					  tmpvar_7 = xlv_COLOR0;
					  lowp vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 diffuseSample_13;
					  highp vec4 nightSample_14;
					  highp vec4 daySample_15;
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_15 = tmpvar_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_14 = tmpvar_17;
					  diffuseSample_13 = (mix (nightSample_14, daySample_15, vec4(_DayWeight)) * _Color);
					  diffuseSample_13.xyz = (diffuseSample_13.xyz * tmpvar_7.xyz);
					  tmpvar_11 = diffuseSample_13.xyz;
					  tmpvar_12 = diffuseSample_13.w;
					  highp vec4 v_18;
					  v_18.x = unity_MatrixV[0].z;
					  v_18.y = unity_MatrixV[1].z;
					  v_18.z = unity_MatrixV[2].z;
					  v_18.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_19;
					  tmpvar_19 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_20;
					  highp float tmpvar_21;
					  tmpvar_21 = clamp (((
					    mix (dot (tmpvar_10, v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_20 = tmpvar_21;
					  highp vec3 vec_22;
					  vec_22 = (xlv_TEXCOORD2 - _LightPositionRange.xyz);
					  highp vec4 shadowVals_23;
					  highp float mydist_24;
					  mydist_24 = ((sqrt(
					    dot (vec_22, vec_22)
					  ) * _LightPositionRange.w) * _LightProjectionParams.w);
					  highp vec4 tmpvar_25;
					  tmpvar_25.w = 0.0;
					  tmpvar_25.xyz = (vec_22 + vec3(0.0078125, 0.0078125, 0.0078125));
					  highp vec4 tmpvar_26;
					  lowp vec4 tmpvar_27;
					  tmpvar_27 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_25.xyz, 0.0);
					  tmpvar_26 = tmpvar_27;
					  shadowVals_23.x = dot (tmpvar_26, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
					  highp vec4 tmpvar_28;
					  tmpvar_28.w = 0.0;
					  tmpvar_28.xyz = (vec_22 + vec3(-0.0078125, -0.0078125, 0.0078125));
					  highp vec4 tmpvar_29;
					  lowp vec4 tmpvar_30;
					  tmpvar_30 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_28.xyz, 0.0);
					  tmpvar_29 = tmpvar_30;
					  shadowVals_23.y = dot (tmpvar_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
					  highp vec4 tmpvar_31;
					  tmpvar_31.w = 0.0;
					  tmpvar_31.xyz = (vec_22 + vec3(-0.0078125, 0.0078125, -0.0078125));
					  highp vec4 tmpvar_32;
					  lowp vec4 tmpvar_33;
					  tmpvar_33 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_31.xyz, 0.0);
					  tmpvar_32 = tmpvar_33;
					  shadowVals_23.z = dot (tmpvar_32, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
					  highp vec4 tmpvar_34;
					  tmpvar_34.w = 0.0;
					  tmpvar_34.xyz = (vec_22 + vec3(0.0078125, -0.0078125, -0.0078125));
					  highp vec4 tmpvar_35;
					  lowp vec4 tmpvar_36;
					  tmpvar_36 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_34.xyz, 0.0);
					  tmpvar_35 = tmpvar_36;
					  shadowVals_23.w = dot (tmpvar_35, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
					  bvec4 tmpvar_37;
					  tmpvar_37 = lessThan (shadowVals_23, vec4(mydist_24));
					  mediump vec4 tmpvar_38;
					  tmpvar_38 = _LightShadowData.xxxx;
					  mediump float tmpvar_39;
					  if (tmpvar_37.x) {
					    tmpvar_39 = tmpvar_38.x;
					  } else {
					    tmpvar_39 = 1.0;
					  };
					  mediump float tmpvar_40;
					  if (tmpvar_37.y) {
					    tmpvar_40 = tmpvar_38.y;
					  } else {
					    tmpvar_40 = 1.0;
					  };
					  mediump float tmpvar_41;
					  if (tmpvar_37.z) {
					    tmpvar_41 = tmpvar_38.z;
					  } else {
					    tmpvar_41 = 1.0;
					  };
					  mediump float tmpvar_42;
					  if (tmpvar_37.w) {
					    tmpvar_42 = tmpvar_38.w;
					  } else {
					    tmpvar_42 = 1.0;
					  };
					  mediump vec4 tmpvar_43;
					  tmpvar_43.x = tmpvar_39;
					  tmpvar_43.y = tmpvar_40;
					  tmpvar_43.z = tmpvar_41;
					  tmpvar_43.w = tmpvar_42;
					  mediump float tmpvar_44;
					  tmpvar_44 = mix (dot (tmpvar_43, vec4(0.25, 0.25, 0.25, 0.25)), 1.0, tmpvar_20);
					  shadow_5 = tmpvar_44;
					  highp float tmpvar_45;
					  tmpvar_45 = ((texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).x * textureCube (_LightTexture0, xlv_TEXCOORD3).w) * shadow_5);
					  atten_4 = tmpvar_45;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_46;
					  mediump vec4 c_47;
					  highp vec3 tmpvar_48;
					  tmpvar_48 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_49;
					  mediump vec3 albedo_50;
					  albedo_50 = tmpvar_11;
					  mediump vec3 tmpvar_51;
					  tmpvar_51 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_50, vec3(_Metallic));
					  tmpvar_49 = (albedo_50 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_46 = tmpvar_49;
					  mediump vec3 diffColor_52;
					  diffColor_52 = tmpvar_46;
					  mediump float alpha_53;
					  alpha_53 = tmpvar_12;
					  tmpvar_46 = diffColor_52;
					  mediump vec3 diffColor_54;
					  diffColor_54 = tmpvar_46;
					  mediump vec3 color_55;
					  highp float specularTerm_56;
					  highp float a2_57;
					  mediump float roughness_58;
					  mediump float perceptualRoughness_59;
					  highp vec3 tmpvar_60;
					  highp vec3 inVec_61;
					  inVec_61 = (tmpvar_2 + tmpvar_9);
					  tmpvar_60 = (inVec_61 * inversesqrt(max (0.001, 
					    dot (inVec_61, inVec_61)
					  )));
					  mediump float tmpvar_62;
					  highp float tmpvar_63;
					  tmpvar_63 = clamp (dot (tmpvar_48, tmpvar_2), 0.0, 1.0);
					  tmpvar_62 = tmpvar_63;
					  highp float tmpvar_64;
					  tmpvar_64 = clamp (dot (tmpvar_48, tmpvar_60), 0.0, 1.0);
					  highp float tmpvar_65;
					  highp float smoothness_66;
					  smoothness_66 = _Glossiness;
					  tmpvar_65 = (1.0 - smoothness_66);
					  perceptualRoughness_59 = tmpvar_65;
					  highp float tmpvar_67;
					  highp float perceptualRoughness_68;
					  perceptualRoughness_68 = perceptualRoughness_59;
					  tmpvar_67 = (perceptualRoughness_68 * perceptualRoughness_68);
					  roughness_58 = tmpvar_67;
					  mediump float tmpvar_69;
					  tmpvar_69 = (roughness_58 * roughness_58);
					  a2_57 = tmpvar_69;
					  specularTerm_56 = ((roughness_58 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_60), 0.0, 1.0)) * (1.5 + roughness_58))
					   * 
					    (((tmpvar_64 * tmpvar_64) * (a2_57 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_70;
					  tmpvar_70 = clamp (specularTerm_56, 0.0, 100.0);
					  specularTerm_56 = tmpvar_70;
					  highp vec3 tmpvar_71;
					  tmpvar_71 = (((diffColor_54 + 
					    (tmpvar_70 * tmpvar_51)
					  ) * tmpvar_1) * tmpvar_62);
					  color_55 = tmpvar_71;
					  mediump vec4 tmpvar_72;
					  tmpvar_72.w = 1.0;
					  tmpvar_72.xyz = color_55;
					  c_47.xyz = tmpvar_72.xyz;
					  c_47.w = alpha_53;
					  c_3.xyz = c_47.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _LightPositionRange;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
					  tmpvar_1.xyz = (tmpvar_4.xyz - _LightPositionRange.xyz);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = tmpvar_4.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4).xyz;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform highp vec4 _LightPositionRange;
					uniform highp vec4 _LightProjectionParams;
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp vec4 _LightColor0;
					uniform lowp samplerCube _ShadowMapTexture;
					uniform highp samplerCube _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec3 xlv_TEXCOORD3;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  lowp float shadow_5;
					  lowp vec3 lightDir_6;
					  highp vec4 tmpvar_7;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_6 = tmpvar_8;
					  highp vec3 tmpvar_9;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2);
					  tmpvar_9 = normalize(tmpvar_10);
					  tmpvar_7 = xlv_COLOR0;
					  lowp vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  highp vec4 diffuseSample_13;
					  highp vec4 nightSample_14;
					  highp vec4 daySample_15;
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_15 = tmpvar_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_14 = tmpvar_17;
					  diffuseSample_13 = (mix (nightSample_14, daySample_15, vec4(_DayWeight)) * _Color);
					  diffuseSample_13.xyz = (diffuseSample_13.xyz * tmpvar_7.xyz);
					  tmpvar_11 = diffuseSample_13.xyz;
					  tmpvar_12 = diffuseSample_13.w;
					  highp vec4 v_18;
					  v_18.x = unity_MatrixV[0].z;
					  v_18.y = unity_MatrixV[1].z;
					  v_18.z = unity_MatrixV[2].z;
					  v_18.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_19;
					  tmpvar_19 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_20;
					  highp float tmpvar_21;
					  tmpvar_21 = clamp (((
					    mix (dot (tmpvar_10, v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_20 = tmpvar_21;
					  highp vec3 vec_22;
					  vec_22 = (xlv_TEXCOORD2 - _LightPositionRange.xyz);
					  highp vec4 shadowVals_23;
					  highp float mydist_24;
					  mydist_24 = ((sqrt(
					    dot (vec_22, vec_22)
					  ) * _LightPositionRange.w) * _LightProjectionParams.w);
					  highp vec4 tmpvar_25;
					  tmpvar_25.w = 0.0;
					  tmpvar_25.xyz = (vec_22 + vec3(0.0078125, 0.0078125, 0.0078125));
					  highp vec4 tmpvar_26;
					  lowp vec4 tmpvar_27;
					  tmpvar_27 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_25.xyz, 0.0);
					  tmpvar_26 = tmpvar_27;
					  shadowVals_23.x = dot (tmpvar_26, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
					  highp vec4 tmpvar_28;
					  tmpvar_28.w = 0.0;
					  tmpvar_28.xyz = (vec_22 + vec3(-0.0078125, -0.0078125, 0.0078125));
					  highp vec4 tmpvar_29;
					  lowp vec4 tmpvar_30;
					  tmpvar_30 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_28.xyz, 0.0);
					  tmpvar_29 = tmpvar_30;
					  shadowVals_23.y = dot (tmpvar_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
					  highp vec4 tmpvar_31;
					  tmpvar_31.w = 0.0;
					  tmpvar_31.xyz = (vec_22 + vec3(-0.0078125, 0.0078125, -0.0078125));
					  highp vec4 tmpvar_32;
					  lowp vec4 tmpvar_33;
					  tmpvar_33 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_31.xyz, 0.0);
					  tmpvar_32 = tmpvar_33;
					  shadowVals_23.z = dot (tmpvar_32, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
					  highp vec4 tmpvar_34;
					  tmpvar_34.w = 0.0;
					  tmpvar_34.xyz = (vec_22 + vec3(0.0078125, -0.0078125, -0.0078125));
					  highp vec4 tmpvar_35;
					  lowp vec4 tmpvar_36;
					  tmpvar_36 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_34.xyz, 0.0);
					  tmpvar_35 = tmpvar_36;
					  shadowVals_23.w = dot (tmpvar_35, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
					  bvec4 tmpvar_37;
					  tmpvar_37 = lessThan (shadowVals_23, vec4(mydist_24));
					  mediump vec4 tmpvar_38;
					  tmpvar_38 = _LightShadowData.xxxx;
					  mediump float tmpvar_39;
					  if (tmpvar_37.x) {
					    tmpvar_39 = tmpvar_38.x;
					  } else {
					    tmpvar_39 = 1.0;
					  };
					  mediump float tmpvar_40;
					  if (tmpvar_37.y) {
					    tmpvar_40 = tmpvar_38.y;
					  } else {
					    tmpvar_40 = 1.0;
					  };
					  mediump float tmpvar_41;
					  if (tmpvar_37.z) {
					    tmpvar_41 = tmpvar_38.z;
					  } else {
					    tmpvar_41 = 1.0;
					  };
					  mediump float tmpvar_42;
					  if (tmpvar_37.w) {
					    tmpvar_42 = tmpvar_38.w;
					  } else {
					    tmpvar_42 = 1.0;
					  };
					  mediump vec4 tmpvar_43;
					  tmpvar_43.x = tmpvar_39;
					  tmpvar_43.y = tmpvar_40;
					  tmpvar_43.z = tmpvar_41;
					  tmpvar_43.w = tmpvar_42;
					  mediump float tmpvar_44;
					  tmpvar_44 = mix (dot (tmpvar_43, vec4(0.25, 0.25, 0.25, 0.25)), 1.0, tmpvar_20);
					  shadow_5 = tmpvar_44;
					  highp float tmpvar_45;
					  tmpvar_45 = ((texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).x * textureCube (_LightTexture0, xlv_TEXCOORD3).w) * shadow_5);
					  atten_4 = tmpvar_45;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  lowp vec3 tmpvar_46;
					  mediump vec4 c_47;
					  highp vec3 tmpvar_48;
					  tmpvar_48 = normalize(xlv_TEXCOORD1);
					  mediump vec3 tmpvar_49;
					  mediump vec3 albedo_50;
					  albedo_50 = tmpvar_11;
					  mediump vec3 tmpvar_51;
					  tmpvar_51 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_50, vec3(_Metallic));
					  tmpvar_49 = (albedo_50 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_46 = tmpvar_49;
					  mediump vec3 diffColor_52;
					  diffColor_52 = tmpvar_46;
					  mediump float alpha_53;
					  alpha_53 = tmpvar_12;
					  tmpvar_46 = diffColor_52;
					  mediump vec3 diffColor_54;
					  diffColor_54 = tmpvar_46;
					  mediump vec3 color_55;
					  highp float specularTerm_56;
					  highp float a2_57;
					  mediump float roughness_58;
					  mediump float perceptualRoughness_59;
					  highp vec3 tmpvar_60;
					  highp vec3 inVec_61;
					  inVec_61 = (tmpvar_2 + tmpvar_9);
					  tmpvar_60 = (inVec_61 * inversesqrt(max (0.001, 
					    dot (inVec_61, inVec_61)
					  )));
					  mediump float tmpvar_62;
					  highp float tmpvar_63;
					  tmpvar_63 = clamp (dot (tmpvar_48, tmpvar_2), 0.0, 1.0);
					  tmpvar_62 = tmpvar_63;
					  highp float tmpvar_64;
					  tmpvar_64 = clamp (dot (tmpvar_48, tmpvar_60), 0.0, 1.0);
					  highp float tmpvar_65;
					  highp float smoothness_66;
					  smoothness_66 = _Glossiness;
					  tmpvar_65 = (1.0 - smoothness_66);
					  perceptualRoughness_59 = tmpvar_65;
					  highp float tmpvar_67;
					  highp float perceptualRoughness_68;
					  perceptualRoughness_68 = perceptualRoughness_59;
					  tmpvar_67 = (perceptualRoughness_68 * perceptualRoughness_68);
					  roughness_58 = tmpvar_67;
					  mediump float tmpvar_69;
					  tmpvar_69 = (roughness_58 * roughness_58);
					  a2_57 = tmpvar_69;
					  specularTerm_56 = ((roughness_58 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_60), 0.0, 1.0)) * (1.5 + roughness_58))
					   * 
					    (((tmpvar_64 * tmpvar_64) * (a2_57 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_70;
					  tmpvar_70 = clamp (specularTerm_56, 0.0, 100.0);
					  specularTerm_56 = tmpvar_70;
					  highp vec3 tmpvar_71;
					  tmpvar_71 = (((diffColor_54 + 
					    (tmpvar_70 * tmpvar_51)
					  ) * tmpvar_1) * tmpvar_62);
					  color_55 = tmpvar_71;
					  mediump vec4 tmpvar_72;
					  tmpvar_72.w = 1.0;
					  tmpvar_72.xyz = color_55;
					  c_47.xyz = tmpvar_72.xyz;
					  c_47.w = alpha_53;
					  c_3.xyz = c_47.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					lowp vec3 u_xlat10_5;
					mediump float u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat15 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat15 = max(abs(u_xlat0.z), u_xlat15);
					    u_xlat15 = u_xlat15 + (-_LightProjectionParams.z);
					    u_xlat15 = max(u_xlat15, 9.99999975e-06);
					    u_xlat15 = u_xlat15 * _LightProjectionParams.w;
					    u_xlat15 = _LightProjectionParams.y / u_xlat15;
					    u_xlat15 = u_xlat15 + (-_LightProjectionParams.x);
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat15);
					    u_xlat1.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat15);
					    u_xlat1.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat15);
					    u_xlat1.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat15);
					    u_xlat1.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8 = (-u_xlat16_3.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8 + u_xlat16_3.x;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = texture(_LightTexture0, u_xlat1.xyz).w;
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat2.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_Glossiness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_5.xyz = u_xlat10_5.xyz + (-u_xlat10_1.xyz);
					    u_xlat5.xyz = vec3(_DayWeight) * u_xlat16_5.xyz + u_xlat10_1.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat5.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat5.xyz = u_xlat5.xyz * vs_COLOR0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat16_18) + u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump float u_xlat16_8;
					mediump float u_xlat16_10;
					float u_xlat15;
					float u_xlat16;
					mediump float u_xlat16_16;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat15 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat15 = max(abs(u_xlat0.z), u_xlat15);
					    u_xlat15 = u_xlat15 + (-_LightProjectionParams.z);
					    u_xlat15 = max(u_xlat15, 9.99999975e-06);
					    u_xlat15 = u_xlat15 * _LightProjectionParams.w;
					    u_xlat15 = _LightProjectionParams.y / u_xlat15;
					    u_xlat15 = u_xlat15 + (-_LightProjectionParams.x);
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat15);
					    u_xlat1.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat15);
					    u_xlat1.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat15);
					    u_xlat1.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat15);
					    u_xlat1.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8 = (-u_xlat16_3.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8 + u_xlat16_3.x;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = texture(_LightTexture0, u_xlat1.xyz).w;
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat16_16 = (-_Glossiness) + 1.0;
					    u_xlat16_2 = u_xlat16_16 * u_xlat16_16 + 1.5;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat15 = u_xlat15 * u_xlat16_2;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD1.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
					#else
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_10 = u_xlat16_16 * u_xlat16_16 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_10 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat15;
					    u_xlat0.x = u_xlat16_16 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat1.xyz = vec3(_DayWeight) * u_xlat16_1.xyz + u_xlat10_2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xzw = u_xlat1.xyz * vec3(u_xlat16_18) + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat5.xxx * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump float u_xlat16_8;
					mediump float u_xlat16_10;
					float u_xlat15;
					float u_xlat16;
					mediump float u_xlat16_16;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat15 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat15 = max(abs(u_xlat0.z), u_xlat15);
					    u_xlat15 = u_xlat15 + (-_LightProjectionParams.z);
					    u_xlat15 = max(u_xlat15, 9.99999975e-06);
					    u_xlat15 = u_xlat15 * _LightProjectionParams.w;
					    u_xlat15 = _LightProjectionParams.y / u_xlat15;
					    u_xlat15 = u_xlat15 + (-_LightProjectionParams.x);
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat15);
					    u_xlat1.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat15);
					    u_xlat1.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat15);
					    u_xlat1.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat15);
					    u_xlat1.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8 = (-u_xlat16_3.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8 + u_xlat16_3.x;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = texture(_LightTexture0, u_xlat1.xyz).w;
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat16_16 = (-_Glossiness) + 1.0;
					    u_xlat16_2 = u_xlat16_16 * u_xlat16_16 + 1.5;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat15 = u_xlat15 * u_xlat16_2;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD1.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
					#else
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_10 = u_xlat16_16 * u_xlat16_16 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_10 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat15;
					    u_xlat0.x = u_xlat16_16 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat1.xyz = vec3(_DayWeight) * u_xlat16_1.xyz + u_xlat10_2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xzw = u_xlat1.xyz * vec3(u_xlat16_18) + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat5.xxx * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3"
				}
			}
		}
		Pass {
			Name "DEFERRED"
			LOD 200
			Tags { "LIGHTMODE" = "DEFERRED" "RenderType" = "Opaque" }
			GpuProgramID 150761
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.zw = vec2(0.0, 0.0);
					  tmpvar_1.xy = vec2(0.0, 0.0);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2 = xlv_COLOR0;
					  lowp vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec4 emissionSample_5;
					  highp vec4 diffuseSample_6;
					  highp vec4 nightSample_7;
					  highp vec4 daySample_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_8 = tmpvar_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_7 = tmpvar_10;
					  diffuseSample_6 = (mix (nightSample_7, daySample_8, vec4(_DayWeight)) * _Color);
					  diffuseSample_6.xyz = (diffuseSample_6.xyz * tmpvar_2.xyz);
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_5 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = ((emissionSample_5.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_3 = diffuseSample_6.xyz;
					  tmpvar_4 = tmpvar_12;
					  lowp vec3 tmpvar_13;
					  mediump vec3 tmpvar_14;
					  mediump vec3 tmpvar_15;
					  mediump vec3 albedo_16;
					  albedo_16 = tmpvar_3;
					  tmpvar_15 = (albedo_16 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_13 = tmpvar_15;
					  tmpvar_14 = tmpvar_13;
					  mediump vec4 outGBuffer2_17;
					  mediump vec4 tmpvar_18;
					  tmpvar_18.xyz = tmpvar_14;
					  tmpvar_18.w = 1.0;
					  mediump vec4 tmpvar_19;
					  tmpvar_19.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_16, vec3(_Metallic));
					  tmpvar_19.w = _Glossiness;
					  highp vec4 tmpvar_20;
					  tmpvar_20.w = 1.0;
					  tmpvar_20.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_17 = tmpvar_20;
					  mediump vec4 tmpvar_21;
					  tmpvar_21.w = 1.0;
					  tmpvar_21.xyz = tmpvar_4;
					  outEmission_1.w = tmpvar_21.w;
					  outEmission_1.xyz = exp2(-(tmpvar_4));
					  gl_FragData[0] = tmpvar_18;
					  gl_FragData[1] = tmpvar_19;
					  gl_FragData[2] = outGBuffer2_17;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.zw = vec2(0.0, 0.0);
					  tmpvar_1.xy = vec2(0.0, 0.0);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2 = xlv_COLOR0;
					  lowp vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec4 emissionSample_5;
					  highp vec4 diffuseSample_6;
					  highp vec4 nightSample_7;
					  highp vec4 daySample_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_8 = tmpvar_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_7 = tmpvar_10;
					  diffuseSample_6 = (mix (nightSample_7, daySample_8, vec4(_DayWeight)) * _Color);
					  diffuseSample_6.xyz = (diffuseSample_6.xyz * tmpvar_2.xyz);
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_5 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = ((emissionSample_5.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_3 = diffuseSample_6.xyz;
					  tmpvar_4 = tmpvar_12;
					  lowp vec3 tmpvar_13;
					  mediump vec3 tmpvar_14;
					  mediump vec3 tmpvar_15;
					  mediump vec3 albedo_16;
					  albedo_16 = tmpvar_3;
					  tmpvar_15 = (albedo_16 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_13 = tmpvar_15;
					  tmpvar_14 = tmpvar_13;
					  mediump vec4 outGBuffer2_17;
					  mediump vec4 tmpvar_18;
					  tmpvar_18.xyz = tmpvar_14;
					  tmpvar_18.w = 1.0;
					  mediump vec4 tmpvar_19;
					  tmpvar_19.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_16, vec3(_Metallic));
					  tmpvar_19.w = _Glossiness;
					  highp vec4 tmpvar_20;
					  tmpvar_20.w = 1.0;
					  tmpvar_20.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_17 = tmpvar_20;
					  mediump vec4 tmpvar_21;
					  tmpvar_21.w = 1.0;
					  tmpvar_21.xyz = tmpvar_4;
					  outEmission_1.w = tmpvar_21.w;
					  outEmission_1.xyz = exp2(-(tmpvar_4));
					  gl_FragData[0] = tmpvar_18;
					  gl_FragData[1] = tmpvar_19;
					  gl_FragData[2] = outGBuffer2_17;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.zw = vec2(0.0, 0.0);
					  tmpvar_1.xy = vec2(0.0, 0.0);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2 = xlv_COLOR0;
					  lowp vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec4 emissionSample_5;
					  highp vec4 diffuseSample_6;
					  highp vec4 nightSample_7;
					  highp vec4 daySample_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_8 = tmpvar_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_7 = tmpvar_10;
					  diffuseSample_6 = (mix (nightSample_7, daySample_8, vec4(_DayWeight)) * _Color);
					  diffuseSample_6.xyz = (diffuseSample_6.xyz * tmpvar_2.xyz);
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_5 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = ((emissionSample_5.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_3 = diffuseSample_6.xyz;
					  tmpvar_4 = tmpvar_12;
					  lowp vec3 tmpvar_13;
					  mediump vec3 tmpvar_14;
					  mediump vec3 tmpvar_15;
					  mediump vec3 albedo_16;
					  albedo_16 = tmpvar_3;
					  tmpvar_15 = (albedo_16 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_13 = tmpvar_15;
					  tmpvar_14 = tmpvar_13;
					  mediump vec4 outGBuffer2_17;
					  mediump vec4 tmpvar_18;
					  tmpvar_18.xyz = tmpvar_14;
					  tmpvar_18.w = 1.0;
					  mediump vec4 tmpvar_19;
					  tmpvar_19.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_16, vec3(_Metallic));
					  tmpvar_19.w = _Glossiness;
					  highp vec4 tmpvar_20;
					  tmpvar_20.w = 1.0;
					  tmpvar_20.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_17 = tmpvar_20;
					  mediump vec4 tmpvar_21;
					  tmpvar_21.w = 1.0;
					  tmpvar_21.xyz = tmpvar_4;
					  outEmission_1.w = tmpvar_21.w;
					  outEmission_1.xyz = exp2(-(tmpvar_4));
					  gl_FragData[0] = tmpvar_18;
					  gl_FragData[1] = tmpvar_19;
					  gl_FragData[2] = outGBuffer2_17;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					float u_xlat9;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat9 = (-_DayWeight) + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					float u_xlat9;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat9 = (-_DayWeight) + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					float u_xlat9;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat9 = (-_DayWeight) + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					varying mediump vec3 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_4;
					  tmpvar_4 = normalize((_glesNormal * tmpvar_3));
					  tmpvar_1.zw = vec2(0.0, 0.0);
					  tmpvar_1.xy = vec2(0.0, 0.0);
					  mediump vec3 normal_5;
					  normal_5 = tmpvar_4;
					  mediump vec3 x1_6;
					  mediump vec4 tmpvar_7;
					  tmpvar_7 = (normal_5.xyzz * normal_5.yzzx);
					  x1_6.x = dot (unity_SHBr, tmpvar_7);
					  x1_6.y = dot (unity_SHBg, tmpvar_7);
					  x1_6.z = dot (unity_SHBb, tmpvar_7);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_4;
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_1;
					  xlv_TEXCOORD5 = (x1_6 + (unity_SHC.xyz * (
					    (normal_5.x * normal_5.x)
					   - 
					    (normal_5.y * normal_5.y)
					  )));
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2 = xlv_COLOR0;
					  lowp vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec4 emissionSample_5;
					  highp vec4 diffuseSample_6;
					  highp vec4 nightSample_7;
					  highp vec4 daySample_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_8 = tmpvar_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_7 = tmpvar_10;
					  diffuseSample_6 = (mix (nightSample_7, daySample_8, vec4(_DayWeight)) * _Color);
					  diffuseSample_6.xyz = (diffuseSample_6.xyz * tmpvar_2.xyz);
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_5 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = ((emissionSample_5.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_3 = diffuseSample_6.xyz;
					  tmpvar_4 = tmpvar_12;
					  mediump vec3 normalWorld_13;
					  normalWorld_13 = xlv_TEXCOORD1;
					  mediump vec4 tmpvar_14;
					  tmpvar_14.w = 1.0;
					  tmpvar_14.xyz = normalWorld_13;
					  mediump vec3 x_15;
					  x_15.x = dot (unity_SHAr, tmpvar_14);
					  x_15.y = dot (unity_SHAg, tmpvar_14);
					  x_15.z = dot (unity_SHAb, tmpvar_14);
					  lowp vec3 tmpvar_16;
					  mediump vec3 tmpvar_17;
					  mediump vec3 tmpvar_18;
					  mediump vec3 albedo_19;
					  albedo_19 = tmpvar_3;
					  tmpvar_18 = (albedo_19 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_16 = tmpvar_18;
					  mediump vec3 diffColor_20;
					  diffColor_20 = tmpvar_16;
					  tmpvar_17 = tmpvar_16;
					  mediump vec4 outGBuffer2_21;
					  mediump vec4 tmpvar_22;
					  tmpvar_22.xyz = tmpvar_17;
					  tmpvar_22.w = 1.0;
					  mediump vec4 tmpvar_23;
					  tmpvar_23.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_19, vec3(_Metallic));
					  tmpvar_23.w = _Glossiness;
					  highp vec4 tmpvar_24;
					  tmpvar_24.w = 1.0;
					  tmpvar_24.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_21 = tmpvar_24;
					  mediump vec4 tmpvar_25;
					  tmpvar_25.w = 1.0;
					  tmpvar_25.xyz = (tmpvar_4 + (max (
					    ((1.055 * pow (max (vec3(0.0, 0.0, 0.0), 
					      (xlv_TEXCOORD5 + x_15)
					    ), vec3(0.4166667, 0.4166667, 0.4166667))) - 0.055)
					  , vec3(0.0, 0.0, 0.0)) * diffColor_20));
					  outEmission_1.w = tmpvar_25.w;
					  outEmission_1.xyz = exp2(-(tmpvar_25.xyz));
					  gl_FragData[0] = tmpvar_22;
					  gl_FragData[1] = tmpvar_23;
					  gl_FragData[2] = outGBuffer2_21;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					varying mediump vec3 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_4;
					  tmpvar_4 = normalize((_glesNormal * tmpvar_3));
					  tmpvar_1.zw = vec2(0.0, 0.0);
					  tmpvar_1.xy = vec2(0.0, 0.0);
					  mediump vec3 normal_5;
					  normal_5 = tmpvar_4;
					  mediump vec3 x1_6;
					  mediump vec4 tmpvar_7;
					  tmpvar_7 = (normal_5.xyzz * normal_5.yzzx);
					  x1_6.x = dot (unity_SHBr, tmpvar_7);
					  x1_6.y = dot (unity_SHBg, tmpvar_7);
					  x1_6.z = dot (unity_SHBb, tmpvar_7);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_4;
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_1;
					  xlv_TEXCOORD5 = (x1_6 + (unity_SHC.xyz * (
					    (normal_5.x * normal_5.x)
					   - 
					    (normal_5.y * normal_5.y)
					  )));
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2 = xlv_COLOR0;
					  lowp vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec4 emissionSample_5;
					  highp vec4 diffuseSample_6;
					  highp vec4 nightSample_7;
					  highp vec4 daySample_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_8 = tmpvar_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_7 = tmpvar_10;
					  diffuseSample_6 = (mix (nightSample_7, daySample_8, vec4(_DayWeight)) * _Color);
					  diffuseSample_6.xyz = (diffuseSample_6.xyz * tmpvar_2.xyz);
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_5 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = ((emissionSample_5.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_3 = diffuseSample_6.xyz;
					  tmpvar_4 = tmpvar_12;
					  mediump vec3 normalWorld_13;
					  normalWorld_13 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_14;
					  mediump vec4 tmpvar_15;
					  tmpvar_15.w = 1.0;
					  tmpvar_15.xyz = normalWorld_13;
					  mediump vec3 x_16;
					  x_16.x = dot (unity_SHAr, tmpvar_15);
					  x_16.y = dot (unity_SHAg, tmpvar_15);
					  x_16.z = dot (unity_SHAb, tmpvar_15);
					  tmpvar_14 = max (((1.055 * 
					    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5 + x_16)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  lowp vec3 tmpvar_17;
					  mediump vec3 tmpvar_18;
					  mediump vec3 tmpvar_19;
					  mediump vec3 albedo_20;
					  albedo_20 = tmpvar_3;
					  tmpvar_19 = (albedo_20 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_17 = tmpvar_19;
					  mediump vec3 diffColor_21;
					  diffColor_21 = tmpvar_17;
					  mediump vec3 color_22;
					  highp vec3 tmpvar_23;
					  tmpvar_23 = (tmpvar_14 * diffColor_21);
					  color_22 = tmpvar_23;
					  tmpvar_18 = tmpvar_17;
					  mediump vec4 outGBuffer2_24;
					  mediump vec4 tmpvar_25;
					  tmpvar_25.xyz = tmpvar_18;
					  tmpvar_25.w = 1.0;
					  mediump vec4 tmpvar_26;
					  tmpvar_26.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_20, vec3(_Metallic));
					  tmpvar_26.w = _Glossiness;
					  highp vec4 tmpvar_27;
					  tmpvar_27.w = 1.0;
					  tmpvar_27.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_24 = tmpvar_27;
					  mediump vec4 tmpvar_28;
					  tmpvar_28.w = 1.0;
					  tmpvar_28.xyz = (tmpvar_4 + color_22);
					  outEmission_1.w = tmpvar_28.w;
					  outEmission_1.xyz = exp2(-(tmpvar_28.xyz));
					  gl_FragData[0] = tmpvar_25;
					  gl_FragData[1] = tmpvar_26;
					  gl_FragData[2] = outGBuffer2_24;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					varying mediump vec3 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_4;
					  tmpvar_4 = normalize((_glesNormal * tmpvar_3));
					  tmpvar_1.zw = vec2(0.0, 0.0);
					  tmpvar_1.xy = vec2(0.0, 0.0);
					  mediump vec3 normal_5;
					  normal_5 = tmpvar_4;
					  mediump vec3 x1_6;
					  mediump vec4 tmpvar_7;
					  tmpvar_7 = (normal_5.xyzz * normal_5.yzzx);
					  x1_6.x = dot (unity_SHBr, tmpvar_7);
					  x1_6.y = dot (unity_SHBg, tmpvar_7);
					  x1_6.z = dot (unity_SHBb, tmpvar_7);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_4;
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_1;
					  xlv_TEXCOORD5 = (x1_6 + (unity_SHC.xyz * (
					    (normal_5.x * normal_5.x)
					   - 
					    (normal_5.y * normal_5.y)
					  )));
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2 = xlv_COLOR0;
					  lowp vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec4 emissionSample_5;
					  highp vec4 diffuseSample_6;
					  highp vec4 nightSample_7;
					  highp vec4 daySample_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_8 = tmpvar_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_7 = tmpvar_10;
					  diffuseSample_6 = (mix (nightSample_7, daySample_8, vec4(_DayWeight)) * _Color);
					  diffuseSample_6.xyz = (diffuseSample_6.xyz * tmpvar_2.xyz);
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_5 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = ((emissionSample_5.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_3 = diffuseSample_6.xyz;
					  tmpvar_4 = tmpvar_12;
					  mediump vec3 normalWorld_13;
					  normalWorld_13 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_14;
					  mediump vec4 tmpvar_15;
					  tmpvar_15.w = 1.0;
					  tmpvar_15.xyz = normalWorld_13;
					  mediump vec3 x_16;
					  x_16.x = dot (unity_SHAr, tmpvar_15);
					  x_16.y = dot (unity_SHAg, tmpvar_15);
					  x_16.z = dot (unity_SHAb, tmpvar_15);
					  tmpvar_14 = max (((1.055 * 
					    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5 + x_16)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  lowp vec3 tmpvar_17;
					  mediump vec3 tmpvar_18;
					  mediump vec3 tmpvar_19;
					  mediump vec3 albedo_20;
					  albedo_20 = tmpvar_3;
					  tmpvar_19 = (albedo_20 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_17 = tmpvar_19;
					  mediump vec3 diffColor_21;
					  diffColor_21 = tmpvar_17;
					  mediump vec3 color_22;
					  highp vec3 tmpvar_23;
					  tmpvar_23 = (tmpvar_14 * diffColor_21);
					  color_22 = tmpvar_23;
					  tmpvar_18 = tmpvar_17;
					  mediump vec4 outGBuffer2_24;
					  mediump vec4 tmpvar_25;
					  tmpvar_25.xyz = tmpvar_18;
					  tmpvar_25.w = 1.0;
					  mediump vec4 tmpvar_26;
					  tmpvar_26.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_20, vec3(_Metallic));
					  tmpvar_26.w = _Glossiness;
					  highp vec4 tmpvar_27;
					  tmpvar_27.w = 1.0;
					  tmpvar_27.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_24 = tmpvar_27;
					  mediump vec4 tmpvar_28;
					  tmpvar_28.w = 1.0;
					  tmpvar_28.xyz = (tmpvar_4 + color_22);
					  outEmission_1.w = tmpvar_28.w;
					  outEmission_1.xyz = exp2(-(tmpvar_28.xyz));
					  gl_FragData[0] = tmpvar_25;
					  gl_FragData[1] = tmpvar_26;
					  gl_FragData[2] = outGBuffer2_24;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					out mediump vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat12 = (-_DayWeight) + 1.0;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					out mediump vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat12 = (-_DayWeight) + 1.0;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					out mediump vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat12 = (-_DayWeight) + 1.0;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_1.xy = vec2(0.0, 0.0);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform sampler2D unity_DynamicLightmap;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2 = xlv_COLOR0;
					  lowp vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec4 emissionSample_5;
					  highp vec4 diffuseSample_6;
					  highp vec4 nightSample_7;
					  highp vec4 daySample_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_8 = tmpvar_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_7 = tmpvar_10;
					  diffuseSample_6 = (mix (nightSample_7, daySample_8, vec4(_DayWeight)) * _Color);
					  diffuseSample_6.xyz = (diffuseSample_6.xyz * tmpvar_2.xyz);
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_5 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = ((emissionSample_5.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_3 = diffuseSample_6.xyz;
					  tmpvar_4 = tmpvar_12;
					  lowp vec4 tmpvar_13;
					  tmpvar_13 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD4.zw);
					  lowp vec3 tmpvar_14;
					  mediump vec3 tmpvar_15;
					  mediump vec3 tmpvar_16;
					  mediump vec3 albedo_17;
					  albedo_17 = tmpvar_3;
					  tmpvar_16 = (albedo_17 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_14 = tmpvar_16;
					  mediump vec3 diffColor_18;
					  diffColor_18 = tmpvar_14;
					  tmpvar_15 = tmpvar_14;
					  mediump vec4 outGBuffer2_19;
					  mediump vec4 tmpvar_20;
					  tmpvar_20.xyz = tmpvar_15;
					  tmpvar_20.w = 1.0;
					  mediump vec4 tmpvar_21;
					  tmpvar_21.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_17, vec3(_Metallic));
					  tmpvar_21.w = _Glossiness;
					  highp vec4 tmpvar_22;
					  tmpvar_22.w = 1.0;
					  tmpvar_22.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_19 = tmpvar_22;
					  mediump vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = (tmpvar_4 + (pow (
					    ((unity_DynamicLightmap_HDR.x * tmpvar_13.w) * tmpvar_13.xyz)
					  , unity_DynamicLightmap_HDR.yyy) * diffColor_18));
					  outEmission_1.w = tmpvar_23.w;
					  outEmission_1.xyz = exp2(-(tmpvar_23.xyz));
					  gl_FragData[0] = tmpvar_20;
					  gl_FragData[1] = tmpvar_21;
					  gl_FragData[2] = outGBuffer2_19;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_1.xy = vec2(0.0, 0.0);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform sampler2D unity_DynamicLightmap;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2 = xlv_COLOR0;
					  lowp vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec4 emissionSample_5;
					  highp vec4 diffuseSample_6;
					  highp vec4 nightSample_7;
					  highp vec4 daySample_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_8 = tmpvar_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_7 = tmpvar_10;
					  diffuseSample_6 = (mix (nightSample_7, daySample_8, vec4(_DayWeight)) * _Color);
					  diffuseSample_6.xyz = (diffuseSample_6.xyz * tmpvar_2.xyz);
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_5 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = ((emissionSample_5.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_3 = diffuseSample_6.xyz;
					  tmpvar_4 = tmpvar_12;
					  mediump vec3 tmpvar_13;
					  lowp vec4 tmpvar_14;
					  tmpvar_14 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD4.zw);
					  tmpvar_13 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_14.w) * tmpvar_14.xyz), unity_DynamicLightmap_HDR.yyy);
					  lowp vec3 tmpvar_15;
					  mediump vec3 tmpvar_16;
					  mediump vec3 tmpvar_17;
					  mediump vec3 albedo_18;
					  albedo_18 = tmpvar_3;
					  tmpvar_17 = (albedo_18 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_15 = tmpvar_17;
					  mediump vec3 diffColor_19;
					  diffColor_19 = tmpvar_15;
					  mediump vec3 color_20;
					  highp vec3 tmpvar_21;
					  tmpvar_21 = (tmpvar_13 * diffColor_19);
					  color_20 = tmpvar_21;
					  tmpvar_16 = tmpvar_15;
					  mediump vec4 outGBuffer2_22;
					  mediump vec4 tmpvar_23;
					  tmpvar_23.xyz = tmpvar_16;
					  tmpvar_23.w = 1.0;
					  mediump vec4 tmpvar_24;
					  tmpvar_24.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_18, vec3(_Metallic));
					  tmpvar_24.w = _Glossiness;
					  highp vec4 tmpvar_25;
					  tmpvar_25.w = 1.0;
					  tmpvar_25.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_22 = tmpvar_25;
					  mediump vec4 tmpvar_26;
					  tmpvar_26.w = 1.0;
					  tmpvar_26.xyz = (tmpvar_4 + color_20);
					  outEmission_1.w = tmpvar_26.w;
					  outEmission_1.xyz = exp2(-(tmpvar_26.xyz));
					  gl_FragData[0] = tmpvar_23;
					  gl_FragData[1] = tmpvar_24;
					  gl_FragData[2] = outGBuffer2_22;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_1.xy = vec2(0.0, 0.0);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform sampler2D unity_DynamicLightmap;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2 = xlv_COLOR0;
					  lowp vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec4 emissionSample_5;
					  highp vec4 diffuseSample_6;
					  highp vec4 nightSample_7;
					  highp vec4 daySample_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_8 = tmpvar_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_7 = tmpvar_10;
					  diffuseSample_6 = (mix (nightSample_7, daySample_8, vec4(_DayWeight)) * _Color);
					  diffuseSample_6.xyz = (diffuseSample_6.xyz * tmpvar_2.xyz);
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_5 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = ((emissionSample_5.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_3 = diffuseSample_6.xyz;
					  tmpvar_4 = tmpvar_12;
					  mediump vec3 tmpvar_13;
					  lowp vec4 tmpvar_14;
					  tmpvar_14 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD4.zw);
					  tmpvar_13 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_14.w) * tmpvar_14.xyz), unity_DynamicLightmap_HDR.yyy);
					  lowp vec3 tmpvar_15;
					  mediump vec3 tmpvar_16;
					  mediump vec3 tmpvar_17;
					  mediump vec3 albedo_18;
					  albedo_18 = tmpvar_3;
					  tmpvar_17 = (albedo_18 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_15 = tmpvar_17;
					  mediump vec3 diffColor_19;
					  diffColor_19 = tmpvar_15;
					  mediump vec3 color_20;
					  highp vec3 tmpvar_21;
					  tmpvar_21 = (tmpvar_13 * diffColor_19);
					  color_20 = tmpvar_21;
					  tmpvar_16 = tmpvar_15;
					  mediump vec4 outGBuffer2_22;
					  mediump vec4 tmpvar_23;
					  tmpvar_23.xyz = tmpvar_16;
					  tmpvar_23.w = 1.0;
					  mediump vec4 tmpvar_24;
					  tmpvar_24.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_18, vec3(_Metallic));
					  tmpvar_24.w = _Glossiness;
					  highp vec4 tmpvar_25;
					  tmpvar_25.w = 1.0;
					  tmpvar_25.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_22 = tmpvar_25;
					  mediump vec4 tmpvar_26;
					  tmpvar_26.w = 1.0;
					  tmpvar_26.xyz = (tmpvar_4 + color_20);
					  outEmission_1.w = tmpvar_26.w;
					  outEmission_1.xyz = exp2(-(tmpvar_26.xyz));
					  gl_FragData[0] = tmpvar_23;
					  gl_FragData[1] = tmpvar_24;
					  gl_FragData[2] = outGBuffer2_22;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp sampler2D unity_DynamicLightmap;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat16_14 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_14);
					    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat12 = (-_DayWeight) + 1.0;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp sampler2D unity_DynamicLightmap;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat16_14 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_14);
					    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat12 = (-_DayWeight) + 1.0;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp sampler2D unity_DynamicLightmap;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat16_14 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_14);
					    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat12 = (-_DayWeight) + 1.0;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixV;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = _glesVertex;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = tmpvar_1.xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  tmpvar_2.zw = vec2(0.0, 0.0);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  tmpvar_3.xyz = ((tmpvar_5.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
					  highp vec4 tmpvar_7;
					  tmpvar_7.w = 1.0;
					  tmpvar_7.xyz = tmpvar_1.xyz;
					  tmpvar_3.w = (-((unity_MatrixV * 
					    (unity_ObjectToWorld * tmpvar_7)
					  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
					  xlv_TEXCOORD2 = tmpvar_5.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2 = xlv_COLOR0;
					  lowp vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec4 emissionSample_5;
					  highp vec4 diffuseSample_6;
					  highp vec4 nightSample_7;
					  highp vec4 daySample_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_8 = tmpvar_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_7 = tmpvar_10;
					  diffuseSample_6 = (mix (nightSample_7, daySample_8, vec4(_DayWeight)) * _Color);
					  diffuseSample_6.xyz = (diffuseSample_6.xyz * tmpvar_2.xyz);
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_5 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = ((emissionSample_5.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_3 = diffuseSample_6.xyz;
					  tmpvar_4 = tmpvar_12;
					  mediump vec4 tmpvar_13;
					  tmpvar_13 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_14;
					  color_14 = tmpvar_13;
					  lowp vec3 tmpvar_15;
					  mediump vec3 tmpvar_16;
					  mediump vec3 tmpvar_17;
					  mediump vec3 albedo_18;
					  albedo_18 = tmpvar_3;
					  tmpvar_17 = (albedo_18 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_15 = tmpvar_17;
					  mediump vec3 diffColor_19;
					  diffColor_19 = tmpvar_15;
					  tmpvar_16 = tmpvar_15;
					  mediump vec4 outGBuffer2_20;
					  mediump vec4 tmpvar_21;
					  tmpvar_21.xyz = tmpvar_16;
					  tmpvar_21.w = 1.0;
					  mediump vec4 tmpvar_22;
					  tmpvar_22.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_18, vec3(_Metallic));
					  tmpvar_22.w = _Glossiness;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_20 = tmpvar_23;
					  mediump vec4 tmpvar_24;
					  tmpvar_24.w = 1.0;
					  tmpvar_24.xyz = (tmpvar_4 + ((unity_Lightmap_HDR.x * color_14.xyz) * diffColor_19));
					  outEmission_1.w = tmpvar_24.w;
					  outEmission_1.xyz = exp2(-(tmpvar_24.xyz));
					  gl_FragData[0] = tmpvar_21;
					  gl_FragData[1] = tmpvar_22;
					  gl_FragData[2] = outGBuffer2_20;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixV;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = _glesVertex;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = tmpvar_1.xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  tmpvar_2.zw = vec2(0.0, 0.0);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  tmpvar_3.xyz = ((tmpvar_5.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
					  highp vec4 tmpvar_7;
					  tmpvar_7.w = 1.0;
					  tmpvar_7.xyz = tmpvar_1.xyz;
					  tmpvar_3.w = (-((unity_MatrixV * 
					    (unity_ObjectToWorld * tmpvar_7)
					  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
					  xlv_TEXCOORD2 = tmpvar_5.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2 = xlv_COLOR0;
					  lowp vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec4 emissionSample_5;
					  highp vec4 diffuseSample_6;
					  highp vec4 nightSample_7;
					  highp vec4 daySample_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_8 = tmpvar_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_7 = tmpvar_10;
					  diffuseSample_6 = (mix (nightSample_7, daySample_8, vec4(_DayWeight)) * _Color);
					  diffuseSample_6.xyz = (diffuseSample_6.xyz * tmpvar_2.xyz);
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_5 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = ((emissionSample_5.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_3 = diffuseSample_6.xyz;
					  tmpvar_4 = tmpvar_12;
					  mediump vec3 tmpvar_13;
					  mediump vec4 tmpvar_14;
					  tmpvar_14 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_15;
					  color_15 = tmpvar_14;
					  tmpvar_13 = (unity_Lightmap_HDR.x * color_15.xyz);
					  lowp vec3 tmpvar_16;
					  mediump vec3 tmpvar_17;
					  mediump vec3 tmpvar_18;
					  mediump vec3 albedo_19;
					  albedo_19 = tmpvar_3;
					  tmpvar_18 = (albedo_19 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_16 = tmpvar_18;
					  mediump vec3 diffColor_20;
					  diffColor_20 = tmpvar_16;
					  mediump vec3 color_21;
					  highp vec3 tmpvar_22;
					  tmpvar_22 = (tmpvar_13 * diffColor_20);
					  color_21 = tmpvar_22;
					  tmpvar_17 = tmpvar_16;
					  mediump vec4 outGBuffer2_23;
					  mediump vec4 tmpvar_24;
					  tmpvar_24.xyz = tmpvar_17;
					  tmpvar_24.w = 1.0;
					  mediump vec4 tmpvar_25;
					  tmpvar_25.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_19, vec3(_Metallic));
					  tmpvar_25.w = _Glossiness;
					  highp vec4 tmpvar_26;
					  tmpvar_26.w = 1.0;
					  tmpvar_26.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_23 = tmpvar_26;
					  mediump vec4 tmpvar_27;
					  tmpvar_27.w = 1.0;
					  tmpvar_27.xyz = (tmpvar_4 + color_21);
					  outEmission_1.w = tmpvar_27.w;
					  outEmission_1.xyz = exp2(-(tmpvar_27.xyz));
					  gl_FragData[0] = tmpvar_24;
					  gl_FragData[1] = tmpvar_25;
					  gl_FragData[2] = outGBuffer2_23;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixV;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = _glesVertex;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = tmpvar_1.xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  tmpvar_2.zw = vec2(0.0, 0.0);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  tmpvar_3.xyz = ((tmpvar_5.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
					  highp vec4 tmpvar_7;
					  tmpvar_7.w = 1.0;
					  tmpvar_7.xyz = tmpvar_1.xyz;
					  tmpvar_3.w = (-((unity_MatrixV * 
					    (unity_ObjectToWorld * tmpvar_7)
					  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
					  xlv_TEXCOORD2 = tmpvar_5.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2 = xlv_COLOR0;
					  lowp vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec4 emissionSample_5;
					  highp vec4 diffuseSample_6;
					  highp vec4 nightSample_7;
					  highp vec4 daySample_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_8 = tmpvar_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_7 = tmpvar_10;
					  diffuseSample_6 = (mix (nightSample_7, daySample_8, vec4(_DayWeight)) * _Color);
					  diffuseSample_6.xyz = (diffuseSample_6.xyz * tmpvar_2.xyz);
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_5 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = ((emissionSample_5.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_3 = diffuseSample_6.xyz;
					  tmpvar_4 = tmpvar_12;
					  mediump vec3 tmpvar_13;
					  mediump vec4 tmpvar_14;
					  tmpvar_14 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_15;
					  color_15 = tmpvar_14;
					  tmpvar_13 = (unity_Lightmap_HDR.x * color_15.xyz);
					  lowp vec3 tmpvar_16;
					  mediump vec3 tmpvar_17;
					  mediump vec3 tmpvar_18;
					  mediump vec3 albedo_19;
					  albedo_19 = tmpvar_3;
					  tmpvar_18 = (albedo_19 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_16 = tmpvar_18;
					  mediump vec3 diffColor_20;
					  diffColor_20 = tmpvar_16;
					  mediump vec3 color_21;
					  highp vec3 tmpvar_22;
					  tmpvar_22 = (tmpvar_13 * diffColor_20);
					  color_21 = tmpvar_22;
					  tmpvar_17 = tmpvar_16;
					  mediump vec4 outGBuffer2_23;
					  mediump vec4 tmpvar_24;
					  tmpvar_24.xyz = tmpvar_17;
					  tmpvar_24.w = 1.0;
					  mediump vec4 tmpvar_25;
					  tmpvar_25.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_19, vec3(_Metallic));
					  tmpvar_25.w = _Glossiness;
					  highp vec4 tmpvar_26;
					  tmpvar_26.w = 1.0;
					  tmpvar_26.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_23 = tmpvar_26;
					  mediump vec4 tmpvar_27;
					  tmpvar_27.w = 1.0;
					  tmpvar_27.xyz = (tmpvar_4 + color_21);
					  outEmission_1.w = tmpvar_27.w;
					  outEmission_1.xyz = exp2(-(tmpvar_27.xyz));
					  gl_FragData[0] = tmpvar_24;
					  gl_FragData[1] = tmpvar_25;
					  gl_FragData[2] = outGBuffer2_23;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat12 = (-_DayWeight) + 1.0;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat12 = (-_DayWeight) + 1.0;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat12 = (-_DayWeight) + 1.0;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixV;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = _glesVertex;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = tmpvar_1.xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  tmpvar_2.zw = vec2(0.0, 0.0);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  tmpvar_3.xyz = ((tmpvar_5.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
					  highp vec4 tmpvar_7;
					  tmpvar_7.w = 1.0;
					  tmpvar_7.xyz = tmpvar_1.xyz;
					  tmpvar_3.w = (-((unity_MatrixV * 
					    (unity_ObjectToWorld * tmpvar_7)
					  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
					  xlv_TEXCOORD2 = tmpvar_5.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2 = xlv_COLOR0;
					  lowp vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec4 emissionSample_5;
					  highp vec4 diffuseSample_6;
					  highp vec4 nightSample_7;
					  highp vec4 daySample_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_8 = tmpvar_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_7 = tmpvar_10;
					  diffuseSample_6 = (mix (nightSample_7, daySample_8, vec4(_DayWeight)) * _Color);
					  diffuseSample_6.xyz = (diffuseSample_6.xyz * tmpvar_2.xyz);
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_5 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = ((emissionSample_5.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_3 = diffuseSample_6.xyz;
					  tmpvar_4 = tmpvar_12;
					  mediump vec3 normalWorld_13;
					  normalWorld_13 = xlv_TEXCOORD1;
					  mediump vec3 ambient_14;
					  mediump vec4 tmpvar_15;
					  tmpvar_15.w = 1.0;
					  tmpvar_15.xyz = normalWorld_13;
					  mediump vec3 x_16;
					  x_16.x = dot (unity_SHAr, tmpvar_15);
					  x_16.y = dot (unity_SHAg, tmpvar_15);
					  x_16.z = dot (unity_SHAb, tmpvar_15);
					  mediump vec3 x1_17;
					  mediump vec4 tmpvar_18;
					  tmpvar_18 = (normalWorld_13.xyzz * normalWorld_13.yzzx);
					  x1_17.x = dot (unity_SHBr, tmpvar_18);
					  x1_17.y = dot (unity_SHBg, tmpvar_18);
					  x1_17.z = dot (unity_SHBb, tmpvar_18);
					  ambient_14 = max (vec3(0.0, 0.0, 0.0), (x_16 + (x1_17 + 
					    (unity_SHC.xyz * ((normalWorld_13.x * normalWorld_13.x) - (normalWorld_13.y * normalWorld_13.y)))
					  )));
					  mediump vec3 tmpvar_19;
					  tmpvar_19 = max (((1.055 * 
					    pow (max (ambient_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  ambient_14 = tmpvar_19;
					  mediump vec4 tmpvar_20;
					  tmpvar_20 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_21;
					  color_21 = tmpvar_20;
					  lowp vec3 tmpvar_22;
					  mediump vec3 tmpvar_23;
					  mediump vec3 tmpvar_24;
					  mediump vec3 albedo_25;
					  albedo_25 = tmpvar_3;
					  tmpvar_24 = (albedo_25 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_22 = tmpvar_24;
					  mediump vec3 diffColor_26;
					  diffColor_26 = tmpvar_22;
					  tmpvar_23 = tmpvar_22;
					  mediump vec4 outGBuffer2_27;
					  mediump vec4 tmpvar_28;
					  tmpvar_28.xyz = tmpvar_23;
					  tmpvar_28.w = 1.0;
					  mediump vec4 tmpvar_29;
					  tmpvar_29.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_25, vec3(_Metallic));
					  tmpvar_29.w = _Glossiness;
					  highp vec4 tmpvar_30;
					  tmpvar_30.w = 1.0;
					  tmpvar_30.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_27 = tmpvar_30;
					  mediump vec4 tmpvar_31;
					  tmpvar_31.w = 1.0;
					  tmpvar_31.xyz = (tmpvar_4 + ((tmpvar_19 + 
					    (unity_Lightmap_HDR.x * color_21.xyz)
					  ) * diffColor_26));
					  outEmission_1.w = tmpvar_31.w;
					  outEmission_1.xyz = exp2(-(tmpvar_31.xyz));
					  gl_FragData[0] = tmpvar_28;
					  gl_FragData[1] = tmpvar_29;
					  gl_FragData[2] = outGBuffer2_27;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixV;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = _glesVertex;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = tmpvar_1.xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  tmpvar_2.zw = vec2(0.0, 0.0);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  tmpvar_3.xyz = ((tmpvar_5.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
					  highp vec4 tmpvar_7;
					  tmpvar_7.w = 1.0;
					  tmpvar_7.xyz = tmpvar_1.xyz;
					  tmpvar_3.w = (-((unity_MatrixV * 
					    (unity_ObjectToWorld * tmpvar_7)
					  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
					  xlv_TEXCOORD2 = tmpvar_5.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2 = xlv_COLOR0;
					  lowp vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec4 emissionSample_5;
					  highp vec4 diffuseSample_6;
					  highp vec4 nightSample_7;
					  highp vec4 daySample_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_8 = tmpvar_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_7 = tmpvar_10;
					  diffuseSample_6 = (mix (nightSample_7, daySample_8, vec4(_DayWeight)) * _Color);
					  diffuseSample_6.xyz = (diffuseSample_6.xyz * tmpvar_2.xyz);
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_5 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = ((emissionSample_5.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_3 = diffuseSample_6.xyz;
					  tmpvar_4 = tmpvar_12;
					  mediump vec3 normalWorld_13;
					  normalWorld_13 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_14;
					  mediump vec3 ambient_15;
					  mediump vec4 tmpvar_16;
					  tmpvar_16.w = 1.0;
					  tmpvar_16.xyz = normalWorld_13;
					  mediump vec3 x_17;
					  x_17.x = dot (unity_SHAr, tmpvar_16);
					  x_17.y = dot (unity_SHAg, tmpvar_16);
					  x_17.z = dot (unity_SHAb, tmpvar_16);
					  mediump vec3 x1_18;
					  mediump vec4 tmpvar_19;
					  tmpvar_19 = (normalWorld_13.xyzz * normalWorld_13.yzzx);
					  x1_18.x = dot (unity_SHBr, tmpvar_19);
					  x1_18.y = dot (unity_SHBg, tmpvar_19);
					  x1_18.z = dot (unity_SHBb, tmpvar_19);
					  ambient_15 = max (vec3(0.0, 0.0, 0.0), (x_17 + (x1_18 + 
					    (unity_SHC.xyz * ((normalWorld_13.x * normalWorld_13.x) - (normalWorld_13.y * normalWorld_13.y)))
					  )));
					  mediump vec3 tmpvar_20;
					  tmpvar_20 = max (((1.055 * 
					    pow (max (ambient_15, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  ambient_15 = tmpvar_20;
					  mediump vec4 tmpvar_21;
					  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_22;
					  color_22 = tmpvar_21;
					  tmpvar_14 = (tmpvar_20 + (unity_Lightmap_HDR.x * color_22.xyz));
					  lowp vec3 tmpvar_23;
					  mediump vec3 tmpvar_24;
					  mediump vec3 tmpvar_25;
					  mediump vec3 albedo_26;
					  albedo_26 = tmpvar_3;
					  tmpvar_25 = (albedo_26 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_23 = tmpvar_25;
					  mediump vec3 diffColor_27;
					  diffColor_27 = tmpvar_23;
					  mediump vec3 color_28;
					  highp vec3 tmpvar_29;
					  tmpvar_29 = (tmpvar_14 * diffColor_27);
					  color_28 = tmpvar_29;
					  tmpvar_24 = tmpvar_23;
					  mediump vec4 outGBuffer2_30;
					  mediump vec4 tmpvar_31;
					  tmpvar_31.xyz = tmpvar_24;
					  tmpvar_31.w = 1.0;
					  mediump vec4 tmpvar_32;
					  tmpvar_32.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_26, vec3(_Metallic));
					  tmpvar_32.w = _Glossiness;
					  highp vec4 tmpvar_33;
					  tmpvar_33.w = 1.0;
					  tmpvar_33.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_30 = tmpvar_33;
					  mediump vec4 tmpvar_34;
					  tmpvar_34.w = 1.0;
					  tmpvar_34.xyz = (tmpvar_4 + color_28);
					  outEmission_1.w = tmpvar_34.w;
					  outEmission_1.xyz = exp2(-(tmpvar_34.xyz));
					  gl_FragData[0] = tmpvar_31;
					  gl_FragData[1] = tmpvar_32;
					  gl_FragData[2] = outGBuffer2_30;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixV;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = _glesVertex;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = tmpvar_1.xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  tmpvar_2.zw = vec2(0.0, 0.0);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  tmpvar_3.xyz = ((tmpvar_5.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
					  highp vec4 tmpvar_7;
					  tmpvar_7.w = 1.0;
					  tmpvar_7.xyz = tmpvar_1.xyz;
					  tmpvar_3.w = (-((unity_MatrixV * 
					    (unity_ObjectToWorld * tmpvar_7)
					  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
					  xlv_TEXCOORD2 = tmpvar_5.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2 = xlv_COLOR0;
					  lowp vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec4 emissionSample_5;
					  highp vec4 diffuseSample_6;
					  highp vec4 nightSample_7;
					  highp vec4 daySample_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_8 = tmpvar_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_7 = tmpvar_10;
					  diffuseSample_6 = (mix (nightSample_7, daySample_8, vec4(_DayWeight)) * _Color);
					  diffuseSample_6.xyz = (diffuseSample_6.xyz * tmpvar_2.xyz);
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_5 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = ((emissionSample_5.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_3 = diffuseSample_6.xyz;
					  tmpvar_4 = tmpvar_12;
					  mediump vec3 normalWorld_13;
					  normalWorld_13 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_14;
					  mediump vec3 ambient_15;
					  mediump vec4 tmpvar_16;
					  tmpvar_16.w = 1.0;
					  tmpvar_16.xyz = normalWorld_13;
					  mediump vec3 x_17;
					  x_17.x = dot (unity_SHAr, tmpvar_16);
					  x_17.y = dot (unity_SHAg, tmpvar_16);
					  x_17.z = dot (unity_SHAb, tmpvar_16);
					  mediump vec3 x1_18;
					  mediump vec4 tmpvar_19;
					  tmpvar_19 = (normalWorld_13.xyzz * normalWorld_13.yzzx);
					  x1_18.x = dot (unity_SHBr, tmpvar_19);
					  x1_18.y = dot (unity_SHBg, tmpvar_19);
					  x1_18.z = dot (unity_SHBb, tmpvar_19);
					  ambient_15 = max (vec3(0.0, 0.0, 0.0), (x_17 + (x1_18 + 
					    (unity_SHC.xyz * ((normalWorld_13.x * normalWorld_13.x) - (normalWorld_13.y * normalWorld_13.y)))
					  )));
					  mediump vec3 tmpvar_20;
					  tmpvar_20 = max (((1.055 * 
					    pow (max (ambient_15, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  ambient_15 = tmpvar_20;
					  mediump vec4 tmpvar_21;
					  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_22;
					  color_22 = tmpvar_21;
					  tmpvar_14 = (tmpvar_20 + (unity_Lightmap_HDR.x * color_22.xyz));
					  lowp vec3 tmpvar_23;
					  mediump vec3 tmpvar_24;
					  mediump vec3 tmpvar_25;
					  mediump vec3 albedo_26;
					  albedo_26 = tmpvar_3;
					  tmpvar_25 = (albedo_26 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_23 = tmpvar_25;
					  mediump vec3 diffColor_27;
					  diffColor_27 = tmpvar_23;
					  mediump vec3 color_28;
					  highp vec3 tmpvar_29;
					  tmpvar_29 = (tmpvar_14 * diffColor_27);
					  color_28 = tmpvar_29;
					  tmpvar_24 = tmpvar_23;
					  mediump vec4 outGBuffer2_30;
					  mediump vec4 tmpvar_31;
					  tmpvar_31.xyz = tmpvar_24;
					  tmpvar_31.w = 1.0;
					  mediump vec4 tmpvar_32;
					  tmpvar_32.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_26, vec3(_Metallic));
					  tmpvar_32.w = _Glossiness;
					  highp vec4 tmpvar_33;
					  tmpvar_33.w = 1.0;
					  tmpvar_33.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_30 = tmpvar_33;
					  mediump vec4 tmpvar_34;
					  tmpvar_34.w = 1.0;
					  tmpvar_34.xyz = (tmpvar_4 + color_28);
					  outEmission_1.w = tmpvar_34.w;
					  outEmission_1.xyz = exp2(-(tmpvar_34.xyz));
					  gl_FragData[0] = tmpvar_31;
					  gl_FragData[1] = tmpvar_32;
					  gl_FragData[2] = outGBuffer2_30;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					float u_xlat19;
					mediump float u_xlat16_20;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat16_20 = vs_TEXCOORD1.y * vs_TEXCOORD1.y;
					    u_xlat16_20 = vs_TEXCOORD1.x * vs_TEXCOORD1.x + (-u_xlat16_20);
					    u_xlat16_0 = vs_TEXCOORD1.yzzx * vs_TEXCOORD1.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_20) + u_xlat16_3.xyz;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_5.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = unity_Lightmap_HDR.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_1.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
					    u_xlat19 = (-_DayWeight) + 1.0;
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat19) + u_xlat16_2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					float u_xlat19;
					mediump float u_xlat16_20;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat16_20 = vs_TEXCOORD1.y * vs_TEXCOORD1.y;
					    u_xlat16_20 = vs_TEXCOORD1.x * vs_TEXCOORD1.x + (-u_xlat16_20);
					    u_xlat16_0 = vs_TEXCOORD1.yzzx * vs_TEXCOORD1.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_20) + u_xlat16_3.xyz;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_5.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = unity_Lightmap_HDR.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_1.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
					    u_xlat19 = (-_DayWeight) + 1.0;
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat19) + u_xlat16_2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					float u_xlat19;
					mediump float u_xlat16_20;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat16_20 = vs_TEXCOORD1.y * vs_TEXCOORD1.y;
					    u_xlat16_20 = vs_TEXCOORD1.x * vs_TEXCOORD1.x + (-u_xlat16_20);
					    u_xlat16_0 = vs_TEXCOORD1.yzzx * vs_TEXCOORD1.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_20) + u_xlat16_3.xyz;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_5.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = unity_Lightmap_HDR.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_1.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
					    u_xlat19 = (-_DayWeight) + 1.0;
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat19) + u_xlat16_2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixV;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = _glesVertex;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = tmpvar_1.xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  tmpvar_3.xyz = ((tmpvar_5.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
					  highp vec4 tmpvar_7;
					  tmpvar_7.w = 1.0;
					  tmpvar_7.xyz = tmpvar_1.xyz;
					  tmpvar_3.w = (-((unity_MatrixV * 
					    (unity_ObjectToWorld * tmpvar_7)
					  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
					  xlv_TEXCOORD2 = tmpvar_5.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump sampler2D unity_Lightmap;
					uniform sampler2D unity_DynamicLightmap;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2 = xlv_COLOR0;
					  lowp vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec4 emissionSample_5;
					  highp vec4 diffuseSample_6;
					  highp vec4 nightSample_7;
					  highp vec4 daySample_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_8 = tmpvar_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_7 = tmpvar_10;
					  diffuseSample_6 = (mix (nightSample_7, daySample_8, vec4(_DayWeight)) * _Color);
					  diffuseSample_6.xyz = (diffuseSample_6.xyz * tmpvar_2.xyz);
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_5 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = ((emissionSample_5.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_3 = diffuseSample_6.xyz;
					  tmpvar_4 = tmpvar_12;
					  mediump vec3 tmpvar_13;
					  mediump vec4 tmpvar_14;
					  tmpvar_14 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_15;
					  color_15 = tmpvar_14;
					  tmpvar_13 = (unity_Lightmap_HDR.x * color_15.xyz);
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD4.zw);
					  tmpvar_13 = (tmpvar_13 + pow ((
					    (unity_DynamicLightmap_HDR.x * tmpvar_16.w)
					   * tmpvar_16.xyz), unity_DynamicLightmap_HDR.yyy));
					  lowp vec3 tmpvar_17;
					  mediump vec3 tmpvar_18;
					  mediump vec3 tmpvar_19;
					  mediump vec3 albedo_20;
					  albedo_20 = tmpvar_3;
					  tmpvar_19 = (albedo_20 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_17 = tmpvar_19;
					  mediump vec3 diffColor_21;
					  diffColor_21 = tmpvar_17;
					  tmpvar_18 = tmpvar_17;
					  mediump vec4 outGBuffer2_22;
					  mediump vec4 tmpvar_23;
					  tmpvar_23.xyz = tmpvar_18;
					  tmpvar_23.w = 1.0;
					  mediump vec4 tmpvar_24;
					  tmpvar_24.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_20, vec3(_Metallic));
					  tmpvar_24.w = _Glossiness;
					  highp vec4 tmpvar_25;
					  tmpvar_25.w = 1.0;
					  tmpvar_25.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_22 = tmpvar_25;
					  mediump vec4 tmpvar_26;
					  tmpvar_26.w = 1.0;
					  tmpvar_26.xyz = (tmpvar_4 + (tmpvar_13 * diffColor_21));
					  outEmission_1.w = tmpvar_26.w;
					  outEmission_1.xyz = exp2(-(tmpvar_26.xyz));
					  gl_FragData[0] = tmpvar_23;
					  gl_FragData[1] = tmpvar_24;
					  gl_FragData[2] = outGBuffer2_22;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixV;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = _glesVertex;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = tmpvar_1.xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  tmpvar_3.xyz = ((tmpvar_5.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
					  highp vec4 tmpvar_7;
					  tmpvar_7.w = 1.0;
					  tmpvar_7.xyz = tmpvar_1.xyz;
					  tmpvar_3.w = (-((unity_MatrixV * 
					    (unity_ObjectToWorld * tmpvar_7)
					  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
					  xlv_TEXCOORD2 = tmpvar_5.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump sampler2D unity_Lightmap;
					uniform sampler2D unity_DynamicLightmap;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2 = xlv_COLOR0;
					  lowp vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec4 emissionSample_5;
					  highp vec4 diffuseSample_6;
					  highp vec4 nightSample_7;
					  highp vec4 daySample_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_8 = tmpvar_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_7 = tmpvar_10;
					  diffuseSample_6 = (mix (nightSample_7, daySample_8, vec4(_DayWeight)) * _Color);
					  diffuseSample_6.xyz = (diffuseSample_6.xyz * tmpvar_2.xyz);
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_5 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = ((emissionSample_5.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_3 = diffuseSample_6.xyz;
					  tmpvar_4 = tmpvar_12;
					  mediump vec3 tmpvar_13;
					  mediump vec4 tmpvar_14;
					  tmpvar_14 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_15;
					  color_15 = tmpvar_14;
					  tmpvar_13 = (unity_Lightmap_HDR.x * color_15.xyz);
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD4.zw);
					  tmpvar_13 = (tmpvar_13 + pow ((
					    (unity_DynamicLightmap_HDR.x * tmpvar_16.w)
					   * tmpvar_16.xyz), unity_DynamicLightmap_HDR.yyy));
					  lowp vec3 tmpvar_17;
					  mediump vec3 tmpvar_18;
					  mediump vec3 tmpvar_19;
					  mediump vec3 albedo_20;
					  albedo_20 = tmpvar_3;
					  tmpvar_19 = (albedo_20 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_17 = tmpvar_19;
					  mediump vec3 diffColor_21;
					  diffColor_21 = tmpvar_17;
					  mediump vec3 color_22;
					  highp vec3 tmpvar_23;
					  tmpvar_23 = (tmpvar_13 * diffColor_21);
					  color_22 = tmpvar_23;
					  tmpvar_18 = tmpvar_17;
					  mediump vec4 outGBuffer2_24;
					  mediump vec4 tmpvar_25;
					  tmpvar_25.xyz = tmpvar_18;
					  tmpvar_25.w = 1.0;
					  mediump vec4 tmpvar_26;
					  tmpvar_26.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_20, vec3(_Metallic));
					  tmpvar_26.w = _Glossiness;
					  highp vec4 tmpvar_27;
					  tmpvar_27.w = 1.0;
					  tmpvar_27.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_24 = tmpvar_27;
					  mediump vec4 tmpvar_28;
					  tmpvar_28.w = 1.0;
					  tmpvar_28.xyz = (tmpvar_4 + color_22);
					  outEmission_1.w = tmpvar_28.w;
					  outEmission_1.xyz = exp2(-(tmpvar_28.xyz));
					  gl_FragData[0] = tmpvar_25;
					  gl_FragData[1] = tmpvar_26;
					  gl_FragData[2] = outGBuffer2_24;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixV;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = _glesVertex;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = tmpvar_1.xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  tmpvar_3.xyz = ((tmpvar_5.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
					  highp vec4 tmpvar_7;
					  tmpvar_7.w = 1.0;
					  tmpvar_7.xyz = tmpvar_1.xyz;
					  tmpvar_3.w = (-((unity_MatrixV * 
					    (unity_ObjectToWorld * tmpvar_7)
					  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
					  xlv_TEXCOORD2 = tmpvar_5.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump sampler2D unity_Lightmap;
					uniform sampler2D unity_DynamicLightmap;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2 = xlv_COLOR0;
					  lowp vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec4 emissionSample_5;
					  highp vec4 diffuseSample_6;
					  highp vec4 nightSample_7;
					  highp vec4 daySample_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_8 = tmpvar_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_7 = tmpvar_10;
					  diffuseSample_6 = (mix (nightSample_7, daySample_8, vec4(_DayWeight)) * _Color);
					  diffuseSample_6.xyz = (diffuseSample_6.xyz * tmpvar_2.xyz);
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_5 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = ((emissionSample_5.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_3 = diffuseSample_6.xyz;
					  tmpvar_4 = tmpvar_12;
					  mediump vec3 tmpvar_13;
					  mediump vec4 tmpvar_14;
					  tmpvar_14 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_15;
					  color_15 = tmpvar_14;
					  tmpvar_13 = (unity_Lightmap_HDR.x * color_15.xyz);
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD4.zw);
					  tmpvar_13 = (tmpvar_13 + pow ((
					    (unity_DynamicLightmap_HDR.x * tmpvar_16.w)
					   * tmpvar_16.xyz), unity_DynamicLightmap_HDR.yyy));
					  lowp vec3 tmpvar_17;
					  mediump vec3 tmpvar_18;
					  mediump vec3 tmpvar_19;
					  mediump vec3 albedo_20;
					  albedo_20 = tmpvar_3;
					  tmpvar_19 = (albedo_20 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_17 = tmpvar_19;
					  mediump vec3 diffColor_21;
					  diffColor_21 = tmpvar_17;
					  mediump vec3 color_22;
					  highp vec3 tmpvar_23;
					  tmpvar_23 = (tmpvar_13 * diffColor_21);
					  color_22 = tmpvar_23;
					  tmpvar_18 = tmpvar_17;
					  mediump vec4 outGBuffer2_24;
					  mediump vec4 tmpvar_25;
					  tmpvar_25.xyz = tmpvar_18;
					  tmpvar_25.w = 1.0;
					  mediump vec4 tmpvar_26;
					  tmpvar_26.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_20, vec3(_Metallic));
					  tmpvar_26.w = _Glossiness;
					  highp vec4 tmpvar_27;
					  tmpvar_27.w = 1.0;
					  tmpvar_27.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_24 = tmpvar_27;
					  mediump vec4 tmpvar_28;
					  tmpvar_28.w = 1.0;
					  tmpvar_28.xyz = (tmpvar_4 + color_22);
					  outEmission_1.w = tmpvar_28.w;
					  outEmission_1.xyz = exp2(-(tmpvar_28.xyz));
					  gl_FragData[0] = tmpvar_25;
					  gl_FragData[1] = tmpvar_26;
					  gl_FragData[2] = outGBuffer2_24;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp sampler2D unity_DynamicLightmap;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat16_14 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_14);
					    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = unity_Lightmap_HDR.xxx * u_xlat16_0.xyz + u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat12 = (-_DayWeight) + 1.0;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp sampler2D unity_DynamicLightmap;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat16_14 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_14);
					    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = unity_Lightmap_HDR.xxx * u_xlat16_0.xyz + u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat12 = (-_DayWeight) + 1.0;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp sampler2D unity_DynamicLightmap;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat16_14 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_14);
					    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = unity_Lightmap_HDR.xxx * u_xlat16_0.xyz + u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat12 = (-_DayWeight) + 1.0;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (_WorldSpaceCameraPos - tmpvar_4);
					  tmpvar_1 = tmpvar_6;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_2.xy = vec2(0.0, 0.0);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_4;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_1;
					  xlv_TEXCOORD4 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2 = xlv_COLOR0;
					  lowp vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec4 emissionSample_5;
					  highp vec4 diffuseSample_6;
					  highp vec4 nightSample_7;
					  highp vec4 daySample_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_8 = tmpvar_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_7 = tmpvar_10;
					  diffuseSample_6 = (mix (nightSample_7, daySample_8, vec4(_DayWeight)) * _Color);
					  diffuseSample_6.xyz = (diffuseSample_6.xyz * tmpvar_2.xyz);
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_5 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = ((emissionSample_5.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_3 = diffuseSample_6.xyz;
					  tmpvar_4 = tmpvar_12;
					  mediump vec3 normalWorld_13;
					  normalWorld_13 = xlv_TEXCOORD1;
					  mediump vec4 realtimeDirTex_14;
					  lowp vec4 tmpvar_15;
					  tmpvar_15 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD4.zw);
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD4.zw);
					  realtimeDirTex_14 = tmpvar_16;
					  lowp vec4 dirTex_17;
					  dirTex_17 = realtimeDirTex_14;
					  lowp vec3 y_18;
					  y_18 = (dirTex_17.xyz - 0.5);
					  lowp float tmpvar_19;
					  tmpvar_19 = max (0.0001, dirTex_17.w);
					  lowp vec3 tmpvar_20;
					  mediump vec3 tmpvar_21;
					  mediump vec3 tmpvar_22;
					  mediump vec3 albedo_23;
					  albedo_23 = tmpvar_3;
					  tmpvar_22 = (albedo_23 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_20 = tmpvar_22;
					  mediump vec3 diffColor_24;
					  diffColor_24 = tmpvar_20;
					  tmpvar_21 = tmpvar_20;
					  mediump vec4 outGBuffer2_25;
					  mediump vec4 tmpvar_26;
					  tmpvar_26.xyz = tmpvar_21;
					  tmpvar_26.w = 1.0;
					  mediump vec4 tmpvar_27;
					  tmpvar_27.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_23, vec3(_Metallic));
					  tmpvar_27.w = _Glossiness;
					  highp vec4 tmpvar_28;
					  tmpvar_28.w = 1.0;
					  tmpvar_28.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_25 = tmpvar_28;
					  mediump vec4 tmpvar_29;
					  tmpvar_29.w = 1.0;
					  tmpvar_29.xyz = (tmpvar_4 + ((
					    (pow (((unity_DynamicLightmap_HDR.x * tmpvar_15.w) * tmpvar_15.xyz), unity_DynamicLightmap_HDR.yyy) * (dot (normalWorld_13, y_18) + 0.5))
					   / tmpvar_19) * diffColor_24));
					  outEmission_1.w = tmpvar_29.w;
					  outEmission_1.xyz = exp2(-(tmpvar_29.xyz));
					  gl_FragData[0] = tmpvar_26;
					  gl_FragData[1] = tmpvar_27;
					  gl_FragData[2] = outGBuffer2_25;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (_WorldSpaceCameraPos - tmpvar_4);
					  tmpvar_1 = tmpvar_6;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_2.xy = vec2(0.0, 0.0);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_4;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_1;
					  xlv_TEXCOORD4 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2 = xlv_COLOR0;
					  lowp vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec4 emissionSample_5;
					  highp vec4 diffuseSample_6;
					  highp vec4 nightSample_7;
					  highp vec4 daySample_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_8 = tmpvar_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_7 = tmpvar_10;
					  diffuseSample_6 = (mix (nightSample_7, daySample_8, vec4(_DayWeight)) * _Color);
					  diffuseSample_6.xyz = (diffuseSample_6.xyz * tmpvar_2.xyz);
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_5 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = ((emissionSample_5.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_3 = diffuseSample_6.xyz;
					  tmpvar_4 = tmpvar_12;
					  mediump vec3 normalWorld_13;
					  normalWorld_13 = xlv_TEXCOORD1;
					  mediump vec4 realtimeDirTex_14;
					  mediump vec3 tmpvar_15;
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD4.zw);
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD4.zw);
					  realtimeDirTex_14 = tmpvar_17;
					  lowp vec4 dirTex_18;
					  dirTex_18 = realtimeDirTex_14;
					  lowp vec3 y_19;
					  y_19 = (dirTex_18.xyz - 0.5);
					  lowp float tmpvar_20;
					  tmpvar_20 = max (0.0001, dirTex_18.w);
					  tmpvar_15 = ((pow (
					    ((unity_DynamicLightmap_HDR.x * tmpvar_16.w) * tmpvar_16.xyz)
					  , unity_DynamicLightmap_HDR.yyy) * (
					    dot (normalWorld_13, y_19)
					   + 0.5)) / tmpvar_20);
					  lowp vec3 tmpvar_21;
					  mediump vec3 tmpvar_22;
					  mediump vec3 tmpvar_23;
					  mediump vec3 albedo_24;
					  albedo_24 = tmpvar_3;
					  tmpvar_23 = (albedo_24 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_21 = tmpvar_23;
					  mediump vec3 diffColor_25;
					  diffColor_25 = tmpvar_21;
					  mediump vec3 color_26;
					  highp vec3 tmpvar_27;
					  tmpvar_27 = (tmpvar_15 * diffColor_25);
					  color_26 = tmpvar_27;
					  tmpvar_22 = tmpvar_21;
					  mediump vec4 outGBuffer2_28;
					  mediump vec4 tmpvar_29;
					  tmpvar_29.xyz = tmpvar_22;
					  tmpvar_29.w = 1.0;
					  mediump vec4 tmpvar_30;
					  tmpvar_30.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_24, vec3(_Metallic));
					  tmpvar_30.w = _Glossiness;
					  highp vec4 tmpvar_31;
					  tmpvar_31.w = 1.0;
					  tmpvar_31.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_28 = tmpvar_31;
					  mediump vec4 tmpvar_32;
					  tmpvar_32.w = 1.0;
					  tmpvar_32.xyz = (tmpvar_4 + color_26);
					  outEmission_1.w = tmpvar_32.w;
					  outEmission_1.xyz = exp2(-(tmpvar_32.xyz));
					  gl_FragData[0] = tmpvar_29;
					  gl_FragData[1] = tmpvar_30;
					  gl_FragData[2] = outGBuffer2_28;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (_WorldSpaceCameraPos - tmpvar_4);
					  tmpvar_1 = tmpvar_6;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_2.xy = vec2(0.0, 0.0);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_4;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_1;
					  xlv_TEXCOORD4 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2 = xlv_COLOR0;
					  lowp vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec4 emissionSample_5;
					  highp vec4 diffuseSample_6;
					  highp vec4 nightSample_7;
					  highp vec4 daySample_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_8 = tmpvar_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_7 = tmpvar_10;
					  diffuseSample_6 = (mix (nightSample_7, daySample_8, vec4(_DayWeight)) * _Color);
					  diffuseSample_6.xyz = (diffuseSample_6.xyz * tmpvar_2.xyz);
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_5 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = ((emissionSample_5.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_3 = diffuseSample_6.xyz;
					  tmpvar_4 = tmpvar_12;
					  mediump vec3 normalWorld_13;
					  normalWorld_13 = xlv_TEXCOORD1;
					  mediump vec4 realtimeDirTex_14;
					  mediump vec3 tmpvar_15;
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD4.zw);
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD4.zw);
					  realtimeDirTex_14 = tmpvar_17;
					  lowp vec4 dirTex_18;
					  dirTex_18 = realtimeDirTex_14;
					  lowp vec3 y_19;
					  y_19 = (dirTex_18.xyz - 0.5);
					  lowp float tmpvar_20;
					  tmpvar_20 = max (0.0001, dirTex_18.w);
					  tmpvar_15 = ((pow (
					    ((unity_DynamicLightmap_HDR.x * tmpvar_16.w) * tmpvar_16.xyz)
					  , unity_DynamicLightmap_HDR.yyy) * (
					    dot (normalWorld_13, y_19)
					   + 0.5)) / tmpvar_20);
					  lowp vec3 tmpvar_21;
					  mediump vec3 tmpvar_22;
					  mediump vec3 tmpvar_23;
					  mediump vec3 albedo_24;
					  albedo_24 = tmpvar_3;
					  tmpvar_23 = (albedo_24 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_21 = tmpvar_23;
					  mediump vec3 diffColor_25;
					  diffColor_25 = tmpvar_21;
					  mediump vec3 color_26;
					  highp vec3 tmpvar_27;
					  tmpvar_27 = (tmpvar_15 * diffColor_25);
					  color_26 = tmpvar_27;
					  tmpvar_22 = tmpvar_21;
					  mediump vec4 outGBuffer2_28;
					  mediump vec4 tmpvar_29;
					  tmpvar_29.xyz = tmpvar_22;
					  tmpvar_29.w = 1.0;
					  mediump vec4 tmpvar_30;
					  tmpvar_30.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_24, vec3(_Metallic));
					  tmpvar_30.w = _Glossiness;
					  highp vec4 tmpvar_31;
					  tmpvar_31.w = 1.0;
					  tmpvar_31.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_28 = tmpvar_31;
					  mediump vec4 tmpvar_32;
					  tmpvar_32.w = 1.0;
					  tmpvar_32.xyz = (tmpvar_4 + color_26);
					  outEmission_1.w = tmpvar_32.w;
					  outEmission_1.xyz = exp2(-(tmpvar_32.xyz));
					  gl_FragData[0] = tmpvar_29;
					  gl_FragData[1] = tmpvar_30;
					  gl_FragData[2] = outGBuffer2_28;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat16_17 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_17);
					    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD4.zw);
					    u_xlat16_4.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_17 = u_xlat16_17 + 0.5;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * u_xlat16_3.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz / u_xlat16_0.xxx;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat15 = (-_DayWeight) + 1.0;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat16_2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat16_17 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_17);
					    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD4.zw);
					    u_xlat16_4.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_17 = u_xlat16_17 + 0.5;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * u_xlat16_3.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz / u_xlat16_0.xxx;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat15 = (-_DayWeight) + 1.0;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat16_2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat16_17 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_17);
					    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD4.zw);
					    u_xlat16_4.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_17 = u_xlat16_17 + 0.5;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * u_xlat16_3.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz / u_xlat16_0.xxx;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat15 = (-_DayWeight) + 1.0;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat16_2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (_WorldSpaceCameraPos - tmpvar_4);
					  tmpvar_1 = tmpvar_6;
					  tmpvar_2.zw = vec2(0.0, 0.0);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_4;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_1;
					  xlv_TEXCOORD4 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2 = xlv_COLOR0;
					  lowp vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec4 emissionSample_5;
					  highp vec4 diffuseSample_6;
					  highp vec4 nightSample_7;
					  highp vec4 daySample_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_8 = tmpvar_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_7 = tmpvar_10;
					  diffuseSample_6 = (mix (nightSample_7, daySample_8, vec4(_DayWeight)) * _Color);
					  diffuseSample_6.xyz = (diffuseSample_6.xyz * tmpvar_2.xyz);
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_5 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = ((emissionSample_5.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_3 = diffuseSample_6.xyz;
					  tmpvar_4 = tmpvar_12;
					  mediump vec3 normalWorld_13;
					  normalWorld_13 = xlv_TEXCOORD1;
					  lowp vec4 bakedDirTex_14;
					  mediump vec4 tmpvar_15;
					  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_16;
					  color_16 = tmpvar_15;
					  mediump vec4 tmpvar_17;
					  tmpvar_17 = texture2D (unity_LightmapInd, xlv_TEXCOORD4.xy);
					  bakedDirTex_14 = tmpvar_17;
					  lowp vec3 y_18;
					  y_18 = (bakedDirTex_14.xyz - 0.5);
					  lowp float tmpvar_19;
					  tmpvar_19 = max (0.0001, bakedDirTex_14.w);
					  lowp vec3 tmpvar_20;
					  mediump vec3 tmpvar_21;
					  mediump vec3 tmpvar_22;
					  mediump vec3 albedo_23;
					  albedo_23 = tmpvar_3;
					  tmpvar_22 = (albedo_23 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_20 = tmpvar_22;
					  mediump vec3 diffColor_24;
					  diffColor_24 = tmpvar_20;
					  tmpvar_21 = tmpvar_20;
					  mediump vec4 outGBuffer2_25;
					  mediump vec4 tmpvar_26;
					  tmpvar_26.xyz = tmpvar_21;
					  tmpvar_26.w = 1.0;
					  mediump vec4 tmpvar_27;
					  tmpvar_27.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_23, vec3(_Metallic));
					  tmpvar_27.w = _Glossiness;
					  highp vec4 tmpvar_28;
					  tmpvar_28.w = 1.0;
					  tmpvar_28.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_25 = tmpvar_28;
					  mediump vec4 tmpvar_29;
					  tmpvar_29.w = 1.0;
					  tmpvar_29.xyz = (tmpvar_4 + ((
					    ((unity_Lightmap_HDR.x * color_16.xyz) * (dot (normalWorld_13, y_18) + 0.5))
					   / tmpvar_19) * diffColor_24));
					  outEmission_1.w = tmpvar_29.w;
					  outEmission_1.xyz = exp2(-(tmpvar_29.xyz));
					  gl_FragData[0] = tmpvar_26;
					  gl_FragData[1] = tmpvar_27;
					  gl_FragData[2] = outGBuffer2_25;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (_WorldSpaceCameraPos - tmpvar_4);
					  tmpvar_1 = tmpvar_6;
					  tmpvar_2.zw = vec2(0.0, 0.0);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_4;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_1;
					  xlv_TEXCOORD4 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2 = xlv_COLOR0;
					  lowp vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec4 emissionSample_5;
					  highp vec4 diffuseSample_6;
					  highp vec4 nightSample_7;
					  highp vec4 daySample_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_8 = tmpvar_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_7 = tmpvar_10;
					  diffuseSample_6 = (mix (nightSample_7, daySample_8, vec4(_DayWeight)) * _Color);
					  diffuseSample_6.xyz = (diffuseSample_6.xyz * tmpvar_2.xyz);
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_5 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = ((emissionSample_5.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_3 = diffuseSample_6.xyz;
					  tmpvar_4 = tmpvar_12;
					  mediump vec3 normalWorld_13;
					  normalWorld_13 = xlv_TEXCOORD1;
					  lowp vec4 bakedDirTex_14;
					  mediump vec3 tmpvar_15;
					  mediump vec4 tmpvar_16;
					  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_17;
					  color_17 = tmpvar_16;
					  mediump vec4 tmpvar_18;
					  tmpvar_18 = texture2D (unity_LightmapInd, xlv_TEXCOORD4.xy);
					  bakedDirTex_14 = tmpvar_18;
					  lowp vec3 y_19;
					  y_19 = (bakedDirTex_14.xyz - 0.5);
					  lowp float tmpvar_20;
					  tmpvar_20 = max (0.0001, bakedDirTex_14.w);
					  tmpvar_15 = (((unity_Lightmap_HDR.x * color_17.xyz) * (
					    dot (normalWorld_13, y_19)
					   + 0.5)) / tmpvar_20);
					  lowp vec3 tmpvar_21;
					  mediump vec3 tmpvar_22;
					  mediump vec3 tmpvar_23;
					  mediump vec3 albedo_24;
					  albedo_24 = tmpvar_3;
					  tmpvar_23 = (albedo_24 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_21 = tmpvar_23;
					  mediump vec3 diffColor_25;
					  diffColor_25 = tmpvar_21;
					  mediump vec3 color_26;
					  highp vec3 tmpvar_27;
					  tmpvar_27 = (tmpvar_15 * diffColor_25);
					  color_26 = tmpvar_27;
					  tmpvar_22 = tmpvar_21;
					  mediump vec4 outGBuffer2_28;
					  mediump vec4 tmpvar_29;
					  tmpvar_29.xyz = tmpvar_22;
					  tmpvar_29.w = 1.0;
					  mediump vec4 tmpvar_30;
					  tmpvar_30.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_24, vec3(_Metallic));
					  tmpvar_30.w = _Glossiness;
					  highp vec4 tmpvar_31;
					  tmpvar_31.w = 1.0;
					  tmpvar_31.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_28 = tmpvar_31;
					  mediump vec4 tmpvar_32;
					  tmpvar_32.w = 1.0;
					  tmpvar_32.xyz = (tmpvar_4 + color_26);
					  outEmission_1.w = tmpvar_32.w;
					  outEmission_1.xyz = exp2(-(tmpvar_32.xyz));
					  gl_FragData[0] = tmpvar_29;
					  gl_FragData[1] = tmpvar_30;
					  gl_FragData[2] = outGBuffer2_28;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (_WorldSpaceCameraPos - tmpvar_4);
					  tmpvar_1 = tmpvar_6;
					  tmpvar_2.zw = vec2(0.0, 0.0);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_4;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_1;
					  xlv_TEXCOORD4 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2 = xlv_COLOR0;
					  lowp vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec4 emissionSample_5;
					  highp vec4 diffuseSample_6;
					  highp vec4 nightSample_7;
					  highp vec4 daySample_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_8 = tmpvar_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_7 = tmpvar_10;
					  diffuseSample_6 = (mix (nightSample_7, daySample_8, vec4(_DayWeight)) * _Color);
					  diffuseSample_6.xyz = (diffuseSample_6.xyz * tmpvar_2.xyz);
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_5 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = ((emissionSample_5.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_3 = diffuseSample_6.xyz;
					  tmpvar_4 = tmpvar_12;
					  mediump vec3 normalWorld_13;
					  normalWorld_13 = xlv_TEXCOORD1;
					  lowp vec4 bakedDirTex_14;
					  mediump vec3 tmpvar_15;
					  mediump vec4 tmpvar_16;
					  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_17;
					  color_17 = tmpvar_16;
					  mediump vec4 tmpvar_18;
					  tmpvar_18 = texture2D (unity_LightmapInd, xlv_TEXCOORD4.xy);
					  bakedDirTex_14 = tmpvar_18;
					  lowp vec3 y_19;
					  y_19 = (bakedDirTex_14.xyz - 0.5);
					  lowp float tmpvar_20;
					  tmpvar_20 = max (0.0001, bakedDirTex_14.w);
					  tmpvar_15 = (((unity_Lightmap_HDR.x * color_17.xyz) * (
					    dot (normalWorld_13, y_19)
					   + 0.5)) / tmpvar_20);
					  lowp vec3 tmpvar_21;
					  mediump vec3 tmpvar_22;
					  mediump vec3 tmpvar_23;
					  mediump vec3 albedo_24;
					  albedo_24 = tmpvar_3;
					  tmpvar_23 = (albedo_24 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_21 = tmpvar_23;
					  mediump vec3 diffColor_25;
					  diffColor_25 = tmpvar_21;
					  mediump vec3 color_26;
					  highp vec3 tmpvar_27;
					  tmpvar_27 = (tmpvar_15 * diffColor_25);
					  color_26 = tmpvar_27;
					  tmpvar_22 = tmpvar_21;
					  mediump vec4 outGBuffer2_28;
					  mediump vec4 tmpvar_29;
					  tmpvar_29.xyz = tmpvar_22;
					  tmpvar_29.w = 1.0;
					  mediump vec4 tmpvar_30;
					  tmpvar_30.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_24, vec3(_Metallic));
					  tmpvar_30.w = _Glossiness;
					  highp vec4 tmpvar_31;
					  tmpvar_31.w = 1.0;
					  tmpvar_31.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_28 = tmpvar_31;
					  mediump vec4 tmpvar_32;
					  tmpvar_32.w = 1.0;
					  tmpvar_32.xyz = (tmpvar_4 + color_26);
					  outEmission_1.w = tmpvar_32.w;
					  outEmission_1.xyz = exp2(-(tmpvar_32.xyz));
					  gl_FragData[0] = tmpvar_29;
					  gl_FragData[1] = tmpvar_30;
					  gl_FragData[2] = outGBuffer2_28;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_0 = texture(unity_LightmapInd, vs_TEXCOORD4.xy);
					    u_xlat16_4.xyz = u_xlat16_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat16_0.w, 9.99999975e-05);
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_17 = u_xlat16_17 + 0.5;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * u_xlat16_3.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz / u_xlat16_0.xxx;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat15 = (-_DayWeight) + 1.0;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat16_2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_0 = texture(unity_LightmapInd, vs_TEXCOORD4.xy);
					    u_xlat16_4.xyz = u_xlat16_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat16_0.w, 9.99999975e-05);
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_17 = u_xlat16_17 + 0.5;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * u_xlat16_3.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz / u_xlat16_0.xxx;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat15 = (-_DayWeight) + 1.0;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat16_2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_0 = texture(unity_LightmapInd, vs_TEXCOORD4.xy);
					    u_xlat16_4.xyz = u_xlat16_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat16_0.w, 9.99999975e-05);
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_17 = u_xlat16_17 + 0.5;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * u_xlat16_3.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz / u_xlat16_0.xxx;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat15 = (-_DayWeight) + 1.0;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat16_2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (_WorldSpaceCameraPos - tmpvar_4);
					  tmpvar_1 = tmpvar_6;
					  tmpvar_2.zw = vec2(0.0, 0.0);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_4;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_1;
					  xlv_TEXCOORD4 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2 = xlv_COLOR0;
					  lowp vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec4 emissionSample_5;
					  highp vec4 diffuseSample_6;
					  highp vec4 nightSample_7;
					  highp vec4 daySample_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_8 = tmpvar_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_7 = tmpvar_10;
					  diffuseSample_6 = (mix (nightSample_7, daySample_8, vec4(_DayWeight)) * _Color);
					  diffuseSample_6.xyz = (diffuseSample_6.xyz * tmpvar_2.xyz);
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_5 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = ((emissionSample_5.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_3 = diffuseSample_6.xyz;
					  tmpvar_4 = tmpvar_12;
					  mediump vec3 normalWorld_13;
					  normalWorld_13 = xlv_TEXCOORD1;
					  lowp vec4 bakedDirTex_14;
					  mediump vec3 ambient_15;
					  mediump vec4 tmpvar_16;
					  tmpvar_16.w = 1.0;
					  tmpvar_16.xyz = normalWorld_13;
					  mediump vec3 x_17;
					  x_17.x = dot (unity_SHAr, tmpvar_16);
					  x_17.y = dot (unity_SHAg, tmpvar_16);
					  x_17.z = dot (unity_SHAb, tmpvar_16);
					  mediump vec3 x1_18;
					  mediump vec4 tmpvar_19;
					  tmpvar_19 = (normalWorld_13.xyzz * normalWorld_13.yzzx);
					  x1_18.x = dot (unity_SHBr, tmpvar_19);
					  x1_18.y = dot (unity_SHBg, tmpvar_19);
					  x1_18.z = dot (unity_SHBb, tmpvar_19);
					  ambient_15 = max (vec3(0.0, 0.0, 0.0), (x_17 + (x1_18 + 
					    (unity_SHC.xyz * ((normalWorld_13.x * normalWorld_13.x) - (normalWorld_13.y * normalWorld_13.y)))
					  )));
					  mediump vec3 tmpvar_20;
					  tmpvar_20 = max (((1.055 * 
					    pow (max (ambient_15, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  ambient_15 = tmpvar_20;
					  mediump vec4 tmpvar_21;
					  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_22;
					  color_22 = tmpvar_21;
					  mediump vec4 tmpvar_23;
					  tmpvar_23 = texture2D (unity_LightmapInd, xlv_TEXCOORD4.xy);
					  bakedDirTex_14 = tmpvar_23;
					  lowp vec3 y_24;
					  y_24 = (bakedDirTex_14.xyz - 0.5);
					  lowp float tmpvar_25;
					  tmpvar_25 = max (0.0001, bakedDirTex_14.w);
					  lowp vec3 tmpvar_26;
					  mediump vec3 tmpvar_27;
					  mediump vec3 tmpvar_28;
					  mediump vec3 albedo_29;
					  albedo_29 = tmpvar_3;
					  tmpvar_28 = (albedo_29 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_26 = tmpvar_28;
					  mediump vec3 diffColor_30;
					  diffColor_30 = tmpvar_26;
					  tmpvar_27 = tmpvar_26;
					  mediump vec4 outGBuffer2_31;
					  mediump vec4 tmpvar_32;
					  tmpvar_32.xyz = tmpvar_27;
					  tmpvar_32.w = 1.0;
					  mediump vec4 tmpvar_33;
					  tmpvar_33.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_29, vec3(_Metallic));
					  tmpvar_33.w = _Glossiness;
					  highp vec4 tmpvar_34;
					  tmpvar_34.w = 1.0;
					  tmpvar_34.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_31 = tmpvar_34;
					  mediump vec4 tmpvar_35;
					  tmpvar_35.w = 1.0;
					  tmpvar_35.xyz = (tmpvar_4 + ((tmpvar_20 + 
					    (((unity_Lightmap_HDR.x * color_22.xyz) * (dot (normalWorld_13, y_24) + 0.5)) / tmpvar_25)
					  ) * diffColor_30));
					  outEmission_1.w = tmpvar_35.w;
					  outEmission_1.xyz = exp2(-(tmpvar_35.xyz));
					  gl_FragData[0] = tmpvar_32;
					  gl_FragData[1] = tmpvar_33;
					  gl_FragData[2] = outGBuffer2_31;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (_WorldSpaceCameraPos - tmpvar_4);
					  tmpvar_1 = tmpvar_6;
					  tmpvar_2.zw = vec2(0.0, 0.0);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_4;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_1;
					  xlv_TEXCOORD4 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2 = xlv_COLOR0;
					  lowp vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec4 emissionSample_5;
					  highp vec4 diffuseSample_6;
					  highp vec4 nightSample_7;
					  highp vec4 daySample_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_8 = tmpvar_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_7 = tmpvar_10;
					  diffuseSample_6 = (mix (nightSample_7, daySample_8, vec4(_DayWeight)) * _Color);
					  diffuseSample_6.xyz = (diffuseSample_6.xyz * tmpvar_2.xyz);
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_5 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = ((emissionSample_5.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_3 = diffuseSample_6.xyz;
					  tmpvar_4 = tmpvar_12;
					  mediump vec3 normalWorld_13;
					  normalWorld_13 = xlv_TEXCOORD1;
					  lowp vec4 bakedDirTex_14;
					  mediump vec3 tmpvar_15;
					  mediump vec3 ambient_16;
					  mediump vec4 tmpvar_17;
					  tmpvar_17.w = 1.0;
					  tmpvar_17.xyz = normalWorld_13;
					  mediump vec3 x_18;
					  x_18.x = dot (unity_SHAr, tmpvar_17);
					  x_18.y = dot (unity_SHAg, tmpvar_17);
					  x_18.z = dot (unity_SHAb, tmpvar_17);
					  mediump vec3 x1_19;
					  mediump vec4 tmpvar_20;
					  tmpvar_20 = (normalWorld_13.xyzz * normalWorld_13.yzzx);
					  x1_19.x = dot (unity_SHBr, tmpvar_20);
					  x1_19.y = dot (unity_SHBg, tmpvar_20);
					  x1_19.z = dot (unity_SHBb, tmpvar_20);
					  ambient_16 = max (vec3(0.0, 0.0, 0.0), (x_18 + (x1_19 + 
					    (unity_SHC.xyz * ((normalWorld_13.x * normalWorld_13.x) - (normalWorld_13.y * normalWorld_13.y)))
					  )));
					  mediump vec3 tmpvar_21;
					  tmpvar_21 = max (((1.055 * 
					    pow (max (ambient_16, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  ambient_16 = tmpvar_21;
					  mediump vec4 tmpvar_22;
					  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_23;
					  color_23 = tmpvar_22;
					  mediump vec4 tmpvar_24;
					  tmpvar_24 = texture2D (unity_LightmapInd, xlv_TEXCOORD4.xy);
					  bakedDirTex_14 = tmpvar_24;
					  lowp vec3 y_25;
					  y_25 = (bakedDirTex_14.xyz - 0.5);
					  lowp float tmpvar_26;
					  tmpvar_26 = max (0.0001, bakedDirTex_14.w);
					  tmpvar_15 = (tmpvar_21 + ((
					    (unity_Lightmap_HDR.x * color_23.xyz)
					   * 
					    (dot (normalWorld_13, y_25) + 0.5)
					  ) / tmpvar_26));
					  lowp vec3 tmpvar_27;
					  mediump vec3 tmpvar_28;
					  mediump vec3 tmpvar_29;
					  mediump vec3 albedo_30;
					  albedo_30 = tmpvar_3;
					  tmpvar_29 = (albedo_30 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_27 = tmpvar_29;
					  mediump vec3 diffColor_31;
					  diffColor_31 = tmpvar_27;
					  mediump vec3 color_32;
					  highp vec3 tmpvar_33;
					  tmpvar_33 = (tmpvar_15 * diffColor_31);
					  color_32 = tmpvar_33;
					  tmpvar_28 = tmpvar_27;
					  mediump vec4 outGBuffer2_34;
					  mediump vec4 tmpvar_35;
					  tmpvar_35.xyz = tmpvar_28;
					  tmpvar_35.w = 1.0;
					  mediump vec4 tmpvar_36;
					  tmpvar_36.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_30, vec3(_Metallic));
					  tmpvar_36.w = _Glossiness;
					  highp vec4 tmpvar_37;
					  tmpvar_37.w = 1.0;
					  tmpvar_37.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_34 = tmpvar_37;
					  mediump vec4 tmpvar_38;
					  tmpvar_38.w = 1.0;
					  tmpvar_38.xyz = (tmpvar_4 + color_32);
					  outEmission_1.w = tmpvar_38.w;
					  outEmission_1.xyz = exp2(-(tmpvar_38.xyz));
					  gl_FragData[0] = tmpvar_35;
					  gl_FragData[1] = tmpvar_36;
					  gl_FragData[2] = outGBuffer2_34;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (_WorldSpaceCameraPos - tmpvar_4);
					  tmpvar_1 = tmpvar_6;
					  tmpvar_2.zw = vec2(0.0, 0.0);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_4;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_1;
					  xlv_TEXCOORD4 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2 = xlv_COLOR0;
					  lowp vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec4 emissionSample_5;
					  highp vec4 diffuseSample_6;
					  highp vec4 nightSample_7;
					  highp vec4 daySample_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_8 = tmpvar_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_7 = tmpvar_10;
					  diffuseSample_6 = (mix (nightSample_7, daySample_8, vec4(_DayWeight)) * _Color);
					  diffuseSample_6.xyz = (diffuseSample_6.xyz * tmpvar_2.xyz);
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_5 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = ((emissionSample_5.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_3 = diffuseSample_6.xyz;
					  tmpvar_4 = tmpvar_12;
					  mediump vec3 normalWorld_13;
					  normalWorld_13 = xlv_TEXCOORD1;
					  lowp vec4 bakedDirTex_14;
					  mediump vec3 tmpvar_15;
					  mediump vec3 ambient_16;
					  mediump vec4 tmpvar_17;
					  tmpvar_17.w = 1.0;
					  tmpvar_17.xyz = normalWorld_13;
					  mediump vec3 x_18;
					  x_18.x = dot (unity_SHAr, tmpvar_17);
					  x_18.y = dot (unity_SHAg, tmpvar_17);
					  x_18.z = dot (unity_SHAb, tmpvar_17);
					  mediump vec3 x1_19;
					  mediump vec4 tmpvar_20;
					  tmpvar_20 = (normalWorld_13.xyzz * normalWorld_13.yzzx);
					  x1_19.x = dot (unity_SHBr, tmpvar_20);
					  x1_19.y = dot (unity_SHBg, tmpvar_20);
					  x1_19.z = dot (unity_SHBb, tmpvar_20);
					  ambient_16 = max (vec3(0.0, 0.0, 0.0), (x_18 + (x1_19 + 
					    (unity_SHC.xyz * ((normalWorld_13.x * normalWorld_13.x) - (normalWorld_13.y * normalWorld_13.y)))
					  )));
					  mediump vec3 tmpvar_21;
					  tmpvar_21 = max (((1.055 * 
					    pow (max (ambient_16, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  ambient_16 = tmpvar_21;
					  mediump vec4 tmpvar_22;
					  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_23;
					  color_23 = tmpvar_22;
					  mediump vec4 tmpvar_24;
					  tmpvar_24 = texture2D (unity_LightmapInd, xlv_TEXCOORD4.xy);
					  bakedDirTex_14 = tmpvar_24;
					  lowp vec3 y_25;
					  y_25 = (bakedDirTex_14.xyz - 0.5);
					  lowp float tmpvar_26;
					  tmpvar_26 = max (0.0001, bakedDirTex_14.w);
					  tmpvar_15 = (tmpvar_21 + ((
					    (unity_Lightmap_HDR.x * color_23.xyz)
					   * 
					    (dot (normalWorld_13, y_25) + 0.5)
					  ) / tmpvar_26));
					  lowp vec3 tmpvar_27;
					  mediump vec3 tmpvar_28;
					  mediump vec3 tmpvar_29;
					  mediump vec3 albedo_30;
					  albedo_30 = tmpvar_3;
					  tmpvar_29 = (albedo_30 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_27 = tmpvar_29;
					  mediump vec3 diffColor_31;
					  diffColor_31 = tmpvar_27;
					  mediump vec3 color_32;
					  highp vec3 tmpvar_33;
					  tmpvar_33 = (tmpvar_15 * diffColor_31);
					  color_32 = tmpvar_33;
					  tmpvar_28 = tmpvar_27;
					  mediump vec4 outGBuffer2_34;
					  mediump vec4 tmpvar_35;
					  tmpvar_35.xyz = tmpvar_28;
					  tmpvar_35.w = 1.0;
					  mediump vec4 tmpvar_36;
					  tmpvar_36.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_30, vec3(_Metallic));
					  tmpvar_36.w = _Glossiness;
					  highp vec4 tmpvar_37;
					  tmpvar_37.w = 1.0;
					  tmpvar_37.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_34 = tmpvar_37;
					  mediump vec4 tmpvar_38;
					  tmpvar_38.w = 1.0;
					  tmpvar_38.xyz = (tmpvar_4 + color_32);
					  outEmission_1.w = tmpvar_38.w;
					  outEmission_1.xyz = exp2(-(tmpvar_38.xyz));
					  gl_FragData[0] = tmpvar_35;
					  gl_FragData[1] = tmpvar_36;
					  gl_FragData[2] = outGBuffer2_34;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					float u_xlat19;
					mediump float u_xlat16_19;
					mediump float u_xlat16_20;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat16_20 = vs_TEXCOORD1.y * vs_TEXCOORD1.y;
					    u_xlat16_20 = vs_TEXCOORD1.x * vs_TEXCOORD1.x + (-u_xlat16_20);
					    u_xlat16_0 = vs_TEXCOORD1.yzzx * vs_TEXCOORD1.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_20) + u_xlat16_3.xyz;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_5.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_5.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_0 = texture(unity_LightmapInd, vs_TEXCOORD4.xy);
					    u_xlat16_4.xyz = u_xlat16_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_19 = max(u_xlat16_0.w, 9.99999975e-05);
					    u_xlat16_20 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_20 = u_xlat16_20 + 0.5;
					    u_xlat16_3.xyz = vec3(u_xlat16_20) * u_xlat16_3.xyz;
					    u_xlat16_5.xyz = u_xlat16_3.xyz / vec3(u_xlat16_19);
					    u_xlat16_3.xyz = u_xlat16_1.xyz + u_xlat16_5.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_1.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
					    u_xlat19 = (-_DayWeight) + 1.0;
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat19) + u_xlat16_2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					float u_xlat19;
					mediump float u_xlat16_19;
					mediump float u_xlat16_20;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat16_20 = vs_TEXCOORD1.y * vs_TEXCOORD1.y;
					    u_xlat16_20 = vs_TEXCOORD1.x * vs_TEXCOORD1.x + (-u_xlat16_20);
					    u_xlat16_0 = vs_TEXCOORD1.yzzx * vs_TEXCOORD1.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_20) + u_xlat16_3.xyz;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_5.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_5.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_0 = texture(unity_LightmapInd, vs_TEXCOORD4.xy);
					    u_xlat16_4.xyz = u_xlat16_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_19 = max(u_xlat16_0.w, 9.99999975e-05);
					    u_xlat16_20 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_20 = u_xlat16_20 + 0.5;
					    u_xlat16_3.xyz = vec3(u_xlat16_20) * u_xlat16_3.xyz;
					    u_xlat16_5.xyz = u_xlat16_3.xyz / vec3(u_xlat16_19);
					    u_xlat16_3.xyz = u_xlat16_1.xyz + u_xlat16_5.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_1.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
					    u_xlat19 = (-_DayWeight) + 1.0;
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat19) + u_xlat16_2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					float u_xlat19;
					mediump float u_xlat16_19;
					mediump float u_xlat16_20;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat16_20 = vs_TEXCOORD1.y * vs_TEXCOORD1.y;
					    u_xlat16_20 = vs_TEXCOORD1.x * vs_TEXCOORD1.x + (-u_xlat16_20);
					    u_xlat16_0 = vs_TEXCOORD1.yzzx * vs_TEXCOORD1.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_20) + u_xlat16_3.xyz;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_5.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_5.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_0 = texture(unity_LightmapInd, vs_TEXCOORD4.xy);
					    u_xlat16_4.xyz = u_xlat16_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_19 = max(u_xlat16_0.w, 9.99999975e-05);
					    u_xlat16_20 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_20 = u_xlat16_20 + 0.5;
					    u_xlat16_3.xyz = vec3(u_xlat16_20) * u_xlat16_3.xyz;
					    u_xlat16_5.xyz = u_xlat16_3.xyz / vec3(u_xlat16_19);
					    u_xlat16_3.xyz = u_xlat16_1.xyz + u_xlat16_5.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_1.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
					    u_xlat19 = (-_DayWeight) + 1.0;
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat19) + u_xlat16_2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (_WorldSpaceCameraPos - tmpvar_4);
					  tmpvar_1 = tmpvar_6;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_4;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_1;
					  xlv_TEXCOORD4 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2 = xlv_COLOR0;
					  lowp vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec4 emissionSample_5;
					  highp vec4 diffuseSample_6;
					  highp vec4 nightSample_7;
					  highp vec4 daySample_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_8 = tmpvar_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_7 = tmpvar_10;
					  diffuseSample_6 = (mix (nightSample_7, daySample_8, vec4(_DayWeight)) * _Color);
					  diffuseSample_6.xyz = (diffuseSample_6.xyz * tmpvar_2.xyz);
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_5 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = ((emissionSample_5.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_3 = diffuseSample_6.xyz;
					  tmpvar_4 = tmpvar_12;
					  mediump vec3 normalWorld_13;
					  normalWorld_13 = xlv_TEXCOORD1;
					  mediump vec4 realtimeDirTex_14;
					  lowp vec4 bakedDirTex_15;
					  mediump vec3 tmpvar_16;
					  mediump vec4 tmpvar_17;
					  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_18;
					  color_18 = tmpvar_17;
					  mediump vec4 tmpvar_19;
					  tmpvar_19 = texture2D (unity_LightmapInd, xlv_TEXCOORD4.xy);
					  bakedDirTex_15 = tmpvar_19;
					  lowp vec3 y_20;
					  y_20 = (bakedDirTex_15.xyz - 0.5);
					  lowp float tmpvar_21;
					  tmpvar_21 = max (0.0001, bakedDirTex_15.w);
					  tmpvar_16 = (((unity_Lightmap_HDR.x * color_18.xyz) * (
					    dot (normalWorld_13, y_20)
					   + 0.5)) / tmpvar_21);
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD4.zw);
					  lowp vec4 tmpvar_23;
					  tmpvar_23 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD4.zw);
					  realtimeDirTex_14 = tmpvar_23;
					  lowp vec4 dirTex_24;
					  dirTex_24 = realtimeDirTex_14;
					  lowp vec3 y_25;
					  y_25 = (dirTex_24.xyz - 0.5);
					  lowp float tmpvar_26;
					  tmpvar_26 = max (0.0001, dirTex_24.w);
					  tmpvar_16 = (tmpvar_16 + ((
					    pow (((unity_DynamicLightmap_HDR.x * tmpvar_22.w) * tmpvar_22.xyz), unity_DynamicLightmap_HDR.yyy)
					   * 
					    (dot (normalWorld_13, y_25) + 0.5)
					  ) / tmpvar_26));
					  lowp vec3 tmpvar_27;
					  mediump vec3 tmpvar_28;
					  mediump vec3 tmpvar_29;
					  mediump vec3 albedo_30;
					  albedo_30 = tmpvar_3;
					  tmpvar_29 = (albedo_30 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_27 = tmpvar_29;
					  mediump vec3 diffColor_31;
					  diffColor_31 = tmpvar_27;
					  tmpvar_28 = tmpvar_27;
					  mediump vec4 outGBuffer2_32;
					  mediump vec4 tmpvar_33;
					  tmpvar_33.xyz = tmpvar_28;
					  tmpvar_33.w = 1.0;
					  mediump vec4 tmpvar_34;
					  tmpvar_34.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_30, vec3(_Metallic));
					  tmpvar_34.w = _Glossiness;
					  highp vec4 tmpvar_35;
					  tmpvar_35.w = 1.0;
					  tmpvar_35.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_32 = tmpvar_35;
					  mediump vec4 tmpvar_36;
					  tmpvar_36.w = 1.0;
					  tmpvar_36.xyz = (tmpvar_4 + (tmpvar_16 * diffColor_31));
					  outEmission_1.w = tmpvar_36.w;
					  outEmission_1.xyz = exp2(-(tmpvar_36.xyz));
					  gl_FragData[0] = tmpvar_33;
					  gl_FragData[1] = tmpvar_34;
					  gl_FragData[2] = outGBuffer2_32;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (_WorldSpaceCameraPos - tmpvar_4);
					  tmpvar_1 = tmpvar_6;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_4;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_1;
					  xlv_TEXCOORD4 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2 = xlv_COLOR0;
					  lowp vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec4 emissionSample_5;
					  highp vec4 diffuseSample_6;
					  highp vec4 nightSample_7;
					  highp vec4 daySample_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_8 = tmpvar_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_7 = tmpvar_10;
					  diffuseSample_6 = (mix (nightSample_7, daySample_8, vec4(_DayWeight)) * _Color);
					  diffuseSample_6.xyz = (diffuseSample_6.xyz * tmpvar_2.xyz);
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_5 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = ((emissionSample_5.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_3 = diffuseSample_6.xyz;
					  tmpvar_4 = tmpvar_12;
					  mediump vec3 normalWorld_13;
					  normalWorld_13 = xlv_TEXCOORD1;
					  mediump vec4 realtimeDirTex_14;
					  lowp vec4 bakedDirTex_15;
					  mediump vec3 tmpvar_16;
					  mediump vec4 tmpvar_17;
					  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_18;
					  color_18 = tmpvar_17;
					  mediump vec4 tmpvar_19;
					  tmpvar_19 = texture2D (unity_LightmapInd, xlv_TEXCOORD4.xy);
					  bakedDirTex_15 = tmpvar_19;
					  lowp vec3 y_20;
					  y_20 = (bakedDirTex_15.xyz - 0.5);
					  lowp float tmpvar_21;
					  tmpvar_21 = max (0.0001, bakedDirTex_15.w);
					  tmpvar_16 = (((unity_Lightmap_HDR.x * color_18.xyz) * (
					    dot (normalWorld_13, y_20)
					   + 0.5)) / tmpvar_21);
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD4.zw);
					  lowp vec4 tmpvar_23;
					  tmpvar_23 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD4.zw);
					  realtimeDirTex_14 = tmpvar_23;
					  lowp vec4 dirTex_24;
					  dirTex_24 = realtimeDirTex_14;
					  lowp vec3 y_25;
					  y_25 = (dirTex_24.xyz - 0.5);
					  lowp float tmpvar_26;
					  tmpvar_26 = max (0.0001, dirTex_24.w);
					  tmpvar_16 = (tmpvar_16 + ((
					    pow (((unity_DynamicLightmap_HDR.x * tmpvar_22.w) * tmpvar_22.xyz), unity_DynamicLightmap_HDR.yyy)
					   * 
					    (dot (normalWorld_13, y_25) + 0.5)
					  ) / tmpvar_26));
					  lowp vec3 tmpvar_27;
					  mediump vec3 tmpvar_28;
					  mediump vec3 tmpvar_29;
					  mediump vec3 albedo_30;
					  albedo_30 = tmpvar_3;
					  tmpvar_29 = (albedo_30 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_27 = tmpvar_29;
					  mediump vec3 diffColor_31;
					  diffColor_31 = tmpvar_27;
					  mediump vec3 color_32;
					  highp vec3 tmpvar_33;
					  tmpvar_33 = (tmpvar_16 * diffColor_31);
					  color_32 = tmpvar_33;
					  tmpvar_28 = tmpvar_27;
					  mediump vec4 outGBuffer2_34;
					  mediump vec4 tmpvar_35;
					  tmpvar_35.xyz = tmpvar_28;
					  tmpvar_35.w = 1.0;
					  mediump vec4 tmpvar_36;
					  tmpvar_36.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_30, vec3(_Metallic));
					  tmpvar_36.w = _Glossiness;
					  highp vec4 tmpvar_37;
					  tmpvar_37.w = 1.0;
					  tmpvar_37.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_34 = tmpvar_37;
					  mediump vec4 tmpvar_38;
					  tmpvar_38.w = 1.0;
					  tmpvar_38.xyz = (tmpvar_4 + color_32);
					  outEmission_1.w = tmpvar_38.w;
					  outEmission_1.xyz = exp2(-(tmpvar_38.xyz));
					  gl_FragData[0] = tmpvar_35;
					  gl_FragData[1] = tmpvar_36;
					  gl_FragData[2] = outGBuffer2_34;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (_WorldSpaceCameraPos - tmpvar_4);
					  tmpvar_1 = tmpvar_6;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_4;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_1;
					  xlv_TEXCOORD4 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2 = xlv_COLOR0;
					  lowp vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec4 emissionSample_5;
					  highp vec4 diffuseSample_6;
					  highp vec4 nightSample_7;
					  highp vec4 daySample_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_8 = tmpvar_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_7 = tmpvar_10;
					  diffuseSample_6 = (mix (nightSample_7, daySample_8, vec4(_DayWeight)) * _Color);
					  diffuseSample_6.xyz = (diffuseSample_6.xyz * tmpvar_2.xyz);
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_5 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = ((emissionSample_5.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_3 = diffuseSample_6.xyz;
					  tmpvar_4 = tmpvar_12;
					  mediump vec3 normalWorld_13;
					  normalWorld_13 = xlv_TEXCOORD1;
					  mediump vec4 realtimeDirTex_14;
					  lowp vec4 bakedDirTex_15;
					  mediump vec3 tmpvar_16;
					  mediump vec4 tmpvar_17;
					  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_18;
					  color_18 = tmpvar_17;
					  mediump vec4 tmpvar_19;
					  tmpvar_19 = texture2D (unity_LightmapInd, xlv_TEXCOORD4.xy);
					  bakedDirTex_15 = tmpvar_19;
					  lowp vec3 y_20;
					  y_20 = (bakedDirTex_15.xyz - 0.5);
					  lowp float tmpvar_21;
					  tmpvar_21 = max (0.0001, bakedDirTex_15.w);
					  tmpvar_16 = (((unity_Lightmap_HDR.x * color_18.xyz) * (
					    dot (normalWorld_13, y_20)
					   + 0.5)) / tmpvar_21);
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD4.zw);
					  lowp vec4 tmpvar_23;
					  tmpvar_23 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD4.zw);
					  realtimeDirTex_14 = tmpvar_23;
					  lowp vec4 dirTex_24;
					  dirTex_24 = realtimeDirTex_14;
					  lowp vec3 y_25;
					  y_25 = (dirTex_24.xyz - 0.5);
					  lowp float tmpvar_26;
					  tmpvar_26 = max (0.0001, dirTex_24.w);
					  tmpvar_16 = (tmpvar_16 + ((
					    pow (((unity_DynamicLightmap_HDR.x * tmpvar_22.w) * tmpvar_22.xyz), unity_DynamicLightmap_HDR.yyy)
					   * 
					    (dot (normalWorld_13, y_25) + 0.5)
					  ) / tmpvar_26));
					  lowp vec3 tmpvar_27;
					  mediump vec3 tmpvar_28;
					  mediump vec3 tmpvar_29;
					  mediump vec3 albedo_30;
					  albedo_30 = tmpvar_3;
					  tmpvar_29 = (albedo_30 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_27 = tmpvar_29;
					  mediump vec3 diffColor_31;
					  diffColor_31 = tmpvar_27;
					  mediump vec3 color_32;
					  highp vec3 tmpvar_33;
					  tmpvar_33 = (tmpvar_16 * diffColor_31);
					  color_32 = tmpvar_33;
					  tmpvar_28 = tmpvar_27;
					  mediump vec4 outGBuffer2_34;
					  mediump vec4 tmpvar_35;
					  tmpvar_35.xyz = tmpvar_28;
					  tmpvar_35.w = 1.0;
					  mediump vec4 tmpvar_36;
					  tmpvar_36.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_30, vec3(_Metallic));
					  tmpvar_36.w = _Glossiness;
					  highp vec4 tmpvar_37;
					  tmpvar_37.w = 1.0;
					  tmpvar_37.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_34 = tmpvar_37;
					  mediump vec4 tmpvar_38;
					  tmpvar_38.w = 1.0;
					  tmpvar_38.xyz = (tmpvar_4 + color_32);
					  outEmission_1.w = tmpvar_38.w;
					  outEmission_1.xyz = exp2(-(tmpvar_38.xyz));
					  gl_FragData[0] = tmpvar_35;
					  gl_FragData[1] = tmpvar_36;
					  gl_FragData[2] = outGBuffer2_34;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					mediump float u_xlat16_15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat16_17 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_17);
					    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD4.zw);
					    u_xlat16_4.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_17 = u_xlat16_17 + 0.5;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * u_xlat16_3.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz / u_xlat16_0.xxx;
					    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1 = texture(unity_LightmapInd, vs_TEXCOORD4.xy);
					    u_xlat16_4.xyz = u_xlat16_1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_15 = max(u_xlat16_1.w, 9.99999975e-05);
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_17 = u_xlat16_17 + 0.5;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * u_xlat16_3.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz / vec3(u_xlat16_15);
					    u_xlat16_3.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat15 = (-_DayWeight) + 1.0;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat16_2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					mediump float u_xlat16_15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat16_17 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_17);
					    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD4.zw);
					    u_xlat16_4.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_17 = u_xlat16_17 + 0.5;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * u_xlat16_3.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz / u_xlat16_0.xxx;
					    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1 = texture(unity_LightmapInd, vs_TEXCOORD4.xy);
					    u_xlat16_4.xyz = u_xlat16_1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_15 = max(u_xlat16_1.w, 9.99999975e-05);
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_17 = u_xlat16_17 + 0.5;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * u_xlat16_3.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz / vec3(u_xlat16_15);
					    u_xlat16_3.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat15 = (-_DayWeight) + 1.0;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat16_2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					mediump float u_xlat16_15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat16_17 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_17);
					    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD4.zw);
					    u_xlat16_4.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_17 = u_xlat16_17 + 0.5;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * u_xlat16_3.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz / u_xlat16_0.xxx;
					    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1 = texture(unity_LightmapInd, vs_TEXCOORD4.xy);
					    u_xlat16_4.xyz = u_xlat16_1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_15 = max(u_xlat16_1.w, 9.99999975e-05);
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_17 = u_xlat16_17 + 0.5;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * u_xlat16_3.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz / vec3(u_xlat16_15);
					    u_xlat16_3.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat15 = (-_DayWeight) + 1.0;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat16_2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					varying mediump vec3 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_4;
					  tmpvar_4 = normalize((_glesNormal * tmpvar_3));
					  tmpvar_1.zw = vec2(0.0, 0.0);
					  tmpvar_1.xy = vec2(0.0, 0.0);
					  mediump vec3 normal_5;
					  normal_5 = tmpvar_4;
					  mediump vec3 x1_6;
					  mediump vec4 tmpvar_7;
					  tmpvar_7 = (normal_5.xyzz * normal_5.yzzx);
					  x1_6.x = dot (unity_SHBr, tmpvar_7);
					  x1_6.y = dot (unity_SHBg, tmpvar_7);
					  x1_6.z = dot (unity_SHBb, tmpvar_7);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_4;
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_1;
					  xlv_TEXCOORD5 = (x1_6 + (unity_SHC.xyz * (
					    (normal_5.x * normal_5.x)
					   - 
					    (normal_5.y * normal_5.y)
					  )));
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = xlv_COLOR0;
					  lowp vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  highp vec4 emissionSample_4;
					  highp vec4 diffuseSample_5;
					  highp vec4 nightSample_6;
					  highp vec4 daySample_7;
					  lowp vec4 tmpvar_8;
					  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_7 = tmpvar_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_6 = tmpvar_9;
					  diffuseSample_5 = (mix (nightSample_6, daySample_7, vec4(_DayWeight)) * _Color);
					  diffuseSample_5.xyz = (diffuseSample_5.xyz * tmpvar_1.xyz);
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_4 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = ((emissionSample_4.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_2 = diffuseSample_5.xyz;
					  tmpvar_3 = tmpvar_11;
					  mediump vec3 normalWorld_12;
					  normalWorld_12 = xlv_TEXCOORD1;
					  mediump vec4 tmpvar_13;
					  tmpvar_13.w = 1.0;
					  tmpvar_13.xyz = normalWorld_12;
					  mediump vec3 x_14;
					  x_14.x = dot (unity_SHAr, tmpvar_13);
					  x_14.y = dot (unity_SHAg, tmpvar_13);
					  x_14.z = dot (unity_SHAb, tmpvar_13);
					  lowp vec3 tmpvar_15;
					  mediump vec3 tmpvar_16;
					  mediump vec3 tmpvar_17;
					  mediump vec3 albedo_18;
					  albedo_18 = tmpvar_2;
					  tmpvar_17 = (albedo_18 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_15 = tmpvar_17;
					  mediump vec3 diffColor_19;
					  diffColor_19 = tmpvar_15;
					  tmpvar_16 = tmpvar_15;
					  mediump vec4 outGBuffer2_20;
					  mediump vec4 tmpvar_21;
					  tmpvar_21.xyz = tmpvar_16;
					  tmpvar_21.w = 1.0;
					  mediump vec4 tmpvar_22;
					  tmpvar_22.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_18, vec3(_Metallic));
					  tmpvar_22.w = _Glossiness;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_20 = tmpvar_23;
					  mediump vec4 tmpvar_24;
					  tmpvar_24.w = 1.0;
					  tmpvar_24.xyz = (tmpvar_3 + (max (
					    ((1.055 * pow (max (vec3(0.0, 0.0, 0.0), 
					      (xlv_TEXCOORD5 + x_14)
					    ), vec3(0.4166667, 0.4166667, 0.4166667))) - 0.055)
					  , vec3(0.0, 0.0, 0.0)) * diffColor_19));
					  gl_FragData[0] = tmpvar_21;
					  gl_FragData[1] = tmpvar_22;
					  gl_FragData[2] = outGBuffer2_20;
					  gl_FragData[3] = tmpvar_24;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					varying mediump vec3 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_4;
					  tmpvar_4 = normalize((_glesNormal * tmpvar_3));
					  tmpvar_1.zw = vec2(0.0, 0.0);
					  tmpvar_1.xy = vec2(0.0, 0.0);
					  mediump vec3 normal_5;
					  normal_5 = tmpvar_4;
					  mediump vec3 x1_6;
					  mediump vec4 tmpvar_7;
					  tmpvar_7 = (normal_5.xyzz * normal_5.yzzx);
					  x1_6.x = dot (unity_SHBr, tmpvar_7);
					  x1_6.y = dot (unity_SHBg, tmpvar_7);
					  x1_6.z = dot (unity_SHBb, tmpvar_7);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_4;
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_1;
					  xlv_TEXCOORD5 = (x1_6 + (unity_SHC.xyz * (
					    (normal_5.x * normal_5.x)
					   - 
					    (normal_5.y * normal_5.y)
					  )));
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = xlv_COLOR0;
					  lowp vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  highp vec4 emissionSample_4;
					  highp vec4 diffuseSample_5;
					  highp vec4 nightSample_6;
					  highp vec4 daySample_7;
					  lowp vec4 tmpvar_8;
					  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_7 = tmpvar_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_6 = tmpvar_9;
					  diffuseSample_5 = (mix (nightSample_6, daySample_7, vec4(_DayWeight)) * _Color);
					  diffuseSample_5.xyz = (diffuseSample_5.xyz * tmpvar_1.xyz);
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_4 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = ((emissionSample_4.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_2 = diffuseSample_5.xyz;
					  tmpvar_3 = tmpvar_11;
					  mediump vec3 normalWorld_12;
					  normalWorld_12 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_13;
					  mediump vec4 tmpvar_14;
					  tmpvar_14.w = 1.0;
					  tmpvar_14.xyz = normalWorld_12;
					  mediump vec3 x_15;
					  x_15.x = dot (unity_SHAr, tmpvar_14);
					  x_15.y = dot (unity_SHAg, tmpvar_14);
					  x_15.z = dot (unity_SHAb, tmpvar_14);
					  tmpvar_13 = max (((1.055 * 
					    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5 + x_15)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  lowp vec3 tmpvar_16;
					  mediump vec3 tmpvar_17;
					  mediump vec3 tmpvar_18;
					  mediump vec3 albedo_19;
					  albedo_19 = tmpvar_2;
					  tmpvar_18 = (albedo_19 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_16 = tmpvar_18;
					  mediump vec3 diffColor_20;
					  diffColor_20 = tmpvar_16;
					  mediump vec3 color_21;
					  highp vec3 tmpvar_22;
					  tmpvar_22 = (tmpvar_13 * diffColor_20);
					  color_21 = tmpvar_22;
					  tmpvar_17 = tmpvar_16;
					  mediump vec4 outGBuffer2_23;
					  mediump vec4 tmpvar_24;
					  tmpvar_24.xyz = tmpvar_17;
					  tmpvar_24.w = 1.0;
					  mediump vec4 tmpvar_25;
					  tmpvar_25.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_19, vec3(_Metallic));
					  tmpvar_25.w = _Glossiness;
					  highp vec4 tmpvar_26;
					  tmpvar_26.w = 1.0;
					  tmpvar_26.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_23 = tmpvar_26;
					  mediump vec4 tmpvar_27;
					  tmpvar_27.w = 1.0;
					  tmpvar_27.xyz = (tmpvar_3 + color_21);
					  gl_FragData[0] = tmpvar_24;
					  gl_FragData[1] = tmpvar_25;
					  gl_FragData[2] = outGBuffer2_23;
					  gl_FragData[3] = tmpvar_27;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					varying mediump vec3 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_4;
					  tmpvar_4 = normalize((_glesNormal * tmpvar_3));
					  tmpvar_1.zw = vec2(0.0, 0.0);
					  tmpvar_1.xy = vec2(0.0, 0.0);
					  mediump vec3 normal_5;
					  normal_5 = tmpvar_4;
					  mediump vec3 x1_6;
					  mediump vec4 tmpvar_7;
					  tmpvar_7 = (normal_5.xyzz * normal_5.yzzx);
					  x1_6.x = dot (unity_SHBr, tmpvar_7);
					  x1_6.y = dot (unity_SHBg, tmpvar_7);
					  x1_6.z = dot (unity_SHBb, tmpvar_7);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_4;
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_1;
					  xlv_TEXCOORD5 = (x1_6 + (unity_SHC.xyz * (
					    (normal_5.x * normal_5.x)
					   - 
					    (normal_5.y * normal_5.y)
					  )));
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = xlv_COLOR0;
					  lowp vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  highp vec4 emissionSample_4;
					  highp vec4 diffuseSample_5;
					  highp vec4 nightSample_6;
					  highp vec4 daySample_7;
					  lowp vec4 tmpvar_8;
					  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_7 = tmpvar_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_6 = tmpvar_9;
					  diffuseSample_5 = (mix (nightSample_6, daySample_7, vec4(_DayWeight)) * _Color);
					  diffuseSample_5.xyz = (diffuseSample_5.xyz * tmpvar_1.xyz);
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_4 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = ((emissionSample_4.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_2 = diffuseSample_5.xyz;
					  tmpvar_3 = tmpvar_11;
					  mediump vec3 normalWorld_12;
					  normalWorld_12 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_13;
					  mediump vec4 tmpvar_14;
					  tmpvar_14.w = 1.0;
					  tmpvar_14.xyz = normalWorld_12;
					  mediump vec3 x_15;
					  x_15.x = dot (unity_SHAr, tmpvar_14);
					  x_15.y = dot (unity_SHAg, tmpvar_14);
					  x_15.z = dot (unity_SHAb, tmpvar_14);
					  tmpvar_13 = max (((1.055 * 
					    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5 + x_15)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  lowp vec3 tmpvar_16;
					  mediump vec3 tmpvar_17;
					  mediump vec3 tmpvar_18;
					  mediump vec3 albedo_19;
					  albedo_19 = tmpvar_2;
					  tmpvar_18 = (albedo_19 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_16 = tmpvar_18;
					  mediump vec3 diffColor_20;
					  diffColor_20 = tmpvar_16;
					  mediump vec3 color_21;
					  highp vec3 tmpvar_22;
					  tmpvar_22 = (tmpvar_13 * diffColor_20);
					  color_21 = tmpvar_22;
					  tmpvar_17 = tmpvar_16;
					  mediump vec4 outGBuffer2_23;
					  mediump vec4 tmpvar_24;
					  tmpvar_24.xyz = tmpvar_17;
					  tmpvar_24.w = 1.0;
					  mediump vec4 tmpvar_25;
					  tmpvar_25.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_19, vec3(_Metallic));
					  tmpvar_25.w = _Glossiness;
					  highp vec4 tmpvar_26;
					  tmpvar_26.w = 1.0;
					  tmpvar_26.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_23 = tmpvar_26;
					  mediump vec4 tmpvar_27;
					  tmpvar_27.w = 1.0;
					  tmpvar_27.xyz = (tmpvar_3 + color_21);
					  gl_FragData[0] = tmpvar_24;
					  gl_FragData[1] = tmpvar_25;
					  gl_FragData[2] = outGBuffer2_23;
					  gl_FragData[3] = tmpvar_27;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					out mediump vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat12 = (-_DayWeight) + 1.0;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					out mediump vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat12 = (-_DayWeight) + 1.0;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					out mediump vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat12 = (-_DayWeight) + 1.0;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_1.xy = vec2(0.0, 0.0);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform sampler2D unity_DynamicLightmap;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = xlv_COLOR0;
					  lowp vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  highp vec4 emissionSample_4;
					  highp vec4 diffuseSample_5;
					  highp vec4 nightSample_6;
					  highp vec4 daySample_7;
					  lowp vec4 tmpvar_8;
					  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_7 = tmpvar_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_6 = tmpvar_9;
					  diffuseSample_5 = (mix (nightSample_6, daySample_7, vec4(_DayWeight)) * _Color);
					  diffuseSample_5.xyz = (diffuseSample_5.xyz * tmpvar_1.xyz);
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_4 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = ((emissionSample_4.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_2 = diffuseSample_5.xyz;
					  tmpvar_3 = tmpvar_11;
					  lowp vec4 tmpvar_12;
					  tmpvar_12 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD4.zw);
					  lowp vec3 tmpvar_13;
					  mediump vec3 tmpvar_14;
					  mediump vec3 tmpvar_15;
					  mediump vec3 albedo_16;
					  albedo_16 = tmpvar_2;
					  tmpvar_15 = (albedo_16 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_13 = tmpvar_15;
					  mediump vec3 diffColor_17;
					  diffColor_17 = tmpvar_13;
					  tmpvar_14 = tmpvar_13;
					  mediump vec4 outGBuffer2_18;
					  mediump vec4 tmpvar_19;
					  tmpvar_19.xyz = tmpvar_14;
					  tmpvar_19.w = 1.0;
					  mediump vec4 tmpvar_20;
					  tmpvar_20.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_16, vec3(_Metallic));
					  tmpvar_20.w = _Glossiness;
					  highp vec4 tmpvar_21;
					  tmpvar_21.w = 1.0;
					  tmpvar_21.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_18 = tmpvar_21;
					  mediump vec4 tmpvar_22;
					  tmpvar_22.w = 1.0;
					  tmpvar_22.xyz = (tmpvar_3 + (pow (
					    ((unity_DynamicLightmap_HDR.x * tmpvar_12.w) * tmpvar_12.xyz)
					  , unity_DynamicLightmap_HDR.yyy) * diffColor_17));
					  gl_FragData[0] = tmpvar_19;
					  gl_FragData[1] = tmpvar_20;
					  gl_FragData[2] = outGBuffer2_18;
					  gl_FragData[3] = tmpvar_22;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_1.xy = vec2(0.0, 0.0);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform sampler2D unity_DynamicLightmap;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = xlv_COLOR0;
					  lowp vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  highp vec4 emissionSample_4;
					  highp vec4 diffuseSample_5;
					  highp vec4 nightSample_6;
					  highp vec4 daySample_7;
					  lowp vec4 tmpvar_8;
					  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_7 = tmpvar_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_6 = tmpvar_9;
					  diffuseSample_5 = (mix (nightSample_6, daySample_7, vec4(_DayWeight)) * _Color);
					  diffuseSample_5.xyz = (diffuseSample_5.xyz * tmpvar_1.xyz);
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_4 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = ((emissionSample_4.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_2 = diffuseSample_5.xyz;
					  tmpvar_3 = tmpvar_11;
					  mediump vec3 tmpvar_12;
					  lowp vec4 tmpvar_13;
					  tmpvar_13 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD4.zw);
					  tmpvar_12 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_13.w) * tmpvar_13.xyz), unity_DynamicLightmap_HDR.yyy);
					  lowp vec3 tmpvar_14;
					  mediump vec3 tmpvar_15;
					  mediump vec3 tmpvar_16;
					  mediump vec3 albedo_17;
					  albedo_17 = tmpvar_2;
					  tmpvar_16 = (albedo_17 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_14 = tmpvar_16;
					  mediump vec3 diffColor_18;
					  diffColor_18 = tmpvar_14;
					  mediump vec3 color_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = (tmpvar_12 * diffColor_18);
					  color_19 = tmpvar_20;
					  tmpvar_15 = tmpvar_14;
					  mediump vec4 outGBuffer2_21;
					  mediump vec4 tmpvar_22;
					  tmpvar_22.xyz = tmpvar_15;
					  tmpvar_22.w = 1.0;
					  mediump vec4 tmpvar_23;
					  tmpvar_23.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_17, vec3(_Metallic));
					  tmpvar_23.w = _Glossiness;
					  highp vec4 tmpvar_24;
					  tmpvar_24.w = 1.0;
					  tmpvar_24.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_21 = tmpvar_24;
					  mediump vec4 tmpvar_25;
					  tmpvar_25.w = 1.0;
					  tmpvar_25.xyz = (tmpvar_3 + color_19);
					  gl_FragData[0] = tmpvar_22;
					  gl_FragData[1] = tmpvar_23;
					  gl_FragData[2] = outGBuffer2_21;
					  gl_FragData[3] = tmpvar_25;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_1.xy = vec2(0.0, 0.0);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform sampler2D unity_DynamicLightmap;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = xlv_COLOR0;
					  lowp vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  highp vec4 emissionSample_4;
					  highp vec4 diffuseSample_5;
					  highp vec4 nightSample_6;
					  highp vec4 daySample_7;
					  lowp vec4 tmpvar_8;
					  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_7 = tmpvar_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_6 = tmpvar_9;
					  diffuseSample_5 = (mix (nightSample_6, daySample_7, vec4(_DayWeight)) * _Color);
					  diffuseSample_5.xyz = (diffuseSample_5.xyz * tmpvar_1.xyz);
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_4 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = ((emissionSample_4.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_2 = diffuseSample_5.xyz;
					  tmpvar_3 = tmpvar_11;
					  mediump vec3 tmpvar_12;
					  lowp vec4 tmpvar_13;
					  tmpvar_13 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD4.zw);
					  tmpvar_12 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_13.w) * tmpvar_13.xyz), unity_DynamicLightmap_HDR.yyy);
					  lowp vec3 tmpvar_14;
					  mediump vec3 tmpvar_15;
					  mediump vec3 tmpvar_16;
					  mediump vec3 albedo_17;
					  albedo_17 = tmpvar_2;
					  tmpvar_16 = (albedo_17 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_14 = tmpvar_16;
					  mediump vec3 diffColor_18;
					  diffColor_18 = tmpvar_14;
					  mediump vec3 color_19;
					  highp vec3 tmpvar_20;
					  tmpvar_20 = (tmpvar_12 * diffColor_18);
					  color_19 = tmpvar_20;
					  tmpvar_15 = tmpvar_14;
					  mediump vec4 outGBuffer2_21;
					  mediump vec4 tmpvar_22;
					  tmpvar_22.xyz = tmpvar_15;
					  tmpvar_22.w = 1.0;
					  mediump vec4 tmpvar_23;
					  tmpvar_23.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_17, vec3(_Metallic));
					  tmpvar_23.w = _Glossiness;
					  highp vec4 tmpvar_24;
					  tmpvar_24.w = 1.0;
					  tmpvar_24.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_21 = tmpvar_24;
					  mediump vec4 tmpvar_25;
					  tmpvar_25.w = 1.0;
					  tmpvar_25.xyz = (tmpvar_3 + color_19);
					  gl_FragData[0] = tmpvar_22;
					  gl_FragData[1] = tmpvar_23;
					  gl_FragData[2] = outGBuffer2_21;
					  gl_FragData[3] = tmpvar_25;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp sampler2D unity_DynamicLightmap;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat16_14 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_14);
					    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat12 = (-_DayWeight) + 1.0;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp sampler2D unity_DynamicLightmap;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat16_14 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_14);
					    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat12 = (-_DayWeight) + 1.0;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp sampler2D unity_DynamicLightmap;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat16_14 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_14);
					    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat12 = (-_DayWeight) + 1.0;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixV;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = _glesVertex;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = tmpvar_1.xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  tmpvar_2.zw = vec2(0.0, 0.0);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  tmpvar_3.xyz = ((tmpvar_5.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
					  highp vec4 tmpvar_7;
					  tmpvar_7.w = 1.0;
					  tmpvar_7.xyz = tmpvar_1.xyz;
					  tmpvar_3.w = (-((unity_MatrixV * 
					    (unity_ObjectToWorld * tmpvar_7)
					  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
					  xlv_TEXCOORD2 = tmpvar_5.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = xlv_COLOR0;
					  lowp vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  highp vec4 emissionSample_4;
					  highp vec4 diffuseSample_5;
					  highp vec4 nightSample_6;
					  highp vec4 daySample_7;
					  lowp vec4 tmpvar_8;
					  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_7 = tmpvar_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_6 = tmpvar_9;
					  diffuseSample_5 = (mix (nightSample_6, daySample_7, vec4(_DayWeight)) * _Color);
					  diffuseSample_5.xyz = (diffuseSample_5.xyz * tmpvar_1.xyz);
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_4 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = ((emissionSample_4.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_2 = diffuseSample_5.xyz;
					  tmpvar_3 = tmpvar_11;
					  mediump vec4 tmpvar_12;
					  tmpvar_12 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_13;
					  color_13 = tmpvar_12;
					  lowp vec3 tmpvar_14;
					  mediump vec3 tmpvar_15;
					  mediump vec3 tmpvar_16;
					  mediump vec3 albedo_17;
					  albedo_17 = tmpvar_2;
					  tmpvar_16 = (albedo_17 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_14 = tmpvar_16;
					  mediump vec3 diffColor_18;
					  diffColor_18 = tmpvar_14;
					  tmpvar_15 = tmpvar_14;
					  mediump vec4 outGBuffer2_19;
					  mediump vec4 tmpvar_20;
					  tmpvar_20.xyz = tmpvar_15;
					  tmpvar_20.w = 1.0;
					  mediump vec4 tmpvar_21;
					  tmpvar_21.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_17, vec3(_Metallic));
					  tmpvar_21.w = _Glossiness;
					  highp vec4 tmpvar_22;
					  tmpvar_22.w = 1.0;
					  tmpvar_22.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_19 = tmpvar_22;
					  mediump vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = (tmpvar_3 + ((unity_Lightmap_HDR.x * color_13.xyz) * diffColor_18));
					  gl_FragData[0] = tmpvar_20;
					  gl_FragData[1] = tmpvar_21;
					  gl_FragData[2] = outGBuffer2_19;
					  gl_FragData[3] = tmpvar_23;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixV;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = _glesVertex;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = tmpvar_1.xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  tmpvar_2.zw = vec2(0.0, 0.0);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  tmpvar_3.xyz = ((tmpvar_5.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
					  highp vec4 tmpvar_7;
					  tmpvar_7.w = 1.0;
					  tmpvar_7.xyz = tmpvar_1.xyz;
					  tmpvar_3.w = (-((unity_MatrixV * 
					    (unity_ObjectToWorld * tmpvar_7)
					  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
					  xlv_TEXCOORD2 = tmpvar_5.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = xlv_COLOR0;
					  lowp vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  highp vec4 emissionSample_4;
					  highp vec4 diffuseSample_5;
					  highp vec4 nightSample_6;
					  highp vec4 daySample_7;
					  lowp vec4 tmpvar_8;
					  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_7 = tmpvar_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_6 = tmpvar_9;
					  diffuseSample_5 = (mix (nightSample_6, daySample_7, vec4(_DayWeight)) * _Color);
					  diffuseSample_5.xyz = (diffuseSample_5.xyz * tmpvar_1.xyz);
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_4 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = ((emissionSample_4.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_2 = diffuseSample_5.xyz;
					  tmpvar_3 = tmpvar_11;
					  mediump vec3 tmpvar_12;
					  mediump vec4 tmpvar_13;
					  tmpvar_13 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_14;
					  color_14 = tmpvar_13;
					  tmpvar_12 = (unity_Lightmap_HDR.x * color_14.xyz);
					  lowp vec3 tmpvar_15;
					  mediump vec3 tmpvar_16;
					  mediump vec3 tmpvar_17;
					  mediump vec3 albedo_18;
					  albedo_18 = tmpvar_2;
					  tmpvar_17 = (albedo_18 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_15 = tmpvar_17;
					  mediump vec3 diffColor_19;
					  diffColor_19 = tmpvar_15;
					  mediump vec3 color_20;
					  highp vec3 tmpvar_21;
					  tmpvar_21 = (tmpvar_12 * diffColor_19);
					  color_20 = tmpvar_21;
					  tmpvar_16 = tmpvar_15;
					  mediump vec4 outGBuffer2_22;
					  mediump vec4 tmpvar_23;
					  tmpvar_23.xyz = tmpvar_16;
					  tmpvar_23.w = 1.0;
					  mediump vec4 tmpvar_24;
					  tmpvar_24.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_18, vec3(_Metallic));
					  tmpvar_24.w = _Glossiness;
					  highp vec4 tmpvar_25;
					  tmpvar_25.w = 1.0;
					  tmpvar_25.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_22 = tmpvar_25;
					  mediump vec4 tmpvar_26;
					  tmpvar_26.w = 1.0;
					  tmpvar_26.xyz = (tmpvar_3 + color_20);
					  gl_FragData[0] = tmpvar_23;
					  gl_FragData[1] = tmpvar_24;
					  gl_FragData[2] = outGBuffer2_22;
					  gl_FragData[3] = tmpvar_26;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixV;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = _glesVertex;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = tmpvar_1.xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  tmpvar_2.zw = vec2(0.0, 0.0);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  tmpvar_3.xyz = ((tmpvar_5.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
					  highp vec4 tmpvar_7;
					  tmpvar_7.w = 1.0;
					  tmpvar_7.xyz = tmpvar_1.xyz;
					  tmpvar_3.w = (-((unity_MatrixV * 
					    (unity_ObjectToWorld * tmpvar_7)
					  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
					  xlv_TEXCOORD2 = tmpvar_5.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = xlv_COLOR0;
					  lowp vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  highp vec4 emissionSample_4;
					  highp vec4 diffuseSample_5;
					  highp vec4 nightSample_6;
					  highp vec4 daySample_7;
					  lowp vec4 tmpvar_8;
					  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_7 = tmpvar_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_6 = tmpvar_9;
					  diffuseSample_5 = (mix (nightSample_6, daySample_7, vec4(_DayWeight)) * _Color);
					  diffuseSample_5.xyz = (diffuseSample_5.xyz * tmpvar_1.xyz);
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_4 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = ((emissionSample_4.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_2 = diffuseSample_5.xyz;
					  tmpvar_3 = tmpvar_11;
					  mediump vec3 tmpvar_12;
					  mediump vec4 tmpvar_13;
					  tmpvar_13 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_14;
					  color_14 = tmpvar_13;
					  tmpvar_12 = (unity_Lightmap_HDR.x * color_14.xyz);
					  lowp vec3 tmpvar_15;
					  mediump vec3 tmpvar_16;
					  mediump vec3 tmpvar_17;
					  mediump vec3 albedo_18;
					  albedo_18 = tmpvar_2;
					  tmpvar_17 = (albedo_18 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_15 = tmpvar_17;
					  mediump vec3 diffColor_19;
					  diffColor_19 = tmpvar_15;
					  mediump vec3 color_20;
					  highp vec3 tmpvar_21;
					  tmpvar_21 = (tmpvar_12 * diffColor_19);
					  color_20 = tmpvar_21;
					  tmpvar_16 = tmpvar_15;
					  mediump vec4 outGBuffer2_22;
					  mediump vec4 tmpvar_23;
					  tmpvar_23.xyz = tmpvar_16;
					  tmpvar_23.w = 1.0;
					  mediump vec4 tmpvar_24;
					  tmpvar_24.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_18, vec3(_Metallic));
					  tmpvar_24.w = _Glossiness;
					  highp vec4 tmpvar_25;
					  tmpvar_25.w = 1.0;
					  tmpvar_25.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_22 = tmpvar_25;
					  mediump vec4 tmpvar_26;
					  tmpvar_26.w = 1.0;
					  tmpvar_26.xyz = (tmpvar_3 + color_20);
					  gl_FragData[0] = tmpvar_23;
					  gl_FragData[1] = tmpvar_24;
					  gl_FragData[2] = outGBuffer2_22;
					  gl_FragData[3] = tmpvar_26;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat12 = (-_DayWeight) + 1.0;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat12 = (-_DayWeight) + 1.0;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat12 = (-_DayWeight) + 1.0;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixV;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = _glesVertex;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = tmpvar_1.xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  tmpvar_2.zw = vec2(0.0, 0.0);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  tmpvar_3.xyz = ((tmpvar_5.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
					  highp vec4 tmpvar_7;
					  tmpvar_7.w = 1.0;
					  tmpvar_7.xyz = tmpvar_1.xyz;
					  tmpvar_3.w = (-((unity_MatrixV * 
					    (unity_ObjectToWorld * tmpvar_7)
					  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
					  xlv_TEXCOORD2 = tmpvar_5.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = xlv_COLOR0;
					  lowp vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  highp vec4 emissionSample_4;
					  highp vec4 diffuseSample_5;
					  highp vec4 nightSample_6;
					  highp vec4 daySample_7;
					  lowp vec4 tmpvar_8;
					  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_7 = tmpvar_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_6 = tmpvar_9;
					  diffuseSample_5 = (mix (nightSample_6, daySample_7, vec4(_DayWeight)) * _Color);
					  diffuseSample_5.xyz = (diffuseSample_5.xyz * tmpvar_1.xyz);
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_4 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = ((emissionSample_4.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_2 = diffuseSample_5.xyz;
					  tmpvar_3 = tmpvar_11;
					  mediump vec3 normalWorld_12;
					  normalWorld_12 = xlv_TEXCOORD1;
					  mediump vec3 ambient_13;
					  mediump vec4 tmpvar_14;
					  tmpvar_14.w = 1.0;
					  tmpvar_14.xyz = normalWorld_12;
					  mediump vec3 x_15;
					  x_15.x = dot (unity_SHAr, tmpvar_14);
					  x_15.y = dot (unity_SHAg, tmpvar_14);
					  x_15.z = dot (unity_SHAb, tmpvar_14);
					  mediump vec3 x1_16;
					  mediump vec4 tmpvar_17;
					  tmpvar_17 = (normalWorld_12.xyzz * normalWorld_12.yzzx);
					  x1_16.x = dot (unity_SHBr, tmpvar_17);
					  x1_16.y = dot (unity_SHBg, tmpvar_17);
					  x1_16.z = dot (unity_SHBb, tmpvar_17);
					  ambient_13 = max (vec3(0.0, 0.0, 0.0), (x_15 + (x1_16 + 
					    (unity_SHC.xyz * ((normalWorld_12.x * normalWorld_12.x) - (normalWorld_12.y * normalWorld_12.y)))
					  )));
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = max (((1.055 * 
					    pow (max (ambient_13, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  ambient_13 = tmpvar_18;
					  mediump vec4 tmpvar_19;
					  tmpvar_19 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_20;
					  color_20 = tmpvar_19;
					  lowp vec3 tmpvar_21;
					  mediump vec3 tmpvar_22;
					  mediump vec3 tmpvar_23;
					  mediump vec3 albedo_24;
					  albedo_24 = tmpvar_2;
					  tmpvar_23 = (albedo_24 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_21 = tmpvar_23;
					  mediump vec3 diffColor_25;
					  diffColor_25 = tmpvar_21;
					  tmpvar_22 = tmpvar_21;
					  mediump vec4 outGBuffer2_26;
					  mediump vec4 tmpvar_27;
					  tmpvar_27.xyz = tmpvar_22;
					  tmpvar_27.w = 1.0;
					  mediump vec4 tmpvar_28;
					  tmpvar_28.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_24, vec3(_Metallic));
					  tmpvar_28.w = _Glossiness;
					  highp vec4 tmpvar_29;
					  tmpvar_29.w = 1.0;
					  tmpvar_29.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_26 = tmpvar_29;
					  mediump vec4 tmpvar_30;
					  tmpvar_30.w = 1.0;
					  tmpvar_30.xyz = (tmpvar_3 + ((tmpvar_18 + 
					    (unity_Lightmap_HDR.x * color_20.xyz)
					  ) * diffColor_25));
					  gl_FragData[0] = tmpvar_27;
					  gl_FragData[1] = tmpvar_28;
					  gl_FragData[2] = outGBuffer2_26;
					  gl_FragData[3] = tmpvar_30;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixV;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = _glesVertex;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = tmpvar_1.xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  tmpvar_2.zw = vec2(0.0, 0.0);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  tmpvar_3.xyz = ((tmpvar_5.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
					  highp vec4 tmpvar_7;
					  tmpvar_7.w = 1.0;
					  tmpvar_7.xyz = tmpvar_1.xyz;
					  tmpvar_3.w = (-((unity_MatrixV * 
					    (unity_ObjectToWorld * tmpvar_7)
					  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
					  xlv_TEXCOORD2 = tmpvar_5.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = xlv_COLOR0;
					  lowp vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  highp vec4 emissionSample_4;
					  highp vec4 diffuseSample_5;
					  highp vec4 nightSample_6;
					  highp vec4 daySample_7;
					  lowp vec4 tmpvar_8;
					  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_7 = tmpvar_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_6 = tmpvar_9;
					  diffuseSample_5 = (mix (nightSample_6, daySample_7, vec4(_DayWeight)) * _Color);
					  diffuseSample_5.xyz = (diffuseSample_5.xyz * tmpvar_1.xyz);
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_4 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = ((emissionSample_4.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_2 = diffuseSample_5.xyz;
					  tmpvar_3 = tmpvar_11;
					  mediump vec3 normalWorld_12;
					  normalWorld_12 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_13;
					  mediump vec3 ambient_14;
					  mediump vec4 tmpvar_15;
					  tmpvar_15.w = 1.0;
					  tmpvar_15.xyz = normalWorld_12;
					  mediump vec3 x_16;
					  x_16.x = dot (unity_SHAr, tmpvar_15);
					  x_16.y = dot (unity_SHAg, tmpvar_15);
					  x_16.z = dot (unity_SHAb, tmpvar_15);
					  mediump vec3 x1_17;
					  mediump vec4 tmpvar_18;
					  tmpvar_18 = (normalWorld_12.xyzz * normalWorld_12.yzzx);
					  x1_17.x = dot (unity_SHBr, tmpvar_18);
					  x1_17.y = dot (unity_SHBg, tmpvar_18);
					  x1_17.z = dot (unity_SHBb, tmpvar_18);
					  ambient_14 = max (vec3(0.0, 0.0, 0.0), (x_16 + (x1_17 + 
					    (unity_SHC.xyz * ((normalWorld_12.x * normalWorld_12.x) - (normalWorld_12.y * normalWorld_12.y)))
					  )));
					  mediump vec3 tmpvar_19;
					  tmpvar_19 = max (((1.055 * 
					    pow (max (ambient_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  ambient_14 = tmpvar_19;
					  mediump vec4 tmpvar_20;
					  tmpvar_20 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_21;
					  color_21 = tmpvar_20;
					  tmpvar_13 = (tmpvar_19 + (unity_Lightmap_HDR.x * color_21.xyz));
					  lowp vec3 tmpvar_22;
					  mediump vec3 tmpvar_23;
					  mediump vec3 tmpvar_24;
					  mediump vec3 albedo_25;
					  albedo_25 = tmpvar_2;
					  tmpvar_24 = (albedo_25 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_22 = tmpvar_24;
					  mediump vec3 diffColor_26;
					  diffColor_26 = tmpvar_22;
					  mediump vec3 color_27;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = (tmpvar_13 * diffColor_26);
					  color_27 = tmpvar_28;
					  tmpvar_23 = tmpvar_22;
					  mediump vec4 outGBuffer2_29;
					  mediump vec4 tmpvar_30;
					  tmpvar_30.xyz = tmpvar_23;
					  tmpvar_30.w = 1.0;
					  mediump vec4 tmpvar_31;
					  tmpvar_31.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_25, vec3(_Metallic));
					  tmpvar_31.w = _Glossiness;
					  highp vec4 tmpvar_32;
					  tmpvar_32.w = 1.0;
					  tmpvar_32.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_29 = tmpvar_32;
					  mediump vec4 tmpvar_33;
					  tmpvar_33.w = 1.0;
					  tmpvar_33.xyz = (tmpvar_3 + color_27);
					  gl_FragData[0] = tmpvar_30;
					  gl_FragData[1] = tmpvar_31;
					  gl_FragData[2] = outGBuffer2_29;
					  gl_FragData[3] = tmpvar_33;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixV;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = _glesVertex;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = tmpvar_1.xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  tmpvar_2.zw = vec2(0.0, 0.0);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  tmpvar_3.xyz = ((tmpvar_5.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
					  highp vec4 tmpvar_7;
					  tmpvar_7.w = 1.0;
					  tmpvar_7.xyz = tmpvar_1.xyz;
					  tmpvar_3.w = (-((unity_MatrixV * 
					    (unity_ObjectToWorld * tmpvar_7)
					  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
					  xlv_TEXCOORD2 = tmpvar_5.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = xlv_COLOR0;
					  lowp vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  highp vec4 emissionSample_4;
					  highp vec4 diffuseSample_5;
					  highp vec4 nightSample_6;
					  highp vec4 daySample_7;
					  lowp vec4 tmpvar_8;
					  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_7 = tmpvar_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_6 = tmpvar_9;
					  diffuseSample_5 = (mix (nightSample_6, daySample_7, vec4(_DayWeight)) * _Color);
					  diffuseSample_5.xyz = (diffuseSample_5.xyz * tmpvar_1.xyz);
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_4 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = ((emissionSample_4.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_2 = diffuseSample_5.xyz;
					  tmpvar_3 = tmpvar_11;
					  mediump vec3 normalWorld_12;
					  normalWorld_12 = xlv_TEXCOORD1;
					  mediump vec3 tmpvar_13;
					  mediump vec3 ambient_14;
					  mediump vec4 tmpvar_15;
					  tmpvar_15.w = 1.0;
					  tmpvar_15.xyz = normalWorld_12;
					  mediump vec3 x_16;
					  x_16.x = dot (unity_SHAr, tmpvar_15);
					  x_16.y = dot (unity_SHAg, tmpvar_15);
					  x_16.z = dot (unity_SHAb, tmpvar_15);
					  mediump vec3 x1_17;
					  mediump vec4 tmpvar_18;
					  tmpvar_18 = (normalWorld_12.xyzz * normalWorld_12.yzzx);
					  x1_17.x = dot (unity_SHBr, tmpvar_18);
					  x1_17.y = dot (unity_SHBg, tmpvar_18);
					  x1_17.z = dot (unity_SHBb, tmpvar_18);
					  ambient_14 = max (vec3(0.0, 0.0, 0.0), (x_16 + (x1_17 + 
					    (unity_SHC.xyz * ((normalWorld_12.x * normalWorld_12.x) - (normalWorld_12.y * normalWorld_12.y)))
					  )));
					  mediump vec3 tmpvar_19;
					  tmpvar_19 = max (((1.055 * 
					    pow (max (ambient_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  ambient_14 = tmpvar_19;
					  mediump vec4 tmpvar_20;
					  tmpvar_20 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_21;
					  color_21 = tmpvar_20;
					  tmpvar_13 = (tmpvar_19 + (unity_Lightmap_HDR.x * color_21.xyz));
					  lowp vec3 tmpvar_22;
					  mediump vec3 tmpvar_23;
					  mediump vec3 tmpvar_24;
					  mediump vec3 albedo_25;
					  albedo_25 = tmpvar_2;
					  tmpvar_24 = (albedo_25 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_22 = tmpvar_24;
					  mediump vec3 diffColor_26;
					  diffColor_26 = tmpvar_22;
					  mediump vec3 color_27;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = (tmpvar_13 * diffColor_26);
					  color_27 = tmpvar_28;
					  tmpvar_23 = tmpvar_22;
					  mediump vec4 outGBuffer2_29;
					  mediump vec4 tmpvar_30;
					  tmpvar_30.xyz = tmpvar_23;
					  tmpvar_30.w = 1.0;
					  mediump vec4 tmpvar_31;
					  tmpvar_31.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_25, vec3(_Metallic));
					  tmpvar_31.w = _Glossiness;
					  highp vec4 tmpvar_32;
					  tmpvar_32.w = 1.0;
					  tmpvar_32.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_29 = tmpvar_32;
					  mediump vec4 tmpvar_33;
					  tmpvar_33.w = 1.0;
					  tmpvar_33.xyz = (tmpvar_3 + color_27);
					  gl_FragData[0] = tmpvar_30;
					  gl_FragData[1] = tmpvar_31;
					  gl_FragData[2] = outGBuffer2_29;
					  gl_FragData[3] = tmpvar_33;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					float u_xlat19;
					mediump float u_xlat16_20;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat16_20 = vs_TEXCOORD1.y * vs_TEXCOORD1.y;
					    u_xlat16_20 = vs_TEXCOORD1.x * vs_TEXCOORD1.x + (-u_xlat16_20);
					    u_xlat16_0 = vs_TEXCOORD1.yzzx * vs_TEXCOORD1.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_20) + u_xlat16_3.xyz;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_5.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = unity_Lightmap_HDR.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_1.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
					    u_xlat19 = (-_DayWeight) + 1.0;
					    SV_Target3.xyz = u_xlat1.xyz * vec3(u_xlat19) + u_xlat16_2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					float u_xlat19;
					mediump float u_xlat16_20;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat16_20 = vs_TEXCOORD1.y * vs_TEXCOORD1.y;
					    u_xlat16_20 = vs_TEXCOORD1.x * vs_TEXCOORD1.x + (-u_xlat16_20);
					    u_xlat16_0 = vs_TEXCOORD1.yzzx * vs_TEXCOORD1.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_20) + u_xlat16_3.xyz;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_5.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = unity_Lightmap_HDR.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_1.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
					    u_xlat19 = (-_DayWeight) + 1.0;
					    SV_Target3.xyz = u_xlat1.xyz * vec3(u_xlat19) + u_xlat16_2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					float u_xlat19;
					mediump float u_xlat16_20;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat16_20 = vs_TEXCOORD1.y * vs_TEXCOORD1.y;
					    u_xlat16_20 = vs_TEXCOORD1.x * vs_TEXCOORD1.x + (-u_xlat16_20);
					    u_xlat16_0 = vs_TEXCOORD1.yzzx * vs_TEXCOORD1.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_20) + u_xlat16_3.xyz;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_5.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = unity_Lightmap_HDR.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_1.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
					    u_xlat19 = (-_DayWeight) + 1.0;
					    SV_Target3.xyz = u_xlat1.xyz * vec3(u_xlat19) + u_xlat16_2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixV;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = _glesVertex;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = tmpvar_1.xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  tmpvar_3.xyz = ((tmpvar_5.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
					  highp vec4 tmpvar_7;
					  tmpvar_7.w = 1.0;
					  tmpvar_7.xyz = tmpvar_1.xyz;
					  tmpvar_3.w = (-((unity_MatrixV * 
					    (unity_ObjectToWorld * tmpvar_7)
					  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
					  xlv_TEXCOORD2 = tmpvar_5.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump sampler2D unity_Lightmap;
					uniform sampler2D unity_DynamicLightmap;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = xlv_COLOR0;
					  lowp vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  highp vec4 emissionSample_4;
					  highp vec4 diffuseSample_5;
					  highp vec4 nightSample_6;
					  highp vec4 daySample_7;
					  lowp vec4 tmpvar_8;
					  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_7 = tmpvar_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_6 = tmpvar_9;
					  diffuseSample_5 = (mix (nightSample_6, daySample_7, vec4(_DayWeight)) * _Color);
					  diffuseSample_5.xyz = (diffuseSample_5.xyz * tmpvar_1.xyz);
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_4 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = ((emissionSample_4.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_2 = diffuseSample_5.xyz;
					  tmpvar_3 = tmpvar_11;
					  mediump vec3 tmpvar_12;
					  mediump vec4 tmpvar_13;
					  tmpvar_13 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_14;
					  color_14 = tmpvar_13;
					  tmpvar_12 = (unity_Lightmap_HDR.x * color_14.xyz);
					  lowp vec4 tmpvar_15;
					  tmpvar_15 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD4.zw);
					  tmpvar_12 = (tmpvar_12 + pow ((
					    (unity_DynamicLightmap_HDR.x * tmpvar_15.w)
					   * tmpvar_15.xyz), unity_DynamicLightmap_HDR.yyy));
					  lowp vec3 tmpvar_16;
					  mediump vec3 tmpvar_17;
					  mediump vec3 tmpvar_18;
					  mediump vec3 albedo_19;
					  albedo_19 = tmpvar_2;
					  tmpvar_18 = (albedo_19 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_16 = tmpvar_18;
					  mediump vec3 diffColor_20;
					  diffColor_20 = tmpvar_16;
					  tmpvar_17 = tmpvar_16;
					  mediump vec4 outGBuffer2_21;
					  mediump vec4 tmpvar_22;
					  tmpvar_22.xyz = tmpvar_17;
					  tmpvar_22.w = 1.0;
					  mediump vec4 tmpvar_23;
					  tmpvar_23.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_19, vec3(_Metallic));
					  tmpvar_23.w = _Glossiness;
					  highp vec4 tmpvar_24;
					  tmpvar_24.w = 1.0;
					  tmpvar_24.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_21 = tmpvar_24;
					  mediump vec4 tmpvar_25;
					  tmpvar_25.w = 1.0;
					  tmpvar_25.xyz = (tmpvar_3 + (tmpvar_12 * diffColor_20));
					  gl_FragData[0] = tmpvar_22;
					  gl_FragData[1] = tmpvar_23;
					  gl_FragData[2] = outGBuffer2_21;
					  gl_FragData[3] = tmpvar_25;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixV;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = _glesVertex;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = tmpvar_1.xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  tmpvar_3.xyz = ((tmpvar_5.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
					  highp vec4 tmpvar_7;
					  tmpvar_7.w = 1.0;
					  tmpvar_7.xyz = tmpvar_1.xyz;
					  tmpvar_3.w = (-((unity_MatrixV * 
					    (unity_ObjectToWorld * tmpvar_7)
					  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
					  xlv_TEXCOORD2 = tmpvar_5.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump sampler2D unity_Lightmap;
					uniform sampler2D unity_DynamicLightmap;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = xlv_COLOR0;
					  lowp vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  highp vec4 emissionSample_4;
					  highp vec4 diffuseSample_5;
					  highp vec4 nightSample_6;
					  highp vec4 daySample_7;
					  lowp vec4 tmpvar_8;
					  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_7 = tmpvar_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_6 = tmpvar_9;
					  diffuseSample_5 = (mix (nightSample_6, daySample_7, vec4(_DayWeight)) * _Color);
					  diffuseSample_5.xyz = (diffuseSample_5.xyz * tmpvar_1.xyz);
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_4 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = ((emissionSample_4.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_2 = diffuseSample_5.xyz;
					  tmpvar_3 = tmpvar_11;
					  mediump vec3 tmpvar_12;
					  mediump vec4 tmpvar_13;
					  tmpvar_13 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_14;
					  color_14 = tmpvar_13;
					  tmpvar_12 = (unity_Lightmap_HDR.x * color_14.xyz);
					  lowp vec4 tmpvar_15;
					  tmpvar_15 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD4.zw);
					  tmpvar_12 = (tmpvar_12 + pow ((
					    (unity_DynamicLightmap_HDR.x * tmpvar_15.w)
					   * tmpvar_15.xyz), unity_DynamicLightmap_HDR.yyy));
					  lowp vec3 tmpvar_16;
					  mediump vec3 tmpvar_17;
					  mediump vec3 tmpvar_18;
					  mediump vec3 albedo_19;
					  albedo_19 = tmpvar_2;
					  tmpvar_18 = (albedo_19 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_16 = tmpvar_18;
					  mediump vec3 diffColor_20;
					  diffColor_20 = tmpvar_16;
					  mediump vec3 color_21;
					  highp vec3 tmpvar_22;
					  tmpvar_22 = (tmpvar_12 * diffColor_20);
					  color_21 = tmpvar_22;
					  tmpvar_17 = tmpvar_16;
					  mediump vec4 outGBuffer2_23;
					  mediump vec4 tmpvar_24;
					  tmpvar_24.xyz = tmpvar_17;
					  tmpvar_24.w = 1.0;
					  mediump vec4 tmpvar_25;
					  tmpvar_25.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_19, vec3(_Metallic));
					  tmpvar_25.w = _Glossiness;
					  highp vec4 tmpvar_26;
					  tmpvar_26.w = 1.0;
					  tmpvar_26.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_23 = tmpvar_26;
					  mediump vec4 tmpvar_27;
					  tmpvar_27.w = 1.0;
					  tmpvar_27.xyz = (tmpvar_3 + color_21);
					  gl_FragData[0] = tmpvar_24;
					  gl_FragData[1] = tmpvar_25;
					  gl_FragData[2] = outGBuffer2_23;
					  gl_FragData[3] = tmpvar_27;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixV;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = _glesVertex;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = tmpvar_1.xyz;
					  highp vec4 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  tmpvar_3.xyz = ((tmpvar_5.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
					  highp vec4 tmpvar_7;
					  tmpvar_7.w = 1.0;
					  tmpvar_7.xyz = tmpvar_1.xyz;
					  tmpvar_3.w = (-((unity_MatrixV * 
					    (unity_ObjectToWorld * tmpvar_7)
					  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
					  xlv_TEXCOORD2 = tmpvar_5.xyz;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD4 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump sampler2D unity_Lightmap;
					uniform sampler2D unity_DynamicLightmap;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = xlv_COLOR0;
					  lowp vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  highp vec4 emissionSample_4;
					  highp vec4 diffuseSample_5;
					  highp vec4 nightSample_6;
					  highp vec4 daySample_7;
					  lowp vec4 tmpvar_8;
					  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_7 = tmpvar_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_6 = tmpvar_9;
					  diffuseSample_5 = (mix (nightSample_6, daySample_7, vec4(_DayWeight)) * _Color);
					  diffuseSample_5.xyz = (diffuseSample_5.xyz * tmpvar_1.xyz);
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_4 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = ((emissionSample_4.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_2 = diffuseSample_5.xyz;
					  tmpvar_3 = tmpvar_11;
					  mediump vec3 tmpvar_12;
					  mediump vec4 tmpvar_13;
					  tmpvar_13 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_14;
					  color_14 = tmpvar_13;
					  tmpvar_12 = (unity_Lightmap_HDR.x * color_14.xyz);
					  lowp vec4 tmpvar_15;
					  tmpvar_15 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD4.zw);
					  tmpvar_12 = (tmpvar_12 + pow ((
					    (unity_DynamicLightmap_HDR.x * tmpvar_15.w)
					   * tmpvar_15.xyz), unity_DynamicLightmap_HDR.yyy));
					  lowp vec3 tmpvar_16;
					  mediump vec3 tmpvar_17;
					  mediump vec3 tmpvar_18;
					  mediump vec3 albedo_19;
					  albedo_19 = tmpvar_2;
					  tmpvar_18 = (albedo_19 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_16 = tmpvar_18;
					  mediump vec3 diffColor_20;
					  diffColor_20 = tmpvar_16;
					  mediump vec3 color_21;
					  highp vec3 tmpvar_22;
					  tmpvar_22 = (tmpvar_12 * diffColor_20);
					  color_21 = tmpvar_22;
					  tmpvar_17 = tmpvar_16;
					  mediump vec4 outGBuffer2_23;
					  mediump vec4 tmpvar_24;
					  tmpvar_24.xyz = tmpvar_17;
					  tmpvar_24.w = 1.0;
					  mediump vec4 tmpvar_25;
					  tmpvar_25.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_19, vec3(_Metallic));
					  tmpvar_25.w = _Glossiness;
					  highp vec4 tmpvar_26;
					  tmpvar_26.w = 1.0;
					  tmpvar_26.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_23 = tmpvar_26;
					  mediump vec4 tmpvar_27;
					  tmpvar_27.w = 1.0;
					  tmpvar_27.xyz = (tmpvar_3 + color_21);
					  gl_FragData[0] = tmpvar_24;
					  gl_FragData[1] = tmpvar_25;
					  gl_FragData[2] = outGBuffer2_23;
					  gl_FragData[3] = tmpvar_27;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp sampler2D unity_DynamicLightmap;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat16_14 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_14);
					    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = unity_Lightmap_HDR.xxx * u_xlat16_0.xyz + u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat12 = (-_DayWeight) + 1.0;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp sampler2D unity_DynamicLightmap;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat16_14 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_14);
					    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = unity_Lightmap_HDR.xxx * u_xlat16_0.xyz + u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat12 = (-_DayWeight) + 1.0;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp sampler2D unity_DynamicLightmap;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat16_14 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_14);
					    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = unity_Lightmap_HDR.xxx * u_xlat16_0.xyz + u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat12 = (-_DayWeight) + 1.0;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (_WorldSpaceCameraPos - tmpvar_4);
					  tmpvar_1 = tmpvar_6;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_2.xy = vec2(0.0, 0.0);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_4;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_1;
					  xlv_TEXCOORD4 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = xlv_COLOR0;
					  lowp vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  highp vec4 emissionSample_4;
					  highp vec4 diffuseSample_5;
					  highp vec4 nightSample_6;
					  highp vec4 daySample_7;
					  lowp vec4 tmpvar_8;
					  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_7 = tmpvar_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_6 = tmpvar_9;
					  diffuseSample_5 = (mix (nightSample_6, daySample_7, vec4(_DayWeight)) * _Color);
					  diffuseSample_5.xyz = (diffuseSample_5.xyz * tmpvar_1.xyz);
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_4 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = ((emissionSample_4.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_2 = diffuseSample_5.xyz;
					  tmpvar_3 = tmpvar_11;
					  mediump vec3 normalWorld_12;
					  normalWorld_12 = xlv_TEXCOORD1;
					  mediump vec4 realtimeDirTex_13;
					  lowp vec4 tmpvar_14;
					  tmpvar_14 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD4.zw);
					  lowp vec4 tmpvar_15;
					  tmpvar_15 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD4.zw);
					  realtimeDirTex_13 = tmpvar_15;
					  lowp vec4 dirTex_16;
					  dirTex_16 = realtimeDirTex_13;
					  lowp vec3 y_17;
					  y_17 = (dirTex_16.xyz - 0.5);
					  lowp float tmpvar_18;
					  tmpvar_18 = max (0.0001, dirTex_16.w);
					  lowp vec3 tmpvar_19;
					  mediump vec3 tmpvar_20;
					  mediump vec3 tmpvar_21;
					  mediump vec3 albedo_22;
					  albedo_22 = tmpvar_2;
					  tmpvar_21 = (albedo_22 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_19 = tmpvar_21;
					  mediump vec3 diffColor_23;
					  diffColor_23 = tmpvar_19;
					  tmpvar_20 = tmpvar_19;
					  mediump vec4 outGBuffer2_24;
					  mediump vec4 tmpvar_25;
					  tmpvar_25.xyz = tmpvar_20;
					  tmpvar_25.w = 1.0;
					  mediump vec4 tmpvar_26;
					  tmpvar_26.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_22, vec3(_Metallic));
					  tmpvar_26.w = _Glossiness;
					  highp vec4 tmpvar_27;
					  tmpvar_27.w = 1.0;
					  tmpvar_27.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_24 = tmpvar_27;
					  mediump vec4 tmpvar_28;
					  tmpvar_28.w = 1.0;
					  tmpvar_28.xyz = (tmpvar_3 + ((
					    (pow (((unity_DynamicLightmap_HDR.x * tmpvar_14.w) * tmpvar_14.xyz), unity_DynamicLightmap_HDR.yyy) * (dot (normalWorld_12, y_17) + 0.5))
					   / tmpvar_18) * diffColor_23));
					  gl_FragData[0] = tmpvar_25;
					  gl_FragData[1] = tmpvar_26;
					  gl_FragData[2] = outGBuffer2_24;
					  gl_FragData[3] = tmpvar_28;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (_WorldSpaceCameraPos - tmpvar_4);
					  tmpvar_1 = tmpvar_6;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_2.xy = vec2(0.0, 0.0);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_4;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_1;
					  xlv_TEXCOORD4 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = xlv_COLOR0;
					  lowp vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  highp vec4 emissionSample_4;
					  highp vec4 diffuseSample_5;
					  highp vec4 nightSample_6;
					  highp vec4 daySample_7;
					  lowp vec4 tmpvar_8;
					  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_7 = tmpvar_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_6 = tmpvar_9;
					  diffuseSample_5 = (mix (nightSample_6, daySample_7, vec4(_DayWeight)) * _Color);
					  diffuseSample_5.xyz = (diffuseSample_5.xyz * tmpvar_1.xyz);
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_4 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = ((emissionSample_4.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_2 = diffuseSample_5.xyz;
					  tmpvar_3 = tmpvar_11;
					  mediump vec3 normalWorld_12;
					  normalWorld_12 = xlv_TEXCOORD1;
					  mediump vec4 realtimeDirTex_13;
					  mediump vec3 tmpvar_14;
					  lowp vec4 tmpvar_15;
					  tmpvar_15 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD4.zw);
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD4.zw);
					  realtimeDirTex_13 = tmpvar_16;
					  lowp vec4 dirTex_17;
					  dirTex_17 = realtimeDirTex_13;
					  lowp vec3 y_18;
					  y_18 = (dirTex_17.xyz - 0.5);
					  lowp float tmpvar_19;
					  tmpvar_19 = max (0.0001, dirTex_17.w);
					  tmpvar_14 = ((pow (
					    ((unity_DynamicLightmap_HDR.x * tmpvar_15.w) * tmpvar_15.xyz)
					  , unity_DynamicLightmap_HDR.yyy) * (
					    dot (normalWorld_12, y_18)
					   + 0.5)) / tmpvar_19);
					  lowp vec3 tmpvar_20;
					  mediump vec3 tmpvar_21;
					  mediump vec3 tmpvar_22;
					  mediump vec3 albedo_23;
					  albedo_23 = tmpvar_2;
					  tmpvar_22 = (albedo_23 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_20 = tmpvar_22;
					  mediump vec3 diffColor_24;
					  diffColor_24 = tmpvar_20;
					  mediump vec3 color_25;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = (tmpvar_14 * diffColor_24);
					  color_25 = tmpvar_26;
					  tmpvar_21 = tmpvar_20;
					  mediump vec4 outGBuffer2_27;
					  mediump vec4 tmpvar_28;
					  tmpvar_28.xyz = tmpvar_21;
					  tmpvar_28.w = 1.0;
					  mediump vec4 tmpvar_29;
					  tmpvar_29.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_23, vec3(_Metallic));
					  tmpvar_29.w = _Glossiness;
					  highp vec4 tmpvar_30;
					  tmpvar_30.w = 1.0;
					  tmpvar_30.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_27 = tmpvar_30;
					  mediump vec4 tmpvar_31;
					  tmpvar_31.w = 1.0;
					  tmpvar_31.xyz = (tmpvar_3 + color_25);
					  gl_FragData[0] = tmpvar_28;
					  gl_FragData[1] = tmpvar_29;
					  gl_FragData[2] = outGBuffer2_27;
					  gl_FragData[3] = tmpvar_31;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (_WorldSpaceCameraPos - tmpvar_4);
					  tmpvar_1 = tmpvar_6;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_2.xy = vec2(0.0, 0.0);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_4;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_1;
					  xlv_TEXCOORD4 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = xlv_COLOR0;
					  lowp vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  highp vec4 emissionSample_4;
					  highp vec4 diffuseSample_5;
					  highp vec4 nightSample_6;
					  highp vec4 daySample_7;
					  lowp vec4 tmpvar_8;
					  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_7 = tmpvar_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_6 = tmpvar_9;
					  diffuseSample_5 = (mix (nightSample_6, daySample_7, vec4(_DayWeight)) * _Color);
					  diffuseSample_5.xyz = (diffuseSample_5.xyz * tmpvar_1.xyz);
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_4 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = ((emissionSample_4.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_2 = diffuseSample_5.xyz;
					  tmpvar_3 = tmpvar_11;
					  mediump vec3 normalWorld_12;
					  normalWorld_12 = xlv_TEXCOORD1;
					  mediump vec4 realtimeDirTex_13;
					  mediump vec3 tmpvar_14;
					  lowp vec4 tmpvar_15;
					  tmpvar_15 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD4.zw);
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD4.zw);
					  realtimeDirTex_13 = tmpvar_16;
					  lowp vec4 dirTex_17;
					  dirTex_17 = realtimeDirTex_13;
					  lowp vec3 y_18;
					  y_18 = (dirTex_17.xyz - 0.5);
					  lowp float tmpvar_19;
					  tmpvar_19 = max (0.0001, dirTex_17.w);
					  tmpvar_14 = ((pow (
					    ((unity_DynamicLightmap_HDR.x * tmpvar_15.w) * tmpvar_15.xyz)
					  , unity_DynamicLightmap_HDR.yyy) * (
					    dot (normalWorld_12, y_18)
					   + 0.5)) / tmpvar_19);
					  lowp vec3 tmpvar_20;
					  mediump vec3 tmpvar_21;
					  mediump vec3 tmpvar_22;
					  mediump vec3 albedo_23;
					  albedo_23 = tmpvar_2;
					  tmpvar_22 = (albedo_23 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_20 = tmpvar_22;
					  mediump vec3 diffColor_24;
					  diffColor_24 = tmpvar_20;
					  mediump vec3 color_25;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = (tmpvar_14 * diffColor_24);
					  color_25 = tmpvar_26;
					  tmpvar_21 = tmpvar_20;
					  mediump vec4 outGBuffer2_27;
					  mediump vec4 tmpvar_28;
					  tmpvar_28.xyz = tmpvar_21;
					  tmpvar_28.w = 1.0;
					  mediump vec4 tmpvar_29;
					  tmpvar_29.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_23, vec3(_Metallic));
					  tmpvar_29.w = _Glossiness;
					  highp vec4 tmpvar_30;
					  tmpvar_30.w = 1.0;
					  tmpvar_30.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_27 = tmpvar_30;
					  mediump vec4 tmpvar_31;
					  tmpvar_31.w = 1.0;
					  tmpvar_31.xyz = (tmpvar_3 + color_25);
					  gl_FragData[0] = tmpvar_28;
					  gl_FragData[1] = tmpvar_29;
					  gl_FragData[2] = outGBuffer2_27;
					  gl_FragData[3] = tmpvar_31;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat16_17 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_17);
					    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD4.zw);
					    u_xlat16_4.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_17 = u_xlat16_17 + 0.5;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * u_xlat16_3.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz / u_xlat16_0.xxx;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat15 = (-_DayWeight) + 1.0;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat16_2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat16_17 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_17);
					    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD4.zw);
					    u_xlat16_4.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_17 = u_xlat16_17 + 0.5;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * u_xlat16_3.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz / u_xlat16_0.xxx;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat15 = (-_DayWeight) + 1.0;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat16_2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat16_17 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_17);
					    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD4.zw);
					    u_xlat16_4.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_17 = u_xlat16_17 + 0.5;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * u_xlat16_3.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz / u_xlat16_0.xxx;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat15 = (-_DayWeight) + 1.0;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat16_2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (_WorldSpaceCameraPos - tmpvar_4);
					  tmpvar_1 = tmpvar_6;
					  tmpvar_2.zw = vec2(0.0, 0.0);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_4;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_1;
					  xlv_TEXCOORD4 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = xlv_COLOR0;
					  lowp vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  highp vec4 emissionSample_4;
					  highp vec4 diffuseSample_5;
					  highp vec4 nightSample_6;
					  highp vec4 daySample_7;
					  lowp vec4 tmpvar_8;
					  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_7 = tmpvar_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_6 = tmpvar_9;
					  diffuseSample_5 = (mix (nightSample_6, daySample_7, vec4(_DayWeight)) * _Color);
					  diffuseSample_5.xyz = (diffuseSample_5.xyz * tmpvar_1.xyz);
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_4 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = ((emissionSample_4.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_2 = diffuseSample_5.xyz;
					  tmpvar_3 = tmpvar_11;
					  mediump vec3 normalWorld_12;
					  normalWorld_12 = xlv_TEXCOORD1;
					  lowp vec4 bakedDirTex_13;
					  mediump vec4 tmpvar_14;
					  tmpvar_14 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_15;
					  color_15 = tmpvar_14;
					  mediump vec4 tmpvar_16;
					  tmpvar_16 = texture2D (unity_LightmapInd, xlv_TEXCOORD4.xy);
					  bakedDirTex_13 = tmpvar_16;
					  lowp vec3 y_17;
					  y_17 = (bakedDirTex_13.xyz - 0.5);
					  lowp float tmpvar_18;
					  tmpvar_18 = max (0.0001, bakedDirTex_13.w);
					  lowp vec3 tmpvar_19;
					  mediump vec3 tmpvar_20;
					  mediump vec3 tmpvar_21;
					  mediump vec3 albedo_22;
					  albedo_22 = tmpvar_2;
					  tmpvar_21 = (albedo_22 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_19 = tmpvar_21;
					  mediump vec3 diffColor_23;
					  diffColor_23 = tmpvar_19;
					  tmpvar_20 = tmpvar_19;
					  mediump vec4 outGBuffer2_24;
					  mediump vec4 tmpvar_25;
					  tmpvar_25.xyz = tmpvar_20;
					  tmpvar_25.w = 1.0;
					  mediump vec4 tmpvar_26;
					  tmpvar_26.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_22, vec3(_Metallic));
					  tmpvar_26.w = _Glossiness;
					  highp vec4 tmpvar_27;
					  tmpvar_27.w = 1.0;
					  tmpvar_27.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_24 = tmpvar_27;
					  mediump vec4 tmpvar_28;
					  tmpvar_28.w = 1.0;
					  tmpvar_28.xyz = (tmpvar_3 + ((
					    ((unity_Lightmap_HDR.x * color_15.xyz) * (dot (normalWorld_12, y_17) + 0.5))
					   / tmpvar_18) * diffColor_23));
					  gl_FragData[0] = tmpvar_25;
					  gl_FragData[1] = tmpvar_26;
					  gl_FragData[2] = outGBuffer2_24;
					  gl_FragData[3] = tmpvar_28;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (_WorldSpaceCameraPos - tmpvar_4);
					  tmpvar_1 = tmpvar_6;
					  tmpvar_2.zw = vec2(0.0, 0.0);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_4;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_1;
					  xlv_TEXCOORD4 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = xlv_COLOR0;
					  lowp vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  highp vec4 emissionSample_4;
					  highp vec4 diffuseSample_5;
					  highp vec4 nightSample_6;
					  highp vec4 daySample_7;
					  lowp vec4 tmpvar_8;
					  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_7 = tmpvar_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_6 = tmpvar_9;
					  diffuseSample_5 = (mix (nightSample_6, daySample_7, vec4(_DayWeight)) * _Color);
					  diffuseSample_5.xyz = (diffuseSample_5.xyz * tmpvar_1.xyz);
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_4 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = ((emissionSample_4.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_2 = diffuseSample_5.xyz;
					  tmpvar_3 = tmpvar_11;
					  mediump vec3 normalWorld_12;
					  normalWorld_12 = xlv_TEXCOORD1;
					  lowp vec4 bakedDirTex_13;
					  mediump vec3 tmpvar_14;
					  mediump vec4 tmpvar_15;
					  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_16;
					  color_16 = tmpvar_15;
					  mediump vec4 tmpvar_17;
					  tmpvar_17 = texture2D (unity_LightmapInd, xlv_TEXCOORD4.xy);
					  bakedDirTex_13 = tmpvar_17;
					  lowp vec3 y_18;
					  y_18 = (bakedDirTex_13.xyz - 0.5);
					  lowp float tmpvar_19;
					  tmpvar_19 = max (0.0001, bakedDirTex_13.w);
					  tmpvar_14 = (((unity_Lightmap_HDR.x * color_16.xyz) * (
					    dot (normalWorld_12, y_18)
					   + 0.5)) / tmpvar_19);
					  lowp vec3 tmpvar_20;
					  mediump vec3 tmpvar_21;
					  mediump vec3 tmpvar_22;
					  mediump vec3 albedo_23;
					  albedo_23 = tmpvar_2;
					  tmpvar_22 = (albedo_23 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_20 = tmpvar_22;
					  mediump vec3 diffColor_24;
					  diffColor_24 = tmpvar_20;
					  mediump vec3 color_25;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = (tmpvar_14 * diffColor_24);
					  color_25 = tmpvar_26;
					  tmpvar_21 = tmpvar_20;
					  mediump vec4 outGBuffer2_27;
					  mediump vec4 tmpvar_28;
					  tmpvar_28.xyz = tmpvar_21;
					  tmpvar_28.w = 1.0;
					  mediump vec4 tmpvar_29;
					  tmpvar_29.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_23, vec3(_Metallic));
					  tmpvar_29.w = _Glossiness;
					  highp vec4 tmpvar_30;
					  tmpvar_30.w = 1.0;
					  tmpvar_30.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_27 = tmpvar_30;
					  mediump vec4 tmpvar_31;
					  tmpvar_31.w = 1.0;
					  tmpvar_31.xyz = (tmpvar_3 + color_25);
					  gl_FragData[0] = tmpvar_28;
					  gl_FragData[1] = tmpvar_29;
					  gl_FragData[2] = outGBuffer2_27;
					  gl_FragData[3] = tmpvar_31;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (_WorldSpaceCameraPos - tmpvar_4);
					  tmpvar_1 = tmpvar_6;
					  tmpvar_2.zw = vec2(0.0, 0.0);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_4;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_1;
					  xlv_TEXCOORD4 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = xlv_COLOR0;
					  lowp vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  highp vec4 emissionSample_4;
					  highp vec4 diffuseSample_5;
					  highp vec4 nightSample_6;
					  highp vec4 daySample_7;
					  lowp vec4 tmpvar_8;
					  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_7 = tmpvar_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_6 = tmpvar_9;
					  diffuseSample_5 = (mix (nightSample_6, daySample_7, vec4(_DayWeight)) * _Color);
					  diffuseSample_5.xyz = (diffuseSample_5.xyz * tmpvar_1.xyz);
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_4 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = ((emissionSample_4.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_2 = diffuseSample_5.xyz;
					  tmpvar_3 = tmpvar_11;
					  mediump vec3 normalWorld_12;
					  normalWorld_12 = xlv_TEXCOORD1;
					  lowp vec4 bakedDirTex_13;
					  mediump vec3 tmpvar_14;
					  mediump vec4 tmpvar_15;
					  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_16;
					  color_16 = tmpvar_15;
					  mediump vec4 tmpvar_17;
					  tmpvar_17 = texture2D (unity_LightmapInd, xlv_TEXCOORD4.xy);
					  bakedDirTex_13 = tmpvar_17;
					  lowp vec3 y_18;
					  y_18 = (bakedDirTex_13.xyz - 0.5);
					  lowp float tmpvar_19;
					  tmpvar_19 = max (0.0001, bakedDirTex_13.w);
					  tmpvar_14 = (((unity_Lightmap_HDR.x * color_16.xyz) * (
					    dot (normalWorld_12, y_18)
					   + 0.5)) / tmpvar_19);
					  lowp vec3 tmpvar_20;
					  mediump vec3 tmpvar_21;
					  mediump vec3 tmpvar_22;
					  mediump vec3 albedo_23;
					  albedo_23 = tmpvar_2;
					  tmpvar_22 = (albedo_23 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_20 = tmpvar_22;
					  mediump vec3 diffColor_24;
					  diffColor_24 = tmpvar_20;
					  mediump vec3 color_25;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = (tmpvar_14 * diffColor_24);
					  color_25 = tmpvar_26;
					  tmpvar_21 = tmpvar_20;
					  mediump vec4 outGBuffer2_27;
					  mediump vec4 tmpvar_28;
					  tmpvar_28.xyz = tmpvar_21;
					  tmpvar_28.w = 1.0;
					  mediump vec4 tmpvar_29;
					  tmpvar_29.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_23, vec3(_Metallic));
					  tmpvar_29.w = _Glossiness;
					  highp vec4 tmpvar_30;
					  tmpvar_30.w = 1.0;
					  tmpvar_30.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_27 = tmpvar_30;
					  mediump vec4 tmpvar_31;
					  tmpvar_31.w = 1.0;
					  tmpvar_31.xyz = (tmpvar_3 + color_25);
					  gl_FragData[0] = tmpvar_28;
					  gl_FragData[1] = tmpvar_29;
					  gl_FragData[2] = outGBuffer2_27;
					  gl_FragData[3] = tmpvar_31;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_0 = texture(unity_LightmapInd, vs_TEXCOORD4.xy);
					    u_xlat16_4.xyz = u_xlat16_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat16_0.w, 9.99999975e-05);
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_17 = u_xlat16_17 + 0.5;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * u_xlat16_3.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz / u_xlat16_0.xxx;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat15 = (-_DayWeight) + 1.0;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat16_2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_0 = texture(unity_LightmapInd, vs_TEXCOORD4.xy);
					    u_xlat16_4.xyz = u_xlat16_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat16_0.w, 9.99999975e-05);
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_17 = u_xlat16_17 + 0.5;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * u_xlat16_3.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz / u_xlat16_0.xxx;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat15 = (-_DayWeight) + 1.0;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat16_2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_0 = texture(unity_LightmapInd, vs_TEXCOORD4.xy);
					    u_xlat16_4.xyz = u_xlat16_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat16_0.w, 9.99999975e-05);
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_17 = u_xlat16_17 + 0.5;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * u_xlat16_3.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz / u_xlat16_0.xxx;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat15 = (-_DayWeight) + 1.0;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat16_2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (_WorldSpaceCameraPos - tmpvar_4);
					  tmpvar_1 = tmpvar_6;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_4;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_1;
					  xlv_TEXCOORD4 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = xlv_COLOR0;
					  lowp vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  highp vec4 emissionSample_4;
					  highp vec4 diffuseSample_5;
					  highp vec4 nightSample_6;
					  highp vec4 daySample_7;
					  lowp vec4 tmpvar_8;
					  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_7 = tmpvar_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_6 = tmpvar_9;
					  diffuseSample_5 = (mix (nightSample_6, daySample_7, vec4(_DayWeight)) * _Color);
					  diffuseSample_5.xyz = (diffuseSample_5.xyz * tmpvar_1.xyz);
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_4 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = ((emissionSample_4.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_2 = diffuseSample_5.xyz;
					  tmpvar_3 = tmpvar_11;
					  mediump vec3 normalWorld_12;
					  normalWorld_12 = xlv_TEXCOORD1;
					  mediump vec4 realtimeDirTex_13;
					  lowp vec4 bakedDirTex_14;
					  mediump vec3 tmpvar_15;
					  mediump vec4 tmpvar_16;
					  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_17;
					  color_17 = tmpvar_16;
					  mediump vec4 tmpvar_18;
					  tmpvar_18 = texture2D (unity_LightmapInd, xlv_TEXCOORD4.xy);
					  bakedDirTex_14 = tmpvar_18;
					  lowp vec3 y_19;
					  y_19 = (bakedDirTex_14.xyz - 0.5);
					  lowp float tmpvar_20;
					  tmpvar_20 = max (0.0001, bakedDirTex_14.w);
					  tmpvar_15 = (((unity_Lightmap_HDR.x * color_17.xyz) * (
					    dot (normalWorld_12, y_19)
					   + 0.5)) / tmpvar_20);
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD4.zw);
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD4.zw);
					  realtimeDirTex_13 = tmpvar_22;
					  lowp vec4 dirTex_23;
					  dirTex_23 = realtimeDirTex_13;
					  lowp vec3 y_24;
					  y_24 = (dirTex_23.xyz - 0.5);
					  lowp float tmpvar_25;
					  tmpvar_25 = max (0.0001, dirTex_23.w);
					  tmpvar_15 = (tmpvar_15 + ((
					    pow (((unity_DynamicLightmap_HDR.x * tmpvar_21.w) * tmpvar_21.xyz), unity_DynamicLightmap_HDR.yyy)
					   * 
					    (dot (normalWorld_12, y_24) + 0.5)
					  ) / tmpvar_25));
					  lowp vec3 tmpvar_26;
					  mediump vec3 tmpvar_27;
					  mediump vec3 tmpvar_28;
					  mediump vec3 albedo_29;
					  albedo_29 = tmpvar_2;
					  tmpvar_28 = (albedo_29 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_26 = tmpvar_28;
					  mediump vec3 diffColor_30;
					  diffColor_30 = tmpvar_26;
					  tmpvar_27 = tmpvar_26;
					  mediump vec4 outGBuffer2_31;
					  mediump vec4 tmpvar_32;
					  tmpvar_32.xyz = tmpvar_27;
					  tmpvar_32.w = 1.0;
					  mediump vec4 tmpvar_33;
					  tmpvar_33.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_29, vec3(_Metallic));
					  tmpvar_33.w = _Glossiness;
					  highp vec4 tmpvar_34;
					  tmpvar_34.w = 1.0;
					  tmpvar_34.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_31 = tmpvar_34;
					  mediump vec4 tmpvar_35;
					  tmpvar_35.w = 1.0;
					  tmpvar_35.xyz = (tmpvar_3 + (tmpvar_15 * diffColor_30));
					  gl_FragData[0] = tmpvar_32;
					  gl_FragData[1] = tmpvar_33;
					  gl_FragData[2] = outGBuffer2_31;
					  gl_FragData[3] = tmpvar_35;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (_WorldSpaceCameraPos - tmpvar_4);
					  tmpvar_1 = tmpvar_6;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_4;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_1;
					  xlv_TEXCOORD4 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = xlv_COLOR0;
					  lowp vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  highp vec4 emissionSample_4;
					  highp vec4 diffuseSample_5;
					  highp vec4 nightSample_6;
					  highp vec4 daySample_7;
					  lowp vec4 tmpvar_8;
					  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_7 = tmpvar_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_6 = tmpvar_9;
					  diffuseSample_5 = (mix (nightSample_6, daySample_7, vec4(_DayWeight)) * _Color);
					  diffuseSample_5.xyz = (diffuseSample_5.xyz * tmpvar_1.xyz);
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_4 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = ((emissionSample_4.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_2 = diffuseSample_5.xyz;
					  tmpvar_3 = tmpvar_11;
					  mediump vec3 normalWorld_12;
					  normalWorld_12 = xlv_TEXCOORD1;
					  mediump vec4 realtimeDirTex_13;
					  lowp vec4 bakedDirTex_14;
					  mediump vec3 tmpvar_15;
					  mediump vec4 tmpvar_16;
					  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_17;
					  color_17 = tmpvar_16;
					  mediump vec4 tmpvar_18;
					  tmpvar_18 = texture2D (unity_LightmapInd, xlv_TEXCOORD4.xy);
					  bakedDirTex_14 = tmpvar_18;
					  lowp vec3 y_19;
					  y_19 = (bakedDirTex_14.xyz - 0.5);
					  lowp float tmpvar_20;
					  tmpvar_20 = max (0.0001, bakedDirTex_14.w);
					  tmpvar_15 = (((unity_Lightmap_HDR.x * color_17.xyz) * (
					    dot (normalWorld_12, y_19)
					   + 0.5)) / tmpvar_20);
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD4.zw);
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD4.zw);
					  realtimeDirTex_13 = tmpvar_22;
					  lowp vec4 dirTex_23;
					  dirTex_23 = realtimeDirTex_13;
					  lowp vec3 y_24;
					  y_24 = (dirTex_23.xyz - 0.5);
					  lowp float tmpvar_25;
					  tmpvar_25 = max (0.0001, dirTex_23.w);
					  tmpvar_15 = (tmpvar_15 + ((
					    pow (((unity_DynamicLightmap_HDR.x * tmpvar_21.w) * tmpvar_21.xyz), unity_DynamicLightmap_HDR.yyy)
					   * 
					    (dot (normalWorld_12, y_24) + 0.5)
					  ) / tmpvar_25));
					  lowp vec3 tmpvar_26;
					  mediump vec3 tmpvar_27;
					  mediump vec3 tmpvar_28;
					  mediump vec3 albedo_29;
					  albedo_29 = tmpvar_2;
					  tmpvar_28 = (albedo_29 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_26 = tmpvar_28;
					  mediump vec3 diffColor_30;
					  diffColor_30 = tmpvar_26;
					  mediump vec3 color_31;
					  highp vec3 tmpvar_32;
					  tmpvar_32 = (tmpvar_15 * diffColor_30);
					  color_31 = tmpvar_32;
					  tmpvar_27 = tmpvar_26;
					  mediump vec4 outGBuffer2_33;
					  mediump vec4 tmpvar_34;
					  tmpvar_34.xyz = tmpvar_27;
					  tmpvar_34.w = 1.0;
					  mediump vec4 tmpvar_35;
					  tmpvar_35.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_29, vec3(_Metallic));
					  tmpvar_35.w = _Glossiness;
					  highp vec4 tmpvar_36;
					  tmpvar_36.w = 1.0;
					  tmpvar_36.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_33 = tmpvar_36;
					  mediump vec4 tmpvar_37;
					  tmpvar_37.w = 1.0;
					  tmpvar_37.xyz = (tmpvar_3 + color_31);
					  gl_FragData[0] = tmpvar_34;
					  gl_FragData[1] = tmpvar_35;
					  gl_FragData[2] = outGBuffer2_33;
					  gl_FragData[3] = tmpvar_37;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (_WorldSpaceCameraPos - tmpvar_4);
					  tmpvar_1 = tmpvar_6;
					  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_4;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_1;
					  xlv_TEXCOORD4 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = xlv_COLOR0;
					  lowp vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  highp vec4 emissionSample_4;
					  highp vec4 diffuseSample_5;
					  highp vec4 nightSample_6;
					  highp vec4 daySample_7;
					  lowp vec4 tmpvar_8;
					  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_7 = tmpvar_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_6 = tmpvar_9;
					  diffuseSample_5 = (mix (nightSample_6, daySample_7, vec4(_DayWeight)) * _Color);
					  diffuseSample_5.xyz = (diffuseSample_5.xyz * tmpvar_1.xyz);
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_4 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = ((emissionSample_4.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_2 = diffuseSample_5.xyz;
					  tmpvar_3 = tmpvar_11;
					  mediump vec3 normalWorld_12;
					  normalWorld_12 = xlv_TEXCOORD1;
					  mediump vec4 realtimeDirTex_13;
					  lowp vec4 bakedDirTex_14;
					  mediump vec3 tmpvar_15;
					  mediump vec4 tmpvar_16;
					  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_17;
					  color_17 = tmpvar_16;
					  mediump vec4 tmpvar_18;
					  tmpvar_18 = texture2D (unity_LightmapInd, xlv_TEXCOORD4.xy);
					  bakedDirTex_14 = tmpvar_18;
					  lowp vec3 y_19;
					  y_19 = (bakedDirTex_14.xyz - 0.5);
					  lowp float tmpvar_20;
					  tmpvar_20 = max (0.0001, bakedDirTex_14.w);
					  tmpvar_15 = (((unity_Lightmap_HDR.x * color_17.xyz) * (
					    dot (normalWorld_12, y_19)
					   + 0.5)) / tmpvar_20);
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD4.zw);
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD4.zw);
					  realtimeDirTex_13 = tmpvar_22;
					  lowp vec4 dirTex_23;
					  dirTex_23 = realtimeDirTex_13;
					  lowp vec3 y_24;
					  y_24 = (dirTex_23.xyz - 0.5);
					  lowp float tmpvar_25;
					  tmpvar_25 = max (0.0001, dirTex_23.w);
					  tmpvar_15 = (tmpvar_15 + ((
					    pow (((unity_DynamicLightmap_HDR.x * tmpvar_21.w) * tmpvar_21.xyz), unity_DynamicLightmap_HDR.yyy)
					   * 
					    (dot (normalWorld_12, y_24) + 0.5)
					  ) / tmpvar_25));
					  lowp vec3 tmpvar_26;
					  mediump vec3 tmpvar_27;
					  mediump vec3 tmpvar_28;
					  mediump vec3 albedo_29;
					  albedo_29 = tmpvar_2;
					  tmpvar_28 = (albedo_29 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_26 = tmpvar_28;
					  mediump vec3 diffColor_30;
					  diffColor_30 = tmpvar_26;
					  mediump vec3 color_31;
					  highp vec3 tmpvar_32;
					  tmpvar_32 = (tmpvar_15 * diffColor_30);
					  color_31 = tmpvar_32;
					  tmpvar_27 = tmpvar_26;
					  mediump vec4 outGBuffer2_33;
					  mediump vec4 tmpvar_34;
					  tmpvar_34.xyz = tmpvar_27;
					  tmpvar_34.w = 1.0;
					  mediump vec4 tmpvar_35;
					  tmpvar_35.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_29, vec3(_Metallic));
					  tmpvar_35.w = _Glossiness;
					  highp vec4 tmpvar_36;
					  tmpvar_36.w = 1.0;
					  tmpvar_36.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_33 = tmpvar_36;
					  mediump vec4 tmpvar_37;
					  tmpvar_37.w = 1.0;
					  tmpvar_37.xyz = (tmpvar_3 + color_31);
					  gl_FragData[0] = tmpvar_34;
					  gl_FragData[1] = tmpvar_35;
					  gl_FragData[2] = outGBuffer2_33;
					  gl_FragData[3] = tmpvar_37;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					mediump float u_xlat16_15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat16_17 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_17);
					    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD4.zw);
					    u_xlat16_4.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_17 = u_xlat16_17 + 0.5;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * u_xlat16_3.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz / u_xlat16_0.xxx;
					    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1 = texture(unity_LightmapInd, vs_TEXCOORD4.xy);
					    u_xlat16_4.xyz = u_xlat16_1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_15 = max(u_xlat16_1.w, 9.99999975e-05);
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_17 = u_xlat16_17 + 0.5;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * u_xlat16_3.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz / vec3(u_xlat16_15);
					    u_xlat16_3.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat15 = (-_DayWeight) + 1.0;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat16_2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					mediump float u_xlat16_15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat16_17 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_17);
					    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD4.zw);
					    u_xlat16_4.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_17 = u_xlat16_17 + 0.5;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * u_xlat16_3.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz / u_xlat16_0.xxx;
					    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1 = texture(unity_LightmapInd, vs_TEXCOORD4.xy);
					    u_xlat16_4.xyz = u_xlat16_1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_15 = max(u_xlat16_1.w, 9.99999975e-05);
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_17 = u_xlat16_17 + 0.5;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * u_xlat16_3.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz / vec3(u_xlat16_15);
					    u_xlat16_3.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat15 = (-_DayWeight) + 1.0;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat16_2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					mediump float u_xlat16_15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat16_17 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_17);
					    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD4.zw);
					    u_xlat16_4.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_17 = u_xlat16_17 + 0.5;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * u_xlat16_3.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz / u_xlat16_0.xxx;
					    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1 = texture(unity_LightmapInd, vs_TEXCOORD4.xy);
					    u_xlat16_4.xyz = u_xlat16_1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_15 = max(u_xlat16_1.w, 9.99999975e-05);
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_17 = u_xlat16_17 + 0.5;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * u_xlat16_3.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz / vec3(u_xlat16_15);
					    u_xlat16_3.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_0.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
					    u_xlat15 = (-_DayWeight) + 1.0;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat16_2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (_WorldSpaceCameraPos - tmpvar_4);
					  tmpvar_1 = tmpvar_6;
					  tmpvar_2.zw = vec2(0.0, 0.0);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_4;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_1;
					  xlv_TEXCOORD4 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = xlv_COLOR0;
					  lowp vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  highp vec4 emissionSample_4;
					  highp vec4 diffuseSample_5;
					  highp vec4 nightSample_6;
					  highp vec4 daySample_7;
					  lowp vec4 tmpvar_8;
					  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_7 = tmpvar_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_6 = tmpvar_9;
					  diffuseSample_5 = (mix (nightSample_6, daySample_7, vec4(_DayWeight)) * _Color);
					  diffuseSample_5.xyz = (diffuseSample_5.xyz * tmpvar_1.xyz);
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_4 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = ((emissionSample_4.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_2 = diffuseSample_5.xyz;
					  tmpvar_3 = tmpvar_11;
					  mediump vec3 normalWorld_12;
					  normalWorld_12 = xlv_TEXCOORD1;
					  lowp vec4 bakedDirTex_13;
					  mediump vec3 ambient_14;
					  mediump vec4 tmpvar_15;
					  tmpvar_15.w = 1.0;
					  tmpvar_15.xyz = normalWorld_12;
					  mediump vec3 x_16;
					  x_16.x = dot (unity_SHAr, tmpvar_15);
					  x_16.y = dot (unity_SHAg, tmpvar_15);
					  x_16.z = dot (unity_SHAb, tmpvar_15);
					  mediump vec3 x1_17;
					  mediump vec4 tmpvar_18;
					  tmpvar_18 = (normalWorld_12.xyzz * normalWorld_12.yzzx);
					  x1_17.x = dot (unity_SHBr, tmpvar_18);
					  x1_17.y = dot (unity_SHBg, tmpvar_18);
					  x1_17.z = dot (unity_SHBb, tmpvar_18);
					  ambient_14 = max (vec3(0.0, 0.0, 0.0), (x_16 + (x1_17 + 
					    (unity_SHC.xyz * ((normalWorld_12.x * normalWorld_12.x) - (normalWorld_12.y * normalWorld_12.y)))
					  )));
					  mediump vec3 tmpvar_19;
					  tmpvar_19 = max (((1.055 * 
					    pow (max (ambient_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  ambient_14 = tmpvar_19;
					  mediump vec4 tmpvar_20;
					  tmpvar_20 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_21;
					  color_21 = tmpvar_20;
					  mediump vec4 tmpvar_22;
					  tmpvar_22 = texture2D (unity_LightmapInd, xlv_TEXCOORD4.xy);
					  bakedDirTex_13 = tmpvar_22;
					  lowp vec3 y_23;
					  y_23 = (bakedDirTex_13.xyz - 0.5);
					  lowp float tmpvar_24;
					  tmpvar_24 = max (0.0001, bakedDirTex_13.w);
					  lowp vec3 tmpvar_25;
					  mediump vec3 tmpvar_26;
					  mediump vec3 tmpvar_27;
					  mediump vec3 albedo_28;
					  albedo_28 = tmpvar_2;
					  tmpvar_27 = (albedo_28 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_25 = tmpvar_27;
					  mediump vec3 diffColor_29;
					  diffColor_29 = tmpvar_25;
					  tmpvar_26 = tmpvar_25;
					  mediump vec4 outGBuffer2_30;
					  mediump vec4 tmpvar_31;
					  tmpvar_31.xyz = tmpvar_26;
					  tmpvar_31.w = 1.0;
					  mediump vec4 tmpvar_32;
					  tmpvar_32.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_28, vec3(_Metallic));
					  tmpvar_32.w = _Glossiness;
					  highp vec4 tmpvar_33;
					  tmpvar_33.w = 1.0;
					  tmpvar_33.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_30 = tmpvar_33;
					  mediump vec4 tmpvar_34;
					  tmpvar_34.w = 1.0;
					  tmpvar_34.xyz = (tmpvar_3 + ((tmpvar_19 + 
					    (((unity_Lightmap_HDR.x * color_21.xyz) * (dot (normalWorld_12, y_23) + 0.5)) / tmpvar_24)
					  ) * diffColor_29));
					  gl_FragData[0] = tmpvar_31;
					  gl_FragData[1] = tmpvar_32;
					  gl_FragData[2] = outGBuffer2_30;
					  gl_FragData[3] = tmpvar_34;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (_WorldSpaceCameraPos - tmpvar_4);
					  tmpvar_1 = tmpvar_6;
					  tmpvar_2.zw = vec2(0.0, 0.0);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_4;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_1;
					  xlv_TEXCOORD4 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = xlv_COLOR0;
					  lowp vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  highp vec4 emissionSample_4;
					  highp vec4 diffuseSample_5;
					  highp vec4 nightSample_6;
					  highp vec4 daySample_7;
					  lowp vec4 tmpvar_8;
					  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_7 = tmpvar_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_6 = tmpvar_9;
					  diffuseSample_5 = (mix (nightSample_6, daySample_7, vec4(_DayWeight)) * _Color);
					  diffuseSample_5.xyz = (diffuseSample_5.xyz * tmpvar_1.xyz);
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_4 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = ((emissionSample_4.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_2 = diffuseSample_5.xyz;
					  tmpvar_3 = tmpvar_11;
					  mediump vec3 normalWorld_12;
					  normalWorld_12 = xlv_TEXCOORD1;
					  lowp vec4 bakedDirTex_13;
					  mediump vec3 tmpvar_14;
					  mediump vec3 ambient_15;
					  mediump vec4 tmpvar_16;
					  tmpvar_16.w = 1.0;
					  tmpvar_16.xyz = normalWorld_12;
					  mediump vec3 x_17;
					  x_17.x = dot (unity_SHAr, tmpvar_16);
					  x_17.y = dot (unity_SHAg, tmpvar_16);
					  x_17.z = dot (unity_SHAb, tmpvar_16);
					  mediump vec3 x1_18;
					  mediump vec4 tmpvar_19;
					  tmpvar_19 = (normalWorld_12.xyzz * normalWorld_12.yzzx);
					  x1_18.x = dot (unity_SHBr, tmpvar_19);
					  x1_18.y = dot (unity_SHBg, tmpvar_19);
					  x1_18.z = dot (unity_SHBb, tmpvar_19);
					  ambient_15 = max (vec3(0.0, 0.0, 0.0), (x_17 + (x1_18 + 
					    (unity_SHC.xyz * ((normalWorld_12.x * normalWorld_12.x) - (normalWorld_12.y * normalWorld_12.y)))
					  )));
					  mediump vec3 tmpvar_20;
					  tmpvar_20 = max (((1.055 * 
					    pow (max (ambient_15, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  ambient_15 = tmpvar_20;
					  mediump vec4 tmpvar_21;
					  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_22;
					  color_22 = tmpvar_21;
					  mediump vec4 tmpvar_23;
					  tmpvar_23 = texture2D (unity_LightmapInd, xlv_TEXCOORD4.xy);
					  bakedDirTex_13 = tmpvar_23;
					  lowp vec3 y_24;
					  y_24 = (bakedDirTex_13.xyz - 0.5);
					  lowp float tmpvar_25;
					  tmpvar_25 = max (0.0001, bakedDirTex_13.w);
					  tmpvar_14 = (tmpvar_20 + ((
					    (unity_Lightmap_HDR.x * color_22.xyz)
					   * 
					    (dot (normalWorld_12, y_24) + 0.5)
					  ) / tmpvar_25));
					  lowp vec3 tmpvar_26;
					  mediump vec3 tmpvar_27;
					  mediump vec3 tmpvar_28;
					  mediump vec3 albedo_29;
					  albedo_29 = tmpvar_2;
					  tmpvar_28 = (albedo_29 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_26 = tmpvar_28;
					  mediump vec3 diffColor_30;
					  diffColor_30 = tmpvar_26;
					  mediump vec3 color_31;
					  highp vec3 tmpvar_32;
					  tmpvar_32 = (tmpvar_14 * diffColor_30);
					  color_31 = tmpvar_32;
					  tmpvar_27 = tmpvar_26;
					  mediump vec4 outGBuffer2_33;
					  mediump vec4 tmpvar_34;
					  tmpvar_34.xyz = tmpvar_27;
					  tmpvar_34.w = 1.0;
					  mediump vec4 tmpvar_35;
					  tmpvar_35.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_29, vec3(_Metallic));
					  tmpvar_35.w = _Glossiness;
					  highp vec4 tmpvar_36;
					  tmpvar_36.w = 1.0;
					  tmpvar_36.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_33 = tmpvar_36;
					  mediump vec4 tmpvar_37;
					  tmpvar_37.w = 1.0;
					  tmpvar_37.xyz = (tmpvar_3 + color_31);
					  gl_FragData[0] = tmpvar_34;
					  gl_FragData[1] = tmpvar_35;
					  gl_FragData[2] = outGBuffer2_33;
					  gl_FragData[3] = tmpvar_37;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying lowp vec4 xlv_COLOR0;
					varying mediump vec3 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3.w = 1.0;
					  tmpvar_3.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_4;
					  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_5;
					  tmpvar_5[0] = unity_WorldToObject[0].xyz;
					  tmpvar_5[1] = unity_WorldToObject[1].xyz;
					  tmpvar_5[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (_WorldSpaceCameraPos - tmpvar_4);
					  tmpvar_1 = tmpvar_6;
					  tmpvar_2.zw = vec2(0.0, 0.0);
					  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
					  xlv_TEXCOORD2 = tmpvar_4;
					  xlv_COLOR0 = _glesColor;
					  xlv_TEXCOORD3 = tmpvar_1;
					  xlv_TEXCOORD4 = tmpvar_2;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1 = xlv_COLOR0;
					  lowp vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  highp vec4 emissionSample_4;
					  highp vec4 diffuseSample_5;
					  highp vec4 nightSample_6;
					  highp vec4 daySample_7;
					  lowp vec4 tmpvar_8;
					  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_7 = tmpvar_8;
					  lowp vec4 tmpvar_9;
					  tmpvar_9 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_6 = tmpvar_9;
					  diffuseSample_5 = (mix (nightSample_6, daySample_7, vec4(_DayWeight)) * _Color);
					  diffuseSample_5.xyz = (diffuseSample_5.xyz * tmpvar_1.xyz);
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_4 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = ((emissionSample_4.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_2 = diffuseSample_5.xyz;
					  tmpvar_3 = tmpvar_11;
					  mediump vec3 normalWorld_12;
					  normalWorld_12 = xlv_TEXCOORD1;
					  lowp vec4 bakedDirTex_13;
					  mediump vec3 tmpvar_14;
					  mediump vec3 ambient_15;
					  mediump vec4 tmpvar_16;
					  tmpvar_16.w = 1.0;
					  tmpvar_16.xyz = normalWorld_12;
					  mediump vec3 x_17;
					  x_17.x = dot (unity_SHAr, tmpvar_16);
					  x_17.y = dot (unity_SHAg, tmpvar_16);
					  x_17.z = dot (unity_SHAb, tmpvar_16);
					  mediump vec3 x1_18;
					  mediump vec4 tmpvar_19;
					  tmpvar_19 = (normalWorld_12.xyzz * normalWorld_12.yzzx);
					  x1_18.x = dot (unity_SHBr, tmpvar_19);
					  x1_18.y = dot (unity_SHBg, tmpvar_19);
					  x1_18.z = dot (unity_SHBb, tmpvar_19);
					  ambient_15 = max (vec3(0.0, 0.0, 0.0), (x_17 + (x1_18 + 
					    (unity_SHC.xyz * ((normalWorld_12.x * normalWorld_12.x) - (normalWorld_12.y * normalWorld_12.y)))
					  )));
					  mediump vec3 tmpvar_20;
					  tmpvar_20 = max (((1.055 * 
					    pow (max (ambient_15, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  ambient_15 = tmpvar_20;
					  mediump vec4 tmpvar_21;
					  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
					  lowp vec4 color_22;
					  color_22 = tmpvar_21;
					  mediump vec4 tmpvar_23;
					  tmpvar_23 = texture2D (unity_LightmapInd, xlv_TEXCOORD4.xy);
					  bakedDirTex_13 = tmpvar_23;
					  lowp vec3 y_24;
					  y_24 = (bakedDirTex_13.xyz - 0.5);
					  lowp float tmpvar_25;
					  tmpvar_25 = max (0.0001, bakedDirTex_13.w);
					  tmpvar_14 = (tmpvar_20 + ((
					    (unity_Lightmap_HDR.x * color_22.xyz)
					   * 
					    (dot (normalWorld_12, y_24) + 0.5)
					  ) / tmpvar_25));
					  lowp vec3 tmpvar_26;
					  mediump vec3 tmpvar_27;
					  mediump vec3 tmpvar_28;
					  mediump vec3 albedo_29;
					  albedo_29 = tmpvar_2;
					  tmpvar_28 = (albedo_29 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_26 = tmpvar_28;
					  mediump vec3 diffColor_30;
					  diffColor_30 = tmpvar_26;
					  mediump vec3 color_31;
					  highp vec3 tmpvar_32;
					  tmpvar_32 = (tmpvar_14 * diffColor_30);
					  color_31 = tmpvar_32;
					  tmpvar_27 = tmpvar_26;
					  mediump vec4 outGBuffer2_33;
					  mediump vec4 tmpvar_34;
					  tmpvar_34.xyz = tmpvar_27;
					  tmpvar_34.w = 1.0;
					  mediump vec4 tmpvar_35;
					  tmpvar_35.xyz = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_29, vec3(_Metallic));
					  tmpvar_35.w = _Glossiness;
					  highp vec4 tmpvar_36;
					  tmpvar_36.w = 1.0;
					  tmpvar_36.xyz = ((xlv_TEXCOORD1 * 0.5) + 0.5);
					  outGBuffer2_33 = tmpvar_36;
					  mediump vec4 tmpvar_37;
					  tmpvar_37.w = 1.0;
					  tmpvar_37.xyz = (tmpvar_3 + color_31);
					  gl_FragData[0] = tmpvar_34;
					  gl_FragData[1] = tmpvar_35;
					  gl_FragData[2] = outGBuffer2_33;
					  gl_FragData[3] = tmpvar_37;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					float u_xlat19;
					mediump float u_xlat16_19;
					mediump float u_xlat16_20;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat16_20 = vs_TEXCOORD1.y * vs_TEXCOORD1.y;
					    u_xlat16_20 = vs_TEXCOORD1.x * vs_TEXCOORD1.x + (-u_xlat16_20);
					    u_xlat16_0 = vs_TEXCOORD1.yzzx * vs_TEXCOORD1.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_20) + u_xlat16_3.xyz;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_5.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_5.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_0 = texture(unity_LightmapInd, vs_TEXCOORD4.xy);
					    u_xlat16_4.xyz = u_xlat16_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_19 = max(u_xlat16_0.w, 9.99999975e-05);
					    u_xlat16_20 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_20 = u_xlat16_20 + 0.5;
					    u_xlat16_3.xyz = vec3(u_xlat16_20) * u_xlat16_3.xyz;
					    u_xlat16_5.xyz = u_xlat16_3.xyz / vec3(u_xlat16_19);
					    u_xlat16_3.xyz = u_xlat16_1.xyz + u_xlat16_5.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_1.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
					    u_xlat19 = (-_DayWeight) + 1.0;
					    SV_Target3.xyz = u_xlat1.xyz * vec3(u_xlat19) + u_xlat16_2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					float u_xlat19;
					mediump float u_xlat16_19;
					mediump float u_xlat16_20;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat16_20 = vs_TEXCOORD1.y * vs_TEXCOORD1.y;
					    u_xlat16_20 = vs_TEXCOORD1.x * vs_TEXCOORD1.x + (-u_xlat16_20);
					    u_xlat16_0 = vs_TEXCOORD1.yzzx * vs_TEXCOORD1.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_20) + u_xlat16_3.xyz;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_5.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_5.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_0 = texture(unity_LightmapInd, vs_TEXCOORD4.xy);
					    u_xlat16_4.xyz = u_xlat16_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_19 = max(u_xlat16_0.w, 9.99999975e-05);
					    u_xlat16_20 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_20 = u_xlat16_20 + 0.5;
					    u_xlat16_3.xyz = vec3(u_xlat16_20) * u_xlat16_3.xyz;
					    u_xlat16_5.xyz = u_xlat16_3.xyz / vec3(u_xlat16_19);
					    u_xlat16_3.xyz = u_xlat16_1.xyz + u_xlat16_5.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_1.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
					    u_xlat19 = (-_DayWeight) + 1.0;
					    SV_Target3.xyz = u_xlat1.xyz * vec3(u_xlat19) + u_xlat16_2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in mediump vec4 vs_COLOR0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					float u_xlat19;
					mediump float u_xlat16_19;
					mediump float u_xlat16_20;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
					    SV_Target0.xyz = u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat16_20 = vs_TEXCOORD1.y * vs_TEXCOORD1.y;
					    u_xlat16_20 = vs_TEXCOORD1.x * vs_TEXCOORD1.x + (-u_xlat16_20);
					    u_xlat16_0 = vs_TEXCOORD1.yzzx * vs_TEXCOORD1.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_20) + u_xlat16_3.xyz;
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xyz = log2(u_xlat16_3.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_5.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_5.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_0 = texture(unity_LightmapInd, vs_TEXCOORD4.xy);
					    u_xlat16_4.xyz = u_xlat16_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_19 = max(u_xlat16_0.w, 9.99999975e-05);
					    u_xlat16_20 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_20 = u_xlat16_20 + 0.5;
					    u_xlat16_3.xyz = vec3(u_xlat16_20) * u_xlat16_3.xyz;
					    u_xlat16_5.xyz = u_xlat16_3.xyz / vec3(u_xlat16_19);
					    u_xlat16_3.xyz = u_xlat16_1.xyz + u_xlat16_5.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat10_1.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
					    u_xlat19 = (-_DayWeight) + 1.0;
					    SV_Target3.xyz = u_xlat1.xyz * vec3(u_xlat19) + u_xlat16_2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "UNITY_HDR_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "UNITY_HDR_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "UNITY_HDR_ON" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"!!GLES3"
				}
			}
		}
		Pass {
			Name "Meta"
			LOD 200
			Tags { "LIGHTMODE" = "META" "RenderType" = "Opaque" }
			Cull Off
			GpuProgramID 203862
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform bvec4 unity_MetaVertexControl;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  highp vec4 vertex_2;
					  vertex_2 = _glesVertex;
					  if (unity_MetaVertexControl.x) {
					    vertex_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					    highp float tmpvar_3;
					    if ((_glesVertex.z > 0.0)) {
					      tmpvar_3 = 0.0001;
					    } else {
					      tmpvar_3 = 0.0;
					    };
					    vertex_2.z = tmpvar_3;
					  };
					  if (unity_MetaVertexControl.y) {
					    vertex_2.xy = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					    highp float tmpvar_4;
					    if ((vertex_2.z > 0.0)) {
					      tmpvar_4 = 0.0001;
					    } else {
					      tmpvar_4 = 0.0;
					    };
					    vertex_2.z = tmpvar_4;
					  };
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = 1.0;
					  tmpvar_5.xyz = vertex_2.xyz;
					  gl_Position = (unity_MatrixVP * tmpvar_5);
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_COLOR0 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform bvec4 unity_MetaFragmentControl;
					uniform highp float unity_OneOverOutputBoost;
					uniform highp float unity_MaxOutputValue;
					uniform highp float unity_UseLinearSpace;
					varying highp vec2 xlv_TEXCOORD0;
					varying lowp vec4 xlv_COLOR0;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3 = xlv_COLOR0;
					  lowp vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  highp vec4 emissionSample_6;
					  highp vec4 diffuseSample_7;
					  highp vec4 nightSample_8;
					  highp vec4 daySample_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_9 = tmpvar_10;
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_8 = tmpvar_11;
					  diffuseSample_7 = (mix (nightSample_8, daySample_9, vec4(_DayWeight)) * _Color);
					  diffuseSample_7.xyz = (diffuseSample_7.xyz * tmpvar_3.xyz);
					  lowp vec4 tmpvar_12;
					  tmpvar_12 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_6 = tmpvar_12;
					  highp vec3 tmpvar_13;
					  tmpvar_13 = ((emissionSample_6.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_4 = diffuseSample_7.xyz;
					  tmpvar_5 = tmpvar_13;
					  tmpvar_2 = tmpvar_4;
					  mediump vec4 res_14;
					  res_14 = vec4(0.0, 0.0, 0.0, 0.0);
					  if (unity_MetaFragmentControl.x) {
					    mediump vec4 tmpvar_15;
					    tmpvar_15.w = 1.0;
					    tmpvar_15.xyz = tmpvar_2;
					    res_14.w = tmpvar_15.w;
					    highp vec3 tmpvar_16;
					    tmpvar_16 = clamp (pow (tmpvar_2, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
					    res_14.xyz = tmpvar_16;
					  };
					  if (unity_MetaFragmentControl.y) {
					    mediump vec3 emission_17;
					    if (bool(unity_UseLinearSpace)) {
					      emission_17 = tmpvar_5;
					    } else {
					      emission_17 = (tmpvar_5 * ((tmpvar_5 * 
					        ((tmpvar_5 * 0.305306) + 0.6821711)
					      ) + 0.01252288));
					    };
					    mediump vec4 tmpvar_18;
					    tmpvar_18.w = 1.0;
					    tmpvar_18.xyz = emission_17;
					    res_14 = tmpvar_18;
					  };
					  tmpvar_1 = res_14;
					  gl_FragData[0] = tmpvar_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform bvec4 unity_MetaVertexControl;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  highp vec4 vertex_2;
					  vertex_2 = _glesVertex;
					  if (unity_MetaVertexControl.x) {
					    vertex_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					    highp float tmpvar_3;
					    if ((_glesVertex.z > 0.0)) {
					      tmpvar_3 = 0.0001;
					    } else {
					      tmpvar_3 = 0.0;
					    };
					    vertex_2.z = tmpvar_3;
					  };
					  if (unity_MetaVertexControl.y) {
					    vertex_2.xy = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					    highp float tmpvar_4;
					    if ((vertex_2.z > 0.0)) {
					      tmpvar_4 = 0.0001;
					    } else {
					      tmpvar_4 = 0.0;
					    };
					    vertex_2.z = tmpvar_4;
					  };
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = 1.0;
					  tmpvar_5.xyz = vertex_2.xyz;
					  gl_Position = (unity_MatrixVP * tmpvar_5);
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_COLOR0 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform bvec4 unity_MetaFragmentControl;
					uniform highp float unity_OneOverOutputBoost;
					uniform highp float unity_MaxOutputValue;
					uniform highp float unity_UseLinearSpace;
					varying highp vec2 xlv_TEXCOORD0;
					varying lowp vec4 xlv_COLOR0;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3 = xlv_COLOR0;
					  lowp vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  highp vec4 emissionSample_6;
					  highp vec4 diffuseSample_7;
					  highp vec4 nightSample_8;
					  highp vec4 daySample_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_9 = tmpvar_10;
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_8 = tmpvar_11;
					  diffuseSample_7 = (mix (nightSample_8, daySample_9, vec4(_DayWeight)) * _Color);
					  diffuseSample_7.xyz = (diffuseSample_7.xyz * tmpvar_3.xyz);
					  lowp vec4 tmpvar_12;
					  tmpvar_12 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_6 = tmpvar_12;
					  highp vec3 tmpvar_13;
					  tmpvar_13 = ((emissionSample_6.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_4 = diffuseSample_7.xyz;
					  tmpvar_5 = tmpvar_13;
					  tmpvar_2 = tmpvar_4;
					  mediump vec4 res_14;
					  res_14 = vec4(0.0, 0.0, 0.0, 0.0);
					  if (unity_MetaFragmentControl.x) {
					    mediump vec4 tmpvar_15;
					    tmpvar_15.w = 1.0;
					    tmpvar_15.xyz = tmpvar_2;
					    res_14.w = tmpvar_15.w;
					    highp vec3 tmpvar_16;
					    tmpvar_16 = clamp (pow (tmpvar_2, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
					    res_14.xyz = tmpvar_16;
					  };
					  if (unity_MetaFragmentControl.y) {
					    mediump vec3 emission_17;
					    if (bool(unity_UseLinearSpace)) {
					      emission_17 = tmpvar_5;
					    } else {
					      emission_17 = (tmpvar_5 * ((tmpvar_5 * 
					        ((tmpvar_5 * 0.305306) + 0.6821711)
					      ) + 0.01252288));
					    };
					    mediump vec4 tmpvar_18;
					    tmpvar_18.w = 1.0;
					    tmpvar_18.xyz = emission_17;
					    res_14 = tmpvar_18;
					  };
					  tmpvar_1 = res_14;
					  gl_FragData[0] = tmpvar_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform bvec4 unity_MetaVertexControl;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying lowp vec4 xlv_COLOR0;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  highp vec4 vertex_2;
					  vertex_2 = _glesVertex;
					  if (unity_MetaVertexControl.x) {
					    vertex_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					    highp float tmpvar_3;
					    if ((_glesVertex.z > 0.0)) {
					      tmpvar_3 = 0.0001;
					    } else {
					      tmpvar_3 = 0.0;
					    };
					    vertex_2.z = tmpvar_3;
					  };
					  if (unity_MetaVertexControl.y) {
					    vertex_2.xy = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					    highp float tmpvar_4;
					    if ((vertex_2.z > 0.0)) {
					      tmpvar_4 = 0.0001;
					    } else {
					      tmpvar_4 = 0.0;
					    };
					    vertex_2.z = tmpvar_4;
					  };
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = 1.0;
					  tmpvar_5.xyz = vertex_2.xyz;
					  gl_Position = (unity_MatrixVP * tmpvar_5);
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_COLOR0 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec4 _Color;
					uniform sampler2D _MainTex;
					uniform sampler2D _NightTexture;
					uniform highp float _DayWeight;
					uniform highp vec4 _EmissionColor;
					uniform sampler2D _EmissionTex;
					uniform bvec4 unity_MetaFragmentControl;
					uniform highp float unity_OneOverOutputBoost;
					uniform highp float unity_MaxOutputValue;
					uniform highp float unity_UseLinearSpace;
					varying highp vec2 xlv_TEXCOORD0;
					varying lowp vec4 xlv_COLOR0;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec4 tmpvar_3;
					  tmpvar_3 = xlv_COLOR0;
					  lowp vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  highp vec4 emissionSample_6;
					  highp vec4 diffuseSample_7;
					  highp vec4 nightSample_8;
					  highp vec4 daySample_9;
					  lowp vec4 tmpvar_10;
					  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0);
					  daySample_9 = tmpvar_10;
					  lowp vec4 tmpvar_11;
					  tmpvar_11 = texture2D (_NightTexture, xlv_TEXCOORD0);
					  nightSample_8 = tmpvar_11;
					  diffuseSample_7 = (mix (nightSample_8, daySample_9, vec4(_DayWeight)) * _Color);
					  diffuseSample_7.xyz = (diffuseSample_7.xyz * tmpvar_3.xyz);
					  lowp vec4 tmpvar_12;
					  tmpvar_12 = texture2D (_EmissionTex, xlv_TEXCOORD0);
					  emissionSample_6 = tmpvar_12;
					  highp vec3 tmpvar_13;
					  tmpvar_13 = ((emissionSample_6.xyz * _EmissionColor.xyz) * (1.0 - _DayWeight));
					  tmpvar_4 = diffuseSample_7.xyz;
					  tmpvar_5 = tmpvar_13;
					  tmpvar_2 = tmpvar_4;
					  mediump vec4 res_14;
					  res_14 = vec4(0.0, 0.0, 0.0, 0.0);
					  if (unity_MetaFragmentControl.x) {
					    mediump vec4 tmpvar_15;
					    tmpvar_15.w = 1.0;
					    tmpvar_15.xyz = tmpvar_2;
					    res_14.w = tmpvar_15.w;
					    highp vec3 tmpvar_16;
					    tmpvar_16 = clamp (pow (tmpvar_2, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
					    res_14.xyz = tmpvar_16;
					  };
					  if (unity_MetaFragmentControl.y) {
					    mediump vec3 emission_17;
					    if (bool(unity_UseLinearSpace)) {
					      emission_17 = tmpvar_5;
					    } else {
					      emission_17 = (tmpvar_5 * ((tmpvar_5 * 
					        ((tmpvar_5 * 0.305306) + 0.6821711)
					      ) + 0.01252288));
					    };
					    mediump vec4 tmpvar_18;
					    tmpvar_18.w = 1.0;
					    tmpvar_18.xyz = emission_17;
					    res_14 = tmpvar_18;
					  };
					  tmpvar_1 = res_14;
					  gl_FragData[0] = tmpvar_1;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	bvec4 unity_MetaVertexControl;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out mediump vec4 vs_COLOR0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					bool u_xlatb6;
					void main()
					{
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(0.0<in_POSITION0.z);
					#else
					    u_xlatb0 = 0.0<in_POSITION0.z;
					#endif
					    u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
					    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb6 = 0.0<u_xlat0.z;
					#endif
					    u_xlat1.z = u_xlatb6 ? 9.99999975e-05 : float(0.0);
					    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	bvec4 unity_MetaFragmentControl;
					uniform 	float unity_OneOverOutputBoost;
					uniform 	float unity_MaxOutputValue;
					uniform 	float unity_UseLinearSpace;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					in highp vec2 vs_TEXCOORD0;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					vec3 u_xlat2;
					float u_xlat9;
					float u_xlat10;
					bool u_xlatb10;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat9 = unity_OneOverOutputBoost;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
					    u_xlat16_0.xyz = (unity_MetaFragmentControl.x) ? u_xlat0.xyz : vec3(0.0, 0.0, 0.0);
					    u_xlat10_1.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
					    u_xlat10 = (-_DayWeight) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb10 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(unity_UseLinearSpace));
					#else
					    u_xlatb10 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(unity_UseLinearSpace);
					#endif
					    u_xlat16_1.xyz = (bool(u_xlatb10)) ? u_xlat1.xyz : u_xlat2.xyz;
					    u_xlat16_0.w = (unity_MetaFragmentControl.x) ? 1.0 : 0.0;
					    u_xlat16_1.w = 1.0;
					    SV_Target0 = (unity_MetaFragmentControl.y) ? u_xlat16_1 : u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	bvec4 unity_MetaVertexControl;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out mediump vec4 vs_COLOR0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					bool u_xlatb6;
					void main()
					{
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(0.0<in_POSITION0.z);
					#else
					    u_xlatb0 = 0.0<in_POSITION0.z;
					#endif
					    u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
					    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb6 = 0.0<u_xlat0.z;
					#endif
					    u_xlat1.z = u_xlatb6 ? 9.99999975e-05 : float(0.0);
					    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	bvec4 unity_MetaFragmentControl;
					uniform 	float unity_OneOverOutputBoost;
					uniform 	float unity_MaxOutputValue;
					uniform 	float unity_UseLinearSpace;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					in highp vec2 vs_TEXCOORD0;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					vec3 u_xlat2;
					float u_xlat9;
					float u_xlat10;
					bool u_xlatb10;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat9 = unity_OneOverOutputBoost;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
					    u_xlat16_0.xyz = (unity_MetaFragmentControl.x) ? u_xlat0.xyz : vec3(0.0, 0.0, 0.0);
					    u_xlat10_1.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
					    u_xlat10 = (-_DayWeight) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb10 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(unity_UseLinearSpace));
					#else
					    u_xlatb10 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(unity_UseLinearSpace);
					#endif
					    u_xlat16_1.xyz = (bool(u_xlatb10)) ? u_xlat1.xyz : u_xlat2.xyz;
					    u_xlat16_0.w = (unity_MetaFragmentControl.x) ? 1.0 : 0.0;
					    u_xlat16_1.w = 1.0;
					    SV_Target0 = (unity_MetaFragmentControl.y) ? u_xlat16_1 : u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	bvec4 unity_MetaVertexControl;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out mediump vec4 vs_COLOR0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					bool u_xlatb6;
					void main()
					{
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(0.0<in_POSITION0.z);
					#else
					    u_xlatb0 = 0.0<in_POSITION0.z;
					#endif
					    u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
					    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb6 = 0.0<u_xlat0.z;
					#endif
					    u_xlat1.z = u_xlatb6 ? 9.99999975e-05 : float(0.0);
					    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec4 _Color;
					uniform 	float _DayWeight;
					uniform 	vec4 _EmissionColor;
					uniform 	bvec4 unity_MetaFragmentControl;
					uniform 	float unity_OneOverOutputBoost;
					uniform 	float unity_MaxOutputValue;
					uniform 	float unity_UseLinearSpace;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _NightTexture;
					uniform lowp sampler2D _EmissionTex;
					in highp vec2 vs_TEXCOORD0;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					vec3 u_xlat2;
					float u_xlat9;
					float u_xlat10;
					bool u_xlatb10;
					void main()
					{
					    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_NightTexture, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_0.xyz = u_xlat10_0.xyz + (-u_xlat10_1.xyz);
					    u_xlat0.xyz = vec3(_DayWeight) * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat9 = unity_OneOverOutputBoost;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
					    u_xlat16_0.xyz = (unity_MetaFragmentControl.x) ? u_xlat0.xyz : vec3(0.0, 0.0, 0.0);
					    u_xlat10_1.xyz = texture(_EmissionTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
					    u_xlat10 = (-_DayWeight) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb10 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(unity_UseLinearSpace));
					#else
					    u_xlatb10 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(unity_UseLinearSpace);
					#endif
					    u_xlat16_1.xyz = (bool(u_xlatb10)) ? u_xlat1.xyz : u_xlat2.xyz;
					    u_xlat16_0.w = (unity_MetaFragmentControl.x) ? 1.0 : 0.0;
					    u_xlat16_1.w = 1.0;
					    SV_Target0 = (unity_MetaFragmentControl.y) ? u_xlat16_1 : u_xlat16_0;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
	}
	Fallback "Diffuse"
}