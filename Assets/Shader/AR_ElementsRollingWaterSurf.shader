Shader "AR_Elements/RollingWaterSurf" {
	Properties {
		_Color ("Color", Vector) = (0.3,0.3,1,1)
		_MainTex ("Albedo (RGB)", 2D) = "white" {}
		_FoamTex ("Sea Foam (RGB)", 2D) = "white" {}
		_FoamColor ("Foam Color", Vector) = (1,1,1,1)
		_FoamDepth ("Foam Depth", Range(0, 1)) = 0
		_BumpMap ("BumpMap", 2D) = "bump" {}
		_BumpScale ("Bump Scale", Range(0, 1)) = 1
		_Glossiness ("Smoothness", Range(0, 1)) = 0.5
		_Metallic ("Metallic", Range(0, 1)) = 0
		_Amplitude ("Wave Height", Range(0, 100)) = 0
		_Period ("Wave Period", Range(0.001, 100)) = 0
		_Frequency ("Wave Speed", Range(0, 100)) = 0
		_WaveDir01 ("Wave Direction 01", Vector) = (1,0,0,0)
		_WaveDir02 ("Wave Direction 02", Vector) = (0.41,0,0.43,0)
		_Wave02Mult ("Wave 02 Multiplier", Vector) = (0.3,0,1.23,0)
		_WaveDir03 ("Wave Direction 03", Vector) = (0.76,0,-1,0)
		_Wave03Mult ("Wave 03 Multiplier", Vector) = (0.31,0,0.56,0)
	}
	SubShader {
		LOD 200
		Tags { "QUEUE" = "Transparent" "RenderType" = "Transparent" }
		Pass {
			Name "FORWARD"
			LOD 200
			Tags { "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
			Blend SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
			ColorMask RGB -1
			ZWrite Off
			GpuProgramID 39772
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD8 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec4 hdr_32;
					  hdr_32 = tmpvar_2;
					  mediump vec4 tmpvar_33;
					  tmpvar_33.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_33.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_34;
					  tmpvar_34 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_33.xyz, tmpvar_33.w);
					  mediump vec4 tmpvar_35;
					  tmpvar_35 = tmpvar_34;
					  lowp vec3 tmpvar_36;
					  mediump vec4 c_37;
					  highp vec3 tmpvar_38;
					  tmpvar_38 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_39;
					  mediump vec3 albedo_40;
					  albedo_40 = tmpvar_7;
					  mediump vec3 tmpvar_41;
					  tmpvar_41 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_40, vec3(_Metallic));
					  mediump float tmpvar_42;
					  tmpvar_42 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_39 = (albedo_40 * tmpvar_42);
					  tmpvar_36 = tmpvar_39;
					  mediump vec3 diffColor_43;
					  diffColor_43 = tmpvar_36;
					  mediump float alpha_44;
					  alpha_44 = tmpvar_8;
					  tmpvar_36 = diffColor_43;
					  mediump vec3 diffColor_45;
					  diffColor_45 = tmpvar_36;
					  mediump vec3 color_46;
					  mediump vec2 rlPow4AndFresnelTerm_47;
					  mediump float tmpvar_48;
					  highp float tmpvar_49;
					  tmpvar_49 = clamp (dot (tmpvar_38, tmpvar_4), 0.0, 1.0);
					  tmpvar_48 = tmpvar_49;
					  mediump float tmpvar_50;
					  highp float tmpvar_51;
					  tmpvar_51 = clamp (dot (tmpvar_38, worldViewDir_9), 0.0, 1.0);
					  tmpvar_50 = tmpvar_51;
					  highp vec2 tmpvar_52;
					  tmpvar_52.x = dot ((worldViewDir_9 - (2.0 * 
					    (dot (tmpvar_38, worldViewDir_9) * tmpvar_38)
					  )), tmpvar_4);
					  tmpvar_52.y = (1.0 - tmpvar_50);
					  highp vec2 tmpvar_53;
					  tmpvar_53 = ((tmpvar_52 * tmpvar_52) * (tmpvar_52 * tmpvar_52));
					  rlPow4AndFresnelTerm_47 = tmpvar_53;
					  mediump float tmpvar_54;
					  tmpvar_54 = rlPow4AndFresnelTerm_47.x;
					  mediump float specular_55;
					  highp float smoothness_56;
					  smoothness_56 = _Glossiness;
					  highp vec2 tmpvar_57;
					  tmpvar_57.x = tmpvar_54;
					  tmpvar_57.y = (1.0 - smoothness_56);
					  highp float tmpvar_58;
					  tmpvar_58 = (texture2D (unity_NHxRoughness, tmpvar_57).x * 16.0);
					  specular_55 = tmpvar_58;
					  color_46 = ((diffColor_45 + (specular_55 * tmpvar_41)) * (tmpvar_3 * tmpvar_48));
					  color_46 = (color_46 + ((
					    (hdr_32.x * ((hdr_32.w * (tmpvar_35.w - 1.0)) + 1.0))
					   * tmpvar_35.xyz) * mix (tmpvar_41, vec3(
					    clamp ((_Glossiness + (1.0 - tmpvar_42)), 0.0, 1.0)
					  ), rlPow4AndFresnelTerm_47.yyy)));
					  mediump vec4 tmpvar_59;
					  tmpvar_59.w = 1.0;
					  tmpvar_59.xyz = color_46;
					  c_37.xyz = tmpvar_59.xyz;
					  c_37.w = alpha_44;
					  c_6 = c_37;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD8 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 tmpvar_32;
					  mediump vec4 hdr_33;
					  hdr_33 = tmpvar_2;
					  mediump vec4 tmpvar_34;
					  tmpvar_34.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_34.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_35;
					  tmpvar_35 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_34.xyz, tmpvar_34.w);
					  mediump vec4 tmpvar_36;
					  tmpvar_36 = tmpvar_35;
					  tmpvar_32 = ((hdr_33.x * (
					    (hdr_33.w * (tmpvar_36.w - 1.0))
					   + 1.0)) * tmpvar_36.xyz);
					  lowp vec3 tmpvar_37;
					  mediump vec4 c_38;
					  highp vec3 tmpvar_39;
					  tmpvar_39 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_40;
					  mediump vec3 albedo_41;
					  albedo_41 = tmpvar_7;
					  mediump vec3 tmpvar_42;
					  tmpvar_42 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_41, vec3(_Metallic));
					  mediump float tmpvar_43;
					  tmpvar_43 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_40 = (albedo_41 * tmpvar_43);
					  tmpvar_37 = tmpvar_40;
					  mediump vec3 diffColor_44;
					  diffColor_44 = tmpvar_37;
					  mediump float alpha_45;
					  alpha_45 = tmpvar_8;
					  tmpvar_37 = diffColor_44;
					  mediump vec3 diffColor_46;
					  diffColor_46 = tmpvar_37;
					  mediump vec3 color_47;
					  mediump float surfaceReduction_48;
					  highp float specularTerm_49;
					  highp float a2_50;
					  mediump float roughness_51;
					  mediump float perceptualRoughness_52;
					  highp vec3 tmpvar_53;
					  highp vec3 inVec_54;
					  inVec_54 = (tmpvar_4 + worldViewDir_9);
					  tmpvar_53 = (inVec_54 * inversesqrt(max (0.001, 
					    dot (inVec_54, inVec_54)
					  )));
					  mediump float tmpvar_55;
					  highp float tmpvar_56;
					  tmpvar_56 = clamp (dot (tmpvar_39, tmpvar_4), 0.0, 1.0);
					  tmpvar_55 = tmpvar_56;
					  highp float tmpvar_57;
					  tmpvar_57 = clamp (dot (tmpvar_39, tmpvar_53), 0.0, 1.0);
					  mediump float tmpvar_58;
					  highp float tmpvar_59;
					  tmpvar_59 = clamp (dot (tmpvar_39, worldViewDir_9), 0.0, 1.0);
					  tmpvar_58 = tmpvar_59;
					  highp float tmpvar_60;
					  highp float smoothness_61;
					  smoothness_61 = _Glossiness;
					  tmpvar_60 = (1.0 - smoothness_61);
					  perceptualRoughness_52 = tmpvar_60;
					  highp float tmpvar_62;
					  highp float perceptualRoughness_63;
					  perceptualRoughness_63 = perceptualRoughness_52;
					  tmpvar_62 = (perceptualRoughness_63 * perceptualRoughness_63);
					  roughness_51 = tmpvar_62;
					  mediump float tmpvar_64;
					  tmpvar_64 = (roughness_51 * roughness_51);
					  a2_50 = tmpvar_64;
					  specularTerm_49 = ((roughness_51 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_53), 0.0, 1.0)) * (1.5 + roughness_51))
					   * 
					    (((tmpvar_57 * tmpvar_57) * (a2_50 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_65;
					  tmpvar_65 = clamp (specularTerm_49, 0.0, 100.0);
					  specularTerm_49 = tmpvar_65;
					  surfaceReduction_48 = (1.0 - ((roughness_51 * perceptualRoughness_52) * 0.28));
					  mediump float x_66;
					  x_66 = (1.0 - tmpvar_58);
					  mediump vec3 tmpvar_67;
					  tmpvar_67 = mix (tmpvar_42, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_43)
					  ), 0.0, 1.0)), vec3(((x_66 * x_66) * (x_66 * x_66))));
					  highp vec3 tmpvar_68;
					  tmpvar_68 = (((
					    (diffColor_46 + (tmpvar_65 * tmpvar_42))
					   * tmpvar_3) * tmpvar_55) + ((surfaceReduction_48 * tmpvar_32) * tmpvar_67));
					  color_47 = tmpvar_68;
					  mediump vec4 tmpvar_69;
					  tmpvar_69.w = 1.0;
					  tmpvar_69.xyz = color_47;
					  c_38.xyz = tmpvar_69.xyz;
					  c_38.w = alpha_45;
					  c_6 = c_38;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD8 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 tmpvar_32;
					  mediump vec4 hdr_33;
					  hdr_33 = tmpvar_2;
					  mediump vec4 tmpvar_34;
					  tmpvar_34.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_34.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_35;
					  tmpvar_35 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_34.xyz, tmpvar_34.w);
					  mediump vec4 tmpvar_36;
					  tmpvar_36 = tmpvar_35;
					  tmpvar_32 = ((hdr_33.x * (
					    (hdr_33.w * (tmpvar_36.w - 1.0))
					   + 1.0)) * tmpvar_36.xyz);
					  lowp vec3 tmpvar_37;
					  mediump vec4 c_38;
					  highp vec3 tmpvar_39;
					  tmpvar_39 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_40;
					  mediump vec3 albedo_41;
					  albedo_41 = tmpvar_7;
					  mediump vec3 tmpvar_42;
					  tmpvar_42 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_41, vec3(_Metallic));
					  mediump float tmpvar_43;
					  tmpvar_43 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_40 = (albedo_41 * tmpvar_43);
					  tmpvar_37 = tmpvar_40;
					  mediump vec3 diffColor_44;
					  diffColor_44 = tmpvar_37;
					  mediump float alpha_45;
					  alpha_45 = tmpvar_8;
					  tmpvar_37 = diffColor_44;
					  mediump vec3 diffColor_46;
					  diffColor_46 = tmpvar_37;
					  mediump vec3 color_47;
					  mediump float surfaceReduction_48;
					  highp float specularTerm_49;
					  highp float a2_50;
					  mediump float roughness_51;
					  mediump float perceptualRoughness_52;
					  highp vec3 tmpvar_53;
					  highp vec3 inVec_54;
					  inVec_54 = (tmpvar_4 + worldViewDir_9);
					  tmpvar_53 = (inVec_54 * inversesqrt(max (0.001, 
					    dot (inVec_54, inVec_54)
					  )));
					  mediump float tmpvar_55;
					  highp float tmpvar_56;
					  tmpvar_56 = clamp (dot (tmpvar_39, tmpvar_4), 0.0, 1.0);
					  tmpvar_55 = tmpvar_56;
					  highp float tmpvar_57;
					  tmpvar_57 = clamp (dot (tmpvar_39, tmpvar_53), 0.0, 1.0);
					  mediump float tmpvar_58;
					  highp float tmpvar_59;
					  tmpvar_59 = clamp (dot (tmpvar_39, worldViewDir_9), 0.0, 1.0);
					  tmpvar_58 = tmpvar_59;
					  highp float tmpvar_60;
					  highp float smoothness_61;
					  smoothness_61 = _Glossiness;
					  tmpvar_60 = (1.0 - smoothness_61);
					  perceptualRoughness_52 = tmpvar_60;
					  highp float tmpvar_62;
					  highp float perceptualRoughness_63;
					  perceptualRoughness_63 = perceptualRoughness_52;
					  tmpvar_62 = (perceptualRoughness_63 * perceptualRoughness_63);
					  roughness_51 = tmpvar_62;
					  mediump float tmpvar_64;
					  tmpvar_64 = (roughness_51 * roughness_51);
					  a2_50 = tmpvar_64;
					  specularTerm_49 = ((roughness_51 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_53), 0.0, 1.0)) * (1.5 + roughness_51))
					   * 
					    (((tmpvar_57 * tmpvar_57) * (a2_50 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_65;
					  tmpvar_65 = clamp (specularTerm_49, 0.0, 100.0);
					  specularTerm_49 = tmpvar_65;
					  surfaceReduction_48 = (1.0 - ((roughness_51 * perceptualRoughness_52) * 0.28));
					  mediump float x_66;
					  x_66 = (1.0 - tmpvar_58);
					  mediump vec3 tmpvar_67;
					  tmpvar_67 = mix (tmpvar_42, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_43)
					  ), 0.0, 1.0)), vec3(((x_66 * x_66) * (x_66 * x_66))));
					  highp vec3 tmpvar_68;
					  tmpvar_68 = (((
					    (diffColor_46 + (tmpvar_65 * tmpvar_42))
					   * tmpvar_3) * tmpvar_55) + ((surfaceReduction_48 * tmpvar_32) * tmpvar_67));
					  color_47 = tmpvar_68;
					  mediump vec4 tmpvar_69;
					  tmpvar_69.w = 1.0;
					  tmpvar_69.xyz = color_47;
					  c_38.xyz = tmpvar_69.xyz;
					  c_38.w = alpha_45;
					  c_6 = c_38;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_8;
					vec2 u_xlat16;
					float u_xlat24;
					float u_xlat25;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat10_1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat10_1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat10_1.xyz);
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat16_3.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat1.xyz * (-u_xlat16_3.xxx) + (-u_xlat0.xyz);
					    u_xlat2.z = (-_Glossiness) + 1.0;
					    u_xlat16_27 = (-u_xlat2.z) * 0.699999988 + 1.70000005;
					    u_xlat16_27 = u_xlat2.z * u_xlat16_27;
					    u_xlat16_27 = u_xlat16_27 * 6.0;
					    u_xlat10_3 = textureLod(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_27);
					    u_xlat16_4.x = u_xlat10_3.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_3.xyz * u_xlat16_4.xxx;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat25 = u_xlat24;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat24 = u_xlat24 + u_xlat24;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat2.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat2.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_28 = (-u_xlat25) + 1.0;
					    u_xlat16_8 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_8 = u_xlat16_28 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_28 * u_xlat16_8;
					    u_xlat16.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat16.x = texture(_CameraDepthTexture, u_xlat16.xy).x;
					    u_xlat16.x = _ZBufferParams.z * u_xlat16.x + _ZBufferParams.w;
					    u_xlat16.x = float(1.0) / u_xlat16.x;
					    u_xlat16.x = u_xlat16.x + (-vs_TEXCOORD4.w);
					    u_xlat16.x = u_xlat16.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
					#else
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					#endif
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat16.x = u_xlat16.x * _FoamColor.w + u_xlat16.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
					#else
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					#endif
					    u_xlat10_1 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * _Color;
					    u_xlat16_1 = u_xlat10_1 * _FoamColor + (-u_xlat16_2);
					    u_xlat1 = u_xlat16.xxxx * u_xlat16_1 + u_xlat16_2;
					    u_xlat16_6.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_28 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_29 = (-u_xlat16_28) + _Glossiness;
					    u_xlat16_29 = u_xlat16_29 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
					#else
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_29);
					    u_xlat16_7.xyz = vec3(u_xlat16_8) * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat16_28) + u_xlat16_6.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					lowp vec4 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat8;
					vec2 u_xlat9;
					float u_xlat16;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_28;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat10_2.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, u_xlat10_2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD2.xyz, u_xlat10_2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD3.xyz, u_xlat10_2.xyz);
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat3.xyz;
					    u_xlat16_4.x = dot((-u_xlat1.xyz), u_xlat2.xyz);
					    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;
					    u_xlat16_4.xyz = u_xlat2.xyz * (-u_xlat16_4.xxx) + (-u_xlat1.xyz);
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat16_28 = (-u_xlat24) + 1.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_24 = (-_Glossiness) + 1.0;
					    u_xlat16_5.x = (-u_xlat16_24) * 0.699999988 + 1.70000005;
					    u_xlat16_5.x = u_xlat16_24 * u_xlat16_5.x;
					    u_xlat16_5.x = u_xlat16_5.x * 6.0;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_5.x);
					    u_xlat16_4.x = u_xlat10_1.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_1 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_5.x = u_xlat16_24 * u_xlat16_1;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24 + 1.5;
					    u_xlat16_5.x = (-u_xlat16_5.x) * 0.280000001 + 1.0;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xxx;
					    u_xlat9.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat9.x = texture(_CameraDepthTexture, u_xlat9.xy).x;
					    u_xlat9.x = _ZBufferParams.z * u_xlat9.x + _ZBufferParams.w;
					    u_xlat9.x = float(1.0) / u_xlat9.x;
					    u_xlat9.x = u_xlat9.x + (-vs_TEXCOORD4.w);
					    u_xlat9.x = u_xlat9.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat9.x = (-u_xlat9.x) + 1.0;
					    u_xlat9.x = u_xlat9.x * _FoamColor.w + u_xlat9.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat10_3 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_5 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_5 = u_xlat10_5 * _Color;
					    u_xlat16_3 = u_xlat10_3 * _FoamColor + (-u_xlat16_5);
					    u_xlat3 = u_xlat9.xxxx * u_xlat16_3 + u_xlat16_5;
					    u_xlat16_6.xyz = u_xlat3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_7.x = (-u_xlat16_30) + _Glossiness;
					    u_xlat16_7.x = u_xlat16_7.x + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
					#else
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xxx;
					    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    u_xlat9.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9.x = max(u_xlat9.x, 0.00100000005);
					    u_xlat9.x = inversesqrt(u_xlat9.x);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat9.xxx;
					    u_xlat9.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat8 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
					#else
					    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16 = max(u_xlat9.x, 0.319999993);
					    u_xlat16 = u_xlat16_24 * u_xlat16;
					    u_xlat16_24 = u_xlat16_1 * u_xlat16_1 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_24 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat16;
					    u_xlat0.x = u_xlat16_1 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat16_6.xyz * u_xlat0.xxx;
					    u_xlat0.xzw = u_xlat3.xyz * vec3(u_xlat16_30) + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat0.xzw * vec3(u_xlat8) + u_xlat16_4.xyz;
					    SV_Target0 = u_xlat3;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					lowp vec4 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat8;
					vec2 u_xlat9;
					float u_xlat16;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_28;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat10_2.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, u_xlat10_2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD2.xyz, u_xlat10_2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD3.xyz, u_xlat10_2.xyz);
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat3.xyz;
					    u_xlat16_4.x = dot((-u_xlat1.xyz), u_xlat2.xyz);
					    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;
					    u_xlat16_4.xyz = u_xlat2.xyz * (-u_xlat16_4.xxx) + (-u_xlat1.xyz);
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat16_28 = (-u_xlat24) + 1.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_24 = (-_Glossiness) + 1.0;
					    u_xlat16_5.x = (-u_xlat16_24) * 0.699999988 + 1.70000005;
					    u_xlat16_5.x = u_xlat16_24 * u_xlat16_5.x;
					    u_xlat16_5.x = u_xlat16_5.x * 6.0;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_5.x);
					    u_xlat16_4.x = u_xlat10_1.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_1 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_5.x = u_xlat16_24 * u_xlat16_1;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24 + 1.5;
					    u_xlat16_5.x = (-u_xlat16_5.x) * 0.280000001 + 1.0;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xxx;
					    u_xlat9.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat9.x = texture(_CameraDepthTexture, u_xlat9.xy).x;
					    u_xlat9.x = _ZBufferParams.z * u_xlat9.x + _ZBufferParams.w;
					    u_xlat9.x = float(1.0) / u_xlat9.x;
					    u_xlat9.x = u_xlat9.x + (-vs_TEXCOORD4.w);
					    u_xlat9.x = u_xlat9.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat9.x = (-u_xlat9.x) + 1.0;
					    u_xlat9.x = u_xlat9.x * _FoamColor.w + u_xlat9.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat10_3 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_5 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_5 = u_xlat10_5 * _Color;
					    u_xlat16_3 = u_xlat10_3 * _FoamColor + (-u_xlat16_5);
					    u_xlat3 = u_xlat9.xxxx * u_xlat16_3 + u_xlat16_5;
					    u_xlat16_6.xyz = u_xlat3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_7.x = (-u_xlat16_30) + _Glossiness;
					    u_xlat16_7.x = u_xlat16_7.x + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
					#else
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xxx;
					    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    u_xlat9.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9.x = max(u_xlat9.x, 0.00100000005);
					    u_xlat9.x = inversesqrt(u_xlat9.x);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat9.xxx;
					    u_xlat9.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat8 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
					#else
					    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16 = max(u_xlat9.x, 0.319999993);
					    u_xlat16 = u_xlat16_24 * u_xlat16;
					    u_xlat16_24 = u_xlat16_1 * u_xlat16_1 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_24 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat16;
					    u_xlat0.x = u_xlat16_1 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat16_6.xyz * u_xlat0.xxx;
					    u_xlat0.xzw = u_xlat3.xyz * vec3(u_xlat16_30) + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat0.xzw * vec3(u_xlat8) + u_xlat16_4.xyz;
					    SV_Target0 = u_xlat3;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying mediump vec3 xlv_TEXCOORD6;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  mediump vec3 normal_37;
					  normal_37 = tmpvar_26;
					  mediump vec3 x1_38;
					  mediump vec4 tmpvar_39;
					  tmpvar_39 = (normal_37.xyzz * normal_37.yzzx);
					  x1_38.x = dot (unity_SHBr, tmpvar_39);
					  x1_38.y = dot (unity_SHBg, tmpvar_39);
					  x1_38.z = dot (unity_SHBb, tmpvar_39);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD6 = (x1_38 + (unity_SHC.xyz * (
					    (normal_37.x * normal_37.x)
					   - 
					    (normal_37.y * normal_37.y)
					  )));
					  xlv_TEXCOORD8 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying mediump vec3 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = tmpvar_26;
					  mediump vec4 tmpvar_33;
					  tmpvar_33.w = 1.0;
					  tmpvar_33.xyz = normalWorld_32;
					  mediump vec3 x_34;
					  x_34.x = dot (unity_SHAr, tmpvar_33);
					  x_34.y = dot (unity_SHAg, tmpvar_33);
					  x_34.z = dot (unity_SHAb, tmpvar_33);
					  mediump vec4 hdr_35;
					  hdr_35 = tmpvar_2;
					  mediump vec4 tmpvar_36;
					  tmpvar_36.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_36.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_37;
					  tmpvar_37 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_36.xyz, tmpvar_36.w);
					  mediump vec4 tmpvar_38;
					  tmpvar_38 = tmpvar_37;
					  lowp vec3 tmpvar_39;
					  mediump vec4 c_40;
					  highp vec3 tmpvar_41;
					  tmpvar_41 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_42;
					  mediump vec3 albedo_43;
					  albedo_43 = tmpvar_7;
					  mediump vec3 tmpvar_44;
					  tmpvar_44 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_43, vec3(_Metallic));
					  mediump float tmpvar_45;
					  tmpvar_45 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_42 = (albedo_43 * tmpvar_45);
					  tmpvar_39 = tmpvar_42;
					  mediump vec3 diffColor_46;
					  diffColor_46 = tmpvar_39;
					  mediump float alpha_47;
					  alpha_47 = tmpvar_8;
					  tmpvar_39 = diffColor_46;
					  mediump vec3 diffColor_48;
					  diffColor_48 = tmpvar_39;
					  mediump vec3 color_49;
					  mediump vec2 rlPow4AndFresnelTerm_50;
					  mediump float tmpvar_51;
					  highp float tmpvar_52;
					  tmpvar_52 = clamp (dot (tmpvar_41, tmpvar_4), 0.0, 1.0);
					  tmpvar_51 = tmpvar_52;
					  mediump float tmpvar_53;
					  highp float tmpvar_54;
					  tmpvar_54 = clamp (dot (tmpvar_41, worldViewDir_9), 0.0, 1.0);
					  tmpvar_53 = tmpvar_54;
					  highp vec2 tmpvar_55;
					  tmpvar_55.x = dot ((worldViewDir_9 - (2.0 * 
					    (dot (tmpvar_41, worldViewDir_9) * tmpvar_41)
					  )), tmpvar_4);
					  tmpvar_55.y = (1.0 - tmpvar_53);
					  highp vec2 tmpvar_56;
					  tmpvar_56 = ((tmpvar_55 * tmpvar_55) * (tmpvar_55 * tmpvar_55));
					  rlPow4AndFresnelTerm_50 = tmpvar_56;
					  mediump float tmpvar_57;
					  tmpvar_57 = rlPow4AndFresnelTerm_50.x;
					  mediump float specular_58;
					  highp float smoothness_59;
					  smoothness_59 = _Glossiness;
					  highp vec2 tmpvar_60;
					  tmpvar_60.x = tmpvar_57;
					  tmpvar_60.y = (1.0 - smoothness_59);
					  highp float tmpvar_61;
					  tmpvar_61 = (texture2D (unity_NHxRoughness, tmpvar_60).x * 16.0);
					  specular_58 = tmpvar_61;
					  color_49 = ((diffColor_48 + (specular_58 * tmpvar_44)) * (tmpvar_3 * tmpvar_51));
					  color_49 = (color_49 + ((
					    max (((1.055 * pow (
					      max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD6 + x_34))
					    , vec3(0.4166667, 0.4166667, 0.4166667))) - 0.055), vec3(0.0, 0.0, 0.0))
					   * diffColor_48) + (
					    ((hdr_35.x * ((hdr_35.w * 
					      (tmpvar_38.w - 1.0)
					    ) + 1.0)) * tmpvar_38.xyz)
					   * 
					    mix (tmpvar_44, vec3(clamp ((_Glossiness + (1.0 - tmpvar_45)), 0.0, 1.0)), rlPow4AndFresnelTerm_50.yyy)
					  )));
					  mediump vec4 tmpvar_62;
					  tmpvar_62.w = 1.0;
					  tmpvar_62.xyz = color_49;
					  c_40.xyz = tmpvar_62.xyz;
					  c_40.w = alpha_47;
					  c_6 = c_40;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying mediump vec3 xlv_TEXCOORD6;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  mediump vec3 normal_37;
					  normal_37 = tmpvar_26;
					  mediump vec3 x1_38;
					  mediump vec4 tmpvar_39;
					  tmpvar_39 = (normal_37.xyzz * normal_37.yzzx);
					  x1_38.x = dot (unity_SHBr, tmpvar_39);
					  x1_38.y = dot (unity_SHBg, tmpvar_39);
					  x1_38.z = dot (unity_SHBb, tmpvar_39);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD6 = (x1_38 + (unity_SHC.xyz * (
					    (normal_37.x * normal_37.x)
					   - 
					    (normal_37.y * normal_37.y)
					  )));
					  xlv_TEXCOORD8 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying mediump vec3 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = tmpvar_26;
					  mediump vec3 tmpvar_33;
					  mediump vec3 tmpvar_34;
					  mediump vec4 tmpvar_35;
					  tmpvar_35.w = 1.0;
					  tmpvar_35.xyz = normalWorld_32;
					  mediump vec3 x_36;
					  x_36.x = dot (unity_SHAr, tmpvar_35);
					  x_36.y = dot (unity_SHAg, tmpvar_35);
					  x_36.z = dot (unity_SHAb, tmpvar_35);
					  tmpvar_34 = max (((1.055 * 
					    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD6 + x_36)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  mediump vec4 hdr_37;
					  hdr_37 = tmpvar_2;
					  mediump vec4 tmpvar_38;
					  tmpvar_38.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_38.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_39;
					  tmpvar_39 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_38.xyz, tmpvar_38.w);
					  mediump vec4 tmpvar_40;
					  tmpvar_40 = tmpvar_39;
					  tmpvar_33 = ((hdr_37.x * (
					    (hdr_37.w * (tmpvar_40.w - 1.0))
					   + 1.0)) * tmpvar_40.xyz);
					  lowp vec3 tmpvar_41;
					  mediump vec4 c_42;
					  highp vec3 tmpvar_43;
					  tmpvar_43 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_44;
					  mediump vec3 albedo_45;
					  albedo_45 = tmpvar_7;
					  mediump vec3 tmpvar_46;
					  tmpvar_46 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_45, vec3(_Metallic));
					  mediump float tmpvar_47;
					  tmpvar_47 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_44 = (albedo_45 * tmpvar_47);
					  tmpvar_41 = tmpvar_44;
					  mediump vec3 diffColor_48;
					  diffColor_48 = tmpvar_41;
					  mediump float alpha_49;
					  alpha_49 = tmpvar_8;
					  tmpvar_41 = diffColor_48;
					  mediump vec3 diffColor_50;
					  diffColor_50 = tmpvar_41;
					  mediump vec3 color_51;
					  mediump float surfaceReduction_52;
					  highp float specularTerm_53;
					  highp float a2_54;
					  mediump float roughness_55;
					  mediump float perceptualRoughness_56;
					  highp vec3 tmpvar_57;
					  highp vec3 inVec_58;
					  inVec_58 = (tmpvar_4 + worldViewDir_9);
					  tmpvar_57 = (inVec_58 * inversesqrt(max (0.001, 
					    dot (inVec_58, inVec_58)
					  )));
					  mediump float tmpvar_59;
					  highp float tmpvar_60;
					  tmpvar_60 = clamp (dot (tmpvar_43, tmpvar_4), 0.0, 1.0);
					  tmpvar_59 = tmpvar_60;
					  highp float tmpvar_61;
					  tmpvar_61 = clamp (dot (tmpvar_43, tmpvar_57), 0.0, 1.0);
					  mediump float tmpvar_62;
					  highp float tmpvar_63;
					  tmpvar_63 = clamp (dot (tmpvar_43, worldViewDir_9), 0.0, 1.0);
					  tmpvar_62 = tmpvar_63;
					  highp float tmpvar_64;
					  highp float smoothness_65;
					  smoothness_65 = _Glossiness;
					  tmpvar_64 = (1.0 - smoothness_65);
					  perceptualRoughness_56 = tmpvar_64;
					  highp float tmpvar_66;
					  highp float perceptualRoughness_67;
					  perceptualRoughness_67 = perceptualRoughness_56;
					  tmpvar_66 = (perceptualRoughness_67 * perceptualRoughness_67);
					  roughness_55 = tmpvar_66;
					  mediump float tmpvar_68;
					  tmpvar_68 = (roughness_55 * roughness_55);
					  a2_54 = tmpvar_68;
					  specularTerm_53 = ((roughness_55 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_57), 0.0, 1.0)) * (1.5 + roughness_55))
					   * 
					    (((tmpvar_61 * tmpvar_61) * (a2_54 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_69;
					  tmpvar_69 = clamp (specularTerm_53, 0.0, 100.0);
					  specularTerm_53 = tmpvar_69;
					  surfaceReduction_52 = (1.0 - ((roughness_55 * perceptualRoughness_56) * 0.28));
					  mediump float x_70;
					  x_70 = (1.0 - tmpvar_62);
					  mediump vec3 tmpvar_71;
					  tmpvar_71 = mix (tmpvar_46, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_47)
					  ), 0.0, 1.0)), vec3(((x_70 * x_70) * (x_70 * x_70))));
					  highp vec3 tmpvar_72;
					  tmpvar_72 = (((
					    ((diffColor_50 + (tmpvar_69 * tmpvar_46)) * tmpvar_3)
					   * tmpvar_59) + (tmpvar_34 * diffColor_50)) + ((surfaceReduction_52 * tmpvar_33) * tmpvar_71));
					  color_51 = tmpvar_72;
					  mediump vec4 tmpvar_73;
					  tmpvar_73.w = 1.0;
					  tmpvar_73.xyz = color_51;
					  c_42.xyz = tmpvar_73.xyz;
					  c_42.w = alpha_49;
					  c_6 = c_42;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying mediump vec3 xlv_TEXCOORD6;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  mediump vec3 normal_37;
					  normal_37 = tmpvar_26;
					  mediump vec3 x1_38;
					  mediump vec4 tmpvar_39;
					  tmpvar_39 = (normal_37.xyzz * normal_37.yzzx);
					  x1_38.x = dot (unity_SHBr, tmpvar_39);
					  x1_38.y = dot (unity_SHBg, tmpvar_39);
					  x1_38.z = dot (unity_SHBb, tmpvar_39);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD6 = (x1_38 + (unity_SHC.xyz * (
					    (normal_37.x * normal_37.x)
					   - 
					    (normal_37.y * normal_37.y)
					  )));
					  xlv_TEXCOORD8 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying mediump vec3 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = tmpvar_26;
					  mediump vec3 tmpvar_33;
					  mediump vec3 tmpvar_34;
					  mediump vec4 tmpvar_35;
					  tmpvar_35.w = 1.0;
					  tmpvar_35.xyz = normalWorld_32;
					  mediump vec3 x_36;
					  x_36.x = dot (unity_SHAr, tmpvar_35);
					  x_36.y = dot (unity_SHAg, tmpvar_35);
					  x_36.z = dot (unity_SHAb, tmpvar_35);
					  tmpvar_34 = max (((1.055 * 
					    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD6 + x_36)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  mediump vec4 hdr_37;
					  hdr_37 = tmpvar_2;
					  mediump vec4 tmpvar_38;
					  tmpvar_38.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_38.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_39;
					  tmpvar_39 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_38.xyz, tmpvar_38.w);
					  mediump vec4 tmpvar_40;
					  tmpvar_40 = tmpvar_39;
					  tmpvar_33 = ((hdr_37.x * (
					    (hdr_37.w * (tmpvar_40.w - 1.0))
					   + 1.0)) * tmpvar_40.xyz);
					  lowp vec3 tmpvar_41;
					  mediump vec4 c_42;
					  highp vec3 tmpvar_43;
					  tmpvar_43 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_44;
					  mediump vec3 albedo_45;
					  albedo_45 = tmpvar_7;
					  mediump vec3 tmpvar_46;
					  tmpvar_46 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_45, vec3(_Metallic));
					  mediump float tmpvar_47;
					  tmpvar_47 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_44 = (albedo_45 * tmpvar_47);
					  tmpvar_41 = tmpvar_44;
					  mediump vec3 diffColor_48;
					  diffColor_48 = tmpvar_41;
					  mediump float alpha_49;
					  alpha_49 = tmpvar_8;
					  tmpvar_41 = diffColor_48;
					  mediump vec3 diffColor_50;
					  diffColor_50 = tmpvar_41;
					  mediump vec3 color_51;
					  mediump float surfaceReduction_52;
					  highp float specularTerm_53;
					  highp float a2_54;
					  mediump float roughness_55;
					  mediump float perceptualRoughness_56;
					  highp vec3 tmpvar_57;
					  highp vec3 inVec_58;
					  inVec_58 = (tmpvar_4 + worldViewDir_9);
					  tmpvar_57 = (inVec_58 * inversesqrt(max (0.001, 
					    dot (inVec_58, inVec_58)
					  )));
					  mediump float tmpvar_59;
					  highp float tmpvar_60;
					  tmpvar_60 = clamp (dot (tmpvar_43, tmpvar_4), 0.0, 1.0);
					  tmpvar_59 = tmpvar_60;
					  highp float tmpvar_61;
					  tmpvar_61 = clamp (dot (tmpvar_43, tmpvar_57), 0.0, 1.0);
					  mediump float tmpvar_62;
					  highp float tmpvar_63;
					  tmpvar_63 = clamp (dot (tmpvar_43, worldViewDir_9), 0.0, 1.0);
					  tmpvar_62 = tmpvar_63;
					  highp float tmpvar_64;
					  highp float smoothness_65;
					  smoothness_65 = _Glossiness;
					  tmpvar_64 = (1.0 - smoothness_65);
					  perceptualRoughness_56 = tmpvar_64;
					  highp float tmpvar_66;
					  highp float perceptualRoughness_67;
					  perceptualRoughness_67 = perceptualRoughness_56;
					  tmpvar_66 = (perceptualRoughness_67 * perceptualRoughness_67);
					  roughness_55 = tmpvar_66;
					  mediump float tmpvar_68;
					  tmpvar_68 = (roughness_55 * roughness_55);
					  a2_54 = tmpvar_68;
					  specularTerm_53 = ((roughness_55 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_57), 0.0, 1.0)) * (1.5 + roughness_55))
					   * 
					    (((tmpvar_61 * tmpvar_61) * (a2_54 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_69;
					  tmpvar_69 = clamp (specularTerm_53, 0.0, 100.0);
					  specularTerm_53 = tmpvar_69;
					  surfaceReduction_52 = (1.0 - ((roughness_55 * perceptualRoughness_56) * 0.28));
					  mediump float x_70;
					  x_70 = (1.0 - tmpvar_62);
					  mediump vec3 tmpvar_71;
					  tmpvar_71 = mix (tmpvar_46, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_47)
					  ), 0.0, 1.0)), vec3(((x_70 * x_70) * (x_70 * x_70))));
					  highp vec3 tmpvar_72;
					  tmpvar_72 = (((
					    ((diffColor_50 + (tmpvar_69 * tmpvar_46)) * tmpvar_3)
					   * tmpvar_59) + (tmpvar_34 * diffColor_50)) + ((surfaceReduction_52 * tmpvar_33) * tmpvar_71));
					  color_51 = tmpvar_72;
					  mediump vec4 tmpvar_73;
					  tmpvar_73.w = 1.0;
					  tmpvar_73.xyz = color_51;
					  c_42.xyz = tmpvar_73.xyz;
					  c_42.w = alpha_49;
					  c_6 = c_42;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out mediump vec3 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat15;
					float u_xlat21;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat21 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat21 = u_xlat21 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat15 = _Time.y * u_xlat1.x + u_xlat21;
					    u_xlat21 = _Time.y * _Frequency + u_xlat21;
					    u_xlat21 = sin(u_xlat21);
					    u_xlat21 = u_xlat21 * in_COLOR0.y;
					    u_xlat21 = u_xlat21 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat21)) + in_NORMAL0.xyz;
					    u_xlat21 = sin(u_xlat15);
					    u_xlat21 = u_xlat1.y * u_xlat21;
					    u_xlat0.y = u_xlat21 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat21 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat21 = u_xlat21 / u_xlat3.z;
					    u_xlat15 = _Time.y * u_xlat1.x + u_xlat21;
					    u_xlat21 = _Time.y * u_xlat3.x + u_xlat21;
					    u_xlat21 = sin(u_xlat21);
					    u_xlat21 = u_xlat21 * in_COLOR0.y;
					    u_xlat21 = u_xlat3.y * u_xlat21;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat3.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat15 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat15 = u_xlat15 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat15;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat15 = u_xlat1.z * in_COLOR0.y;
					    u_xlat15 = u_xlat3.z * u_xlat15;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat0.xxx + abs(vec3(u_xlat21));
					    u_xlat0.x = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat1.xyw * u_xlat0.xxx + abs(vec3(u_xlat15));
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1 = u_xlat0.xxxx * u_xlat2.xyzz;
					    vs_TEXCOORD1.z = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.wxy * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD3.z = u_xlat1.w;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat16_5 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5 = u_xlat1.x * u_xlat1.x + (-u_xlat16_5);
					    u_xlat16_0 = u_xlat1.ywzx * u_xlat1;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(u_xlat16_5) + u_xlat16_6.xyz;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in mediump vec3 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_9;
					float u_xlat11;
					vec2 u_xlat18;
					float u_xlat27;
					mediump float u_xlat16_30;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat10_1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat10_1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat10_1.xyz);
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat16_3.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat1.xyz * (-u_xlat16_3.xxx) + (-u_xlat0.xyz);
					    u_xlat2.z = (-_Glossiness) + 1.0;
					    u_xlat16_30 = (-u_xlat2.z) * 0.699999988 + 1.70000005;
					    u_xlat16_30 = u_xlat2.z * u_xlat16_30;
					    u_xlat16_30 = u_xlat16_30 * 6.0;
					    u_xlat10_3 = textureLod(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_30);
					    u_xlat16_4.x = u_xlat10_3.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_3.xyz * u_xlat16_4.xxx;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat11 = u_xlat27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
					#else
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat27)) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat2.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat2.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_31 = (-u_xlat11) + 1.0;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_9;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_9;
					    u_xlat18.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat18.x = texture(_CameraDepthTexture, u_xlat18.xy).x;
					    u_xlat18.x = _ZBufferParams.z * u_xlat18.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-vs_TEXCOORD4.w);
					    u_xlat18.x = u_xlat18.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
					#else
					    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
					#endif
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat18.x = u_xlat18.x * _FoamColor.w + u_xlat18.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
					#else
					    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
					#endif
					    u_xlat10_2 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * _Color;
					    u_xlat16_2 = u_xlat10_2 * _FoamColor + (-u_xlat16_3);
					    u_xlat2 = u_xlat18.xxxx * u_xlat16_2 + u_xlat16_3;
					    u_xlat16_5.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_32 = (-u_xlat16_31) + _Glossiness;
					    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat16_31);
					    SV_Target0.w = u_xlat2.w;
					    u_xlat16_31 = u_xlat16_32 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_31);
					    u_xlat16_7.xyz = vec3(u_xlat16_9) * u_xlat16_7.xyz + u_xlat16_5.xyz;
					    u_xlat16_5.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD6.xyz;
					    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_8.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_6.xyz + u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz + u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out mediump vec3 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat15;
					float u_xlat21;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat21 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat21 = u_xlat21 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat15 = _Time.y * u_xlat1.x + u_xlat21;
					    u_xlat21 = _Time.y * _Frequency + u_xlat21;
					    u_xlat21 = sin(u_xlat21);
					    u_xlat21 = u_xlat21 * in_COLOR0.y;
					    u_xlat21 = u_xlat21 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat21)) + in_NORMAL0.xyz;
					    u_xlat21 = sin(u_xlat15);
					    u_xlat21 = u_xlat1.y * u_xlat21;
					    u_xlat0.y = u_xlat21 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat21 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat21 = u_xlat21 / u_xlat3.z;
					    u_xlat15 = _Time.y * u_xlat1.x + u_xlat21;
					    u_xlat21 = _Time.y * u_xlat3.x + u_xlat21;
					    u_xlat21 = sin(u_xlat21);
					    u_xlat21 = u_xlat21 * in_COLOR0.y;
					    u_xlat21 = u_xlat3.y * u_xlat21;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat3.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat15 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat15 = u_xlat15 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat15;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat15 = u_xlat1.z * in_COLOR0.y;
					    u_xlat15 = u_xlat3.z * u_xlat15;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat0.xxx + abs(vec3(u_xlat21));
					    u_xlat0.x = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat1.xyw * u_xlat0.xxx + abs(vec3(u_xlat15));
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1 = u_xlat0.xxxx * u_xlat2.xyzz;
					    vs_TEXCOORD1.z = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.wxy * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD3.z = u_xlat1.w;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat16_5 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5 = u_xlat1.x * u_xlat1.x + (-u_xlat16_5);
					    u_xlat16_0 = u_xlat1.ywzx * u_xlat1;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(u_xlat16_5) + u_xlat16_6.xyz;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in mediump vec3 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec4 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat10;
					mediump float u_xlat16_10;
					mediump vec3 u_xlat16_11;
					mediump float u_xlat16_17;
					mediump float u_xlat16_18;
					float u_xlat21;
					float u_xlat22;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat10_0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat10_0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat10_0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD6.xyz;
					    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xyz = log2(u_xlat16_2.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat21 = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat21 = _ZBufferParams.z * u_xlat21 + _ZBufferParams.w;
					    u_xlat21 = float(1.0) / u_xlat21;
					    u_xlat21 = u_xlat21 + (-vs_TEXCOORD4.w);
					    u_xlat21 = u_xlat21 * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 * _FoamColor.w + u_xlat21;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat10_2 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * _Color;
					    u_xlat16_2 = u_xlat10_2 * _FoamColor + (-u_xlat16_3);
					    u_xlat2 = vec4(u_xlat21) * u_xlat16_2 + u_xlat16_3;
					    u_xlat16_4.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_11.xyz = u_xlat2.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = (-u_xlat16_4.x) + _Glossiness;
					    u_xlat16_4.x = u_xlat16_4.x + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_11.xyz;
					    u_xlat16_6.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat1.x = vs_TEXCOORD1.w;
					    u_xlat1.y = vs_TEXCOORD2.w;
					    u_xlat1.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat22 = dot(u_xlat0.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
					#else
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					#endif
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat21 = max(u_xlat21, 0.319999993);
					    u_xlat16_3.x = (-_Glossiness) + 1.0;
					    u_xlat16_10 = u_xlat16_3.x * u_xlat16_3.x + 1.5;
					    u_xlat21 = u_xlat21 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_17 = u_xlat16_10 * u_xlat16_10 + -1.0;
					    u_xlat22 = u_xlat22 * u_xlat16_17 + 1.00001001;
					    u_xlat21 = u_xlat21 * u_xlat22;
					    u_xlat21 = u_xlat16_10 / u_xlat21;
					    u_xlat16_26 = u_xlat16_3.x * u_xlat16_10;
					    u_xlat16_26 = (-u_xlat16_26) * 0.280000001 + 1.0;
					    u_xlat21 = u_xlat21 + -9.99999975e-05;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = min(u_xlat21, 100.0);
					    u_xlat10.xyz = vec3(u_xlat21) * u_xlat16_6.xyz + u_xlat16_11.xyz;
					    u_xlat10.xyz = u_xlat10.xyz * _LightColor0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
					    u_xlat16_11.x = (-u_xlat16_3.x) * 0.699999988 + 1.70000005;
					    u_xlat16_11.x = u_xlat16_3.x * u_xlat16_11.x;
					    u_xlat16_11.x = u_xlat16_11.x * 6.0;
					    u_xlat16_18 = dot((-u_xlat1.xyz), u_xlat0.xyz);
					    u_xlat16_18 = u_xlat16_18 + u_xlat16_18;
					    u_xlat16_5.xyz = u_xlat0.xyz * (-vec3(u_xlat16_18)) + (-u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat0.x) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_11.x);
					    u_xlat16_11.x = u_xlat10_0.w + -1.0;
					    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;
					    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;
					    u_xlat16_5.xyz = u_xlat10_0.xyz * u_xlat16_11.xxx;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_26);
					    u_xlat16_4.xyw = u_xlat16_4.xxx + (-u_xlat16_6.xyz);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyw + u_xlat16_6.xyz;
					    u_xlat2.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat10.xyz;
					    SV_Target0 = u_xlat2;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out mediump vec3 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat15;
					float u_xlat21;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat21 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat21 = u_xlat21 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat15 = _Time.y * u_xlat1.x + u_xlat21;
					    u_xlat21 = _Time.y * _Frequency + u_xlat21;
					    u_xlat21 = sin(u_xlat21);
					    u_xlat21 = u_xlat21 * in_COLOR0.y;
					    u_xlat21 = u_xlat21 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat21)) + in_NORMAL0.xyz;
					    u_xlat21 = sin(u_xlat15);
					    u_xlat21 = u_xlat1.y * u_xlat21;
					    u_xlat0.y = u_xlat21 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat21 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat21 = u_xlat21 / u_xlat3.z;
					    u_xlat15 = _Time.y * u_xlat1.x + u_xlat21;
					    u_xlat21 = _Time.y * u_xlat3.x + u_xlat21;
					    u_xlat21 = sin(u_xlat21);
					    u_xlat21 = u_xlat21 * in_COLOR0.y;
					    u_xlat21 = u_xlat3.y * u_xlat21;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat3.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat15 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat15 = u_xlat15 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat15;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat15 = u_xlat1.z * in_COLOR0.y;
					    u_xlat15 = u_xlat3.z * u_xlat15;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat0.xxx + abs(vec3(u_xlat21));
					    u_xlat0.x = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat1.xyw * u_xlat0.xxx + abs(vec3(u_xlat15));
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1 = u_xlat0.xxxx * u_xlat2.xyzz;
					    vs_TEXCOORD1.z = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.wxy * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD3.z = u_xlat1.w;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat16_5 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5 = u_xlat1.x * u_xlat1.x + (-u_xlat16_5);
					    u_xlat16_0 = u_xlat1.ywzx * u_xlat1;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(u_xlat16_5) + u_xlat16_6.xyz;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in mediump vec3 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec4 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat10;
					mediump float u_xlat16_10;
					mediump vec3 u_xlat16_11;
					mediump float u_xlat16_17;
					mediump float u_xlat16_18;
					float u_xlat21;
					float u_xlat22;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat10_0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat10_0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat10_0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD6.xyz;
					    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xyz = log2(u_xlat16_2.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat21 = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat21 = _ZBufferParams.z * u_xlat21 + _ZBufferParams.w;
					    u_xlat21 = float(1.0) / u_xlat21;
					    u_xlat21 = u_xlat21 + (-vs_TEXCOORD4.w);
					    u_xlat21 = u_xlat21 * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 * _FoamColor.w + u_xlat21;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat10_2 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * _Color;
					    u_xlat16_2 = u_xlat10_2 * _FoamColor + (-u_xlat16_3);
					    u_xlat2 = vec4(u_xlat21) * u_xlat16_2 + u_xlat16_3;
					    u_xlat16_4.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_11.xyz = u_xlat2.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = (-u_xlat16_4.x) + _Glossiness;
					    u_xlat16_4.x = u_xlat16_4.x + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_11.xyz;
					    u_xlat16_6.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat1.x = vs_TEXCOORD1.w;
					    u_xlat1.y = vs_TEXCOORD2.w;
					    u_xlat1.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat22 = dot(u_xlat0.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
					#else
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					#endif
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat21 = max(u_xlat21, 0.319999993);
					    u_xlat16_3.x = (-_Glossiness) + 1.0;
					    u_xlat16_10 = u_xlat16_3.x * u_xlat16_3.x + 1.5;
					    u_xlat21 = u_xlat21 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_17 = u_xlat16_10 * u_xlat16_10 + -1.0;
					    u_xlat22 = u_xlat22 * u_xlat16_17 + 1.00001001;
					    u_xlat21 = u_xlat21 * u_xlat22;
					    u_xlat21 = u_xlat16_10 / u_xlat21;
					    u_xlat16_26 = u_xlat16_3.x * u_xlat16_10;
					    u_xlat16_26 = (-u_xlat16_26) * 0.280000001 + 1.0;
					    u_xlat21 = u_xlat21 + -9.99999975e-05;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = min(u_xlat21, 100.0);
					    u_xlat10.xyz = vec3(u_xlat21) * u_xlat16_6.xyz + u_xlat16_11.xyz;
					    u_xlat10.xyz = u_xlat10.xyz * _LightColor0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
					    u_xlat16_11.x = (-u_xlat16_3.x) * 0.699999988 + 1.70000005;
					    u_xlat16_11.x = u_xlat16_3.x * u_xlat16_11.x;
					    u_xlat16_11.x = u_xlat16_11.x * 6.0;
					    u_xlat16_18 = dot((-u_xlat1.xyz), u_xlat0.xyz);
					    u_xlat16_18 = u_xlat16_18 + u_xlat16_18;
					    u_xlat16_5.xyz = u_xlat0.xyz * (-vec3(u_xlat16_18)) + (-u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat0.x) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_11.x);
					    u_xlat16_11.x = u_xlat10_0.w + -1.0;
					    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;
					    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;
					    u_xlat16_5.xyz = u_xlat10_0.xyz * u_xlat16_11.xxx;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_26);
					    u_xlat16_4.xyw = u_xlat16_4.xxx + (-u_xlat16_6.xyz);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyw + u_xlat16_6.xyz;
					    u_xlat2.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat10.xyz;
					    SV_Target0 = u_xlat2;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  tmpvar_5.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD8 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  lowp vec4 tmpvar_32;
					  tmpvar_32 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD8.zw);
					  mediump vec4 hdr_33;
					  hdr_33 = tmpvar_2;
					  mediump vec4 tmpvar_34;
					  tmpvar_34.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_34.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_35;
					  tmpvar_35 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_34.xyz, tmpvar_34.w);
					  mediump vec4 tmpvar_36;
					  tmpvar_36 = tmpvar_35;
					  lowp vec3 tmpvar_37;
					  mediump vec4 c_38;
					  highp vec3 tmpvar_39;
					  tmpvar_39 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_40;
					  mediump vec3 albedo_41;
					  albedo_41 = tmpvar_7;
					  mediump vec3 tmpvar_42;
					  tmpvar_42 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_41, vec3(_Metallic));
					  mediump float tmpvar_43;
					  tmpvar_43 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_40 = (albedo_41 * tmpvar_43);
					  tmpvar_37 = tmpvar_40;
					  mediump vec3 diffColor_44;
					  diffColor_44 = tmpvar_37;
					  mediump float alpha_45;
					  alpha_45 = tmpvar_8;
					  tmpvar_37 = diffColor_44;
					  mediump vec3 diffColor_46;
					  diffColor_46 = tmpvar_37;
					  mediump vec3 color_47;
					  mediump vec2 rlPow4AndFresnelTerm_48;
					  mediump float tmpvar_49;
					  highp float tmpvar_50;
					  tmpvar_50 = clamp (dot (tmpvar_39, tmpvar_4), 0.0, 1.0);
					  tmpvar_49 = tmpvar_50;
					  mediump float tmpvar_51;
					  highp float tmpvar_52;
					  tmpvar_52 = clamp (dot (tmpvar_39, worldViewDir_9), 0.0, 1.0);
					  tmpvar_51 = tmpvar_52;
					  highp vec2 tmpvar_53;
					  tmpvar_53.x = dot ((worldViewDir_9 - (2.0 * 
					    (dot (tmpvar_39, worldViewDir_9) * tmpvar_39)
					  )), tmpvar_4);
					  tmpvar_53.y = (1.0 - tmpvar_51);
					  highp vec2 tmpvar_54;
					  tmpvar_54 = ((tmpvar_53 * tmpvar_53) * (tmpvar_53 * tmpvar_53));
					  rlPow4AndFresnelTerm_48 = tmpvar_54;
					  mediump float tmpvar_55;
					  tmpvar_55 = rlPow4AndFresnelTerm_48.x;
					  mediump float specular_56;
					  highp float smoothness_57;
					  smoothness_57 = _Glossiness;
					  highp vec2 tmpvar_58;
					  tmpvar_58.x = tmpvar_55;
					  tmpvar_58.y = (1.0 - smoothness_57);
					  highp float tmpvar_59;
					  tmpvar_59 = (texture2D (unity_NHxRoughness, tmpvar_58).x * 16.0);
					  specular_56 = tmpvar_59;
					  color_47 = ((diffColor_46 + (specular_56 * tmpvar_42)) * (tmpvar_3 * tmpvar_49));
					  color_47 = (color_47 + ((
					    pow (((unity_DynamicLightmap_HDR.x * tmpvar_32.w) * tmpvar_32.xyz), unity_DynamicLightmap_HDR.yyy)
					   * diffColor_46) + (
					    ((hdr_33.x * ((hdr_33.w * 
					      (tmpvar_36.w - 1.0)
					    ) + 1.0)) * tmpvar_36.xyz)
					   * 
					    mix (tmpvar_42, vec3(clamp ((_Glossiness + (1.0 - tmpvar_43)), 0.0, 1.0)), rlPow4AndFresnelTerm_48.yyy)
					  )));
					  mediump vec4 tmpvar_60;
					  tmpvar_60.w = 1.0;
					  tmpvar_60.xyz = color_47;
					  c_38.xyz = tmpvar_60.xyz;
					  c_38.w = alpha_45;
					  c_6 = c_38;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  tmpvar_5.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD8 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 tmpvar_32;
					  mediump vec3 tmpvar_33;
					  lowp vec4 tmpvar_34;
					  tmpvar_34 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD8.zw);
					  tmpvar_33 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_34.w) * tmpvar_34.xyz), unity_DynamicLightmap_HDR.yyy);
					  mediump vec4 hdr_35;
					  hdr_35 = tmpvar_2;
					  mediump vec4 tmpvar_36;
					  tmpvar_36.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_36.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_37;
					  tmpvar_37 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_36.xyz, tmpvar_36.w);
					  mediump vec4 tmpvar_38;
					  tmpvar_38 = tmpvar_37;
					  tmpvar_32 = ((hdr_35.x * (
					    (hdr_35.w * (tmpvar_38.w - 1.0))
					   + 1.0)) * tmpvar_38.xyz);
					  lowp vec3 tmpvar_39;
					  mediump vec4 c_40;
					  highp vec3 tmpvar_41;
					  tmpvar_41 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_42;
					  mediump vec3 albedo_43;
					  albedo_43 = tmpvar_7;
					  mediump vec3 tmpvar_44;
					  tmpvar_44 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_43, vec3(_Metallic));
					  mediump float tmpvar_45;
					  tmpvar_45 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_42 = (albedo_43 * tmpvar_45);
					  tmpvar_39 = tmpvar_42;
					  mediump vec3 diffColor_46;
					  diffColor_46 = tmpvar_39;
					  mediump float alpha_47;
					  alpha_47 = tmpvar_8;
					  tmpvar_39 = diffColor_46;
					  mediump vec3 diffColor_48;
					  diffColor_48 = tmpvar_39;
					  mediump vec3 color_49;
					  mediump float surfaceReduction_50;
					  highp float specularTerm_51;
					  highp float a2_52;
					  mediump float roughness_53;
					  mediump float perceptualRoughness_54;
					  highp vec3 tmpvar_55;
					  highp vec3 inVec_56;
					  inVec_56 = (tmpvar_4 + worldViewDir_9);
					  tmpvar_55 = (inVec_56 * inversesqrt(max (0.001, 
					    dot (inVec_56, inVec_56)
					  )));
					  mediump float tmpvar_57;
					  highp float tmpvar_58;
					  tmpvar_58 = clamp (dot (tmpvar_41, tmpvar_4), 0.0, 1.0);
					  tmpvar_57 = tmpvar_58;
					  highp float tmpvar_59;
					  tmpvar_59 = clamp (dot (tmpvar_41, tmpvar_55), 0.0, 1.0);
					  mediump float tmpvar_60;
					  highp float tmpvar_61;
					  tmpvar_61 = clamp (dot (tmpvar_41, worldViewDir_9), 0.0, 1.0);
					  tmpvar_60 = tmpvar_61;
					  highp float tmpvar_62;
					  highp float smoothness_63;
					  smoothness_63 = _Glossiness;
					  tmpvar_62 = (1.0 - smoothness_63);
					  perceptualRoughness_54 = tmpvar_62;
					  highp float tmpvar_64;
					  highp float perceptualRoughness_65;
					  perceptualRoughness_65 = perceptualRoughness_54;
					  tmpvar_64 = (perceptualRoughness_65 * perceptualRoughness_65);
					  roughness_53 = tmpvar_64;
					  mediump float tmpvar_66;
					  tmpvar_66 = (roughness_53 * roughness_53);
					  a2_52 = tmpvar_66;
					  specularTerm_51 = ((roughness_53 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_55), 0.0, 1.0)) * (1.5 + roughness_53))
					   * 
					    (((tmpvar_59 * tmpvar_59) * (a2_52 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (specularTerm_51, 0.0, 100.0);
					  specularTerm_51 = tmpvar_67;
					  surfaceReduction_50 = (1.0 - ((roughness_53 * perceptualRoughness_54) * 0.28));
					  mediump float x_68;
					  x_68 = (1.0 - tmpvar_60);
					  mediump vec3 tmpvar_69;
					  tmpvar_69 = mix (tmpvar_44, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_45)
					  ), 0.0, 1.0)), vec3(((x_68 * x_68) * (x_68 * x_68))));
					  highp vec3 tmpvar_70;
					  tmpvar_70 = (((
					    ((diffColor_48 + (tmpvar_67 * tmpvar_44)) * tmpvar_3)
					   * tmpvar_57) + (tmpvar_33 * diffColor_48)) + ((surfaceReduction_50 * tmpvar_32) * tmpvar_69));
					  color_49 = tmpvar_70;
					  mediump vec4 tmpvar_71;
					  tmpvar_71.w = 1.0;
					  tmpvar_71.xyz = color_49;
					  c_40.xyz = tmpvar_71.xyz;
					  c_40.w = alpha_47;
					  c_6 = c_40;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  tmpvar_5.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD8 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 tmpvar_32;
					  mediump vec3 tmpvar_33;
					  lowp vec4 tmpvar_34;
					  tmpvar_34 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD8.zw);
					  tmpvar_33 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_34.w) * tmpvar_34.xyz), unity_DynamicLightmap_HDR.yyy);
					  mediump vec4 hdr_35;
					  hdr_35 = tmpvar_2;
					  mediump vec4 tmpvar_36;
					  tmpvar_36.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_36.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_37;
					  tmpvar_37 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_36.xyz, tmpvar_36.w);
					  mediump vec4 tmpvar_38;
					  tmpvar_38 = tmpvar_37;
					  tmpvar_32 = ((hdr_35.x * (
					    (hdr_35.w * (tmpvar_38.w - 1.0))
					   + 1.0)) * tmpvar_38.xyz);
					  lowp vec3 tmpvar_39;
					  mediump vec4 c_40;
					  highp vec3 tmpvar_41;
					  tmpvar_41 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_42;
					  mediump vec3 albedo_43;
					  albedo_43 = tmpvar_7;
					  mediump vec3 tmpvar_44;
					  tmpvar_44 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_43, vec3(_Metallic));
					  mediump float tmpvar_45;
					  tmpvar_45 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_42 = (albedo_43 * tmpvar_45);
					  tmpvar_39 = tmpvar_42;
					  mediump vec3 diffColor_46;
					  diffColor_46 = tmpvar_39;
					  mediump float alpha_47;
					  alpha_47 = tmpvar_8;
					  tmpvar_39 = diffColor_46;
					  mediump vec3 diffColor_48;
					  diffColor_48 = tmpvar_39;
					  mediump vec3 color_49;
					  mediump float surfaceReduction_50;
					  highp float specularTerm_51;
					  highp float a2_52;
					  mediump float roughness_53;
					  mediump float perceptualRoughness_54;
					  highp vec3 tmpvar_55;
					  highp vec3 inVec_56;
					  inVec_56 = (tmpvar_4 + worldViewDir_9);
					  tmpvar_55 = (inVec_56 * inversesqrt(max (0.001, 
					    dot (inVec_56, inVec_56)
					  )));
					  mediump float tmpvar_57;
					  highp float tmpvar_58;
					  tmpvar_58 = clamp (dot (tmpvar_41, tmpvar_4), 0.0, 1.0);
					  tmpvar_57 = tmpvar_58;
					  highp float tmpvar_59;
					  tmpvar_59 = clamp (dot (tmpvar_41, tmpvar_55), 0.0, 1.0);
					  mediump float tmpvar_60;
					  highp float tmpvar_61;
					  tmpvar_61 = clamp (dot (tmpvar_41, worldViewDir_9), 0.0, 1.0);
					  tmpvar_60 = tmpvar_61;
					  highp float tmpvar_62;
					  highp float smoothness_63;
					  smoothness_63 = _Glossiness;
					  tmpvar_62 = (1.0 - smoothness_63);
					  perceptualRoughness_54 = tmpvar_62;
					  highp float tmpvar_64;
					  highp float perceptualRoughness_65;
					  perceptualRoughness_65 = perceptualRoughness_54;
					  tmpvar_64 = (perceptualRoughness_65 * perceptualRoughness_65);
					  roughness_53 = tmpvar_64;
					  mediump float tmpvar_66;
					  tmpvar_66 = (roughness_53 * roughness_53);
					  a2_52 = tmpvar_66;
					  specularTerm_51 = ((roughness_53 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_55), 0.0, 1.0)) * (1.5 + roughness_53))
					   * 
					    (((tmpvar_59 * tmpvar_59) * (a2_52 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (specularTerm_51, 0.0, 100.0);
					  specularTerm_51 = tmpvar_67;
					  surfaceReduction_50 = (1.0 - ((roughness_53 * perceptualRoughness_54) * 0.28));
					  mediump float x_68;
					  x_68 = (1.0 - tmpvar_60);
					  mediump vec3 tmpvar_69;
					  tmpvar_69 = mix (tmpvar_44, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_45)
					  ), 0.0, 1.0)), vec3(((x_68 * x_68) * (x_68 * x_68))));
					  highp vec3 tmpvar_70;
					  tmpvar_70 = (((
					    ((diffColor_48 + (tmpvar_67 * tmpvar_44)) * tmpvar_3)
					   * tmpvar_57) + (tmpvar_33 * diffColor_48)) + ((surfaceReduction_50 * tmpvar_32) * tmpvar_69));
					  color_49 = tmpvar_70;
					  mediump vec4 tmpvar_71;
					  tmpvar_71.w = 1.0;
					  tmpvar_71.xyz = color_49;
					  c_40.xyz = tmpvar_71.xyz;
					  c_40.w = alpha_47;
					  c_6 = c_40;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD9;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump float u_xlat16_10;
					vec2 u_xlat20;
					float u_xlat30;
					mediump float u_xlat16_31;
					float u_xlat32;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD9.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat10_2.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, u_xlat10_2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD2.xyz, u_xlat10_2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD3.xyz, u_xlat10_2.xyz);
					    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat3.xyz;
					    u_xlat16_31 = dot((-u_xlat0.xyz), u_xlat2.xyz);
					    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
					    u_xlat16_4.xyz = u_xlat2.xyz * (-vec3(u_xlat16_31)) + (-u_xlat0.xyz);
					    u_xlat3.z = (-_Glossiness) + 1.0;
					    u_xlat16_31 = (-u_xlat3.z) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat16_31 * u_xlat3.z;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat10_4 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_31);
					    u_xlat16_31 = u_xlat10_4.w + -1.0;
					    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;
					    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;
					    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(u_xlat16_31);
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat32 = u_xlat30;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
					#else
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					#endif
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat0.xyz = u_xlat2.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = vec3(u_xlat30) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat3.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_31 = (-u_xlat32) + 1.0;
					    u_xlat16_10 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_10 = u_xlat16_31 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_31 * u_xlat16_10;
					    u_xlat20.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat20.x = texture(_CameraDepthTexture, u_xlat20.xy).x;
					    u_xlat20.x = _ZBufferParams.z * u_xlat20.x + _ZBufferParams.w;
					    u_xlat20.x = float(1.0) / u_xlat20.x;
					    u_xlat20.x = u_xlat20.x + (-vs_TEXCOORD4.w);
					    u_xlat20.x = u_xlat20.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
					#else
					    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
					#endif
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat20.x = u_xlat20.x * _FoamColor.w + u_xlat20.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
					#else
					    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
					#endif
					    u_xlat10_2 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * _Color;
					    u_xlat16_2 = u_xlat10_2 * _FoamColor + (-u_xlat16_3);
					    u_xlat2 = u_xlat20.xxxx * u_xlat16_2 + u_xlat16_3;
					    u_xlat16_7.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_35 = (-u_xlat16_31) + _Glossiness;
					    u_xlat16_8.xyz = vec3(u_xlat16_31) * u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    u_xlat16_31 = u_xlat16_35 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_31);
					    u_xlat16_9.xyz = vec3(u_xlat16_10) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_9.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_5.xyz;
					    SV_Target0.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_1.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD9;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					lowp vec4 u_xlat10_0;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_6;
					lowp vec3 u_xlat10_6;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_11;
					mediump float u_xlat16_19;
					mediump float u_xlat16_25;
					float u_xlat26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD9.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
					    u_xlat0.x = u_xlat0.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _FoamColor.w + u_xlat0.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat10_2 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * _Color;
					    u_xlat16_2 = u_xlat10_2 * _FoamColor + (-u_xlat16_3);
					    u_xlat0 = u_xlat0.xxxx * u_xlat16_2 + u_xlat16_3;
					    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = u_xlat0.xyz * vec3(u_xlat16_25);
					    u_xlat16_25 = (-u_xlat16_25) + _Glossiness;
					    u_xlat16_25 = u_xlat16_25 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    u_xlat16_5.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat26) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat26) * u_xlat2.xyz;
					    u_xlat26 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat26 = max(u_xlat26, 0.00100000005);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat3.xyz = vec3(u_xlat26) * u_xlat3.xyz;
					    u_xlat26 = dot(_WorldSpaceLightPos0.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
					#else
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					#endif
					    u_xlat26 = max(u_xlat26, 0.319999993);
					    u_xlat16_27 = (-_Glossiness) + 1.0;
					    u_xlat16_6 = u_xlat16_27 * u_xlat16_27 + 1.5;
					    u_xlat26 = u_xlat26 * u_xlat16_6;
					    u_xlat10_6.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat7.x = dot(vs_TEXCOORD1.xyz, u_xlat10_6.xyz);
					    u_xlat7.y = dot(vs_TEXCOORD2.xyz, u_xlat10_6.xyz);
					    u_xlat7.z = dot(vs_TEXCOORD3.xyz, u_xlat10_6.xyz);
					    u_xlat6.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat7.xyz;
					    u_xlat3.x = dot(u_xlat6.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16_11 = u_xlat16_27 * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_11 * u_xlat16_11 + -1.0;
					    u_xlat3.x = u_xlat3.x * u_xlat16_19 + 1.00001001;
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat26 = u_xlat16_11 / u_xlat26;
					    u_xlat16_28 = u_xlat16_27 * u_xlat16_11;
					    u_xlat16_28 = (-u_xlat16_28) * 0.280000001 + 1.0;
					    u_xlat26 = u_xlat26 + -9.99999975e-05;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat26 = min(u_xlat26, 100.0);
					    u_xlat3.xyz = vec3(u_xlat26) * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _LightColor0.xyz;
					    u_xlat26 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
					#else
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					#endif
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat26) + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-u_xlat16_27) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat16_9 = dot((-u_xlat2.xyz), u_xlat6.xyz);
					    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
					    u_xlat16_4.xyz = u_xlat6.xyz * (-vec3(u_xlat16_9)) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = (-u_xlat2.x) + 1.0;
					    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
					    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat10_2.w + -1.0;
					    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_2.xyz * u_xlat16_1.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_28);
					    u_xlat16_1.xzw = vec3(u_xlat16_25) + (-u_xlat16_5.xyz);
					    u_xlat16_1.xyz = vec3(u_xlat16_9) * u_xlat16_1.xzw + u_xlat16_5.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat3.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD9;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					lowp vec4 u_xlat10_0;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_6;
					lowp vec3 u_xlat10_6;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_11;
					mediump float u_xlat16_19;
					mediump float u_xlat16_25;
					float u_xlat26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD9.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
					    u_xlat0.x = u_xlat0.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _FoamColor.w + u_xlat0.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat10_2 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * _Color;
					    u_xlat16_2 = u_xlat10_2 * _FoamColor + (-u_xlat16_3);
					    u_xlat0 = u_xlat0.xxxx * u_xlat16_2 + u_xlat16_3;
					    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = u_xlat0.xyz * vec3(u_xlat16_25);
					    u_xlat16_25 = (-u_xlat16_25) + _Glossiness;
					    u_xlat16_25 = u_xlat16_25 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    u_xlat16_5.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat26) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat26) * u_xlat2.xyz;
					    u_xlat26 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat26 = max(u_xlat26, 0.00100000005);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat3.xyz = vec3(u_xlat26) * u_xlat3.xyz;
					    u_xlat26 = dot(_WorldSpaceLightPos0.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
					#else
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					#endif
					    u_xlat26 = max(u_xlat26, 0.319999993);
					    u_xlat16_27 = (-_Glossiness) + 1.0;
					    u_xlat16_6 = u_xlat16_27 * u_xlat16_27 + 1.5;
					    u_xlat26 = u_xlat26 * u_xlat16_6;
					    u_xlat10_6.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat7.x = dot(vs_TEXCOORD1.xyz, u_xlat10_6.xyz);
					    u_xlat7.y = dot(vs_TEXCOORD2.xyz, u_xlat10_6.xyz);
					    u_xlat7.z = dot(vs_TEXCOORD3.xyz, u_xlat10_6.xyz);
					    u_xlat6.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat7.xyz;
					    u_xlat3.x = dot(u_xlat6.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16_11 = u_xlat16_27 * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_11 * u_xlat16_11 + -1.0;
					    u_xlat3.x = u_xlat3.x * u_xlat16_19 + 1.00001001;
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat26 = u_xlat16_11 / u_xlat26;
					    u_xlat16_28 = u_xlat16_27 * u_xlat16_11;
					    u_xlat16_28 = (-u_xlat16_28) * 0.280000001 + 1.0;
					    u_xlat26 = u_xlat26 + -9.99999975e-05;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat26 = min(u_xlat26, 100.0);
					    u_xlat3.xyz = vec3(u_xlat26) * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _LightColor0.xyz;
					    u_xlat26 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
					#else
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					#endif
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat26) + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-u_xlat16_27) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat16_9 = dot((-u_xlat2.xyz), u_xlat6.xyz);
					    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
					    u_xlat16_4.xyz = u_xlat6.xyz * (-vec3(u_xlat16_9)) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = (-u_xlat2.x) + 1.0;
					    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
					    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat10_2.w + -1.0;
					    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_2.xyz * u_xlat16_1.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_28);
					    u_xlat16_1.xzw = vec3(u_xlat16_25) + (-u_xlat16_5.xyz);
					    u_xlat16_1.xyz = vec3(u_xlat16_9) * u_xlat16_1.xzw + u_xlat16_5.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat3.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  tmpvar_5.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD6 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec4 tmpvar_32;
					  tmpvar_32 = texture2D (unity_Lightmap, xlv_TEXCOORD6.xy);
					  lowp vec4 color_33;
					  color_33 = tmpvar_32;
					  mediump vec4 hdr_34;
					  hdr_34 = tmpvar_2;
					  mediump vec4 tmpvar_35;
					  tmpvar_35.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_35.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_36;
					  tmpvar_36 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_35.xyz, tmpvar_35.w);
					  mediump vec4 tmpvar_37;
					  tmpvar_37 = tmpvar_36;
					  lowp vec3 tmpvar_38;
					  mediump vec4 c_39;
					  highp vec3 tmpvar_40;
					  tmpvar_40 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_41;
					  mediump vec3 albedo_42;
					  albedo_42 = tmpvar_7;
					  mediump vec3 tmpvar_43;
					  tmpvar_43 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_42, vec3(_Metallic));
					  mediump float tmpvar_44;
					  tmpvar_44 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_41 = (albedo_42 * tmpvar_44);
					  tmpvar_38 = tmpvar_41;
					  mediump vec3 diffColor_45;
					  diffColor_45 = tmpvar_38;
					  mediump float alpha_46;
					  alpha_46 = tmpvar_8;
					  tmpvar_38 = diffColor_45;
					  mediump vec3 diffColor_47;
					  diffColor_47 = tmpvar_38;
					  mediump vec3 color_48;
					  mediump vec2 rlPow4AndFresnelTerm_49;
					  mediump float tmpvar_50;
					  highp float tmpvar_51;
					  tmpvar_51 = clamp (dot (tmpvar_40, tmpvar_4), 0.0, 1.0);
					  tmpvar_50 = tmpvar_51;
					  mediump float tmpvar_52;
					  highp float tmpvar_53;
					  tmpvar_53 = clamp (dot (tmpvar_40, worldViewDir_9), 0.0, 1.0);
					  tmpvar_52 = tmpvar_53;
					  highp vec2 tmpvar_54;
					  tmpvar_54.x = dot ((worldViewDir_9 - (2.0 * 
					    (dot (tmpvar_40, worldViewDir_9) * tmpvar_40)
					  )), tmpvar_4);
					  tmpvar_54.y = (1.0 - tmpvar_52);
					  highp vec2 tmpvar_55;
					  tmpvar_55 = ((tmpvar_54 * tmpvar_54) * (tmpvar_54 * tmpvar_54));
					  rlPow4AndFresnelTerm_49 = tmpvar_55;
					  mediump float tmpvar_56;
					  tmpvar_56 = rlPow4AndFresnelTerm_49.x;
					  mediump float specular_57;
					  highp float smoothness_58;
					  smoothness_58 = _Glossiness;
					  highp vec2 tmpvar_59;
					  tmpvar_59.x = tmpvar_56;
					  tmpvar_59.y = (1.0 - smoothness_58);
					  highp float tmpvar_60;
					  tmpvar_60 = (texture2D (unity_NHxRoughness, tmpvar_59).x * 16.0);
					  specular_57 = tmpvar_60;
					  color_48 = ((diffColor_47 + (specular_57 * tmpvar_43)) * (tmpvar_3 * tmpvar_50));
					  color_48 = (color_48 + ((
					    (unity_Lightmap_HDR.x * color_33.xyz)
					   * diffColor_47) + (
					    ((hdr_34.x * ((hdr_34.w * 
					      (tmpvar_37.w - 1.0)
					    ) + 1.0)) * tmpvar_37.xyz)
					   * 
					    mix (tmpvar_43, vec3(clamp ((_Glossiness + (1.0 - tmpvar_44)), 0.0, 1.0)), rlPow4AndFresnelTerm_49.yyy)
					  )));
					  mediump vec4 tmpvar_61;
					  tmpvar_61.w = 1.0;
					  tmpvar_61.xyz = color_48;
					  c_39.xyz = tmpvar_61.xyz;
					  c_39.w = alpha_46;
					  c_6 = c_39;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  tmpvar_5.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD6 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 tmpvar_32;
					  mediump vec3 tmpvar_33;
					  mediump vec4 tmpvar_34;
					  tmpvar_34 = texture2D (unity_Lightmap, xlv_TEXCOORD6.xy);
					  lowp vec4 color_35;
					  color_35 = tmpvar_34;
					  tmpvar_33 = (unity_Lightmap_HDR.x * color_35.xyz);
					  mediump vec4 hdr_36;
					  hdr_36 = tmpvar_2;
					  mediump vec4 tmpvar_37;
					  tmpvar_37.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_37.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_38;
					  tmpvar_38 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37.xyz, tmpvar_37.w);
					  mediump vec4 tmpvar_39;
					  tmpvar_39 = tmpvar_38;
					  tmpvar_32 = ((hdr_36.x * (
					    (hdr_36.w * (tmpvar_39.w - 1.0))
					   + 1.0)) * tmpvar_39.xyz);
					  lowp vec3 tmpvar_40;
					  mediump vec4 c_41;
					  highp vec3 tmpvar_42;
					  tmpvar_42 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_43;
					  mediump vec3 albedo_44;
					  albedo_44 = tmpvar_7;
					  mediump vec3 tmpvar_45;
					  tmpvar_45 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_44, vec3(_Metallic));
					  mediump float tmpvar_46;
					  tmpvar_46 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_43 = (albedo_44 * tmpvar_46);
					  tmpvar_40 = tmpvar_43;
					  mediump vec3 diffColor_47;
					  diffColor_47 = tmpvar_40;
					  mediump float alpha_48;
					  alpha_48 = tmpvar_8;
					  tmpvar_40 = diffColor_47;
					  mediump vec3 diffColor_49;
					  diffColor_49 = tmpvar_40;
					  mediump vec3 color_50;
					  mediump float surfaceReduction_51;
					  highp float specularTerm_52;
					  highp float a2_53;
					  mediump float roughness_54;
					  mediump float perceptualRoughness_55;
					  highp vec3 tmpvar_56;
					  highp vec3 inVec_57;
					  inVec_57 = (tmpvar_4 + worldViewDir_9);
					  tmpvar_56 = (inVec_57 * inversesqrt(max (0.001, 
					    dot (inVec_57, inVec_57)
					  )));
					  mediump float tmpvar_58;
					  highp float tmpvar_59;
					  tmpvar_59 = clamp (dot (tmpvar_42, tmpvar_4), 0.0, 1.0);
					  tmpvar_58 = tmpvar_59;
					  highp float tmpvar_60;
					  tmpvar_60 = clamp (dot (tmpvar_42, tmpvar_56), 0.0, 1.0);
					  mediump float tmpvar_61;
					  highp float tmpvar_62;
					  tmpvar_62 = clamp (dot (tmpvar_42, worldViewDir_9), 0.0, 1.0);
					  tmpvar_61 = tmpvar_62;
					  highp float tmpvar_63;
					  highp float smoothness_64;
					  smoothness_64 = _Glossiness;
					  tmpvar_63 = (1.0 - smoothness_64);
					  perceptualRoughness_55 = tmpvar_63;
					  highp float tmpvar_65;
					  highp float perceptualRoughness_66;
					  perceptualRoughness_66 = perceptualRoughness_55;
					  tmpvar_65 = (perceptualRoughness_66 * perceptualRoughness_66);
					  roughness_54 = tmpvar_65;
					  mediump float tmpvar_67;
					  tmpvar_67 = (roughness_54 * roughness_54);
					  a2_53 = tmpvar_67;
					  specularTerm_52 = ((roughness_54 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_56), 0.0, 1.0)) * (1.5 + roughness_54))
					   * 
					    (((tmpvar_60 * tmpvar_60) * (a2_53 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_68;
					  tmpvar_68 = clamp (specularTerm_52, 0.0, 100.0);
					  specularTerm_52 = tmpvar_68;
					  surfaceReduction_51 = (1.0 - ((roughness_54 * perceptualRoughness_55) * 0.28));
					  mediump float x_69;
					  x_69 = (1.0 - tmpvar_61);
					  mediump vec3 tmpvar_70;
					  tmpvar_70 = mix (tmpvar_45, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_46)
					  ), 0.0, 1.0)), vec3(((x_69 * x_69) * (x_69 * x_69))));
					  highp vec3 tmpvar_71;
					  tmpvar_71 = (((
					    ((diffColor_49 + (tmpvar_68 * tmpvar_45)) * tmpvar_3)
					   * tmpvar_58) + (tmpvar_33 * diffColor_49)) + ((surfaceReduction_51 * tmpvar_32) * tmpvar_70));
					  color_50 = tmpvar_71;
					  mediump vec4 tmpvar_72;
					  tmpvar_72.w = 1.0;
					  tmpvar_72.xyz = color_50;
					  c_41.xyz = tmpvar_72.xyz;
					  c_41.w = alpha_48;
					  c_6 = c_41;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  tmpvar_5.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD6 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 tmpvar_32;
					  mediump vec3 tmpvar_33;
					  mediump vec4 tmpvar_34;
					  tmpvar_34 = texture2D (unity_Lightmap, xlv_TEXCOORD6.xy);
					  lowp vec4 color_35;
					  color_35 = tmpvar_34;
					  tmpvar_33 = (unity_Lightmap_HDR.x * color_35.xyz);
					  mediump vec4 hdr_36;
					  hdr_36 = tmpvar_2;
					  mediump vec4 tmpvar_37;
					  tmpvar_37.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_37.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_38;
					  tmpvar_38 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37.xyz, tmpvar_37.w);
					  mediump vec4 tmpvar_39;
					  tmpvar_39 = tmpvar_38;
					  tmpvar_32 = ((hdr_36.x * (
					    (hdr_36.w * (tmpvar_39.w - 1.0))
					   + 1.0)) * tmpvar_39.xyz);
					  lowp vec3 tmpvar_40;
					  mediump vec4 c_41;
					  highp vec3 tmpvar_42;
					  tmpvar_42 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_43;
					  mediump vec3 albedo_44;
					  albedo_44 = tmpvar_7;
					  mediump vec3 tmpvar_45;
					  tmpvar_45 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_44, vec3(_Metallic));
					  mediump float tmpvar_46;
					  tmpvar_46 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_43 = (albedo_44 * tmpvar_46);
					  tmpvar_40 = tmpvar_43;
					  mediump vec3 diffColor_47;
					  diffColor_47 = tmpvar_40;
					  mediump float alpha_48;
					  alpha_48 = tmpvar_8;
					  tmpvar_40 = diffColor_47;
					  mediump vec3 diffColor_49;
					  diffColor_49 = tmpvar_40;
					  mediump vec3 color_50;
					  mediump float surfaceReduction_51;
					  highp float specularTerm_52;
					  highp float a2_53;
					  mediump float roughness_54;
					  mediump float perceptualRoughness_55;
					  highp vec3 tmpvar_56;
					  highp vec3 inVec_57;
					  inVec_57 = (tmpvar_4 + worldViewDir_9);
					  tmpvar_56 = (inVec_57 * inversesqrt(max (0.001, 
					    dot (inVec_57, inVec_57)
					  )));
					  mediump float tmpvar_58;
					  highp float tmpvar_59;
					  tmpvar_59 = clamp (dot (tmpvar_42, tmpvar_4), 0.0, 1.0);
					  tmpvar_58 = tmpvar_59;
					  highp float tmpvar_60;
					  tmpvar_60 = clamp (dot (tmpvar_42, tmpvar_56), 0.0, 1.0);
					  mediump float tmpvar_61;
					  highp float tmpvar_62;
					  tmpvar_62 = clamp (dot (tmpvar_42, worldViewDir_9), 0.0, 1.0);
					  tmpvar_61 = tmpvar_62;
					  highp float tmpvar_63;
					  highp float smoothness_64;
					  smoothness_64 = _Glossiness;
					  tmpvar_63 = (1.0 - smoothness_64);
					  perceptualRoughness_55 = tmpvar_63;
					  highp float tmpvar_65;
					  highp float perceptualRoughness_66;
					  perceptualRoughness_66 = perceptualRoughness_55;
					  tmpvar_65 = (perceptualRoughness_66 * perceptualRoughness_66);
					  roughness_54 = tmpvar_65;
					  mediump float tmpvar_67;
					  tmpvar_67 = (roughness_54 * roughness_54);
					  a2_53 = tmpvar_67;
					  specularTerm_52 = ((roughness_54 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_56), 0.0, 1.0)) * (1.5 + roughness_54))
					   * 
					    (((tmpvar_60 * tmpvar_60) * (a2_53 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_68;
					  tmpvar_68 = clamp (specularTerm_52, 0.0, 100.0);
					  specularTerm_52 = tmpvar_68;
					  surfaceReduction_51 = (1.0 - ((roughness_54 * perceptualRoughness_55) * 0.28));
					  mediump float x_69;
					  x_69 = (1.0 - tmpvar_61);
					  mediump vec3 tmpvar_70;
					  tmpvar_70 = mix (tmpvar_45, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_46)
					  ), 0.0, 1.0)), vec3(((x_69 * x_69) * (x_69 * x_69))));
					  highp vec3 tmpvar_71;
					  tmpvar_71 = (((
					    ((diffColor_49 + (tmpvar_68 * tmpvar_45)) * tmpvar_3)
					   * tmpvar_58) + (tmpvar_33 * diffColor_49)) + ((surfaceReduction_51 * tmpvar_32) * tmpvar_70));
					  color_50 = tmpvar_71;
					  mediump vec4 tmpvar_72;
					  tmpvar_72.w = 1.0;
					  tmpvar_72.xyz = color_50;
					  c_41.xyz = tmpvar_72.xyz;
					  c_41.w = alpha_48;
					  c_6 = c_41;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD6.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform highp sampler2D unity_NHxRoughness;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_9;
					vec2 u_xlat18;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_30;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat10_1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat10_1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat10_1.xyz);
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat16_3.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat1.xyz * (-u_xlat16_3.xxx) + (-u_xlat0.xyz);
					    u_xlat2.z = (-_Glossiness) + 1.0;
					    u_xlat16_30 = (-u_xlat2.z) * 0.699999988 + 1.70000005;
					    u_xlat16_30 = u_xlat2.z * u_xlat16_30;
					    u_xlat16_30 = u_xlat16_30 * 6.0;
					    u_xlat10_3 = textureLod(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_30);
					    u_xlat16_4.x = u_xlat10_3.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_3.xyz * u_xlat16_4.xxx;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat28 = u_xlat27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat27)) + u_xlat0.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat2.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat2.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_31 = (-u_xlat28) + 1.0;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_9;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_9;
					    u_xlat18.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat18.x = texture(_CameraDepthTexture, u_xlat18.xy).x;
					    u_xlat18.x = _ZBufferParams.z * u_xlat18.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-vs_TEXCOORD4.w);
					    u_xlat18.x = u_xlat18.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
					#else
					    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
					#endif
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat18.x = u_xlat18.x * _FoamColor.w + u_xlat18.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
					#else
					    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
					#endif
					    u_xlat10_1 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * _Color;
					    u_xlat16_1 = u_xlat10_1 * _FoamColor + (-u_xlat16_2);
					    u_xlat1 = u_xlat18.xxxx * u_xlat16_1 + u_xlat16_2;
					    u_xlat16_6.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_32 = (-u_xlat16_31) + _Glossiness;
					    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_31);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat16_31 = u_xlat16_32 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_31);
					    u_xlat16_8.xyz = vec3(u_xlat16_9) * u_xlat16_8.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_7.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD6.xy).xyz;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_4.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD6.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec4 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_6;
					lowp vec3 u_xlat10_6;
					vec3 u_xlat7;
					mediump float u_xlat16_10;
					mediump vec3 u_xlat16_11;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_28;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
					    u_xlat0.x = u_xlat0.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _FoamColor.w + u_xlat0.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat10_1 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * _Color;
					    u_xlat16_1 = u_xlat10_1 * _FoamColor + (-u_xlat16_2);
					    u_xlat0 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_2;
					    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_11.xyz = u_xlat0.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = (-u_xlat16_3.x) + _Glossiness;
					    u_xlat16_3.x = u_xlat16_3.x + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD6.xy).xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_4.xyz = u_xlat16_11.xyz * u_xlat16_4.xyz;
					    u_xlat16_5.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat1.x = vs_TEXCOORD1.w;
					    u_xlat1.y = vs_TEXCOORD2.w;
					    u_xlat1.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = max(u_xlat25, 0.00100000005);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat25 = max(u_xlat25, 0.319999993);
					    u_xlat16_26 = (-_Glossiness) + 1.0;
					    u_xlat16_6 = u_xlat16_26 * u_xlat16_26 + 1.5;
					    u_xlat25 = u_xlat25 * u_xlat16_6;
					    u_xlat10_6.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat7.x = dot(vs_TEXCOORD1.xyz, u_xlat10_6.xyz);
					    u_xlat7.y = dot(vs_TEXCOORD2.xyz, u_xlat10_6.xyz);
					    u_xlat7.z = dot(vs_TEXCOORD3.xyz, u_xlat10_6.xyz);
					    u_xlat6.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat7.xyz;
					    u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat16_10 = u_xlat16_26 * u_xlat16_26;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_10 + -1.0;
					    u_xlat2.x = u_xlat2.x * u_xlat16_18 + 1.00001001;
					    u_xlat25 = u_xlat25 * u_xlat2.x;
					    u_xlat25 = u_xlat16_10 / u_xlat25;
					    u_xlat16_28 = u_xlat16_26 * u_xlat16_10;
					    u_xlat16_28 = (-u_xlat16_28) * 0.280000001 + 1.0;
					    u_xlat25 = u_xlat25 + -9.99999975e-05;
					    u_xlat25 = max(u_xlat25, 0.0);
					    u_xlat25 = min(u_xlat25, 100.0);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat16_5.xyz + u_xlat16_11.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat25 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25) + u_xlat16_4.xyz;
					    u_xlat16_11.x = (-u_xlat16_26) * 0.699999988 + 1.70000005;
					    u_xlat16_11.x = u_xlat16_26 * u_xlat16_11.x;
					    u_xlat16_11.x = u_xlat16_11.x * 6.0;
					    u_xlat16_19 = dot((-u_xlat1.xyz), u_xlat6.xyz);
					    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
					    u_xlat16_4.xyz = u_xlat6.xyz * (-vec3(u_xlat16_19)) + (-u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat6.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_19 = (-u_xlat1.x) + 1.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_11.x);
					    u_xlat16_11.x = u_xlat10_1.w + -1.0;
					    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;
					    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_1.xyz * u_xlat16_11.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_28);
					    u_xlat16_3.xyw = u_xlat16_3.xxx + (-u_xlat16_5.xyz);
					    u_xlat16_3.xyz = vec3(u_xlat16_19) * u_xlat16_3.xyw + u_xlat16_5.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat2.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD6.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec4 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_6;
					lowp vec3 u_xlat10_6;
					vec3 u_xlat7;
					mediump float u_xlat16_10;
					mediump vec3 u_xlat16_11;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_28;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
					    u_xlat0.x = u_xlat0.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _FoamColor.w + u_xlat0.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat10_1 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * _Color;
					    u_xlat16_1 = u_xlat10_1 * _FoamColor + (-u_xlat16_2);
					    u_xlat0 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_2;
					    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_11.xyz = u_xlat0.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = (-u_xlat16_3.x) + _Glossiness;
					    u_xlat16_3.x = u_xlat16_3.x + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD6.xy).xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_4.xyz = u_xlat16_11.xyz * u_xlat16_4.xyz;
					    u_xlat16_5.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat1.x = vs_TEXCOORD1.w;
					    u_xlat1.y = vs_TEXCOORD2.w;
					    u_xlat1.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = max(u_xlat25, 0.00100000005);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat25 = max(u_xlat25, 0.319999993);
					    u_xlat16_26 = (-_Glossiness) + 1.0;
					    u_xlat16_6 = u_xlat16_26 * u_xlat16_26 + 1.5;
					    u_xlat25 = u_xlat25 * u_xlat16_6;
					    u_xlat10_6.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat7.x = dot(vs_TEXCOORD1.xyz, u_xlat10_6.xyz);
					    u_xlat7.y = dot(vs_TEXCOORD2.xyz, u_xlat10_6.xyz);
					    u_xlat7.z = dot(vs_TEXCOORD3.xyz, u_xlat10_6.xyz);
					    u_xlat6.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat7.xyz;
					    u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat16_10 = u_xlat16_26 * u_xlat16_26;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_10 + -1.0;
					    u_xlat2.x = u_xlat2.x * u_xlat16_18 + 1.00001001;
					    u_xlat25 = u_xlat25 * u_xlat2.x;
					    u_xlat25 = u_xlat16_10 / u_xlat25;
					    u_xlat16_28 = u_xlat16_26 * u_xlat16_10;
					    u_xlat16_28 = (-u_xlat16_28) * 0.280000001 + 1.0;
					    u_xlat25 = u_xlat25 + -9.99999975e-05;
					    u_xlat25 = max(u_xlat25, 0.0);
					    u_xlat25 = min(u_xlat25, 100.0);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat16_5.xyz + u_xlat16_11.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat25 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25) + u_xlat16_4.xyz;
					    u_xlat16_11.x = (-u_xlat16_26) * 0.699999988 + 1.70000005;
					    u_xlat16_11.x = u_xlat16_26 * u_xlat16_11.x;
					    u_xlat16_11.x = u_xlat16_11.x * 6.0;
					    u_xlat16_19 = dot((-u_xlat1.xyz), u_xlat6.xyz);
					    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
					    u_xlat16_4.xyz = u_xlat6.xyz * (-vec3(u_xlat16_19)) + (-u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat6.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_19 = (-u_xlat1.x) + 1.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_11.x);
					    u_xlat16_11.x = u_xlat10_1.w + -1.0;
					    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;
					    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_1.xyz * u_xlat16_11.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_28);
					    u_xlat16_3.xyw = u_xlat16_3.xxx + (-u_xlat16_5.xyz);
					    u_xlat16_3.xyz = vec3(u_xlat16_19) * u_xlat16_3.xyw + u_xlat16_5.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat2.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  tmpvar_5.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD6 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = tmpvar_26;
					  mediump vec3 ambient_33;
					  mediump vec4 tmpvar_34;
					  tmpvar_34.w = 1.0;
					  tmpvar_34.xyz = normalWorld_32;
					  mediump vec3 x_35;
					  x_35.x = dot (unity_SHAr, tmpvar_34);
					  x_35.y = dot (unity_SHAg, tmpvar_34);
					  x_35.z = dot (unity_SHAb, tmpvar_34);
					  mediump vec3 x1_36;
					  mediump vec4 tmpvar_37;
					  tmpvar_37 = (normalWorld_32.xyzz * normalWorld_32.yzzx);
					  x1_36.x = dot (unity_SHBr, tmpvar_37);
					  x1_36.y = dot (unity_SHBg, tmpvar_37);
					  x1_36.z = dot (unity_SHBb, tmpvar_37);
					  ambient_33 = max (vec3(0.0, 0.0, 0.0), (x_35 + (x1_36 + 
					    (unity_SHC.xyz * ((normalWorld_32.x * normalWorld_32.x) - (normalWorld_32.y * normalWorld_32.y)))
					  )));
					  mediump vec3 tmpvar_38;
					  tmpvar_38 = max (((1.055 * 
					    pow (max (ambient_33, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  ambient_33 = tmpvar_38;
					  mediump vec4 tmpvar_39;
					  tmpvar_39 = texture2D (unity_Lightmap, xlv_TEXCOORD6.xy);
					  lowp vec4 color_40;
					  color_40 = tmpvar_39;
					  mediump vec4 hdr_41;
					  hdr_41 = tmpvar_2;
					  mediump vec4 tmpvar_42;
					  tmpvar_42.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_42.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_43;
					  tmpvar_43 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42.xyz, tmpvar_42.w);
					  mediump vec4 tmpvar_44;
					  tmpvar_44 = tmpvar_43;
					  lowp vec3 tmpvar_45;
					  mediump vec4 c_46;
					  highp vec3 tmpvar_47;
					  tmpvar_47 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_48;
					  mediump vec3 albedo_49;
					  albedo_49 = tmpvar_7;
					  mediump vec3 tmpvar_50;
					  tmpvar_50 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_49, vec3(_Metallic));
					  mediump float tmpvar_51;
					  tmpvar_51 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_48 = (albedo_49 * tmpvar_51);
					  tmpvar_45 = tmpvar_48;
					  mediump vec3 diffColor_52;
					  diffColor_52 = tmpvar_45;
					  mediump float alpha_53;
					  alpha_53 = tmpvar_8;
					  tmpvar_45 = diffColor_52;
					  mediump vec3 diffColor_54;
					  diffColor_54 = tmpvar_45;
					  mediump vec3 color_55;
					  mediump vec2 rlPow4AndFresnelTerm_56;
					  mediump float tmpvar_57;
					  highp float tmpvar_58;
					  tmpvar_58 = clamp (dot (tmpvar_47, tmpvar_4), 0.0, 1.0);
					  tmpvar_57 = tmpvar_58;
					  mediump float tmpvar_59;
					  highp float tmpvar_60;
					  tmpvar_60 = clamp (dot (tmpvar_47, worldViewDir_9), 0.0, 1.0);
					  tmpvar_59 = tmpvar_60;
					  highp vec2 tmpvar_61;
					  tmpvar_61.x = dot ((worldViewDir_9 - (2.0 * 
					    (dot (tmpvar_47, worldViewDir_9) * tmpvar_47)
					  )), tmpvar_4);
					  tmpvar_61.y = (1.0 - tmpvar_59);
					  highp vec2 tmpvar_62;
					  tmpvar_62 = ((tmpvar_61 * tmpvar_61) * (tmpvar_61 * tmpvar_61));
					  rlPow4AndFresnelTerm_56 = tmpvar_62;
					  mediump float tmpvar_63;
					  tmpvar_63 = rlPow4AndFresnelTerm_56.x;
					  mediump float specular_64;
					  highp float smoothness_65;
					  smoothness_65 = _Glossiness;
					  highp vec2 tmpvar_66;
					  tmpvar_66.x = tmpvar_63;
					  tmpvar_66.y = (1.0 - smoothness_65);
					  highp float tmpvar_67;
					  tmpvar_67 = (texture2D (unity_NHxRoughness, tmpvar_66).x * 16.0);
					  specular_64 = tmpvar_67;
					  color_55 = ((diffColor_54 + (specular_64 * tmpvar_50)) * (tmpvar_3 * tmpvar_57));
					  color_55 = (color_55 + ((
					    (tmpvar_38 + (unity_Lightmap_HDR.x * color_40.xyz))
					   * diffColor_54) + (
					    ((hdr_41.x * ((hdr_41.w * 
					      (tmpvar_44.w - 1.0)
					    ) + 1.0)) * tmpvar_44.xyz)
					   * 
					    mix (tmpvar_50, vec3(clamp ((_Glossiness + (1.0 - tmpvar_51)), 0.0, 1.0)), rlPow4AndFresnelTerm_56.yyy)
					  )));
					  mediump vec4 tmpvar_68;
					  tmpvar_68.w = 1.0;
					  tmpvar_68.xyz = color_55;
					  c_46.xyz = tmpvar_68.xyz;
					  c_46.w = alpha_53;
					  c_6 = c_46;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  tmpvar_5.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD6 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = tmpvar_26;
					  mediump vec3 tmpvar_33;
					  mediump vec3 tmpvar_34;
					  mediump vec3 ambient_35;
					  mediump vec4 tmpvar_36;
					  tmpvar_36.w = 1.0;
					  tmpvar_36.xyz = normalWorld_32;
					  mediump vec3 x_37;
					  x_37.x = dot (unity_SHAr, tmpvar_36);
					  x_37.y = dot (unity_SHAg, tmpvar_36);
					  x_37.z = dot (unity_SHAb, tmpvar_36);
					  mediump vec3 x1_38;
					  mediump vec4 tmpvar_39;
					  tmpvar_39 = (normalWorld_32.xyzz * normalWorld_32.yzzx);
					  x1_38.x = dot (unity_SHBr, tmpvar_39);
					  x1_38.y = dot (unity_SHBg, tmpvar_39);
					  x1_38.z = dot (unity_SHBb, tmpvar_39);
					  ambient_35 = max (vec3(0.0, 0.0, 0.0), (x_37 + (x1_38 + 
					    (unity_SHC.xyz * ((normalWorld_32.x * normalWorld_32.x) - (normalWorld_32.y * normalWorld_32.y)))
					  )));
					  mediump vec3 tmpvar_40;
					  tmpvar_40 = max (((1.055 * 
					    pow (max (ambient_35, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  ambient_35 = tmpvar_40;
					  mediump vec4 tmpvar_41;
					  tmpvar_41 = texture2D (unity_Lightmap, xlv_TEXCOORD6.xy);
					  lowp vec4 color_42;
					  color_42 = tmpvar_41;
					  tmpvar_34 = (tmpvar_40 + (unity_Lightmap_HDR.x * color_42.xyz));
					  mediump vec4 hdr_43;
					  hdr_43 = tmpvar_2;
					  mediump vec4 tmpvar_44;
					  tmpvar_44.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_44.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_45;
					  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_44.xyz, tmpvar_44.w);
					  mediump vec4 tmpvar_46;
					  tmpvar_46 = tmpvar_45;
					  tmpvar_33 = ((hdr_43.x * (
					    (hdr_43.w * (tmpvar_46.w - 1.0))
					   + 1.0)) * tmpvar_46.xyz);
					  lowp vec3 tmpvar_47;
					  mediump vec4 c_48;
					  highp vec3 tmpvar_49;
					  tmpvar_49 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_50;
					  mediump vec3 albedo_51;
					  albedo_51 = tmpvar_7;
					  mediump vec3 tmpvar_52;
					  tmpvar_52 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_51, vec3(_Metallic));
					  mediump float tmpvar_53;
					  tmpvar_53 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_50 = (albedo_51 * tmpvar_53);
					  tmpvar_47 = tmpvar_50;
					  mediump vec3 diffColor_54;
					  diffColor_54 = tmpvar_47;
					  mediump float alpha_55;
					  alpha_55 = tmpvar_8;
					  tmpvar_47 = diffColor_54;
					  mediump vec3 diffColor_56;
					  diffColor_56 = tmpvar_47;
					  mediump vec3 color_57;
					  mediump float surfaceReduction_58;
					  highp float specularTerm_59;
					  highp float a2_60;
					  mediump float roughness_61;
					  mediump float perceptualRoughness_62;
					  highp vec3 tmpvar_63;
					  highp vec3 inVec_64;
					  inVec_64 = (tmpvar_4 + worldViewDir_9);
					  tmpvar_63 = (inVec_64 * inversesqrt(max (0.001, 
					    dot (inVec_64, inVec_64)
					  )));
					  mediump float tmpvar_65;
					  highp float tmpvar_66;
					  tmpvar_66 = clamp (dot (tmpvar_49, tmpvar_4), 0.0, 1.0);
					  tmpvar_65 = tmpvar_66;
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (dot (tmpvar_49, tmpvar_63), 0.0, 1.0);
					  mediump float tmpvar_68;
					  highp float tmpvar_69;
					  tmpvar_69 = clamp (dot (tmpvar_49, worldViewDir_9), 0.0, 1.0);
					  tmpvar_68 = tmpvar_69;
					  highp float tmpvar_70;
					  highp float smoothness_71;
					  smoothness_71 = _Glossiness;
					  tmpvar_70 = (1.0 - smoothness_71);
					  perceptualRoughness_62 = tmpvar_70;
					  highp float tmpvar_72;
					  highp float perceptualRoughness_73;
					  perceptualRoughness_73 = perceptualRoughness_62;
					  tmpvar_72 = (perceptualRoughness_73 * perceptualRoughness_73);
					  roughness_61 = tmpvar_72;
					  mediump float tmpvar_74;
					  tmpvar_74 = (roughness_61 * roughness_61);
					  a2_60 = tmpvar_74;
					  specularTerm_59 = ((roughness_61 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_63), 0.0, 1.0)) * (1.5 + roughness_61))
					   * 
					    (((tmpvar_67 * tmpvar_67) * (a2_60 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_75;
					  tmpvar_75 = clamp (specularTerm_59, 0.0, 100.0);
					  specularTerm_59 = tmpvar_75;
					  surfaceReduction_58 = (1.0 - ((roughness_61 * perceptualRoughness_62) * 0.28));
					  mediump float x_76;
					  x_76 = (1.0 - tmpvar_68);
					  mediump vec3 tmpvar_77;
					  tmpvar_77 = mix (tmpvar_52, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_53)
					  ), 0.0, 1.0)), vec3(((x_76 * x_76) * (x_76 * x_76))));
					  highp vec3 tmpvar_78;
					  tmpvar_78 = (((
					    ((diffColor_56 + (tmpvar_75 * tmpvar_52)) * tmpvar_3)
					   * tmpvar_65) + (tmpvar_34 * diffColor_56)) + ((surfaceReduction_58 * tmpvar_33) * tmpvar_77));
					  color_57 = tmpvar_78;
					  mediump vec4 tmpvar_79;
					  tmpvar_79.w = 1.0;
					  tmpvar_79.xyz = color_57;
					  c_48.xyz = tmpvar_79.xyz;
					  c_48.w = alpha_55;
					  c_6 = c_48;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  tmpvar_5.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD6 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = tmpvar_26;
					  mediump vec3 tmpvar_33;
					  mediump vec3 tmpvar_34;
					  mediump vec3 ambient_35;
					  mediump vec4 tmpvar_36;
					  tmpvar_36.w = 1.0;
					  tmpvar_36.xyz = normalWorld_32;
					  mediump vec3 x_37;
					  x_37.x = dot (unity_SHAr, tmpvar_36);
					  x_37.y = dot (unity_SHAg, tmpvar_36);
					  x_37.z = dot (unity_SHAb, tmpvar_36);
					  mediump vec3 x1_38;
					  mediump vec4 tmpvar_39;
					  tmpvar_39 = (normalWorld_32.xyzz * normalWorld_32.yzzx);
					  x1_38.x = dot (unity_SHBr, tmpvar_39);
					  x1_38.y = dot (unity_SHBg, tmpvar_39);
					  x1_38.z = dot (unity_SHBb, tmpvar_39);
					  ambient_35 = max (vec3(0.0, 0.0, 0.0), (x_37 + (x1_38 + 
					    (unity_SHC.xyz * ((normalWorld_32.x * normalWorld_32.x) - (normalWorld_32.y * normalWorld_32.y)))
					  )));
					  mediump vec3 tmpvar_40;
					  tmpvar_40 = max (((1.055 * 
					    pow (max (ambient_35, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  ambient_35 = tmpvar_40;
					  mediump vec4 tmpvar_41;
					  tmpvar_41 = texture2D (unity_Lightmap, xlv_TEXCOORD6.xy);
					  lowp vec4 color_42;
					  color_42 = tmpvar_41;
					  tmpvar_34 = (tmpvar_40 + (unity_Lightmap_HDR.x * color_42.xyz));
					  mediump vec4 hdr_43;
					  hdr_43 = tmpvar_2;
					  mediump vec4 tmpvar_44;
					  tmpvar_44.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_44.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_45;
					  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_44.xyz, tmpvar_44.w);
					  mediump vec4 tmpvar_46;
					  tmpvar_46 = tmpvar_45;
					  tmpvar_33 = ((hdr_43.x * (
					    (hdr_43.w * (tmpvar_46.w - 1.0))
					   + 1.0)) * tmpvar_46.xyz);
					  lowp vec3 tmpvar_47;
					  mediump vec4 c_48;
					  highp vec3 tmpvar_49;
					  tmpvar_49 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_50;
					  mediump vec3 albedo_51;
					  albedo_51 = tmpvar_7;
					  mediump vec3 tmpvar_52;
					  tmpvar_52 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_51, vec3(_Metallic));
					  mediump float tmpvar_53;
					  tmpvar_53 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_50 = (albedo_51 * tmpvar_53);
					  tmpvar_47 = tmpvar_50;
					  mediump vec3 diffColor_54;
					  diffColor_54 = tmpvar_47;
					  mediump float alpha_55;
					  alpha_55 = tmpvar_8;
					  tmpvar_47 = diffColor_54;
					  mediump vec3 diffColor_56;
					  diffColor_56 = tmpvar_47;
					  mediump vec3 color_57;
					  mediump float surfaceReduction_58;
					  highp float specularTerm_59;
					  highp float a2_60;
					  mediump float roughness_61;
					  mediump float perceptualRoughness_62;
					  highp vec3 tmpvar_63;
					  highp vec3 inVec_64;
					  inVec_64 = (tmpvar_4 + worldViewDir_9);
					  tmpvar_63 = (inVec_64 * inversesqrt(max (0.001, 
					    dot (inVec_64, inVec_64)
					  )));
					  mediump float tmpvar_65;
					  highp float tmpvar_66;
					  tmpvar_66 = clamp (dot (tmpvar_49, tmpvar_4), 0.0, 1.0);
					  tmpvar_65 = tmpvar_66;
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (dot (tmpvar_49, tmpvar_63), 0.0, 1.0);
					  mediump float tmpvar_68;
					  highp float tmpvar_69;
					  tmpvar_69 = clamp (dot (tmpvar_49, worldViewDir_9), 0.0, 1.0);
					  tmpvar_68 = tmpvar_69;
					  highp float tmpvar_70;
					  highp float smoothness_71;
					  smoothness_71 = _Glossiness;
					  tmpvar_70 = (1.0 - smoothness_71);
					  perceptualRoughness_62 = tmpvar_70;
					  highp float tmpvar_72;
					  highp float perceptualRoughness_73;
					  perceptualRoughness_73 = perceptualRoughness_62;
					  tmpvar_72 = (perceptualRoughness_73 * perceptualRoughness_73);
					  roughness_61 = tmpvar_72;
					  mediump float tmpvar_74;
					  tmpvar_74 = (roughness_61 * roughness_61);
					  a2_60 = tmpvar_74;
					  specularTerm_59 = ((roughness_61 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_63), 0.0, 1.0)) * (1.5 + roughness_61))
					   * 
					    (((tmpvar_67 * tmpvar_67) * (a2_60 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_75;
					  tmpvar_75 = clamp (specularTerm_59, 0.0, 100.0);
					  specularTerm_59 = tmpvar_75;
					  surfaceReduction_58 = (1.0 - ((roughness_61 * perceptualRoughness_62) * 0.28));
					  mediump float x_76;
					  x_76 = (1.0 - tmpvar_68);
					  mediump vec3 tmpvar_77;
					  tmpvar_77 = mix (tmpvar_52, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_53)
					  ), 0.0, 1.0)), vec3(((x_76 * x_76) * (x_76 * x_76))));
					  highp vec3 tmpvar_78;
					  tmpvar_78 = (((
					    ((diffColor_56 + (tmpvar_75 * tmpvar_52)) * tmpvar_3)
					   * tmpvar_65) + (tmpvar_34 * diffColor_56)) + ((surfaceReduction_58 * tmpvar_33) * tmpvar_77));
					  color_57 = tmpvar_78;
					  mediump vec4 tmpvar_79;
					  tmpvar_79.w = 1.0;
					  tmpvar_79.xyz = color_57;
					  c_48.xyz = tmpvar_79.xyz;
					  c_48.w = alpha_55;
					  c_6 = c_48;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD6.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform highp sampler2D unity_NHxRoughness;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec4 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump float u_xlat16_10;
					vec2 u_xlat20;
					float u_xlat30;
					mediump float u_xlat16_32;
					mediump float u_xlat16_33;
					float u_xlat34;
					void main()
					{
					    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat10_0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat10_0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat10_0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_2.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_5.xyz = texture(unity_Lightmap, vs_TEXCOORD6.xy).xyz;
					    u_xlat16_2.xyz = unity_Lightmap_HDR.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat4.x = vs_TEXCOORD1.w;
					    u_xlat4.y = vs_TEXCOORD2.w;
					    u_xlat4.z = vs_TEXCOORD3.w;
					    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.xyz;
					    u_xlat16_32 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat16_32 = u_xlat16_32 + u_xlat16_32;
					    u_xlat16_3.xyz = u_xlat0.xyz * (-vec3(u_xlat16_32)) + (-u_xlat4.xyz);
					    u_xlat5.z = (-_Glossiness) + 1.0;
					    u_xlat16_32 = (-u_xlat5.z) * 0.699999988 + 1.70000005;
					    u_xlat16_32 = u_xlat16_32 * u_xlat5.z;
					    u_xlat16_32 = u_xlat16_32 * 6.0;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_32);
					    u_xlat16_32 = u_xlat10_1.w + -1.0;
					    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(u_xlat16_32);
					    u_xlat30 = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat34 = u_xlat30;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
					#else
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					#endif
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat30)) + u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat5.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat5.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_32 = (-u_xlat34) + 1.0;
					    u_xlat16_10 = u_xlat16_32 * u_xlat16_32;
					    u_xlat16_10 = u_xlat16_32 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_32 * u_xlat16_10;
					    u_xlat20.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat20.x = texture(_CameraDepthTexture, u_xlat20.xy).x;
					    u_xlat20.x = _ZBufferParams.z * u_xlat20.x + _ZBufferParams.w;
					    u_xlat20.x = float(1.0) / u_xlat20.x;
					    u_xlat20.x = u_xlat20.x + (-vs_TEXCOORD4.w);
					    u_xlat20.x = u_xlat20.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
					#else
					    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
					#endif
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat20.x = u_xlat20.x * _FoamColor.w + u_xlat20.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
					#else
					    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
					#endif
					    u_xlat10_1 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4 = u_xlat10_4 * _Color;
					    u_xlat16_1 = u_xlat10_1 * _FoamColor + (-u_xlat16_4);
					    u_xlat1 = u_xlat20.xxxx * u_xlat16_1 + u_xlat16_4;
					    u_xlat16_7.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_33 = (-u_xlat16_32) + _Glossiness;
					    u_xlat16_8.xyz = u_xlat1.xyz * vec3(u_xlat16_32);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat16_32 = u_xlat16_33 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
					#else
					    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_32);
					    u_xlat16_9.xyz = vec3(u_xlat16_10) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_9.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD6.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat13;
					mediump float u_xlat16_13;
					mediump float u_xlat16_21;
					float u_xlat24;
					mediump float u_xlat16_26;
					float u_xlat28;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat10_0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat10_0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat10_0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_2.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_5.xyz = texture(unity_Lightmap, vs_TEXCOORD6.xy).xyz;
					    u_xlat16_2.xyz = unity_Lightmap_HDR.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat4.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat24 = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat24 = _ZBufferParams.z * u_xlat24 + _ZBufferParams.w;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat24 = u_xlat24 + (-vs_TEXCOORD4.w);
					    u_xlat24 = u_xlat24 * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _FoamColor.w + u_xlat24;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat10_1 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * _Color;
					    u_xlat16_1 = u_xlat10_1 * _FoamColor + (-u_xlat16_3);
					    u_xlat1 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_3;
					    u_xlat16_26 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat16_26);
					    u_xlat16_26 = (-u_xlat16_26) + _Glossiness;
					    u_xlat16_26 = u_xlat16_26 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
					    u_xlat16_7.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.x = vs_TEXCOORD1.w;
					    u_xlat4.y = vs_TEXCOORD2.w;
					    u_xlat4.z = vs_TEXCOORD3.w;
					    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat24) * u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat28 = dot(u_xlat0.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_5.x = (-_Glossiness) + 1.0;
					    u_xlat16_13 = u_xlat16_5.x * u_xlat16_5.x + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_13;
					    u_xlat16_13 = u_xlat16_5.x * u_xlat16_5.x;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_13 + -1.0;
					    u_xlat28 = u_xlat28 * u_xlat16_21 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat28;
					    u_xlat24 = u_xlat16_13 / u_xlat24;
					    u_xlat16_30 = u_xlat16_5.x * u_xlat16_13;
					    u_xlat16_30 = (-u_xlat16_30) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat13.xyz = vec3(u_xlat24) * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat13.xyz = u_xlat13.xyz * _LightColor0.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat13.xyz = u_xlat13.xyz * vec3(u_xlat24) + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = vec3(u_xlat16_26) + (-u_xlat16_7.xyz);
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat16_26 = (-u_xlat24) + 1.0;
					    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;
					    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;
					    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat16_7.xyz;
					    u_xlat16_26 = (-u_xlat16_5.x) * 0.699999988 + 1.70000005;
					    u_xlat16_26 = u_xlat16_26 * u_xlat16_5.x;
					    u_xlat16_26 = u_xlat16_26 * 6.0;
					    u_xlat16_6.x = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat16_6.x = u_xlat16_6.x + u_xlat16_6.x;
					    u_xlat16_6.xyz = u_xlat0.xyz * (-u_xlat16_6.xxx) + (-u_xlat4.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_26);
					    u_xlat16_26 = u_xlat10_0.w + -1.0;
					    u_xlat16_26 = unity_SpecCube0_HDR.w * u_xlat16_26 + 1.0;
					    u_xlat16_26 = u_xlat16_26 * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(u_xlat16_26);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_30);
					    u_xlat1.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat13.xyz;
					    SV_Target0 = u_xlat1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD6.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat13;
					mediump float u_xlat16_13;
					mediump float u_xlat16_21;
					float u_xlat24;
					mediump float u_xlat16_26;
					float u_xlat28;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat10_0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat10_0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat10_0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_2.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_5.xyz = texture(unity_Lightmap, vs_TEXCOORD6.xy).xyz;
					    u_xlat16_2.xyz = unity_Lightmap_HDR.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat4.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat24 = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat24 = _ZBufferParams.z * u_xlat24 + _ZBufferParams.w;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat24 = u_xlat24 + (-vs_TEXCOORD4.w);
					    u_xlat24 = u_xlat24 * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _FoamColor.w + u_xlat24;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat10_1 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * _Color;
					    u_xlat16_1 = u_xlat10_1 * _FoamColor + (-u_xlat16_3);
					    u_xlat1 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_3;
					    u_xlat16_26 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat16_26);
					    u_xlat16_26 = (-u_xlat16_26) + _Glossiness;
					    u_xlat16_26 = u_xlat16_26 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
					    u_xlat16_7.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.x = vs_TEXCOORD1.w;
					    u_xlat4.y = vs_TEXCOORD2.w;
					    u_xlat4.z = vs_TEXCOORD3.w;
					    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat24) * u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat28 = dot(u_xlat0.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_5.x = (-_Glossiness) + 1.0;
					    u_xlat16_13 = u_xlat16_5.x * u_xlat16_5.x + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_13;
					    u_xlat16_13 = u_xlat16_5.x * u_xlat16_5.x;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_13 + -1.0;
					    u_xlat28 = u_xlat28 * u_xlat16_21 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat28;
					    u_xlat24 = u_xlat16_13 / u_xlat24;
					    u_xlat16_30 = u_xlat16_5.x * u_xlat16_13;
					    u_xlat16_30 = (-u_xlat16_30) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat13.xyz = vec3(u_xlat24) * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat13.xyz = u_xlat13.xyz * _LightColor0.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat13.xyz = u_xlat13.xyz * vec3(u_xlat24) + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = vec3(u_xlat16_26) + (-u_xlat16_7.xyz);
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat16_26 = (-u_xlat24) + 1.0;
					    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;
					    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;
					    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat16_7.xyz;
					    u_xlat16_26 = (-u_xlat16_5.x) * 0.699999988 + 1.70000005;
					    u_xlat16_26 = u_xlat16_26 * u_xlat16_5.x;
					    u_xlat16_26 = u_xlat16_26 * 6.0;
					    u_xlat16_6.x = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat16_6.x = u_xlat16_6.x + u_xlat16_6.x;
					    u_xlat16_6.xyz = u_xlat0.xyz * (-u_xlat16_6.xxx) + (-u_xlat4.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_26);
					    u_xlat16_26 = u_xlat10_0.w + -1.0;
					    u_xlat16_26 = unity_SpecCube0_HDR.w * u_xlat16_26 + 1.0;
					    u_xlat16_26 = u_xlat16_26 * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(u_xlat16_26);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_30);
					    u_xlat1.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat13.xyz;
					    SV_Target0 = u_xlat1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  tmpvar_5.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_5.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD6 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump sampler2D unity_Lightmap;
					uniform sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 tmpvar_32;
					  mediump vec4 tmpvar_33;
					  tmpvar_33 = texture2D (unity_Lightmap, xlv_TEXCOORD6.xy);
					  lowp vec4 color_34;
					  color_34 = tmpvar_33;
					  tmpvar_32 = (unity_Lightmap_HDR.x * color_34.xyz);
					  lowp vec4 tmpvar_35;
					  tmpvar_35 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
					  tmpvar_32 = (tmpvar_32 + pow ((
					    (unity_DynamicLightmap_HDR.x * tmpvar_35.w)
					   * tmpvar_35.xyz), unity_DynamicLightmap_HDR.yyy));
					  mediump vec4 hdr_36;
					  hdr_36 = tmpvar_2;
					  mediump vec4 tmpvar_37;
					  tmpvar_37.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_37.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_38;
					  tmpvar_38 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37.xyz, tmpvar_37.w);
					  mediump vec4 tmpvar_39;
					  tmpvar_39 = tmpvar_38;
					  lowp vec3 tmpvar_40;
					  mediump vec4 c_41;
					  highp vec3 tmpvar_42;
					  tmpvar_42 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_43;
					  mediump vec3 albedo_44;
					  albedo_44 = tmpvar_7;
					  mediump vec3 tmpvar_45;
					  tmpvar_45 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_44, vec3(_Metallic));
					  mediump float tmpvar_46;
					  tmpvar_46 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_43 = (albedo_44 * tmpvar_46);
					  tmpvar_40 = tmpvar_43;
					  mediump vec3 diffColor_47;
					  diffColor_47 = tmpvar_40;
					  mediump float alpha_48;
					  alpha_48 = tmpvar_8;
					  tmpvar_40 = diffColor_47;
					  mediump vec3 diffColor_49;
					  diffColor_49 = tmpvar_40;
					  mediump vec3 color_50;
					  mediump vec2 rlPow4AndFresnelTerm_51;
					  mediump float tmpvar_52;
					  highp float tmpvar_53;
					  tmpvar_53 = clamp (dot (tmpvar_42, tmpvar_4), 0.0, 1.0);
					  tmpvar_52 = tmpvar_53;
					  mediump float tmpvar_54;
					  highp float tmpvar_55;
					  tmpvar_55 = clamp (dot (tmpvar_42, worldViewDir_9), 0.0, 1.0);
					  tmpvar_54 = tmpvar_55;
					  highp vec2 tmpvar_56;
					  tmpvar_56.x = dot ((worldViewDir_9 - (2.0 * 
					    (dot (tmpvar_42, worldViewDir_9) * tmpvar_42)
					  )), tmpvar_4);
					  tmpvar_56.y = (1.0 - tmpvar_54);
					  highp vec2 tmpvar_57;
					  tmpvar_57 = ((tmpvar_56 * tmpvar_56) * (tmpvar_56 * tmpvar_56));
					  rlPow4AndFresnelTerm_51 = tmpvar_57;
					  mediump float tmpvar_58;
					  tmpvar_58 = rlPow4AndFresnelTerm_51.x;
					  mediump float specular_59;
					  highp float smoothness_60;
					  smoothness_60 = _Glossiness;
					  highp vec2 tmpvar_61;
					  tmpvar_61.x = tmpvar_58;
					  tmpvar_61.y = (1.0 - smoothness_60);
					  highp float tmpvar_62;
					  tmpvar_62 = (texture2D (unity_NHxRoughness, tmpvar_61).x * 16.0);
					  specular_59 = tmpvar_62;
					  color_50 = ((diffColor_49 + (specular_59 * tmpvar_45)) * (tmpvar_3 * tmpvar_52));
					  color_50 = (color_50 + ((tmpvar_32 * diffColor_49) + (
					    ((hdr_36.x * ((hdr_36.w * 
					      (tmpvar_39.w - 1.0)
					    ) + 1.0)) * tmpvar_39.xyz)
					   * 
					    mix (tmpvar_45, vec3(clamp ((_Glossiness + (1.0 - tmpvar_46)), 0.0, 1.0)), rlPow4AndFresnelTerm_51.yyy)
					  )));
					  mediump vec4 tmpvar_63;
					  tmpvar_63.w = 1.0;
					  tmpvar_63.xyz = color_50;
					  c_41.xyz = tmpvar_63.xyz;
					  c_41.w = alpha_48;
					  c_6 = c_41;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  tmpvar_5.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_5.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD6 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump sampler2D unity_Lightmap;
					uniform sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 tmpvar_32;
					  mediump vec3 tmpvar_33;
					  mediump vec4 tmpvar_34;
					  tmpvar_34 = texture2D (unity_Lightmap, xlv_TEXCOORD6.xy);
					  lowp vec4 color_35;
					  color_35 = tmpvar_34;
					  tmpvar_33 = (unity_Lightmap_HDR.x * color_35.xyz);
					  lowp vec4 tmpvar_36;
					  tmpvar_36 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
					  tmpvar_33 = (tmpvar_33 + pow ((
					    (unity_DynamicLightmap_HDR.x * tmpvar_36.w)
					   * tmpvar_36.xyz), unity_DynamicLightmap_HDR.yyy));
					  mediump vec4 hdr_37;
					  hdr_37 = tmpvar_2;
					  mediump vec4 tmpvar_38;
					  tmpvar_38.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_38.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_39;
					  tmpvar_39 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_38.xyz, tmpvar_38.w);
					  mediump vec4 tmpvar_40;
					  tmpvar_40 = tmpvar_39;
					  tmpvar_32 = ((hdr_37.x * (
					    (hdr_37.w * (tmpvar_40.w - 1.0))
					   + 1.0)) * tmpvar_40.xyz);
					  lowp vec3 tmpvar_41;
					  mediump vec4 c_42;
					  highp vec3 tmpvar_43;
					  tmpvar_43 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_44;
					  mediump vec3 albedo_45;
					  albedo_45 = tmpvar_7;
					  mediump vec3 tmpvar_46;
					  tmpvar_46 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_45, vec3(_Metallic));
					  mediump float tmpvar_47;
					  tmpvar_47 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_44 = (albedo_45 * tmpvar_47);
					  tmpvar_41 = tmpvar_44;
					  mediump vec3 diffColor_48;
					  diffColor_48 = tmpvar_41;
					  mediump float alpha_49;
					  alpha_49 = tmpvar_8;
					  tmpvar_41 = diffColor_48;
					  mediump vec3 diffColor_50;
					  diffColor_50 = tmpvar_41;
					  mediump vec3 color_51;
					  mediump float surfaceReduction_52;
					  highp float specularTerm_53;
					  highp float a2_54;
					  mediump float roughness_55;
					  mediump float perceptualRoughness_56;
					  highp vec3 tmpvar_57;
					  highp vec3 inVec_58;
					  inVec_58 = (tmpvar_4 + worldViewDir_9);
					  tmpvar_57 = (inVec_58 * inversesqrt(max (0.001, 
					    dot (inVec_58, inVec_58)
					  )));
					  mediump float tmpvar_59;
					  highp float tmpvar_60;
					  tmpvar_60 = clamp (dot (tmpvar_43, tmpvar_4), 0.0, 1.0);
					  tmpvar_59 = tmpvar_60;
					  highp float tmpvar_61;
					  tmpvar_61 = clamp (dot (tmpvar_43, tmpvar_57), 0.0, 1.0);
					  mediump float tmpvar_62;
					  highp float tmpvar_63;
					  tmpvar_63 = clamp (dot (tmpvar_43, worldViewDir_9), 0.0, 1.0);
					  tmpvar_62 = tmpvar_63;
					  highp float tmpvar_64;
					  highp float smoothness_65;
					  smoothness_65 = _Glossiness;
					  tmpvar_64 = (1.0 - smoothness_65);
					  perceptualRoughness_56 = tmpvar_64;
					  highp float tmpvar_66;
					  highp float perceptualRoughness_67;
					  perceptualRoughness_67 = perceptualRoughness_56;
					  tmpvar_66 = (perceptualRoughness_67 * perceptualRoughness_67);
					  roughness_55 = tmpvar_66;
					  mediump float tmpvar_68;
					  tmpvar_68 = (roughness_55 * roughness_55);
					  a2_54 = tmpvar_68;
					  specularTerm_53 = ((roughness_55 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_57), 0.0, 1.0)) * (1.5 + roughness_55))
					   * 
					    (((tmpvar_61 * tmpvar_61) * (a2_54 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_69;
					  tmpvar_69 = clamp (specularTerm_53, 0.0, 100.0);
					  specularTerm_53 = tmpvar_69;
					  surfaceReduction_52 = (1.0 - ((roughness_55 * perceptualRoughness_56) * 0.28));
					  mediump float x_70;
					  x_70 = (1.0 - tmpvar_62);
					  mediump vec3 tmpvar_71;
					  tmpvar_71 = mix (tmpvar_46, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_47)
					  ), 0.0, 1.0)), vec3(((x_70 * x_70) * (x_70 * x_70))));
					  highp vec3 tmpvar_72;
					  tmpvar_72 = (((
					    ((diffColor_50 + (tmpvar_69 * tmpvar_46)) * tmpvar_3)
					   * tmpvar_59) + (tmpvar_33 * diffColor_50)) + ((surfaceReduction_52 * tmpvar_32) * tmpvar_71));
					  color_51 = tmpvar_72;
					  mediump vec4 tmpvar_73;
					  tmpvar_73.w = 1.0;
					  tmpvar_73.xyz = color_51;
					  c_42.xyz = tmpvar_73.xyz;
					  c_42.w = alpha_49;
					  c_6 = c_42;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  tmpvar_5.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_5.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD6 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump sampler2D unity_Lightmap;
					uniform sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 tmpvar_32;
					  mediump vec3 tmpvar_33;
					  mediump vec4 tmpvar_34;
					  tmpvar_34 = texture2D (unity_Lightmap, xlv_TEXCOORD6.xy);
					  lowp vec4 color_35;
					  color_35 = tmpvar_34;
					  tmpvar_33 = (unity_Lightmap_HDR.x * color_35.xyz);
					  lowp vec4 tmpvar_36;
					  tmpvar_36 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
					  tmpvar_33 = (tmpvar_33 + pow ((
					    (unity_DynamicLightmap_HDR.x * tmpvar_36.w)
					   * tmpvar_36.xyz), unity_DynamicLightmap_HDR.yyy));
					  mediump vec4 hdr_37;
					  hdr_37 = tmpvar_2;
					  mediump vec4 tmpvar_38;
					  tmpvar_38.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_38.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_39;
					  tmpvar_39 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_38.xyz, tmpvar_38.w);
					  mediump vec4 tmpvar_40;
					  tmpvar_40 = tmpvar_39;
					  tmpvar_32 = ((hdr_37.x * (
					    (hdr_37.w * (tmpvar_40.w - 1.0))
					   + 1.0)) * tmpvar_40.xyz);
					  lowp vec3 tmpvar_41;
					  mediump vec4 c_42;
					  highp vec3 tmpvar_43;
					  tmpvar_43 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_44;
					  mediump vec3 albedo_45;
					  albedo_45 = tmpvar_7;
					  mediump vec3 tmpvar_46;
					  tmpvar_46 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_45, vec3(_Metallic));
					  mediump float tmpvar_47;
					  tmpvar_47 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_44 = (albedo_45 * tmpvar_47);
					  tmpvar_41 = tmpvar_44;
					  mediump vec3 diffColor_48;
					  diffColor_48 = tmpvar_41;
					  mediump float alpha_49;
					  alpha_49 = tmpvar_8;
					  tmpvar_41 = diffColor_48;
					  mediump vec3 diffColor_50;
					  diffColor_50 = tmpvar_41;
					  mediump vec3 color_51;
					  mediump float surfaceReduction_52;
					  highp float specularTerm_53;
					  highp float a2_54;
					  mediump float roughness_55;
					  mediump float perceptualRoughness_56;
					  highp vec3 tmpvar_57;
					  highp vec3 inVec_58;
					  inVec_58 = (tmpvar_4 + worldViewDir_9);
					  tmpvar_57 = (inVec_58 * inversesqrt(max (0.001, 
					    dot (inVec_58, inVec_58)
					  )));
					  mediump float tmpvar_59;
					  highp float tmpvar_60;
					  tmpvar_60 = clamp (dot (tmpvar_43, tmpvar_4), 0.0, 1.0);
					  tmpvar_59 = tmpvar_60;
					  highp float tmpvar_61;
					  tmpvar_61 = clamp (dot (tmpvar_43, tmpvar_57), 0.0, 1.0);
					  mediump float tmpvar_62;
					  highp float tmpvar_63;
					  tmpvar_63 = clamp (dot (tmpvar_43, worldViewDir_9), 0.0, 1.0);
					  tmpvar_62 = tmpvar_63;
					  highp float tmpvar_64;
					  highp float smoothness_65;
					  smoothness_65 = _Glossiness;
					  tmpvar_64 = (1.0 - smoothness_65);
					  perceptualRoughness_56 = tmpvar_64;
					  highp float tmpvar_66;
					  highp float perceptualRoughness_67;
					  perceptualRoughness_67 = perceptualRoughness_56;
					  tmpvar_66 = (perceptualRoughness_67 * perceptualRoughness_67);
					  roughness_55 = tmpvar_66;
					  mediump float tmpvar_68;
					  tmpvar_68 = (roughness_55 * roughness_55);
					  a2_54 = tmpvar_68;
					  specularTerm_53 = ((roughness_55 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_57), 0.0, 1.0)) * (1.5 + roughness_55))
					   * 
					    (((tmpvar_61 * tmpvar_61) * (a2_54 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_69;
					  tmpvar_69 = clamp (specularTerm_53, 0.0, 100.0);
					  specularTerm_53 = tmpvar_69;
					  surfaceReduction_52 = (1.0 - ((roughness_55 * perceptualRoughness_56) * 0.28));
					  mediump float x_70;
					  x_70 = (1.0 - tmpvar_62);
					  mediump vec3 tmpvar_71;
					  tmpvar_71 = mix (tmpvar_46, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_47)
					  ), 0.0, 1.0)), vec3(((x_70 * x_70) * (x_70 * x_70))));
					  highp vec3 tmpvar_72;
					  tmpvar_72 = (((
					    ((diffColor_50 + (tmpvar_69 * tmpvar_46)) * tmpvar_3)
					   * tmpvar_59) + (tmpvar_33 * diffColor_50)) + ((surfaceReduction_52 * tmpvar_32) * tmpvar_71));
					  color_51 = tmpvar_72;
					  mediump vec4 tmpvar_73;
					  tmpvar_73.w = 1.0;
					  tmpvar_73.xyz = color_51;
					  c_42.xyz = tmpvar_73.xyz;
					  c_42.w = alpha_49;
					  c_6 = c_42;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform highp sampler2D unity_NHxRoughness;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump float u_xlat16_10;
					vec2 u_xlat20;
					float u_xlat30;
					mediump float u_xlat16_31;
					float u_xlat32;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD6.xy).xyz;
					    u_xlat16_1.xyz = unity_Lightmap_HDR.xxx * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat10_2.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, u_xlat10_2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD2.xyz, u_xlat10_2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD3.xyz, u_xlat10_2.xyz);
					    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat3.xyz;
					    u_xlat16_31 = dot((-u_xlat0.xyz), u_xlat2.xyz);
					    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
					    u_xlat16_4.xyz = u_xlat2.xyz * (-vec3(u_xlat16_31)) + (-u_xlat0.xyz);
					    u_xlat3.z = (-_Glossiness) + 1.0;
					    u_xlat16_31 = (-u_xlat3.z) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat16_31 * u_xlat3.z;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat10_4 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_31);
					    u_xlat16_31 = u_xlat10_4.w + -1.0;
					    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;
					    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;
					    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(u_xlat16_31);
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat32 = u_xlat30;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
					#else
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					#endif
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat0.xyz = u_xlat2.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = vec3(u_xlat30) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat3.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_31 = (-u_xlat32) + 1.0;
					    u_xlat16_10 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_10 = u_xlat16_31 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_31 * u_xlat16_10;
					    u_xlat20.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat20.x = texture(_CameraDepthTexture, u_xlat20.xy).x;
					    u_xlat20.x = _ZBufferParams.z * u_xlat20.x + _ZBufferParams.w;
					    u_xlat20.x = float(1.0) / u_xlat20.x;
					    u_xlat20.x = u_xlat20.x + (-vs_TEXCOORD4.w);
					    u_xlat20.x = u_xlat20.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
					#else
					    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
					#endif
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat20.x = u_xlat20.x * _FoamColor.w + u_xlat20.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
					#else
					    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
					#endif
					    u_xlat10_2 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * _Color;
					    u_xlat16_2 = u_xlat10_2 * _FoamColor + (-u_xlat16_3);
					    u_xlat2 = u_xlat20.xxxx * u_xlat16_2 + u_xlat16_3;
					    u_xlat16_7.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_35 = (-u_xlat16_31) + _Glossiness;
					    u_xlat16_8.xyz = vec3(u_xlat16_31) * u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    u_xlat16_31 = u_xlat16_35 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_31);
					    u_xlat16_9.xyz = vec3(u_xlat16_10) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_9.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_5.xyz;
					    SV_Target0.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_1.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_6;
					lowp vec3 u_xlat10_6;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_11;
					mediump float u_xlat16_19;
					mediump float u_xlat16_25;
					float u_xlat26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD6.xy).xyz;
					    u_xlat16_1.xyz = unity_Lightmap_HDR.xxx * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
					    u_xlat0.x = u_xlat0.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _FoamColor.w + u_xlat0.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat10_2 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * _Color;
					    u_xlat16_2 = u_xlat10_2 * _FoamColor + (-u_xlat16_3);
					    u_xlat0 = u_xlat0.xxxx * u_xlat16_2 + u_xlat16_3;
					    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = u_xlat0.xyz * vec3(u_xlat16_25);
					    u_xlat16_25 = (-u_xlat16_25) + _Glossiness;
					    u_xlat16_25 = u_xlat16_25 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    u_xlat16_5.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat26) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat26) * u_xlat2.xyz;
					    u_xlat26 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat26 = max(u_xlat26, 0.00100000005);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat3.xyz = vec3(u_xlat26) * u_xlat3.xyz;
					    u_xlat26 = dot(_WorldSpaceLightPos0.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
					#else
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					#endif
					    u_xlat26 = max(u_xlat26, 0.319999993);
					    u_xlat16_27 = (-_Glossiness) + 1.0;
					    u_xlat16_6 = u_xlat16_27 * u_xlat16_27 + 1.5;
					    u_xlat26 = u_xlat26 * u_xlat16_6;
					    u_xlat10_6.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat7.x = dot(vs_TEXCOORD1.xyz, u_xlat10_6.xyz);
					    u_xlat7.y = dot(vs_TEXCOORD2.xyz, u_xlat10_6.xyz);
					    u_xlat7.z = dot(vs_TEXCOORD3.xyz, u_xlat10_6.xyz);
					    u_xlat6.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat7.xyz;
					    u_xlat3.x = dot(u_xlat6.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16_11 = u_xlat16_27 * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_11 * u_xlat16_11 + -1.0;
					    u_xlat3.x = u_xlat3.x * u_xlat16_19 + 1.00001001;
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat26 = u_xlat16_11 / u_xlat26;
					    u_xlat16_28 = u_xlat16_27 * u_xlat16_11;
					    u_xlat16_28 = (-u_xlat16_28) * 0.280000001 + 1.0;
					    u_xlat26 = u_xlat26 + -9.99999975e-05;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat26 = min(u_xlat26, 100.0);
					    u_xlat3.xyz = vec3(u_xlat26) * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _LightColor0.xyz;
					    u_xlat26 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
					#else
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					#endif
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat26) + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-u_xlat16_27) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat16_9 = dot((-u_xlat2.xyz), u_xlat6.xyz);
					    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
					    u_xlat16_4.xyz = u_xlat6.xyz * (-vec3(u_xlat16_9)) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = (-u_xlat2.x) + 1.0;
					    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
					    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat10_2.w + -1.0;
					    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_2.xyz * u_xlat16_1.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_28);
					    u_xlat16_1.xzw = vec3(u_xlat16_25) + (-u_xlat16_5.xyz);
					    u_xlat16_1.xyz = vec3(u_xlat16_9) * u_xlat16_1.xzw + u_xlat16_5.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat3.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_6;
					lowp vec3 u_xlat10_6;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_11;
					mediump float u_xlat16_19;
					mediump float u_xlat16_25;
					float u_xlat26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD6.xy).xyz;
					    u_xlat16_1.xyz = unity_Lightmap_HDR.xxx * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
					    u_xlat0.x = u_xlat0.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _FoamColor.w + u_xlat0.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat10_2 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * _Color;
					    u_xlat16_2 = u_xlat10_2 * _FoamColor + (-u_xlat16_3);
					    u_xlat0 = u_xlat0.xxxx * u_xlat16_2 + u_xlat16_3;
					    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = u_xlat0.xyz * vec3(u_xlat16_25);
					    u_xlat16_25 = (-u_xlat16_25) + _Glossiness;
					    u_xlat16_25 = u_xlat16_25 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    u_xlat16_5.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat26) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat26) * u_xlat2.xyz;
					    u_xlat26 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat26 = max(u_xlat26, 0.00100000005);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat3.xyz = vec3(u_xlat26) * u_xlat3.xyz;
					    u_xlat26 = dot(_WorldSpaceLightPos0.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
					#else
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					#endif
					    u_xlat26 = max(u_xlat26, 0.319999993);
					    u_xlat16_27 = (-_Glossiness) + 1.0;
					    u_xlat16_6 = u_xlat16_27 * u_xlat16_27 + 1.5;
					    u_xlat26 = u_xlat26 * u_xlat16_6;
					    u_xlat10_6.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat7.x = dot(vs_TEXCOORD1.xyz, u_xlat10_6.xyz);
					    u_xlat7.y = dot(vs_TEXCOORD2.xyz, u_xlat10_6.xyz);
					    u_xlat7.z = dot(vs_TEXCOORD3.xyz, u_xlat10_6.xyz);
					    u_xlat6.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat7.xyz;
					    u_xlat3.x = dot(u_xlat6.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16_11 = u_xlat16_27 * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_11 * u_xlat16_11 + -1.0;
					    u_xlat3.x = u_xlat3.x * u_xlat16_19 + 1.00001001;
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat26 = u_xlat16_11 / u_xlat26;
					    u_xlat16_28 = u_xlat16_27 * u_xlat16_11;
					    u_xlat16_28 = (-u_xlat16_28) * 0.280000001 + 1.0;
					    u_xlat26 = u_xlat26 + -9.99999975e-05;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat26 = min(u_xlat26, 100.0);
					    u_xlat3.xyz = vec3(u_xlat26) * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _LightColor0.xyz;
					    u_xlat26 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
					#else
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					#endif
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat26) + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-u_xlat16_27) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat16_9 = dot((-u_xlat2.xyz), u_xlat6.xyz);
					    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
					    u_xlat16_4.xyz = u_xlat6.xyz * (-vec3(u_xlat16_9)) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = (-u_xlat2.x) + 1.0;
					    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
					    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat10_2.w + -1.0;
					    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_2.xyz * u_xlat16_1.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_28);
					    u_xlat16_1.xzw = vec3(u_xlat16_25) + (-u_xlat16_5.xyz);
					    u_xlat16_1.xyz = vec3(u_xlat16_9) * u_xlat16_1.xzw + u_xlat16_5.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat3.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  tmpvar_5.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD8 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = tmpvar_26;
					  mediump vec4 realtimeDirTex_33;
					  lowp vec4 tmpvar_34;
					  tmpvar_34 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD8.zw);
					  lowp vec4 tmpvar_35;
					  tmpvar_35 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD8.zw);
					  realtimeDirTex_33 = tmpvar_35;
					  lowp vec4 dirTex_36;
					  dirTex_36 = realtimeDirTex_33;
					  lowp vec3 y_37;
					  y_37 = (dirTex_36.xyz - 0.5);
					  lowp float tmpvar_38;
					  tmpvar_38 = max (0.0001, dirTex_36.w);
					  mediump vec4 hdr_39;
					  hdr_39 = tmpvar_2;
					  mediump vec4 tmpvar_40;
					  tmpvar_40.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_40.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_41;
					  tmpvar_41 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_40.xyz, tmpvar_40.w);
					  mediump vec4 tmpvar_42;
					  tmpvar_42 = tmpvar_41;
					  lowp vec3 tmpvar_43;
					  mediump vec4 c_44;
					  highp vec3 tmpvar_45;
					  tmpvar_45 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_46;
					  mediump vec3 albedo_47;
					  albedo_47 = tmpvar_7;
					  mediump vec3 tmpvar_48;
					  tmpvar_48 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_47, vec3(_Metallic));
					  mediump float tmpvar_49;
					  tmpvar_49 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_46 = (albedo_47 * tmpvar_49);
					  tmpvar_43 = tmpvar_46;
					  mediump vec3 diffColor_50;
					  diffColor_50 = tmpvar_43;
					  mediump float alpha_51;
					  alpha_51 = tmpvar_8;
					  tmpvar_43 = diffColor_50;
					  mediump vec3 diffColor_52;
					  diffColor_52 = tmpvar_43;
					  mediump vec3 color_53;
					  mediump vec2 rlPow4AndFresnelTerm_54;
					  mediump float tmpvar_55;
					  highp float tmpvar_56;
					  tmpvar_56 = clamp (dot (tmpvar_45, tmpvar_4), 0.0, 1.0);
					  tmpvar_55 = tmpvar_56;
					  mediump float tmpvar_57;
					  highp float tmpvar_58;
					  tmpvar_58 = clamp (dot (tmpvar_45, worldViewDir_9), 0.0, 1.0);
					  tmpvar_57 = tmpvar_58;
					  highp vec2 tmpvar_59;
					  tmpvar_59.x = dot ((worldViewDir_9 - (2.0 * 
					    (dot (tmpvar_45, worldViewDir_9) * tmpvar_45)
					  )), tmpvar_4);
					  tmpvar_59.y = (1.0 - tmpvar_57);
					  highp vec2 tmpvar_60;
					  tmpvar_60 = ((tmpvar_59 * tmpvar_59) * (tmpvar_59 * tmpvar_59));
					  rlPow4AndFresnelTerm_54 = tmpvar_60;
					  mediump float tmpvar_61;
					  tmpvar_61 = rlPow4AndFresnelTerm_54.x;
					  mediump float specular_62;
					  highp float smoothness_63;
					  smoothness_63 = _Glossiness;
					  highp vec2 tmpvar_64;
					  tmpvar_64.x = tmpvar_61;
					  tmpvar_64.y = (1.0 - smoothness_63);
					  highp float tmpvar_65;
					  tmpvar_65 = (texture2D (unity_NHxRoughness, tmpvar_64).x * 16.0);
					  specular_62 = tmpvar_65;
					  color_53 = ((diffColor_52 + (specular_62 * tmpvar_48)) * (tmpvar_3 * tmpvar_55));
					  color_53 = (color_53 + ((
					    ((pow ((
					      (unity_DynamicLightmap_HDR.x * tmpvar_34.w)
					     * tmpvar_34.xyz), unity_DynamicLightmap_HDR.yyy) * (dot (normalWorld_32, y_37) + 0.5)) / tmpvar_38)
					   * diffColor_52) + (
					    ((hdr_39.x * ((hdr_39.w * 
					      (tmpvar_42.w - 1.0)
					    ) + 1.0)) * tmpvar_42.xyz)
					   * 
					    mix (tmpvar_48, vec3(clamp ((_Glossiness + (1.0 - tmpvar_49)), 0.0, 1.0)), rlPow4AndFresnelTerm_54.yyy)
					  )));
					  mediump vec4 tmpvar_66;
					  tmpvar_66.w = 1.0;
					  tmpvar_66.xyz = color_53;
					  c_44.xyz = tmpvar_66.xyz;
					  c_44.w = alpha_51;
					  c_6 = c_44;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  tmpvar_5.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD8 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = tmpvar_26;
					  mediump vec3 tmpvar_33;
					  mediump vec4 realtimeDirTex_34;
					  mediump vec3 tmpvar_35;
					  lowp vec4 tmpvar_36;
					  tmpvar_36 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD8.zw);
					  lowp vec4 tmpvar_37;
					  tmpvar_37 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD8.zw);
					  realtimeDirTex_34 = tmpvar_37;
					  lowp vec4 dirTex_38;
					  dirTex_38 = realtimeDirTex_34;
					  lowp vec3 y_39;
					  y_39 = (dirTex_38.xyz - 0.5);
					  lowp float tmpvar_40;
					  tmpvar_40 = max (0.0001, dirTex_38.w);
					  tmpvar_35 = ((pow (
					    ((unity_DynamicLightmap_HDR.x * tmpvar_36.w) * tmpvar_36.xyz)
					  , unity_DynamicLightmap_HDR.yyy) * (
					    dot (normalWorld_32, y_39)
					   + 0.5)) / tmpvar_40);
					  mediump vec4 hdr_41;
					  hdr_41 = tmpvar_2;
					  mediump vec4 tmpvar_42;
					  tmpvar_42.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_42.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_43;
					  tmpvar_43 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42.xyz, tmpvar_42.w);
					  mediump vec4 tmpvar_44;
					  tmpvar_44 = tmpvar_43;
					  tmpvar_33 = ((hdr_41.x * (
					    (hdr_41.w * (tmpvar_44.w - 1.0))
					   + 1.0)) * tmpvar_44.xyz);
					  lowp vec3 tmpvar_45;
					  mediump vec4 c_46;
					  highp vec3 tmpvar_47;
					  tmpvar_47 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_48;
					  mediump vec3 albedo_49;
					  albedo_49 = tmpvar_7;
					  mediump vec3 tmpvar_50;
					  tmpvar_50 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_49, vec3(_Metallic));
					  mediump float tmpvar_51;
					  tmpvar_51 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_48 = (albedo_49 * tmpvar_51);
					  tmpvar_45 = tmpvar_48;
					  mediump vec3 diffColor_52;
					  diffColor_52 = tmpvar_45;
					  mediump float alpha_53;
					  alpha_53 = tmpvar_8;
					  tmpvar_45 = diffColor_52;
					  mediump vec3 diffColor_54;
					  diffColor_54 = tmpvar_45;
					  mediump vec3 color_55;
					  mediump float surfaceReduction_56;
					  highp float specularTerm_57;
					  highp float a2_58;
					  mediump float roughness_59;
					  mediump float perceptualRoughness_60;
					  highp vec3 tmpvar_61;
					  highp vec3 inVec_62;
					  inVec_62 = (tmpvar_4 + worldViewDir_9);
					  tmpvar_61 = (inVec_62 * inversesqrt(max (0.001, 
					    dot (inVec_62, inVec_62)
					  )));
					  mediump float tmpvar_63;
					  highp float tmpvar_64;
					  tmpvar_64 = clamp (dot (tmpvar_47, tmpvar_4), 0.0, 1.0);
					  tmpvar_63 = tmpvar_64;
					  highp float tmpvar_65;
					  tmpvar_65 = clamp (dot (tmpvar_47, tmpvar_61), 0.0, 1.0);
					  mediump float tmpvar_66;
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (dot (tmpvar_47, worldViewDir_9), 0.0, 1.0);
					  tmpvar_66 = tmpvar_67;
					  highp float tmpvar_68;
					  highp float smoothness_69;
					  smoothness_69 = _Glossiness;
					  tmpvar_68 = (1.0 - smoothness_69);
					  perceptualRoughness_60 = tmpvar_68;
					  highp float tmpvar_70;
					  highp float perceptualRoughness_71;
					  perceptualRoughness_71 = perceptualRoughness_60;
					  tmpvar_70 = (perceptualRoughness_71 * perceptualRoughness_71);
					  roughness_59 = tmpvar_70;
					  mediump float tmpvar_72;
					  tmpvar_72 = (roughness_59 * roughness_59);
					  a2_58 = tmpvar_72;
					  specularTerm_57 = ((roughness_59 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_61), 0.0, 1.0)) * (1.5 + roughness_59))
					   * 
					    (((tmpvar_65 * tmpvar_65) * (a2_58 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_73;
					  tmpvar_73 = clamp (specularTerm_57, 0.0, 100.0);
					  specularTerm_57 = tmpvar_73;
					  surfaceReduction_56 = (1.0 - ((roughness_59 * perceptualRoughness_60) * 0.28));
					  mediump float x_74;
					  x_74 = (1.0 - tmpvar_66);
					  mediump vec3 tmpvar_75;
					  tmpvar_75 = mix (tmpvar_50, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_51)
					  ), 0.0, 1.0)), vec3(((x_74 * x_74) * (x_74 * x_74))));
					  highp vec3 tmpvar_76;
					  tmpvar_76 = (((
					    ((diffColor_54 + (tmpvar_73 * tmpvar_50)) * tmpvar_3)
					   * tmpvar_63) + (tmpvar_35 * diffColor_54)) + ((surfaceReduction_56 * tmpvar_33) * tmpvar_75));
					  color_55 = tmpvar_76;
					  mediump vec4 tmpvar_77;
					  tmpvar_77.w = 1.0;
					  tmpvar_77.xyz = color_55;
					  c_46.xyz = tmpvar_77.xyz;
					  c_46.w = alpha_53;
					  c_6 = c_46;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  tmpvar_5.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD8 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = tmpvar_26;
					  mediump vec3 tmpvar_33;
					  mediump vec4 realtimeDirTex_34;
					  mediump vec3 tmpvar_35;
					  lowp vec4 tmpvar_36;
					  tmpvar_36 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD8.zw);
					  lowp vec4 tmpvar_37;
					  tmpvar_37 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD8.zw);
					  realtimeDirTex_34 = tmpvar_37;
					  lowp vec4 dirTex_38;
					  dirTex_38 = realtimeDirTex_34;
					  lowp vec3 y_39;
					  y_39 = (dirTex_38.xyz - 0.5);
					  lowp float tmpvar_40;
					  tmpvar_40 = max (0.0001, dirTex_38.w);
					  tmpvar_35 = ((pow (
					    ((unity_DynamicLightmap_HDR.x * tmpvar_36.w) * tmpvar_36.xyz)
					  , unity_DynamicLightmap_HDR.yyy) * (
					    dot (normalWorld_32, y_39)
					   + 0.5)) / tmpvar_40);
					  mediump vec4 hdr_41;
					  hdr_41 = tmpvar_2;
					  mediump vec4 tmpvar_42;
					  tmpvar_42.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_42.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_43;
					  tmpvar_43 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42.xyz, tmpvar_42.w);
					  mediump vec4 tmpvar_44;
					  tmpvar_44 = tmpvar_43;
					  tmpvar_33 = ((hdr_41.x * (
					    (hdr_41.w * (tmpvar_44.w - 1.0))
					   + 1.0)) * tmpvar_44.xyz);
					  lowp vec3 tmpvar_45;
					  mediump vec4 c_46;
					  highp vec3 tmpvar_47;
					  tmpvar_47 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_48;
					  mediump vec3 albedo_49;
					  albedo_49 = tmpvar_7;
					  mediump vec3 tmpvar_50;
					  tmpvar_50 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_49, vec3(_Metallic));
					  mediump float tmpvar_51;
					  tmpvar_51 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_48 = (albedo_49 * tmpvar_51);
					  tmpvar_45 = tmpvar_48;
					  mediump vec3 diffColor_52;
					  diffColor_52 = tmpvar_45;
					  mediump float alpha_53;
					  alpha_53 = tmpvar_8;
					  tmpvar_45 = diffColor_52;
					  mediump vec3 diffColor_54;
					  diffColor_54 = tmpvar_45;
					  mediump vec3 color_55;
					  mediump float surfaceReduction_56;
					  highp float specularTerm_57;
					  highp float a2_58;
					  mediump float roughness_59;
					  mediump float perceptualRoughness_60;
					  highp vec3 tmpvar_61;
					  highp vec3 inVec_62;
					  inVec_62 = (tmpvar_4 + worldViewDir_9);
					  tmpvar_61 = (inVec_62 * inversesqrt(max (0.001, 
					    dot (inVec_62, inVec_62)
					  )));
					  mediump float tmpvar_63;
					  highp float tmpvar_64;
					  tmpvar_64 = clamp (dot (tmpvar_47, tmpvar_4), 0.0, 1.0);
					  tmpvar_63 = tmpvar_64;
					  highp float tmpvar_65;
					  tmpvar_65 = clamp (dot (tmpvar_47, tmpvar_61), 0.0, 1.0);
					  mediump float tmpvar_66;
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (dot (tmpvar_47, worldViewDir_9), 0.0, 1.0);
					  tmpvar_66 = tmpvar_67;
					  highp float tmpvar_68;
					  highp float smoothness_69;
					  smoothness_69 = _Glossiness;
					  tmpvar_68 = (1.0 - smoothness_69);
					  perceptualRoughness_60 = tmpvar_68;
					  highp float tmpvar_70;
					  highp float perceptualRoughness_71;
					  perceptualRoughness_71 = perceptualRoughness_60;
					  tmpvar_70 = (perceptualRoughness_71 * perceptualRoughness_71);
					  roughness_59 = tmpvar_70;
					  mediump float tmpvar_72;
					  tmpvar_72 = (roughness_59 * roughness_59);
					  a2_58 = tmpvar_72;
					  specularTerm_57 = ((roughness_59 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_61), 0.0, 1.0)) * (1.5 + roughness_59))
					   * 
					    (((tmpvar_65 * tmpvar_65) * (a2_58 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_73;
					  tmpvar_73 = clamp (specularTerm_57, 0.0, 100.0);
					  specularTerm_57 = tmpvar_73;
					  surfaceReduction_56 = (1.0 - ((roughness_59 * perceptualRoughness_60) * 0.28));
					  mediump float x_74;
					  x_74 = (1.0 - tmpvar_66);
					  mediump vec3 tmpvar_75;
					  tmpvar_75 = mix (tmpvar_50, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_51)
					  ), 0.0, 1.0)), vec3(((x_74 * x_74) * (x_74 * x_74))));
					  highp vec3 tmpvar_76;
					  tmpvar_76 = (((
					    ((diffColor_54 + (tmpvar_73 * tmpvar_50)) * tmpvar_3)
					   * tmpvar_63) + (tmpvar_35 * diffColor_54)) + ((surfaceReduction_56 * tmpvar_33) * tmpvar_75));
					  color_55 = tmpvar_76;
					  mediump vec4 tmpvar_77;
					  tmpvar_77.w = 1.0;
					  tmpvar_77.xyz = color_55;
					  c_46.xyz = tmpvar_77.xyz;
					  c_46.w = alpha_53;
					  c_6 = c_46;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD9;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat9;
					mediump float u_xlat16_9;
					vec2 u_xlat18;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_30;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat10_1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat10_1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat10_1.xyz);
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat16_3.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat1.xyz * (-u_xlat16_3.xxx) + (-u_xlat0.xyz);
					    u_xlat2.z = (-_Glossiness) + 1.0;
					    u_xlat16_30 = (-u_xlat2.z) * 0.699999988 + 1.70000005;
					    u_xlat16_30 = u_xlat2.z * u_xlat16_30;
					    u_xlat16_30 = u_xlat16_30 * 6.0;
					    u_xlat10_3 = textureLod(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_30);
					    u_xlat16_4.x = u_xlat10_3.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_3.xyz * u_xlat16_4.xxx;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat28 = u_xlat27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat27)) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat2.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat2.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_31 = (-u_xlat28) + 1.0;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_9;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_9;
					    u_xlat18.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat18.x = texture(_CameraDepthTexture, u_xlat18.xy).x;
					    u_xlat18.x = _ZBufferParams.z * u_xlat18.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-vs_TEXCOORD4.w);
					    u_xlat18.x = u_xlat18.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
					#else
					    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
					#endif
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat18.x = u_xlat18.x * _FoamColor.w + u_xlat18.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
					#else
					    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
					#endif
					    u_xlat10_2 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * _Color;
					    u_xlat16_2 = u_xlat10_2 * _FoamColor + (-u_xlat16_3);
					    u_xlat2 = u_xlat18.xxxx * u_xlat16_2 + u_xlat16_3;
					    u_xlat16_5.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_32 = (-u_xlat16_31) + _Glossiness;
					    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat16_31);
					    SV_Target0.w = u_xlat2.w;
					    u_xlat16_31 = u_xlat16_32 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_31);
					    u_xlat16_7.xyz = vec3(u_xlat16_9) * u_xlat16_7.xyz + u_xlat16_5.xyz;
					    u_xlat16_5.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD9.zw);
					    u_xlat16_31 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_0.xyz * vec3(u_xlat16_31);
					    u_xlat16_7.xyz = log2(u_xlat16_7.xyz);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD9.zw);
					    u_xlat16_8.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat16_31 = dot(u_xlat1.xyz, u_xlat16_8.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat16_8.xyz = vec3(u_xlat9) * _LightColor0.xyz;
					    u_xlat16_31 = u_xlat16_31 + 0.5;
					    u_xlat16_7.xyz = vec3(u_xlat16_31) * u_xlat16_7.xyz;
					    u_xlat16_0.xyz = u_xlat16_7.xyz / u_xlat16_0.xxx;
					    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_6.xyz + u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_8.xyz + u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD9;
					layout(location = 0) out mediump vec4 SV_Target0;
					float u_xlat0;
					mediump float u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump float u_xlat16_4;
					mediump vec4 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					lowp vec3 u_xlat10_8;
					vec3 u_xlat12;
					mediump float u_xlat16_12;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_20;
					mediump float u_xlat16_21;
					mediump float u_xlat16_25;
					float u_xlat27;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD9.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD9.zw);
					    u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0 = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat10_8.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, u_xlat10_8.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD2.xyz, u_xlat10_8.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD3.xyz, u_xlat10_8.xyz);
					    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat8.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat16_25 = dot(u_xlat8.xyz, u_xlat16_2.xyz);
					    u_xlat16_25 = u_xlat16_25 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_25) * u_xlat16_1.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz / vec3(u_xlat16_0);
					    u_xlat4.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat0 = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat0 = _ZBufferParams.z * u_xlat0 + _ZBufferParams.w;
					    u_xlat0 = float(1.0) / u_xlat0;
					    u_xlat0 = u_xlat0 + (-vs_TEXCOORD4.w);
					    u_xlat0 = u_xlat0 * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
					#else
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					#endif
					    u_xlat0 = (-u_xlat0) + 1.0;
					    u_xlat0 = u_xlat0 * _FoamColor.w + u_xlat0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
					#else
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					#endif
					    u_xlat10_1 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * _Color;
					    u_xlat16_1 = u_xlat10_1 * _FoamColor + (-u_xlat16_2);
					    u_xlat1 = vec4(u_xlat0) * u_xlat16_1 + u_xlat16_2;
					    u_xlat16_5.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_13.xyz = u_xlat1.xyz * u_xlat16_5.xxx;
					    u_xlat16_5.x = (-u_xlat16_5.x) + _Glossiness;
					    u_xlat16_5.x = u_xlat16_5.x + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
					#else
					    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_13.xyz;
					    u_xlat16_7.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat3.x = vs_TEXCOORD1.w;
					    u_xlat3.y = vs_TEXCOORD2.w;
					    u_xlat3.z = vs_TEXCOORD3.w;
					    u_xlat3.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat0 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0 = inversesqrt(u_xlat0);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat0) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat0) * u_xlat3.xyz;
					    u_xlat0 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat0 = max(u_xlat0, 0.00100000005);
					    u_xlat0 = inversesqrt(u_xlat0);
					    u_xlat4.xyz = vec3(u_xlat0) * u_xlat4.xyz;
					    u_xlat0 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
					#else
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					#endif
					    u_xlat27 = dot(u_xlat8.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat0 = max(u_xlat0, 0.319999993);
					    u_xlat16_4 = (-_Glossiness) + 1.0;
					    u_xlat16_12 = u_xlat16_4 * u_xlat16_4 + 1.5;
					    u_xlat0 = u_xlat0 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_20 = u_xlat16_12 * u_xlat16_12 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat16_20 + 1.00001001;
					    u_xlat0 = u_xlat0 * u_xlat27;
					    u_xlat0 = u_xlat16_12 / u_xlat0;
					    u_xlat16_30 = u_xlat16_4 * u_xlat16_12;
					    u_xlat16_30 = (-u_xlat16_30) * 0.280000001 + 1.0;
					    u_xlat0 = u_xlat0 + -9.99999975e-05;
					    u_xlat0 = max(u_xlat0, 0.0);
					    u_xlat0 = min(u_xlat0, 100.0);
					    u_xlat12.xyz = vec3(u_xlat0) * u_xlat16_7.xyz + u_xlat16_13.xyz;
					    u_xlat12.xyz = u_xlat12.xyz * _LightColor0.xyz;
					    u_xlat0 = dot(u_xlat8.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
					#else
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					#endif
					    u_xlat12.xyz = u_xlat12.xyz * vec3(u_xlat0) + u_xlat16_6.xyz;
					    u_xlat16_13.x = (-u_xlat16_4) * 0.699999988 + 1.70000005;
					    u_xlat16_13.x = u_xlat16_4 * u_xlat16_13.x;
					    u_xlat16_13.x = u_xlat16_13.x * 6.0;
					    u_xlat16_21 = dot((-u_xlat3.xyz), u_xlat8.xyz);
					    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
					    u_xlat16_6.xyz = u_xlat8.xyz * (-vec3(u_xlat16_21)) + (-u_xlat3.xyz);
					    u_xlat0 = dot(u_xlat8.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
					#else
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					#endif
					    u_xlat16_21 = (-u_xlat0) + 1.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_13.x);
					    u_xlat16_13.x = u_xlat10_0.w + -1.0;
					    u_xlat16_13.x = unity_SpecCube0_HDR.w * u_xlat16_13.x + 1.0;
					    u_xlat16_13.x = u_xlat16_13.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_0.xyz * u_xlat16_13.xxx;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_30);
					    u_xlat16_5.xyw = u_xlat16_5.xxx + (-u_xlat16_7.xyz);
					    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyw + u_xlat16_7.xyz;
					    u_xlat1.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat12.xyz;
					    SV_Target0 = u_xlat1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD9;
					layout(location = 0) out mediump vec4 SV_Target0;
					float u_xlat0;
					mediump float u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump float u_xlat16_4;
					mediump vec4 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					lowp vec3 u_xlat10_8;
					vec3 u_xlat12;
					mediump float u_xlat16_12;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_20;
					mediump float u_xlat16_21;
					mediump float u_xlat16_25;
					float u_xlat27;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD9.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD9.zw);
					    u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0 = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat10_8.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, u_xlat10_8.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD2.xyz, u_xlat10_8.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD3.xyz, u_xlat10_8.xyz);
					    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat8.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat16_25 = dot(u_xlat8.xyz, u_xlat16_2.xyz);
					    u_xlat16_25 = u_xlat16_25 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_25) * u_xlat16_1.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz / vec3(u_xlat16_0);
					    u_xlat4.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat0 = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat0 = _ZBufferParams.z * u_xlat0 + _ZBufferParams.w;
					    u_xlat0 = float(1.0) / u_xlat0;
					    u_xlat0 = u_xlat0 + (-vs_TEXCOORD4.w);
					    u_xlat0 = u_xlat0 * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
					#else
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					#endif
					    u_xlat0 = (-u_xlat0) + 1.0;
					    u_xlat0 = u_xlat0 * _FoamColor.w + u_xlat0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
					#else
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					#endif
					    u_xlat10_1 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * _Color;
					    u_xlat16_1 = u_xlat10_1 * _FoamColor + (-u_xlat16_2);
					    u_xlat1 = vec4(u_xlat0) * u_xlat16_1 + u_xlat16_2;
					    u_xlat16_5.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_13.xyz = u_xlat1.xyz * u_xlat16_5.xxx;
					    u_xlat16_5.x = (-u_xlat16_5.x) + _Glossiness;
					    u_xlat16_5.x = u_xlat16_5.x + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
					#else
					    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_13.xyz;
					    u_xlat16_7.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat3.x = vs_TEXCOORD1.w;
					    u_xlat3.y = vs_TEXCOORD2.w;
					    u_xlat3.z = vs_TEXCOORD3.w;
					    u_xlat3.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat0 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0 = inversesqrt(u_xlat0);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat0) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat0) * u_xlat3.xyz;
					    u_xlat0 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat0 = max(u_xlat0, 0.00100000005);
					    u_xlat0 = inversesqrt(u_xlat0);
					    u_xlat4.xyz = vec3(u_xlat0) * u_xlat4.xyz;
					    u_xlat0 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
					#else
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					#endif
					    u_xlat27 = dot(u_xlat8.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat0 = max(u_xlat0, 0.319999993);
					    u_xlat16_4 = (-_Glossiness) + 1.0;
					    u_xlat16_12 = u_xlat16_4 * u_xlat16_4 + 1.5;
					    u_xlat0 = u_xlat0 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_20 = u_xlat16_12 * u_xlat16_12 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat16_20 + 1.00001001;
					    u_xlat0 = u_xlat0 * u_xlat27;
					    u_xlat0 = u_xlat16_12 / u_xlat0;
					    u_xlat16_30 = u_xlat16_4 * u_xlat16_12;
					    u_xlat16_30 = (-u_xlat16_30) * 0.280000001 + 1.0;
					    u_xlat0 = u_xlat0 + -9.99999975e-05;
					    u_xlat0 = max(u_xlat0, 0.0);
					    u_xlat0 = min(u_xlat0, 100.0);
					    u_xlat12.xyz = vec3(u_xlat0) * u_xlat16_7.xyz + u_xlat16_13.xyz;
					    u_xlat12.xyz = u_xlat12.xyz * _LightColor0.xyz;
					    u_xlat0 = dot(u_xlat8.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
					#else
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					#endif
					    u_xlat12.xyz = u_xlat12.xyz * vec3(u_xlat0) + u_xlat16_6.xyz;
					    u_xlat16_13.x = (-u_xlat16_4) * 0.699999988 + 1.70000005;
					    u_xlat16_13.x = u_xlat16_4 * u_xlat16_13.x;
					    u_xlat16_13.x = u_xlat16_13.x * 6.0;
					    u_xlat16_21 = dot((-u_xlat3.xyz), u_xlat8.xyz);
					    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
					    u_xlat16_6.xyz = u_xlat8.xyz * (-vec3(u_xlat16_21)) + (-u_xlat3.xyz);
					    u_xlat0 = dot(u_xlat8.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
					#else
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					#endif
					    u_xlat16_21 = (-u_xlat0) + 1.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_13.x);
					    u_xlat16_13.x = u_xlat10_0.w + -1.0;
					    u_xlat16_13.x = unity_SpecCube0_HDR.w * u_xlat16_13.x + 1.0;
					    u_xlat16_13.x = u_xlat16_13.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_0.xyz * u_xlat16_13.xxx;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_30);
					    u_xlat16_5.xyw = u_xlat16_5.xxx + (-u_xlat16_7.xyz);
					    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyw + u_xlat16_7.xyz;
					    u_xlat1.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat12.xyz;
					    SV_Target0 = u_xlat1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  tmpvar_5.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD6 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = tmpvar_26;
					  lowp vec4 bakedDirTex_33;
					  mediump vec4 tmpvar_34;
					  tmpvar_34 = texture2D (unity_Lightmap, xlv_TEXCOORD6.xy);
					  lowp vec4 color_35;
					  color_35 = tmpvar_34;
					  mediump vec4 tmpvar_36;
					  tmpvar_36 = texture2D (unity_LightmapInd, xlv_TEXCOORD6.xy);
					  bakedDirTex_33 = tmpvar_36;
					  lowp vec3 y_37;
					  y_37 = (bakedDirTex_33.xyz - 0.5);
					  lowp float tmpvar_38;
					  tmpvar_38 = max (0.0001, bakedDirTex_33.w);
					  mediump vec4 hdr_39;
					  hdr_39 = tmpvar_2;
					  mediump vec4 tmpvar_40;
					  tmpvar_40.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_40.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_41;
					  tmpvar_41 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_40.xyz, tmpvar_40.w);
					  mediump vec4 tmpvar_42;
					  tmpvar_42 = tmpvar_41;
					  lowp vec3 tmpvar_43;
					  mediump vec4 c_44;
					  highp vec3 tmpvar_45;
					  tmpvar_45 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_46;
					  mediump vec3 albedo_47;
					  albedo_47 = tmpvar_7;
					  mediump vec3 tmpvar_48;
					  tmpvar_48 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_47, vec3(_Metallic));
					  mediump float tmpvar_49;
					  tmpvar_49 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_46 = (albedo_47 * tmpvar_49);
					  tmpvar_43 = tmpvar_46;
					  mediump vec3 diffColor_50;
					  diffColor_50 = tmpvar_43;
					  mediump float alpha_51;
					  alpha_51 = tmpvar_8;
					  tmpvar_43 = diffColor_50;
					  mediump vec3 diffColor_52;
					  diffColor_52 = tmpvar_43;
					  mediump vec3 color_53;
					  mediump vec2 rlPow4AndFresnelTerm_54;
					  mediump float tmpvar_55;
					  highp float tmpvar_56;
					  tmpvar_56 = clamp (dot (tmpvar_45, tmpvar_4), 0.0, 1.0);
					  tmpvar_55 = tmpvar_56;
					  mediump float tmpvar_57;
					  highp float tmpvar_58;
					  tmpvar_58 = clamp (dot (tmpvar_45, worldViewDir_9), 0.0, 1.0);
					  tmpvar_57 = tmpvar_58;
					  highp vec2 tmpvar_59;
					  tmpvar_59.x = dot ((worldViewDir_9 - (2.0 * 
					    (dot (tmpvar_45, worldViewDir_9) * tmpvar_45)
					  )), tmpvar_4);
					  tmpvar_59.y = (1.0 - tmpvar_57);
					  highp vec2 tmpvar_60;
					  tmpvar_60 = ((tmpvar_59 * tmpvar_59) * (tmpvar_59 * tmpvar_59));
					  rlPow4AndFresnelTerm_54 = tmpvar_60;
					  mediump float tmpvar_61;
					  tmpvar_61 = rlPow4AndFresnelTerm_54.x;
					  mediump float specular_62;
					  highp float smoothness_63;
					  smoothness_63 = _Glossiness;
					  highp vec2 tmpvar_64;
					  tmpvar_64.x = tmpvar_61;
					  tmpvar_64.y = (1.0 - smoothness_63);
					  highp float tmpvar_65;
					  tmpvar_65 = (texture2D (unity_NHxRoughness, tmpvar_64).x * 16.0);
					  specular_62 = tmpvar_65;
					  color_53 = ((diffColor_52 + (specular_62 * tmpvar_48)) * (tmpvar_3 * tmpvar_55));
					  color_53 = (color_53 + ((
					    (((unity_Lightmap_HDR.x * color_35.xyz) * (dot (normalWorld_32, y_37) + 0.5)) / tmpvar_38)
					   * diffColor_52) + (
					    ((hdr_39.x * ((hdr_39.w * 
					      (tmpvar_42.w - 1.0)
					    ) + 1.0)) * tmpvar_42.xyz)
					   * 
					    mix (tmpvar_48, vec3(clamp ((_Glossiness + (1.0 - tmpvar_49)), 0.0, 1.0)), rlPow4AndFresnelTerm_54.yyy)
					  )));
					  mediump vec4 tmpvar_66;
					  tmpvar_66.w = 1.0;
					  tmpvar_66.xyz = color_53;
					  c_44.xyz = tmpvar_66.xyz;
					  c_44.w = alpha_51;
					  c_6 = c_44;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  tmpvar_5.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD6 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = tmpvar_26;
					  mediump vec3 tmpvar_33;
					  lowp vec4 bakedDirTex_34;
					  mediump vec3 tmpvar_35;
					  mediump vec4 tmpvar_36;
					  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD6.xy);
					  lowp vec4 color_37;
					  color_37 = tmpvar_36;
					  mediump vec4 tmpvar_38;
					  tmpvar_38 = texture2D (unity_LightmapInd, xlv_TEXCOORD6.xy);
					  bakedDirTex_34 = tmpvar_38;
					  lowp vec3 y_39;
					  y_39 = (bakedDirTex_34.xyz - 0.5);
					  lowp float tmpvar_40;
					  tmpvar_40 = max (0.0001, bakedDirTex_34.w);
					  tmpvar_35 = (((unity_Lightmap_HDR.x * color_37.xyz) * (
					    dot (normalWorld_32, y_39)
					   + 0.5)) / tmpvar_40);
					  mediump vec4 hdr_41;
					  hdr_41 = tmpvar_2;
					  mediump vec4 tmpvar_42;
					  tmpvar_42.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_42.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_43;
					  tmpvar_43 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42.xyz, tmpvar_42.w);
					  mediump vec4 tmpvar_44;
					  tmpvar_44 = tmpvar_43;
					  tmpvar_33 = ((hdr_41.x * (
					    (hdr_41.w * (tmpvar_44.w - 1.0))
					   + 1.0)) * tmpvar_44.xyz);
					  lowp vec3 tmpvar_45;
					  mediump vec4 c_46;
					  highp vec3 tmpvar_47;
					  tmpvar_47 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_48;
					  mediump vec3 albedo_49;
					  albedo_49 = tmpvar_7;
					  mediump vec3 tmpvar_50;
					  tmpvar_50 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_49, vec3(_Metallic));
					  mediump float tmpvar_51;
					  tmpvar_51 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_48 = (albedo_49 * tmpvar_51);
					  tmpvar_45 = tmpvar_48;
					  mediump vec3 diffColor_52;
					  diffColor_52 = tmpvar_45;
					  mediump float alpha_53;
					  alpha_53 = tmpvar_8;
					  tmpvar_45 = diffColor_52;
					  mediump vec3 diffColor_54;
					  diffColor_54 = tmpvar_45;
					  mediump vec3 color_55;
					  mediump float surfaceReduction_56;
					  highp float specularTerm_57;
					  highp float a2_58;
					  mediump float roughness_59;
					  mediump float perceptualRoughness_60;
					  highp vec3 tmpvar_61;
					  highp vec3 inVec_62;
					  inVec_62 = (tmpvar_4 + worldViewDir_9);
					  tmpvar_61 = (inVec_62 * inversesqrt(max (0.001, 
					    dot (inVec_62, inVec_62)
					  )));
					  mediump float tmpvar_63;
					  highp float tmpvar_64;
					  tmpvar_64 = clamp (dot (tmpvar_47, tmpvar_4), 0.0, 1.0);
					  tmpvar_63 = tmpvar_64;
					  highp float tmpvar_65;
					  tmpvar_65 = clamp (dot (tmpvar_47, tmpvar_61), 0.0, 1.0);
					  mediump float tmpvar_66;
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (dot (tmpvar_47, worldViewDir_9), 0.0, 1.0);
					  tmpvar_66 = tmpvar_67;
					  highp float tmpvar_68;
					  highp float smoothness_69;
					  smoothness_69 = _Glossiness;
					  tmpvar_68 = (1.0 - smoothness_69);
					  perceptualRoughness_60 = tmpvar_68;
					  highp float tmpvar_70;
					  highp float perceptualRoughness_71;
					  perceptualRoughness_71 = perceptualRoughness_60;
					  tmpvar_70 = (perceptualRoughness_71 * perceptualRoughness_71);
					  roughness_59 = tmpvar_70;
					  mediump float tmpvar_72;
					  tmpvar_72 = (roughness_59 * roughness_59);
					  a2_58 = tmpvar_72;
					  specularTerm_57 = ((roughness_59 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_61), 0.0, 1.0)) * (1.5 + roughness_59))
					   * 
					    (((tmpvar_65 * tmpvar_65) * (a2_58 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_73;
					  tmpvar_73 = clamp (specularTerm_57, 0.0, 100.0);
					  specularTerm_57 = tmpvar_73;
					  surfaceReduction_56 = (1.0 - ((roughness_59 * perceptualRoughness_60) * 0.28));
					  mediump float x_74;
					  x_74 = (1.0 - tmpvar_66);
					  mediump vec3 tmpvar_75;
					  tmpvar_75 = mix (tmpvar_50, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_51)
					  ), 0.0, 1.0)), vec3(((x_74 * x_74) * (x_74 * x_74))));
					  highp vec3 tmpvar_76;
					  tmpvar_76 = (((
					    ((diffColor_54 + (tmpvar_73 * tmpvar_50)) * tmpvar_3)
					   * tmpvar_63) + (tmpvar_35 * diffColor_54)) + ((surfaceReduction_56 * tmpvar_33) * tmpvar_75));
					  color_55 = tmpvar_76;
					  mediump vec4 tmpvar_77;
					  tmpvar_77.w = 1.0;
					  tmpvar_77.xyz = color_55;
					  c_46.xyz = tmpvar_77.xyz;
					  c_46.w = alpha_53;
					  c_6 = c_46;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  tmpvar_5.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD6 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = tmpvar_26;
					  mediump vec3 tmpvar_33;
					  lowp vec4 bakedDirTex_34;
					  mediump vec3 tmpvar_35;
					  mediump vec4 tmpvar_36;
					  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD6.xy);
					  lowp vec4 color_37;
					  color_37 = tmpvar_36;
					  mediump vec4 tmpvar_38;
					  tmpvar_38 = texture2D (unity_LightmapInd, xlv_TEXCOORD6.xy);
					  bakedDirTex_34 = tmpvar_38;
					  lowp vec3 y_39;
					  y_39 = (bakedDirTex_34.xyz - 0.5);
					  lowp float tmpvar_40;
					  tmpvar_40 = max (0.0001, bakedDirTex_34.w);
					  tmpvar_35 = (((unity_Lightmap_HDR.x * color_37.xyz) * (
					    dot (normalWorld_32, y_39)
					   + 0.5)) / tmpvar_40);
					  mediump vec4 hdr_41;
					  hdr_41 = tmpvar_2;
					  mediump vec4 tmpvar_42;
					  tmpvar_42.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_42.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_43;
					  tmpvar_43 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42.xyz, tmpvar_42.w);
					  mediump vec4 tmpvar_44;
					  tmpvar_44 = tmpvar_43;
					  tmpvar_33 = ((hdr_41.x * (
					    (hdr_41.w * (tmpvar_44.w - 1.0))
					   + 1.0)) * tmpvar_44.xyz);
					  lowp vec3 tmpvar_45;
					  mediump vec4 c_46;
					  highp vec3 tmpvar_47;
					  tmpvar_47 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_48;
					  mediump vec3 albedo_49;
					  albedo_49 = tmpvar_7;
					  mediump vec3 tmpvar_50;
					  tmpvar_50 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_49, vec3(_Metallic));
					  mediump float tmpvar_51;
					  tmpvar_51 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_48 = (albedo_49 * tmpvar_51);
					  tmpvar_45 = tmpvar_48;
					  mediump vec3 diffColor_52;
					  diffColor_52 = tmpvar_45;
					  mediump float alpha_53;
					  alpha_53 = tmpvar_8;
					  tmpvar_45 = diffColor_52;
					  mediump vec3 diffColor_54;
					  diffColor_54 = tmpvar_45;
					  mediump vec3 color_55;
					  mediump float surfaceReduction_56;
					  highp float specularTerm_57;
					  highp float a2_58;
					  mediump float roughness_59;
					  mediump float perceptualRoughness_60;
					  highp vec3 tmpvar_61;
					  highp vec3 inVec_62;
					  inVec_62 = (tmpvar_4 + worldViewDir_9);
					  tmpvar_61 = (inVec_62 * inversesqrt(max (0.001, 
					    dot (inVec_62, inVec_62)
					  )));
					  mediump float tmpvar_63;
					  highp float tmpvar_64;
					  tmpvar_64 = clamp (dot (tmpvar_47, tmpvar_4), 0.0, 1.0);
					  tmpvar_63 = tmpvar_64;
					  highp float tmpvar_65;
					  tmpvar_65 = clamp (dot (tmpvar_47, tmpvar_61), 0.0, 1.0);
					  mediump float tmpvar_66;
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (dot (tmpvar_47, worldViewDir_9), 0.0, 1.0);
					  tmpvar_66 = tmpvar_67;
					  highp float tmpvar_68;
					  highp float smoothness_69;
					  smoothness_69 = _Glossiness;
					  tmpvar_68 = (1.0 - smoothness_69);
					  perceptualRoughness_60 = tmpvar_68;
					  highp float tmpvar_70;
					  highp float perceptualRoughness_71;
					  perceptualRoughness_71 = perceptualRoughness_60;
					  tmpvar_70 = (perceptualRoughness_71 * perceptualRoughness_71);
					  roughness_59 = tmpvar_70;
					  mediump float tmpvar_72;
					  tmpvar_72 = (roughness_59 * roughness_59);
					  a2_58 = tmpvar_72;
					  specularTerm_57 = ((roughness_59 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_61), 0.0, 1.0)) * (1.5 + roughness_59))
					   * 
					    (((tmpvar_65 * tmpvar_65) * (a2_58 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_73;
					  tmpvar_73 = clamp (specularTerm_57, 0.0, 100.0);
					  specularTerm_57 = tmpvar_73;
					  surfaceReduction_56 = (1.0 - ((roughness_59 * perceptualRoughness_60) * 0.28));
					  mediump float x_74;
					  x_74 = (1.0 - tmpvar_66);
					  mediump vec3 tmpvar_75;
					  tmpvar_75 = mix (tmpvar_50, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_51)
					  ), 0.0, 1.0)), vec3(((x_74 * x_74) * (x_74 * x_74))));
					  highp vec3 tmpvar_76;
					  tmpvar_76 = (((
					    ((diffColor_54 + (tmpvar_73 * tmpvar_50)) * tmpvar_3)
					   * tmpvar_63) + (tmpvar_35 * diffColor_54)) + ((surfaceReduction_56 * tmpvar_33) * tmpvar_75));
					  color_55 = tmpvar_76;
					  mediump vec4 tmpvar_77;
					  tmpvar_77.w = 1.0;
					  tmpvar_77.xyz = color_55;
					  c_46.xyz = tmpvar_77.xyz;
					  c_46.w = alpha_53;
					  c_6 = c_46;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD6.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform highp sampler2D unity_NHxRoughness;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat9;
					mediump vec3 u_xlat16_9;
					vec2 u_xlat18;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_30;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat10_1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat10_1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat10_1.xyz);
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat16_3.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat1.xyz * (-u_xlat16_3.xxx) + (-u_xlat0.xyz);
					    u_xlat2.z = (-_Glossiness) + 1.0;
					    u_xlat16_30 = (-u_xlat2.z) * 0.699999988 + 1.70000005;
					    u_xlat16_30 = u_xlat2.z * u_xlat16_30;
					    u_xlat16_30 = u_xlat16_30 * 6.0;
					    u_xlat10_3 = textureLod(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_30);
					    u_xlat16_4.x = u_xlat10_3.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_3.xyz * u_xlat16_4.xxx;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat28 = u_xlat27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat27)) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat2.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat2.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_31 = (-u_xlat28) + 1.0;
					    u_xlat16_9.x = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_9.x = u_xlat16_31 * u_xlat16_9.x;
					    u_xlat16_9.x = u_xlat16_31 * u_xlat16_9.x;
					    u_xlat18.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat18.x = texture(_CameraDepthTexture, u_xlat18.xy).x;
					    u_xlat18.x = _ZBufferParams.z * u_xlat18.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-vs_TEXCOORD4.w);
					    u_xlat18.x = u_xlat18.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
					#else
					    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
					#endif
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat18.x = u_xlat18.x * _FoamColor.w + u_xlat18.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
					#else
					    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
					#endif
					    u_xlat10_2 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * _Color;
					    u_xlat16_2 = u_xlat10_2 * _FoamColor + (-u_xlat16_3);
					    u_xlat2 = u_xlat18.xxxx * u_xlat16_2 + u_xlat16_3;
					    u_xlat16_5.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_32 = (-u_xlat16_31) + _Glossiness;
					    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat16_31);
					    SV_Target0.w = u_xlat2.w;
					    u_xlat16_31 = u_xlat16_32 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_31);
					    u_xlat16_7.xyz = u_xlat16_9.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;
					    u_xlat16_5.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    u_xlat16_0 = texture(unity_LightmapInd, vs_TEXCOORD6.xy);
					    u_xlat16_7.xyz = u_xlat16_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat16_0.w, 9.99999975e-05);
					    u_xlat16_31 = dot(u_xlat1.xyz, u_xlat16_7.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = vec3(u_xlat9) * _LightColor0.xyz;
					    u_xlat16_31 = u_xlat16_31 + 0.5;
					    u_xlat16_9.xyz = texture(unity_Lightmap, vs_TEXCOORD6.xy).xyz;
					    u_xlat16_8.xyz = u_xlat16_9.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_8.xyz = vec3(u_xlat16_31) * u_xlat16_8.xyz;
					    u_xlat16_0.xyz = u_xlat16_8.xyz / u_xlat16_0.xxx;
					    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_6.xyz + u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz + u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD6.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec4 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_6;
					vec3 u_xlat8;
					lowp vec3 u_xlat10_8;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat13;
					mediump float u_xlat16_13;
					mediump float u_xlat16_17;
					mediump float u_xlat16_20;
					float u_xlat23;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
					    u_xlat0.x = u_xlat0.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _FoamColor.w + u_xlat0.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat10_1 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * _Color;
					    u_xlat16_1 = u_xlat10_1 * _FoamColor + (-u_xlat16_2);
					    u_xlat0 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_2;
					    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_10.xyz = u_xlat0.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = (-u_xlat16_3.x) + _Glossiness;
					    u_xlat16_3.x = u_xlat16_3.x + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD6.xy).xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1 = texture(unity_LightmapInd, vs_TEXCOORD6.xy);
					    u_xlat16_5.xyz = u_xlat16_1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_1.x = max(u_xlat16_1.w, 9.99999975e-05);
					    u_xlat10_8.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat10_8.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat10_8.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat10_8.xyz);
					    u_xlat8.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat8.xyz = u_xlat8.xxx * u_xlat2.xyz;
					    u_xlat16_25 = dot(u_xlat8.xyz, u_xlat16_5.xyz);
					    u_xlat16_25 = u_xlat16_25 + 0.5;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_1.xxx;
					    u_xlat16_4.xyz = u_xlat16_10.xyz * u_xlat16_2.xyz;
					    u_xlat16_5.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1 = inversesqrt(u_xlat1);
					    u_xlat6.xyz = u_xlat2.xyz * vec3(u_xlat1) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat1) * u_xlat2.xyz;
					    u_xlat1 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat1 = max(u_xlat1, 0.00100000005);
					    u_xlat1 = inversesqrt(u_xlat1);
					    u_xlat6.xyz = vec3(u_xlat1) * u_xlat6.xyz;
					    u_xlat1 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat23 = dot(u_xlat8.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
					#else
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					#endif
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat1 = max(u_xlat1, 0.319999993);
					    u_xlat16_6 = (-_Glossiness) + 1.0;
					    u_xlat16_13 = u_xlat16_6 * u_xlat16_6 + 1.5;
					    u_xlat1 = u_xlat1 * u_xlat16_13;
					    u_xlat16_13 = u_xlat16_6 * u_xlat16_6;
					    u_xlat16_20 = u_xlat16_13 * u_xlat16_13 + -1.0;
					    u_xlat23 = u_xlat23 * u_xlat16_20 + 1.00001001;
					    u_xlat1 = u_xlat1 * u_xlat23;
					    u_xlat1 = u_xlat16_13 / u_xlat1;
					    u_xlat16_25 = u_xlat16_6 * u_xlat16_13;
					    u_xlat16_25 = (-u_xlat16_25) * 0.280000001 + 1.0;
					    u_xlat1 = u_xlat1 + -9.99999975e-05;
					    u_xlat1 = max(u_xlat1, 0.0);
					    u_xlat1 = min(u_xlat1, 100.0);
					    u_xlat13.xyz = vec3(u_xlat1) * u_xlat16_5.xyz + u_xlat16_10.xyz;
					    u_xlat13.xyz = u_xlat13.xyz * _LightColor0.xyz;
					    u_xlat1 = dot(u_xlat8.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat13.xyz = u_xlat13.xyz * vec3(u_xlat1) + u_xlat16_4.xyz;
					    u_xlat16_10.x = (-u_xlat16_6) * 0.699999988 + 1.70000005;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_6;
					    u_xlat16_10.x = u_xlat16_10.x * 6.0;
					    u_xlat16_17 = dot((-u_xlat2.xyz), u_xlat8.xyz);
					    u_xlat16_17 = u_xlat16_17 + u_xlat16_17;
					    u_xlat16_4.xyz = u_xlat8.xyz * (-vec3(u_xlat16_17)) + (-u_xlat2.xyz);
					    u_xlat1 = dot(u_xlat8.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat16_17 = (-u_xlat1) + 1.0;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_10.x);
					    u_xlat16_10.x = u_xlat10_1.w + -1.0;
					    u_xlat16_10.x = unity_SpecCube0_HDR.w * u_xlat16_10.x + 1.0;
					    u_xlat16_10.x = u_xlat16_10.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_1.xyz * u_xlat16_10.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_25);
					    u_xlat16_3.xyw = u_xlat16_3.xxx + (-u_xlat16_5.xyz);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * u_xlat16_3.xyw + u_xlat16_5.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat13.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD6.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec4 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_6;
					vec3 u_xlat8;
					lowp vec3 u_xlat10_8;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat13;
					mediump float u_xlat16_13;
					mediump float u_xlat16_17;
					mediump float u_xlat16_20;
					float u_xlat23;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
					    u_xlat0.x = u_xlat0.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _FoamColor.w + u_xlat0.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat10_1 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * _Color;
					    u_xlat16_1 = u_xlat10_1 * _FoamColor + (-u_xlat16_2);
					    u_xlat0 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_2;
					    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_10.xyz = u_xlat0.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = (-u_xlat16_3.x) + _Glossiness;
					    u_xlat16_3.x = u_xlat16_3.x + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD6.xy).xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1 = texture(unity_LightmapInd, vs_TEXCOORD6.xy);
					    u_xlat16_5.xyz = u_xlat16_1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_1.x = max(u_xlat16_1.w, 9.99999975e-05);
					    u_xlat10_8.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat10_8.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat10_8.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat10_8.xyz);
					    u_xlat8.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat8.xyz = u_xlat8.xxx * u_xlat2.xyz;
					    u_xlat16_25 = dot(u_xlat8.xyz, u_xlat16_5.xyz);
					    u_xlat16_25 = u_xlat16_25 + 0.5;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_1.xxx;
					    u_xlat16_4.xyz = u_xlat16_10.xyz * u_xlat16_2.xyz;
					    u_xlat16_5.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1 = inversesqrt(u_xlat1);
					    u_xlat6.xyz = u_xlat2.xyz * vec3(u_xlat1) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat1) * u_xlat2.xyz;
					    u_xlat1 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat1 = max(u_xlat1, 0.00100000005);
					    u_xlat1 = inversesqrt(u_xlat1);
					    u_xlat6.xyz = vec3(u_xlat1) * u_xlat6.xyz;
					    u_xlat1 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat23 = dot(u_xlat8.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
					#else
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					#endif
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat1 = max(u_xlat1, 0.319999993);
					    u_xlat16_6 = (-_Glossiness) + 1.0;
					    u_xlat16_13 = u_xlat16_6 * u_xlat16_6 + 1.5;
					    u_xlat1 = u_xlat1 * u_xlat16_13;
					    u_xlat16_13 = u_xlat16_6 * u_xlat16_6;
					    u_xlat16_20 = u_xlat16_13 * u_xlat16_13 + -1.0;
					    u_xlat23 = u_xlat23 * u_xlat16_20 + 1.00001001;
					    u_xlat1 = u_xlat1 * u_xlat23;
					    u_xlat1 = u_xlat16_13 / u_xlat1;
					    u_xlat16_25 = u_xlat16_6 * u_xlat16_13;
					    u_xlat16_25 = (-u_xlat16_25) * 0.280000001 + 1.0;
					    u_xlat1 = u_xlat1 + -9.99999975e-05;
					    u_xlat1 = max(u_xlat1, 0.0);
					    u_xlat1 = min(u_xlat1, 100.0);
					    u_xlat13.xyz = vec3(u_xlat1) * u_xlat16_5.xyz + u_xlat16_10.xyz;
					    u_xlat13.xyz = u_xlat13.xyz * _LightColor0.xyz;
					    u_xlat1 = dot(u_xlat8.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat13.xyz = u_xlat13.xyz * vec3(u_xlat1) + u_xlat16_4.xyz;
					    u_xlat16_10.x = (-u_xlat16_6) * 0.699999988 + 1.70000005;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_6;
					    u_xlat16_10.x = u_xlat16_10.x * 6.0;
					    u_xlat16_17 = dot((-u_xlat2.xyz), u_xlat8.xyz);
					    u_xlat16_17 = u_xlat16_17 + u_xlat16_17;
					    u_xlat16_4.xyz = u_xlat8.xyz * (-vec3(u_xlat16_17)) + (-u_xlat2.xyz);
					    u_xlat1 = dot(u_xlat8.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat16_17 = (-u_xlat1) + 1.0;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_10.x);
					    u_xlat16_10.x = u_xlat10_1.w + -1.0;
					    u_xlat16_10.x = unity_SpecCube0_HDR.w * u_xlat16_10.x + 1.0;
					    u_xlat16_10.x = u_xlat16_10.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_1.xyz * u_xlat16_10.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_25);
					    u_xlat16_3.xyw = u_xlat16_3.xxx + (-u_xlat16_5.xyz);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * u_xlat16_3.xyw + u_xlat16_5.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat13.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  tmpvar_5.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD6 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = tmpvar_26;
					  lowp vec4 bakedDirTex_33;
					  mediump vec3 ambient_34;
					  mediump vec4 tmpvar_35;
					  tmpvar_35.w = 1.0;
					  tmpvar_35.xyz = normalWorld_32;
					  mediump vec3 x_36;
					  x_36.x = dot (unity_SHAr, tmpvar_35);
					  x_36.y = dot (unity_SHAg, tmpvar_35);
					  x_36.z = dot (unity_SHAb, tmpvar_35);
					  mediump vec3 x1_37;
					  mediump vec4 tmpvar_38;
					  tmpvar_38 = (normalWorld_32.xyzz * normalWorld_32.yzzx);
					  x1_37.x = dot (unity_SHBr, tmpvar_38);
					  x1_37.y = dot (unity_SHBg, tmpvar_38);
					  x1_37.z = dot (unity_SHBb, tmpvar_38);
					  ambient_34 = max (vec3(0.0, 0.0, 0.0), (x_36 + (x1_37 + 
					    (unity_SHC.xyz * ((normalWorld_32.x * normalWorld_32.x) - (normalWorld_32.y * normalWorld_32.y)))
					  )));
					  mediump vec3 tmpvar_39;
					  tmpvar_39 = max (((1.055 * 
					    pow (max (ambient_34, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  ambient_34 = tmpvar_39;
					  mediump vec4 tmpvar_40;
					  tmpvar_40 = texture2D (unity_Lightmap, xlv_TEXCOORD6.xy);
					  lowp vec4 color_41;
					  color_41 = tmpvar_40;
					  mediump vec4 tmpvar_42;
					  tmpvar_42 = texture2D (unity_LightmapInd, xlv_TEXCOORD6.xy);
					  bakedDirTex_33 = tmpvar_42;
					  lowp vec3 y_43;
					  y_43 = (bakedDirTex_33.xyz - 0.5);
					  lowp float tmpvar_44;
					  tmpvar_44 = max (0.0001, bakedDirTex_33.w);
					  mediump vec4 hdr_45;
					  hdr_45 = tmpvar_2;
					  mediump vec4 tmpvar_46;
					  tmpvar_46.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_46.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_47;
					  tmpvar_47 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_46.xyz, tmpvar_46.w);
					  mediump vec4 tmpvar_48;
					  tmpvar_48 = tmpvar_47;
					  lowp vec3 tmpvar_49;
					  mediump vec4 c_50;
					  highp vec3 tmpvar_51;
					  tmpvar_51 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_52;
					  mediump vec3 albedo_53;
					  albedo_53 = tmpvar_7;
					  mediump vec3 tmpvar_54;
					  tmpvar_54 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_53, vec3(_Metallic));
					  mediump float tmpvar_55;
					  tmpvar_55 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_52 = (albedo_53 * tmpvar_55);
					  tmpvar_49 = tmpvar_52;
					  mediump vec3 diffColor_56;
					  diffColor_56 = tmpvar_49;
					  mediump float alpha_57;
					  alpha_57 = tmpvar_8;
					  tmpvar_49 = diffColor_56;
					  mediump vec3 diffColor_58;
					  diffColor_58 = tmpvar_49;
					  mediump vec3 color_59;
					  mediump vec2 rlPow4AndFresnelTerm_60;
					  mediump float tmpvar_61;
					  highp float tmpvar_62;
					  tmpvar_62 = clamp (dot (tmpvar_51, tmpvar_4), 0.0, 1.0);
					  tmpvar_61 = tmpvar_62;
					  mediump float tmpvar_63;
					  highp float tmpvar_64;
					  tmpvar_64 = clamp (dot (tmpvar_51, worldViewDir_9), 0.0, 1.0);
					  tmpvar_63 = tmpvar_64;
					  highp vec2 tmpvar_65;
					  tmpvar_65.x = dot ((worldViewDir_9 - (2.0 * 
					    (dot (tmpvar_51, worldViewDir_9) * tmpvar_51)
					  )), tmpvar_4);
					  tmpvar_65.y = (1.0 - tmpvar_63);
					  highp vec2 tmpvar_66;
					  tmpvar_66 = ((tmpvar_65 * tmpvar_65) * (tmpvar_65 * tmpvar_65));
					  rlPow4AndFresnelTerm_60 = tmpvar_66;
					  mediump float tmpvar_67;
					  tmpvar_67 = rlPow4AndFresnelTerm_60.x;
					  mediump float specular_68;
					  highp float smoothness_69;
					  smoothness_69 = _Glossiness;
					  highp vec2 tmpvar_70;
					  tmpvar_70.x = tmpvar_67;
					  tmpvar_70.y = (1.0 - smoothness_69);
					  highp float tmpvar_71;
					  tmpvar_71 = (texture2D (unity_NHxRoughness, tmpvar_70).x * 16.0);
					  specular_68 = tmpvar_71;
					  color_59 = ((diffColor_58 + (specular_68 * tmpvar_54)) * (tmpvar_3 * tmpvar_61));
					  color_59 = (color_59 + ((
					    (tmpvar_39 + (((unity_Lightmap_HDR.x * color_41.xyz) * (
					      dot (normalWorld_32, y_43)
					     + 0.5)) / tmpvar_44))
					   * diffColor_58) + (
					    ((hdr_45.x * ((hdr_45.w * 
					      (tmpvar_48.w - 1.0)
					    ) + 1.0)) * tmpvar_48.xyz)
					   * 
					    mix (tmpvar_54, vec3(clamp ((_Glossiness + (1.0 - tmpvar_55)), 0.0, 1.0)), rlPow4AndFresnelTerm_60.yyy)
					  )));
					  mediump vec4 tmpvar_72;
					  tmpvar_72.w = 1.0;
					  tmpvar_72.xyz = color_59;
					  c_50.xyz = tmpvar_72.xyz;
					  c_50.w = alpha_57;
					  c_6 = c_50;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  tmpvar_5.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD6 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = tmpvar_26;
					  mediump vec3 tmpvar_33;
					  lowp vec4 bakedDirTex_34;
					  mediump vec3 tmpvar_35;
					  mediump vec3 ambient_36;
					  mediump vec4 tmpvar_37;
					  tmpvar_37.w = 1.0;
					  tmpvar_37.xyz = normalWorld_32;
					  mediump vec3 x_38;
					  x_38.x = dot (unity_SHAr, tmpvar_37);
					  x_38.y = dot (unity_SHAg, tmpvar_37);
					  x_38.z = dot (unity_SHAb, tmpvar_37);
					  mediump vec3 x1_39;
					  mediump vec4 tmpvar_40;
					  tmpvar_40 = (normalWorld_32.xyzz * normalWorld_32.yzzx);
					  x1_39.x = dot (unity_SHBr, tmpvar_40);
					  x1_39.y = dot (unity_SHBg, tmpvar_40);
					  x1_39.z = dot (unity_SHBb, tmpvar_40);
					  ambient_36 = max (vec3(0.0, 0.0, 0.0), (x_38 + (x1_39 + 
					    (unity_SHC.xyz * ((normalWorld_32.x * normalWorld_32.x) - (normalWorld_32.y * normalWorld_32.y)))
					  )));
					  mediump vec3 tmpvar_41;
					  tmpvar_41 = max (((1.055 * 
					    pow (max (ambient_36, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  ambient_36 = tmpvar_41;
					  mediump vec4 tmpvar_42;
					  tmpvar_42 = texture2D (unity_Lightmap, xlv_TEXCOORD6.xy);
					  lowp vec4 color_43;
					  color_43 = tmpvar_42;
					  mediump vec4 tmpvar_44;
					  tmpvar_44 = texture2D (unity_LightmapInd, xlv_TEXCOORD6.xy);
					  bakedDirTex_34 = tmpvar_44;
					  lowp vec3 y_45;
					  y_45 = (bakedDirTex_34.xyz - 0.5);
					  lowp float tmpvar_46;
					  tmpvar_46 = max (0.0001, bakedDirTex_34.w);
					  tmpvar_35 = (tmpvar_41 + ((
					    (unity_Lightmap_HDR.x * color_43.xyz)
					   * 
					    (dot (normalWorld_32, y_45) + 0.5)
					  ) / tmpvar_46));
					  mediump vec4 hdr_47;
					  hdr_47 = tmpvar_2;
					  mediump vec4 tmpvar_48;
					  tmpvar_48.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_48.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_49;
					  tmpvar_49 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_48.xyz, tmpvar_48.w);
					  mediump vec4 tmpvar_50;
					  tmpvar_50 = tmpvar_49;
					  tmpvar_33 = ((hdr_47.x * (
					    (hdr_47.w * (tmpvar_50.w - 1.0))
					   + 1.0)) * tmpvar_50.xyz);
					  lowp vec3 tmpvar_51;
					  mediump vec4 c_52;
					  highp vec3 tmpvar_53;
					  tmpvar_53 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_54;
					  mediump vec3 albedo_55;
					  albedo_55 = tmpvar_7;
					  mediump vec3 tmpvar_56;
					  tmpvar_56 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_55, vec3(_Metallic));
					  mediump float tmpvar_57;
					  tmpvar_57 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_54 = (albedo_55 * tmpvar_57);
					  tmpvar_51 = tmpvar_54;
					  mediump vec3 diffColor_58;
					  diffColor_58 = tmpvar_51;
					  mediump float alpha_59;
					  alpha_59 = tmpvar_8;
					  tmpvar_51 = diffColor_58;
					  mediump vec3 diffColor_60;
					  diffColor_60 = tmpvar_51;
					  mediump vec3 color_61;
					  mediump float surfaceReduction_62;
					  highp float specularTerm_63;
					  highp float a2_64;
					  mediump float roughness_65;
					  mediump float perceptualRoughness_66;
					  highp vec3 tmpvar_67;
					  highp vec3 inVec_68;
					  inVec_68 = (tmpvar_4 + worldViewDir_9);
					  tmpvar_67 = (inVec_68 * inversesqrt(max (0.001, 
					    dot (inVec_68, inVec_68)
					  )));
					  mediump float tmpvar_69;
					  highp float tmpvar_70;
					  tmpvar_70 = clamp (dot (tmpvar_53, tmpvar_4), 0.0, 1.0);
					  tmpvar_69 = tmpvar_70;
					  highp float tmpvar_71;
					  tmpvar_71 = clamp (dot (tmpvar_53, tmpvar_67), 0.0, 1.0);
					  mediump float tmpvar_72;
					  highp float tmpvar_73;
					  tmpvar_73 = clamp (dot (tmpvar_53, worldViewDir_9), 0.0, 1.0);
					  tmpvar_72 = tmpvar_73;
					  highp float tmpvar_74;
					  highp float smoothness_75;
					  smoothness_75 = _Glossiness;
					  tmpvar_74 = (1.0 - smoothness_75);
					  perceptualRoughness_66 = tmpvar_74;
					  highp float tmpvar_76;
					  highp float perceptualRoughness_77;
					  perceptualRoughness_77 = perceptualRoughness_66;
					  tmpvar_76 = (perceptualRoughness_77 * perceptualRoughness_77);
					  roughness_65 = tmpvar_76;
					  mediump float tmpvar_78;
					  tmpvar_78 = (roughness_65 * roughness_65);
					  a2_64 = tmpvar_78;
					  specularTerm_63 = ((roughness_65 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_67), 0.0, 1.0)) * (1.5 + roughness_65))
					   * 
					    (((tmpvar_71 * tmpvar_71) * (a2_64 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_79;
					  tmpvar_79 = clamp (specularTerm_63, 0.0, 100.0);
					  specularTerm_63 = tmpvar_79;
					  surfaceReduction_62 = (1.0 - ((roughness_65 * perceptualRoughness_66) * 0.28));
					  mediump float x_80;
					  x_80 = (1.0 - tmpvar_72);
					  mediump vec3 tmpvar_81;
					  tmpvar_81 = mix (tmpvar_56, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_57)
					  ), 0.0, 1.0)), vec3(((x_80 * x_80) * (x_80 * x_80))));
					  highp vec3 tmpvar_82;
					  tmpvar_82 = (((
					    ((diffColor_60 + (tmpvar_79 * tmpvar_56)) * tmpvar_3)
					   * tmpvar_69) + (tmpvar_35 * diffColor_60)) + ((surfaceReduction_62 * tmpvar_33) * tmpvar_81));
					  color_61 = tmpvar_82;
					  mediump vec4 tmpvar_83;
					  tmpvar_83.w = 1.0;
					  tmpvar_83.xyz = color_61;
					  c_52.xyz = tmpvar_83.xyz;
					  c_52.w = alpha_59;
					  c_6 = c_52;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  tmpvar_5.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD6 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = tmpvar_26;
					  mediump vec3 tmpvar_33;
					  lowp vec4 bakedDirTex_34;
					  mediump vec3 tmpvar_35;
					  mediump vec3 ambient_36;
					  mediump vec4 tmpvar_37;
					  tmpvar_37.w = 1.0;
					  tmpvar_37.xyz = normalWorld_32;
					  mediump vec3 x_38;
					  x_38.x = dot (unity_SHAr, tmpvar_37);
					  x_38.y = dot (unity_SHAg, tmpvar_37);
					  x_38.z = dot (unity_SHAb, tmpvar_37);
					  mediump vec3 x1_39;
					  mediump vec4 tmpvar_40;
					  tmpvar_40 = (normalWorld_32.xyzz * normalWorld_32.yzzx);
					  x1_39.x = dot (unity_SHBr, tmpvar_40);
					  x1_39.y = dot (unity_SHBg, tmpvar_40);
					  x1_39.z = dot (unity_SHBb, tmpvar_40);
					  ambient_36 = max (vec3(0.0, 0.0, 0.0), (x_38 + (x1_39 + 
					    (unity_SHC.xyz * ((normalWorld_32.x * normalWorld_32.x) - (normalWorld_32.y * normalWorld_32.y)))
					  )));
					  mediump vec3 tmpvar_41;
					  tmpvar_41 = max (((1.055 * 
					    pow (max (ambient_36, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  ambient_36 = tmpvar_41;
					  mediump vec4 tmpvar_42;
					  tmpvar_42 = texture2D (unity_Lightmap, xlv_TEXCOORD6.xy);
					  lowp vec4 color_43;
					  color_43 = tmpvar_42;
					  mediump vec4 tmpvar_44;
					  tmpvar_44 = texture2D (unity_LightmapInd, xlv_TEXCOORD6.xy);
					  bakedDirTex_34 = tmpvar_44;
					  lowp vec3 y_45;
					  y_45 = (bakedDirTex_34.xyz - 0.5);
					  lowp float tmpvar_46;
					  tmpvar_46 = max (0.0001, bakedDirTex_34.w);
					  tmpvar_35 = (tmpvar_41 + ((
					    (unity_Lightmap_HDR.x * color_43.xyz)
					   * 
					    (dot (normalWorld_32, y_45) + 0.5)
					  ) / tmpvar_46));
					  mediump vec4 hdr_47;
					  hdr_47 = tmpvar_2;
					  mediump vec4 tmpvar_48;
					  tmpvar_48.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_48.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_49;
					  tmpvar_49 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_48.xyz, tmpvar_48.w);
					  mediump vec4 tmpvar_50;
					  tmpvar_50 = tmpvar_49;
					  tmpvar_33 = ((hdr_47.x * (
					    (hdr_47.w * (tmpvar_50.w - 1.0))
					   + 1.0)) * tmpvar_50.xyz);
					  lowp vec3 tmpvar_51;
					  mediump vec4 c_52;
					  highp vec3 tmpvar_53;
					  tmpvar_53 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_54;
					  mediump vec3 albedo_55;
					  albedo_55 = tmpvar_7;
					  mediump vec3 tmpvar_56;
					  tmpvar_56 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_55, vec3(_Metallic));
					  mediump float tmpvar_57;
					  tmpvar_57 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_54 = (albedo_55 * tmpvar_57);
					  tmpvar_51 = tmpvar_54;
					  mediump vec3 diffColor_58;
					  diffColor_58 = tmpvar_51;
					  mediump float alpha_59;
					  alpha_59 = tmpvar_8;
					  tmpvar_51 = diffColor_58;
					  mediump vec3 diffColor_60;
					  diffColor_60 = tmpvar_51;
					  mediump vec3 color_61;
					  mediump float surfaceReduction_62;
					  highp float specularTerm_63;
					  highp float a2_64;
					  mediump float roughness_65;
					  mediump float perceptualRoughness_66;
					  highp vec3 tmpvar_67;
					  highp vec3 inVec_68;
					  inVec_68 = (tmpvar_4 + worldViewDir_9);
					  tmpvar_67 = (inVec_68 * inversesqrt(max (0.001, 
					    dot (inVec_68, inVec_68)
					  )));
					  mediump float tmpvar_69;
					  highp float tmpvar_70;
					  tmpvar_70 = clamp (dot (tmpvar_53, tmpvar_4), 0.0, 1.0);
					  tmpvar_69 = tmpvar_70;
					  highp float tmpvar_71;
					  tmpvar_71 = clamp (dot (tmpvar_53, tmpvar_67), 0.0, 1.0);
					  mediump float tmpvar_72;
					  highp float tmpvar_73;
					  tmpvar_73 = clamp (dot (tmpvar_53, worldViewDir_9), 0.0, 1.0);
					  tmpvar_72 = tmpvar_73;
					  highp float tmpvar_74;
					  highp float smoothness_75;
					  smoothness_75 = _Glossiness;
					  tmpvar_74 = (1.0 - smoothness_75);
					  perceptualRoughness_66 = tmpvar_74;
					  highp float tmpvar_76;
					  highp float perceptualRoughness_77;
					  perceptualRoughness_77 = perceptualRoughness_66;
					  tmpvar_76 = (perceptualRoughness_77 * perceptualRoughness_77);
					  roughness_65 = tmpvar_76;
					  mediump float tmpvar_78;
					  tmpvar_78 = (roughness_65 * roughness_65);
					  a2_64 = tmpvar_78;
					  specularTerm_63 = ((roughness_65 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_67), 0.0, 1.0)) * (1.5 + roughness_65))
					   * 
					    (((tmpvar_71 * tmpvar_71) * (a2_64 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_79;
					  tmpvar_79 = clamp (specularTerm_63, 0.0, 100.0);
					  specularTerm_63 = tmpvar_79;
					  surfaceReduction_62 = (1.0 - ((roughness_65 * perceptualRoughness_66) * 0.28));
					  mediump float x_80;
					  x_80 = (1.0 - tmpvar_72);
					  mediump vec3 tmpvar_81;
					  tmpvar_81 = mix (tmpvar_56, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_57)
					  ), 0.0, 1.0)), vec3(((x_80 * x_80) * (x_80 * x_80))));
					  highp vec3 tmpvar_82;
					  tmpvar_82 = (((
					    ((diffColor_60 + (tmpvar_79 * tmpvar_56)) * tmpvar_3)
					   * tmpvar_69) + (tmpvar_35 * diffColor_60)) + ((surfaceReduction_62 * tmpvar_33) * tmpvar_81));
					  color_61 = tmpvar_82;
					  mediump vec4 tmpvar_83;
					  tmpvar_83.w = 1.0;
					  tmpvar_83.xyz = color_61;
					  c_52.xyz = tmpvar_83.xyz;
					  c_52.w = alpha_59;
					  c_6 = c_52;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD6.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform highp sampler2D unity_NHxRoughness;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec4 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump float u_xlat16_10;
					vec2 u_xlat20;
					float u_xlat30;
					mediump float u_xlat16_30;
					mediump float u_xlat16_32;
					mediump float u_xlat16_33;
					float u_xlat34;
					void main()
					{
					    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat10_0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat10_0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat10_0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_2.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_5.xyz = texture(unity_Lightmap, vs_TEXCOORD6.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_5.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1 = texture(unity_LightmapInd, vs_TEXCOORD6.xy);
					    u_xlat16_3.xyz = u_xlat16_1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_30 = max(u_xlat16_1.w, 9.99999975e-05);
					    u_xlat16_32 = dot(u_xlat0.xyz, u_xlat16_3.xyz);
					    u_xlat16_32 = u_xlat16_32 + 0.5;
					    u_xlat16_2.xyz = vec3(u_xlat16_32) * u_xlat16_2.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xyz / vec3(u_xlat16_30);
					    u_xlat16_2.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat4.x = vs_TEXCOORD1.w;
					    u_xlat4.y = vs_TEXCOORD2.w;
					    u_xlat4.z = vs_TEXCOORD3.w;
					    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.xyz;
					    u_xlat16_32 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat16_32 = u_xlat16_32 + u_xlat16_32;
					    u_xlat16_3.xyz = u_xlat0.xyz * (-vec3(u_xlat16_32)) + (-u_xlat4.xyz);
					    u_xlat5.z = (-_Glossiness) + 1.0;
					    u_xlat16_32 = (-u_xlat5.z) * 0.699999988 + 1.70000005;
					    u_xlat16_32 = u_xlat16_32 * u_xlat5.z;
					    u_xlat16_32 = u_xlat16_32 * 6.0;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_32);
					    u_xlat16_32 = u_xlat10_1.w + -1.0;
					    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(u_xlat16_32);
					    u_xlat30 = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat34 = u_xlat30;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
					#else
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					#endif
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat30)) + u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat5.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat5.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_32 = (-u_xlat34) + 1.0;
					    u_xlat16_10 = u_xlat16_32 * u_xlat16_32;
					    u_xlat16_10 = u_xlat16_32 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_32 * u_xlat16_10;
					    u_xlat20.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat20.x = texture(_CameraDepthTexture, u_xlat20.xy).x;
					    u_xlat20.x = _ZBufferParams.z * u_xlat20.x + _ZBufferParams.w;
					    u_xlat20.x = float(1.0) / u_xlat20.x;
					    u_xlat20.x = u_xlat20.x + (-vs_TEXCOORD4.w);
					    u_xlat20.x = u_xlat20.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
					#else
					    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
					#endif
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat20.x = u_xlat20.x * _FoamColor.w + u_xlat20.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
					#else
					    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
					#endif
					    u_xlat10_1 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4 = u_xlat10_4 * _Color;
					    u_xlat16_1 = u_xlat10_1 * _FoamColor + (-u_xlat16_4);
					    u_xlat1 = u_xlat20.xxxx * u_xlat16_1 + u_xlat16_4;
					    u_xlat16_7.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_33 = (-u_xlat16_32) + _Glossiness;
					    u_xlat16_8.xyz = u_xlat1.xyz * vec3(u_xlat16_32);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat16_32 = u_xlat16_33 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
					#else
					    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_32);
					    u_xlat16_9.xyz = vec3(u_xlat16_10) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_9.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD6.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat13;
					mediump float u_xlat16_13;
					mediump float u_xlat16_21;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_26;
					float u_xlat28;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat10_0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat10_0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat10_0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_2.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_5.xyz = texture(unity_Lightmap, vs_TEXCOORD6.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_5.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1 = texture(unity_LightmapInd, vs_TEXCOORD6.xy);
					    u_xlat16_3.xyz = u_xlat16_1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_24 = max(u_xlat16_1.w, 9.99999975e-05);
					    u_xlat16_26 = dot(u_xlat0.xyz, u_xlat16_3.xyz);
					    u_xlat16_26 = u_xlat16_26 + 0.5;
					    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xyz / vec3(u_xlat16_24);
					    u_xlat16_2.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat4.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat24 = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat24 = _ZBufferParams.z * u_xlat24 + _ZBufferParams.w;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat24 = u_xlat24 + (-vs_TEXCOORD4.w);
					    u_xlat24 = u_xlat24 * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _FoamColor.w + u_xlat24;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat10_1 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * _Color;
					    u_xlat16_1 = u_xlat10_1 * _FoamColor + (-u_xlat16_3);
					    u_xlat1 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_3;
					    u_xlat16_26 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat16_26);
					    u_xlat16_26 = (-u_xlat16_26) + _Glossiness;
					    u_xlat16_26 = u_xlat16_26 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
					    u_xlat16_7.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.x = vs_TEXCOORD1.w;
					    u_xlat4.y = vs_TEXCOORD2.w;
					    u_xlat4.z = vs_TEXCOORD3.w;
					    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat24) * u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat28 = dot(u_xlat0.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_5.x = (-_Glossiness) + 1.0;
					    u_xlat16_13 = u_xlat16_5.x * u_xlat16_5.x + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_13;
					    u_xlat16_13 = u_xlat16_5.x * u_xlat16_5.x;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_13 + -1.0;
					    u_xlat28 = u_xlat28 * u_xlat16_21 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat28;
					    u_xlat24 = u_xlat16_13 / u_xlat24;
					    u_xlat16_30 = u_xlat16_5.x * u_xlat16_13;
					    u_xlat16_30 = (-u_xlat16_30) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat13.xyz = vec3(u_xlat24) * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat13.xyz = u_xlat13.xyz * _LightColor0.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat13.xyz = u_xlat13.xyz * vec3(u_xlat24) + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = vec3(u_xlat16_26) + (-u_xlat16_7.xyz);
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat16_26 = (-u_xlat24) + 1.0;
					    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;
					    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;
					    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat16_7.xyz;
					    u_xlat16_26 = (-u_xlat16_5.x) * 0.699999988 + 1.70000005;
					    u_xlat16_26 = u_xlat16_26 * u_xlat16_5.x;
					    u_xlat16_26 = u_xlat16_26 * 6.0;
					    u_xlat16_6.x = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat16_6.x = u_xlat16_6.x + u_xlat16_6.x;
					    u_xlat16_6.xyz = u_xlat0.xyz * (-u_xlat16_6.xxx) + (-u_xlat4.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_26);
					    u_xlat16_26 = u_xlat10_0.w + -1.0;
					    u_xlat16_26 = unity_SpecCube0_HDR.w * u_xlat16_26 + 1.0;
					    u_xlat16_26 = u_xlat16_26 * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(u_xlat16_26);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_30);
					    u_xlat1.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat13.xyz;
					    SV_Target0 = u_xlat1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD6.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat13;
					mediump float u_xlat16_13;
					mediump float u_xlat16_21;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_26;
					float u_xlat28;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat10_0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat10_0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat10_0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_2.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_5.xyz = texture(unity_Lightmap, vs_TEXCOORD6.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_5.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1 = texture(unity_LightmapInd, vs_TEXCOORD6.xy);
					    u_xlat16_3.xyz = u_xlat16_1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_24 = max(u_xlat16_1.w, 9.99999975e-05);
					    u_xlat16_26 = dot(u_xlat0.xyz, u_xlat16_3.xyz);
					    u_xlat16_26 = u_xlat16_26 + 0.5;
					    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xyz / vec3(u_xlat16_24);
					    u_xlat16_2.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat4.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat24 = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat24 = _ZBufferParams.z * u_xlat24 + _ZBufferParams.w;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat24 = u_xlat24 + (-vs_TEXCOORD4.w);
					    u_xlat24 = u_xlat24 * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _FoamColor.w + u_xlat24;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat10_1 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * _Color;
					    u_xlat16_1 = u_xlat10_1 * _FoamColor + (-u_xlat16_3);
					    u_xlat1 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_3;
					    u_xlat16_26 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat16_26);
					    u_xlat16_26 = (-u_xlat16_26) + _Glossiness;
					    u_xlat16_26 = u_xlat16_26 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
					    u_xlat16_7.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.x = vs_TEXCOORD1.w;
					    u_xlat4.y = vs_TEXCOORD2.w;
					    u_xlat4.z = vs_TEXCOORD3.w;
					    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat24) * u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat28 = dot(u_xlat0.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_5.x = (-_Glossiness) + 1.0;
					    u_xlat16_13 = u_xlat16_5.x * u_xlat16_5.x + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_13;
					    u_xlat16_13 = u_xlat16_5.x * u_xlat16_5.x;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_13 + -1.0;
					    u_xlat28 = u_xlat28 * u_xlat16_21 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat28;
					    u_xlat24 = u_xlat16_13 / u_xlat24;
					    u_xlat16_30 = u_xlat16_5.x * u_xlat16_13;
					    u_xlat16_30 = (-u_xlat16_30) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat13.xyz = vec3(u_xlat24) * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat13.xyz = u_xlat13.xyz * _LightColor0.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat13.xyz = u_xlat13.xyz * vec3(u_xlat24) + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = vec3(u_xlat16_26) + (-u_xlat16_7.xyz);
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat16_26 = (-u_xlat24) + 1.0;
					    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;
					    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;
					    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat16_7.xyz;
					    u_xlat16_26 = (-u_xlat16_5.x) * 0.699999988 + 1.70000005;
					    u_xlat16_26 = u_xlat16_26 * u_xlat16_5.x;
					    u_xlat16_26 = u_xlat16_26 * 6.0;
					    u_xlat16_6.x = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat16_6.x = u_xlat16_6.x + u_xlat16_6.x;
					    u_xlat16_6.xyz = u_xlat0.xyz * (-u_xlat16_6.xxx) + (-u_xlat4.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_26);
					    u_xlat16_26 = u_xlat10_0.w + -1.0;
					    u_xlat16_26 = unity_SpecCube0_HDR.w * u_xlat16_26 + 1.0;
					    u_xlat16_26 = u_xlat16_26 * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(u_xlat16_26);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_30);
					    u_xlat1.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat13.xyz;
					    SV_Target0 = u_xlat1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  tmpvar_5.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_5.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD6 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = tmpvar_26;
					  mediump vec4 realtimeDirTex_33;
					  lowp vec4 bakedDirTex_34;
					  mediump vec3 tmpvar_35;
					  mediump vec4 tmpvar_36;
					  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD6.xy);
					  lowp vec4 color_37;
					  color_37 = tmpvar_36;
					  mediump vec4 tmpvar_38;
					  tmpvar_38 = texture2D (unity_LightmapInd, xlv_TEXCOORD6.xy);
					  bakedDirTex_34 = tmpvar_38;
					  lowp vec3 y_39;
					  y_39 = (bakedDirTex_34.xyz - 0.5);
					  lowp float tmpvar_40;
					  tmpvar_40 = max (0.0001, bakedDirTex_34.w);
					  tmpvar_35 = (((unity_Lightmap_HDR.x * color_37.xyz) * (
					    dot (normalWorld_32, y_39)
					   + 0.5)) / tmpvar_40);
					  lowp vec4 tmpvar_41;
					  tmpvar_41 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
					  lowp vec4 tmpvar_42;
					  tmpvar_42 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
					  realtimeDirTex_33 = tmpvar_42;
					  lowp vec4 dirTex_43;
					  dirTex_43 = realtimeDirTex_33;
					  lowp vec3 y_44;
					  y_44 = (dirTex_43.xyz - 0.5);
					  lowp float tmpvar_45;
					  tmpvar_45 = max (0.0001, dirTex_43.w);
					  tmpvar_35 = (tmpvar_35 + ((
					    pow (((unity_DynamicLightmap_HDR.x * tmpvar_41.w) * tmpvar_41.xyz), unity_DynamicLightmap_HDR.yyy)
					   * 
					    (dot (normalWorld_32, y_44) + 0.5)
					  ) / tmpvar_45));
					  mediump vec4 hdr_46;
					  hdr_46 = tmpvar_2;
					  mediump vec4 tmpvar_47;
					  tmpvar_47.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_47.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_48;
					  tmpvar_48 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_47.xyz, tmpvar_47.w);
					  mediump vec4 tmpvar_49;
					  tmpvar_49 = tmpvar_48;
					  lowp vec3 tmpvar_50;
					  mediump vec4 c_51;
					  highp vec3 tmpvar_52;
					  tmpvar_52 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_53;
					  mediump vec3 albedo_54;
					  albedo_54 = tmpvar_7;
					  mediump vec3 tmpvar_55;
					  tmpvar_55 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_54, vec3(_Metallic));
					  mediump float tmpvar_56;
					  tmpvar_56 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_53 = (albedo_54 * tmpvar_56);
					  tmpvar_50 = tmpvar_53;
					  mediump vec3 diffColor_57;
					  diffColor_57 = tmpvar_50;
					  mediump float alpha_58;
					  alpha_58 = tmpvar_8;
					  tmpvar_50 = diffColor_57;
					  mediump vec3 diffColor_59;
					  diffColor_59 = tmpvar_50;
					  mediump vec3 color_60;
					  mediump vec2 rlPow4AndFresnelTerm_61;
					  mediump float tmpvar_62;
					  highp float tmpvar_63;
					  tmpvar_63 = clamp (dot (tmpvar_52, tmpvar_4), 0.0, 1.0);
					  tmpvar_62 = tmpvar_63;
					  mediump float tmpvar_64;
					  highp float tmpvar_65;
					  tmpvar_65 = clamp (dot (tmpvar_52, worldViewDir_9), 0.0, 1.0);
					  tmpvar_64 = tmpvar_65;
					  highp vec2 tmpvar_66;
					  tmpvar_66.x = dot ((worldViewDir_9 - (2.0 * 
					    (dot (tmpvar_52, worldViewDir_9) * tmpvar_52)
					  )), tmpvar_4);
					  tmpvar_66.y = (1.0 - tmpvar_64);
					  highp vec2 tmpvar_67;
					  tmpvar_67 = ((tmpvar_66 * tmpvar_66) * (tmpvar_66 * tmpvar_66));
					  rlPow4AndFresnelTerm_61 = tmpvar_67;
					  mediump float tmpvar_68;
					  tmpvar_68 = rlPow4AndFresnelTerm_61.x;
					  mediump float specular_69;
					  highp float smoothness_70;
					  smoothness_70 = _Glossiness;
					  highp vec2 tmpvar_71;
					  tmpvar_71.x = tmpvar_68;
					  tmpvar_71.y = (1.0 - smoothness_70);
					  highp float tmpvar_72;
					  tmpvar_72 = (texture2D (unity_NHxRoughness, tmpvar_71).x * 16.0);
					  specular_69 = tmpvar_72;
					  color_60 = ((diffColor_59 + (specular_69 * tmpvar_55)) * (tmpvar_3 * tmpvar_62));
					  color_60 = (color_60 + ((tmpvar_35 * diffColor_59) + (
					    ((hdr_46.x * ((hdr_46.w * 
					      (tmpvar_49.w - 1.0)
					    ) + 1.0)) * tmpvar_49.xyz)
					   * 
					    mix (tmpvar_55, vec3(clamp ((_Glossiness + (1.0 - tmpvar_56)), 0.0, 1.0)), rlPow4AndFresnelTerm_61.yyy)
					  )));
					  mediump vec4 tmpvar_73;
					  tmpvar_73.w = 1.0;
					  tmpvar_73.xyz = color_60;
					  c_51.xyz = tmpvar_73.xyz;
					  c_51.w = alpha_58;
					  c_6 = c_51;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  tmpvar_5.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_5.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD6 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = tmpvar_26;
					  mediump vec3 tmpvar_33;
					  mediump vec4 realtimeDirTex_34;
					  lowp vec4 bakedDirTex_35;
					  mediump vec3 tmpvar_36;
					  mediump vec4 tmpvar_37;
					  tmpvar_37 = texture2D (unity_Lightmap, xlv_TEXCOORD6.xy);
					  lowp vec4 color_38;
					  color_38 = tmpvar_37;
					  mediump vec4 tmpvar_39;
					  tmpvar_39 = texture2D (unity_LightmapInd, xlv_TEXCOORD6.xy);
					  bakedDirTex_35 = tmpvar_39;
					  lowp vec3 y_40;
					  y_40 = (bakedDirTex_35.xyz - 0.5);
					  lowp float tmpvar_41;
					  tmpvar_41 = max (0.0001, bakedDirTex_35.w);
					  tmpvar_36 = (((unity_Lightmap_HDR.x * color_38.xyz) * (
					    dot (normalWorld_32, y_40)
					   + 0.5)) / tmpvar_41);
					  lowp vec4 tmpvar_42;
					  tmpvar_42 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
					  lowp vec4 tmpvar_43;
					  tmpvar_43 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
					  realtimeDirTex_34 = tmpvar_43;
					  lowp vec4 dirTex_44;
					  dirTex_44 = realtimeDirTex_34;
					  lowp vec3 y_45;
					  y_45 = (dirTex_44.xyz - 0.5);
					  lowp float tmpvar_46;
					  tmpvar_46 = max (0.0001, dirTex_44.w);
					  tmpvar_36 = (tmpvar_36 + ((
					    pow (((unity_DynamicLightmap_HDR.x * tmpvar_42.w) * tmpvar_42.xyz), unity_DynamicLightmap_HDR.yyy)
					   * 
					    (dot (normalWorld_32, y_45) + 0.5)
					  ) / tmpvar_46));
					  mediump vec4 hdr_47;
					  hdr_47 = tmpvar_2;
					  mediump vec4 tmpvar_48;
					  tmpvar_48.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_48.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_49;
					  tmpvar_49 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_48.xyz, tmpvar_48.w);
					  mediump vec4 tmpvar_50;
					  tmpvar_50 = tmpvar_49;
					  tmpvar_33 = ((hdr_47.x * (
					    (hdr_47.w * (tmpvar_50.w - 1.0))
					   + 1.0)) * tmpvar_50.xyz);
					  lowp vec3 tmpvar_51;
					  mediump vec4 c_52;
					  highp vec3 tmpvar_53;
					  tmpvar_53 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_54;
					  mediump vec3 albedo_55;
					  albedo_55 = tmpvar_7;
					  mediump vec3 tmpvar_56;
					  tmpvar_56 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_55, vec3(_Metallic));
					  mediump float tmpvar_57;
					  tmpvar_57 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_54 = (albedo_55 * tmpvar_57);
					  tmpvar_51 = tmpvar_54;
					  mediump vec3 diffColor_58;
					  diffColor_58 = tmpvar_51;
					  mediump float alpha_59;
					  alpha_59 = tmpvar_8;
					  tmpvar_51 = diffColor_58;
					  mediump vec3 diffColor_60;
					  diffColor_60 = tmpvar_51;
					  mediump vec3 color_61;
					  mediump float surfaceReduction_62;
					  highp float specularTerm_63;
					  highp float a2_64;
					  mediump float roughness_65;
					  mediump float perceptualRoughness_66;
					  highp vec3 tmpvar_67;
					  highp vec3 inVec_68;
					  inVec_68 = (tmpvar_4 + worldViewDir_9);
					  tmpvar_67 = (inVec_68 * inversesqrt(max (0.001, 
					    dot (inVec_68, inVec_68)
					  )));
					  mediump float tmpvar_69;
					  highp float tmpvar_70;
					  tmpvar_70 = clamp (dot (tmpvar_53, tmpvar_4), 0.0, 1.0);
					  tmpvar_69 = tmpvar_70;
					  highp float tmpvar_71;
					  tmpvar_71 = clamp (dot (tmpvar_53, tmpvar_67), 0.0, 1.0);
					  mediump float tmpvar_72;
					  highp float tmpvar_73;
					  tmpvar_73 = clamp (dot (tmpvar_53, worldViewDir_9), 0.0, 1.0);
					  tmpvar_72 = tmpvar_73;
					  highp float tmpvar_74;
					  highp float smoothness_75;
					  smoothness_75 = _Glossiness;
					  tmpvar_74 = (1.0 - smoothness_75);
					  perceptualRoughness_66 = tmpvar_74;
					  highp float tmpvar_76;
					  highp float perceptualRoughness_77;
					  perceptualRoughness_77 = perceptualRoughness_66;
					  tmpvar_76 = (perceptualRoughness_77 * perceptualRoughness_77);
					  roughness_65 = tmpvar_76;
					  mediump float tmpvar_78;
					  tmpvar_78 = (roughness_65 * roughness_65);
					  a2_64 = tmpvar_78;
					  specularTerm_63 = ((roughness_65 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_67), 0.0, 1.0)) * (1.5 + roughness_65))
					   * 
					    (((tmpvar_71 * tmpvar_71) * (a2_64 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_79;
					  tmpvar_79 = clamp (specularTerm_63, 0.0, 100.0);
					  specularTerm_63 = tmpvar_79;
					  surfaceReduction_62 = (1.0 - ((roughness_65 * perceptualRoughness_66) * 0.28));
					  mediump float x_80;
					  x_80 = (1.0 - tmpvar_72);
					  mediump vec3 tmpvar_81;
					  tmpvar_81 = mix (tmpvar_56, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_57)
					  ), 0.0, 1.0)), vec3(((x_80 * x_80) * (x_80 * x_80))));
					  highp vec3 tmpvar_82;
					  tmpvar_82 = (((
					    ((diffColor_60 + (tmpvar_79 * tmpvar_56)) * tmpvar_3)
					   * tmpvar_69) + (tmpvar_36 * diffColor_60)) + ((surfaceReduction_62 * tmpvar_33) * tmpvar_81));
					  color_61 = tmpvar_82;
					  mediump vec4 tmpvar_83;
					  tmpvar_83.w = 1.0;
					  tmpvar_83.xyz = color_61;
					  c_52.xyz = tmpvar_83.xyz;
					  c_52.w = alpha_59;
					  c_6 = c_52;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  tmpvar_5.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  tmpvar_5.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD6 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_Lightmap_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = tmpvar_26;
					  mediump vec3 tmpvar_33;
					  mediump vec4 realtimeDirTex_34;
					  lowp vec4 bakedDirTex_35;
					  mediump vec3 tmpvar_36;
					  mediump vec4 tmpvar_37;
					  tmpvar_37 = texture2D (unity_Lightmap, xlv_TEXCOORD6.xy);
					  lowp vec4 color_38;
					  color_38 = tmpvar_37;
					  mediump vec4 tmpvar_39;
					  tmpvar_39 = texture2D (unity_LightmapInd, xlv_TEXCOORD6.xy);
					  bakedDirTex_35 = tmpvar_39;
					  lowp vec3 y_40;
					  y_40 = (bakedDirTex_35.xyz - 0.5);
					  lowp float tmpvar_41;
					  tmpvar_41 = max (0.0001, bakedDirTex_35.w);
					  tmpvar_36 = (((unity_Lightmap_HDR.x * color_38.xyz) * (
					    dot (normalWorld_32, y_40)
					   + 0.5)) / tmpvar_41);
					  lowp vec4 tmpvar_42;
					  tmpvar_42 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
					  lowp vec4 tmpvar_43;
					  tmpvar_43 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
					  realtimeDirTex_34 = tmpvar_43;
					  lowp vec4 dirTex_44;
					  dirTex_44 = realtimeDirTex_34;
					  lowp vec3 y_45;
					  y_45 = (dirTex_44.xyz - 0.5);
					  lowp float tmpvar_46;
					  tmpvar_46 = max (0.0001, dirTex_44.w);
					  tmpvar_36 = (tmpvar_36 + ((
					    pow (((unity_DynamicLightmap_HDR.x * tmpvar_42.w) * tmpvar_42.xyz), unity_DynamicLightmap_HDR.yyy)
					   * 
					    (dot (normalWorld_32, y_45) + 0.5)
					  ) / tmpvar_46));
					  mediump vec4 hdr_47;
					  hdr_47 = tmpvar_2;
					  mediump vec4 tmpvar_48;
					  tmpvar_48.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_48.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_49;
					  tmpvar_49 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_48.xyz, tmpvar_48.w);
					  mediump vec4 tmpvar_50;
					  tmpvar_50 = tmpvar_49;
					  tmpvar_33 = ((hdr_47.x * (
					    (hdr_47.w * (tmpvar_50.w - 1.0))
					   + 1.0)) * tmpvar_50.xyz);
					  lowp vec3 tmpvar_51;
					  mediump vec4 c_52;
					  highp vec3 tmpvar_53;
					  tmpvar_53 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_54;
					  mediump vec3 albedo_55;
					  albedo_55 = tmpvar_7;
					  mediump vec3 tmpvar_56;
					  tmpvar_56 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_55, vec3(_Metallic));
					  mediump float tmpvar_57;
					  tmpvar_57 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_54 = (albedo_55 * tmpvar_57);
					  tmpvar_51 = tmpvar_54;
					  mediump vec3 diffColor_58;
					  diffColor_58 = tmpvar_51;
					  mediump float alpha_59;
					  alpha_59 = tmpvar_8;
					  tmpvar_51 = diffColor_58;
					  mediump vec3 diffColor_60;
					  diffColor_60 = tmpvar_51;
					  mediump vec3 color_61;
					  mediump float surfaceReduction_62;
					  highp float specularTerm_63;
					  highp float a2_64;
					  mediump float roughness_65;
					  mediump float perceptualRoughness_66;
					  highp vec3 tmpvar_67;
					  highp vec3 inVec_68;
					  inVec_68 = (tmpvar_4 + worldViewDir_9);
					  tmpvar_67 = (inVec_68 * inversesqrt(max (0.001, 
					    dot (inVec_68, inVec_68)
					  )));
					  mediump float tmpvar_69;
					  highp float tmpvar_70;
					  tmpvar_70 = clamp (dot (tmpvar_53, tmpvar_4), 0.0, 1.0);
					  tmpvar_69 = tmpvar_70;
					  highp float tmpvar_71;
					  tmpvar_71 = clamp (dot (tmpvar_53, tmpvar_67), 0.0, 1.0);
					  mediump float tmpvar_72;
					  highp float tmpvar_73;
					  tmpvar_73 = clamp (dot (tmpvar_53, worldViewDir_9), 0.0, 1.0);
					  tmpvar_72 = tmpvar_73;
					  highp float tmpvar_74;
					  highp float smoothness_75;
					  smoothness_75 = _Glossiness;
					  tmpvar_74 = (1.0 - smoothness_75);
					  perceptualRoughness_66 = tmpvar_74;
					  highp float tmpvar_76;
					  highp float perceptualRoughness_77;
					  perceptualRoughness_77 = perceptualRoughness_66;
					  tmpvar_76 = (perceptualRoughness_77 * perceptualRoughness_77);
					  roughness_65 = tmpvar_76;
					  mediump float tmpvar_78;
					  tmpvar_78 = (roughness_65 * roughness_65);
					  a2_64 = tmpvar_78;
					  specularTerm_63 = ((roughness_65 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_67), 0.0, 1.0)) * (1.5 + roughness_65))
					   * 
					    (((tmpvar_71 * tmpvar_71) * (a2_64 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_79;
					  tmpvar_79 = clamp (specularTerm_63, 0.0, 100.0);
					  specularTerm_63 = tmpvar_79;
					  surfaceReduction_62 = (1.0 - ((roughness_65 * perceptualRoughness_66) * 0.28));
					  mediump float x_80;
					  x_80 = (1.0 - tmpvar_72);
					  mediump vec3 tmpvar_81;
					  tmpvar_81 = mix (tmpvar_56, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_57)
					  ), 0.0, 1.0)), vec3(((x_80 * x_80) * (x_80 * x_80))));
					  highp vec3 tmpvar_82;
					  tmpvar_82 = (((
					    ((diffColor_60 + (tmpvar_79 * tmpvar_56)) * tmpvar_3)
					   * tmpvar_69) + (tmpvar_36 * diffColor_60)) + ((surfaceReduction_62 * tmpvar_33) * tmpvar_81));
					  color_61 = tmpvar_82;
					  mediump vec4 tmpvar_83;
					  tmpvar_83.w = 1.0;
					  tmpvar_83.xyz = color_61;
					  c_52.xyz = tmpvar_83.xyz;
					  c_52.w = alpha_59;
					  c_6 = c_52;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform highp sampler2D unity_NHxRoughness;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					float u_xlat0;
					mediump float u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					mediump float u_xlat16_10;
					lowp vec3 u_xlat10_10;
					vec2 u_xlat20;
					mediump float u_xlat16_31;
					float u_xlat33;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0 = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat10_10.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, u_xlat10_10.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD2.xyz, u_xlat10_10.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD3.xyz, u_xlat10_10.xyz);
					    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10.x = inversesqrt(u_xlat10.x);
					    u_xlat10.xyz = u_xlat10.xxx * u_xlat3.xyz;
					    u_xlat16_31 = dot(u_xlat10.xyz, u_xlat16_2.xyz);
					    u_xlat16_31 = u_xlat16_31 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz / vec3(u_xlat16_0);
					    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD6.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_2 = texture(unity_LightmapInd, vs_TEXCOORD6.xy);
					    u_xlat16_5.xyz = u_xlat16_2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0 = max(u_xlat16_2.w, 9.99999975e-05);
					    u_xlat16_31 = dot(u_xlat10.xyz, u_xlat16_5.xyz);
					    u_xlat16_31 = u_xlat16_31 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyz / vec3(u_xlat16_0);
					    u_xlat16_1.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat3.x = vs_TEXCOORD1.w;
					    u_xlat3.y = vs_TEXCOORD2.w;
					    u_xlat3.z = vs_TEXCOORD3.w;
					    u_xlat3.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat0 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0 = inversesqrt(u_xlat0);
					    u_xlat3.xyz = vec3(u_xlat0) * u_xlat3.xyz;
					    u_xlat16_31 = dot((-u_xlat3.xyz), u_xlat10.xyz);
					    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
					    u_xlat16_5.xyz = u_xlat10.xyz * (-vec3(u_xlat16_31)) + (-u_xlat3.xyz);
					    u_xlat4.z = (-_Glossiness) + 1.0;
					    u_xlat16_31 = (-u_xlat4.z) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat16_31 * u_xlat4.z;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_31);
					    u_xlat16_31 = u_xlat10_2.w + -1.0;
					    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;
					    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;
					    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(u_xlat16_31);
					    u_xlat0 = dot(u_xlat3.xyz, u_xlat10.xyz);
					    u_xlat33 = u_xlat0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat0 = u_xlat0 + u_xlat0;
					    u_xlat3.xyz = u_xlat10.xyz * (-vec3(u_xlat0)) + u_xlat3.xyz;
					    u_xlat0 = dot(u_xlat10.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
					#else
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = vec3(u_xlat0) * _LightColor0.xyz;
					    u_xlat0 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0 = u_xlat0 * u_xlat0;
					    u_xlat4.x = u_xlat0 * u_xlat0;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat4.xz).x;
					    u_xlat0 = u_xlat0 * 16.0;
					    u_xlat16_31 = (-u_xlat33) + 1.0;
					    u_xlat16_10 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_10 = u_xlat16_31 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_31 * u_xlat16_10;
					    u_xlat20.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat20.x = texture(_CameraDepthTexture, u_xlat20.xy).x;
					    u_xlat20.x = _ZBufferParams.z * u_xlat20.x + _ZBufferParams.w;
					    u_xlat20.x = float(1.0) / u_xlat20.x;
					    u_xlat20.x = u_xlat20.x + (-vs_TEXCOORD4.w);
					    u_xlat20.x = u_xlat20.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
					#else
					    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
					#endif
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat20.x = u_xlat20.x * _FoamColor.w + u_xlat20.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
					#else
					    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
					#endif
					    u_xlat10_2 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * _Color;
					    u_xlat16_2 = u_xlat10_2 * _FoamColor + (-u_xlat16_3);
					    u_xlat2 = u_xlat20.xxxx * u_xlat16_2 + u_xlat16_3;
					    u_xlat16_7.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_35 = (-u_xlat16_31) + _Glossiness;
					    u_xlat16_8.xyz = vec3(u_xlat16_31) * u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    u_xlat16_31 = u_xlat16_35 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_31);
					    u_xlat16_9.xyz = vec3(u_xlat16_10) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = vec3(u_xlat0) * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_9.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_5.xyz;
					    SV_Target0.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_1.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					float u_xlat0;
					mediump float u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					lowp vec3 u_xlat10_7;
					vec3 u_xlat11;
					mediump float u_xlat16_11;
					mediump float u_xlat16_18;
					mediump float u_xlat16_22;
					float u_xlat24;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0 = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat10_7.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, u_xlat10_7.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD2.xyz, u_xlat10_7.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD3.xyz, u_xlat10_7.xyz);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat3.xyz;
					    u_xlat16_22 = dot(u_xlat7.xyz, u_xlat16_2.xyz);
					    u_xlat16_22 = u_xlat16_22 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz / vec3(u_xlat16_0);
					    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD6.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_2 = texture(unity_LightmapInd, vs_TEXCOORD6.xy);
					    u_xlat16_5.xyz = u_xlat16_2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0 = max(u_xlat16_2.w, 9.99999975e-05);
					    u_xlat16_22 = dot(u_xlat7.xyz, u_xlat16_5.xyz);
					    u_xlat16_22 = u_xlat16_22 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyz / vec3(u_xlat16_0);
					    u_xlat16_1.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat0 = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat0 = _ZBufferParams.z * u_xlat0 + _ZBufferParams.w;
					    u_xlat0 = float(1.0) / u_xlat0;
					    u_xlat0 = u_xlat0 + (-vs_TEXCOORD4.w);
					    u_xlat0 = u_xlat0 * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
					#else
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					#endif
					    u_xlat0 = (-u_xlat0) + 1.0;
					    u_xlat0 = u_xlat0 * _FoamColor.w + u_xlat0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
					#else
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					#endif
					    u_xlat10_2 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * _Color;
					    u_xlat16_2 = u_xlat10_2 * _FoamColor + (-u_xlat16_3);
					    u_xlat2 = vec4(u_xlat0) * u_xlat16_2 + u_xlat16_3;
					    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat2.xyz;
					    u_xlat16_22 = (-u_xlat16_22) + _Glossiness;
					    u_xlat16_22 = u_xlat16_22 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
					#else
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
					    u_xlat16_6.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat3.x = vs_TEXCOORD1.w;
					    u_xlat3.y = vs_TEXCOORD2.w;
					    u_xlat3.z = vs_TEXCOORD3.w;
					    u_xlat3.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat0 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0 = inversesqrt(u_xlat0);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat0) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat0) * u_xlat3.xyz;
					    u_xlat0 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat0 = max(u_xlat0, 0.00100000005);
					    u_xlat0 = inversesqrt(u_xlat0);
					    u_xlat4.xyz = vec3(u_xlat0) * u_xlat4.xyz;
					    u_xlat0 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
					#else
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					#endif
					    u_xlat24 = dot(u_xlat7.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat0 = max(u_xlat0, 0.319999993);
					    u_xlat16_4.x = (-_Glossiness) + 1.0;
					    u_xlat16_11 = u_xlat16_4.x * u_xlat16_4.x + 1.5;
					    u_xlat0 = u_xlat0 * u_xlat16_11;
					    u_xlat16_11 = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_18 = u_xlat16_11 * u_xlat16_11 + -1.0;
					    u_xlat24 = u_xlat24 * u_xlat16_18 + 1.00001001;
					    u_xlat0 = u_xlat0 * u_xlat24;
					    u_xlat0 = u_xlat16_11 / u_xlat0;
					    u_xlat16_26 = u_xlat16_4.x * u_xlat16_11;
					    u_xlat16_26 = (-u_xlat16_26) * 0.280000001 + 1.0;
					    u_xlat0 = u_xlat0 + -9.99999975e-05;
					    u_xlat0 = max(u_xlat0, 0.0);
					    u_xlat0 = min(u_xlat0, 100.0);
					    u_xlat11.xyz = vec3(u_xlat0) * u_xlat16_6.xyz + u_xlat16_5.xyz;
					    u_xlat11.xyz = u_xlat11.xyz * _LightColor0.xyz;
					    u_xlat0 = dot(u_xlat7.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
					#else
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					#endif
					    u_xlat11.xyz = u_xlat11.xyz * vec3(u_xlat0) + u_xlat16_1.xyz;
					    u_xlat16_1.xyz = vec3(u_xlat16_22) + (-u_xlat16_6.xyz);
					    u_xlat0 = dot(u_xlat7.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
					#else
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					#endif
					    u_xlat16_22 = (-u_xlat0) + 1.0;
					    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
					    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
					    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz + u_xlat16_6.xyz;
					    u_xlat16_22 = (-u_xlat16_4.x) * 0.699999988 + 1.70000005;
					    u_xlat16_22 = u_xlat16_22 * u_xlat16_4.x;
					    u_xlat16_22 = u_xlat16_22 * 6.0;
					    u_xlat16_5.x = dot((-u_xlat3.xyz), u_xlat7.xyz);
					    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;
					    u_xlat16_5.xyz = u_xlat7.xyz * (-u_xlat16_5.xxx) + (-u_xlat3.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_22);
					    u_xlat16_22 = u_xlat10_0.w + -1.0;
					    u_xlat16_22 = unity_SpecCube0_HDR.w * u_xlat16_22 + 1.0;
					    u_xlat16_22 = u_xlat16_22 * unity_SpecCube0_HDR.x;
					    u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(u_xlat16_22);
					    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_26);
					    u_xlat2.xyz = u_xlat16_5.xyz * u_xlat16_1.xyz + u_xlat11.xyz;
					    SV_Target0 = u_xlat2;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2D unity_LightmapInd;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					float u_xlat0;
					mediump float u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					lowp vec3 u_xlat10_7;
					vec3 u_xlat11;
					mediump float u_xlat16_11;
					mediump float u_xlat16_18;
					mediump float u_xlat16_22;
					float u_xlat24;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0 = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat10_7.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, u_xlat10_7.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD2.xyz, u_xlat10_7.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD3.xyz, u_xlat10_7.xyz);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat3.xyz;
					    u_xlat16_22 = dot(u_xlat7.xyz, u_xlat16_2.xyz);
					    u_xlat16_22 = u_xlat16_22 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz / vec3(u_xlat16_0);
					    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD6.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_2 = texture(unity_LightmapInd, vs_TEXCOORD6.xy);
					    u_xlat16_5.xyz = u_xlat16_2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0 = max(u_xlat16_2.w, 9.99999975e-05);
					    u_xlat16_22 = dot(u_xlat7.xyz, u_xlat16_5.xyz);
					    u_xlat16_22 = u_xlat16_22 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyz / vec3(u_xlat16_0);
					    u_xlat16_1.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat0 = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat0 = _ZBufferParams.z * u_xlat0 + _ZBufferParams.w;
					    u_xlat0 = float(1.0) / u_xlat0;
					    u_xlat0 = u_xlat0 + (-vs_TEXCOORD4.w);
					    u_xlat0 = u_xlat0 * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
					#else
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					#endif
					    u_xlat0 = (-u_xlat0) + 1.0;
					    u_xlat0 = u_xlat0 * _FoamColor.w + u_xlat0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
					#else
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					#endif
					    u_xlat10_2 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * _Color;
					    u_xlat16_2 = u_xlat10_2 * _FoamColor + (-u_xlat16_3);
					    u_xlat2 = vec4(u_xlat0) * u_xlat16_2 + u_xlat16_3;
					    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat2.xyz;
					    u_xlat16_22 = (-u_xlat16_22) + _Glossiness;
					    u_xlat16_22 = u_xlat16_22 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
					#else
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
					    u_xlat16_6.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat3.x = vs_TEXCOORD1.w;
					    u_xlat3.y = vs_TEXCOORD2.w;
					    u_xlat3.z = vs_TEXCOORD3.w;
					    u_xlat3.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat0 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0 = inversesqrt(u_xlat0);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat0) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat0) * u_xlat3.xyz;
					    u_xlat0 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat0 = max(u_xlat0, 0.00100000005);
					    u_xlat0 = inversesqrt(u_xlat0);
					    u_xlat4.xyz = vec3(u_xlat0) * u_xlat4.xyz;
					    u_xlat0 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
					#else
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					#endif
					    u_xlat24 = dot(u_xlat7.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat0 = max(u_xlat0, 0.319999993);
					    u_xlat16_4.x = (-_Glossiness) + 1.0;
					    u_xlat16_11 = u_xlat16_4.x * u_xlat16_4.x + 1.5;
					    u_xlat0 = u_xlat0 * u_xlat16_11;
					    u_xlat16_11 = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_18 = u_xlat16_11 * u_xlat16_11 + -1.0;
					    u_xlat24 = u_xlat24 * u_xlat16_18 + 1.00001001;
					    u_xlat0 = u_xlat0 * u_xlat24;
					    u_xlat0 = u_xlat16_11 / u_xlat0;
					    u_xlat16_26 = u_xlat16_4.x * u_xlat16_11;
					    u_xlat16_26 = (-u_xlat16_26) * 0.280000001 + 1.0;
					    u_xlat0 = u_xlat0 + -9.99999975e-05;
					    u_xlat0 = max(u_xlat0, 0.0);
					    u_xlat0 = min(u_xlat0, 100.0);
					    u_xlat11.xyz = vec3(u_xlat0) * u_xlat16_6.xyz + u_xlat16_5.xyz;
					    u_xlat11.xyz = u_xlat11.xyz * _LightColor0.xyz;
					    u_xlat0 = dot(u_xlat7.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
					#else
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					#endif
					    u_xlat11.xyz = u_xlat11.xyz * vec3(u_xlat0) + u_xlat16_1.xyz;
					    u_xlat16_1.xyz = vec3(u_xlat16_22) + (-u_xlat16_6.xyz);
					    u_xlat0 = dot(u_xlat7.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
					#else
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					#endif
					    u_xlat16_22 = (-u_xlat0) + 1.0;
					    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
					    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
					    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz + u_xlat16_6.xyz;
					    u_xlat16_22 = (-u_xlat16_4.x) * 0.699999988 + 1.70000005;
					    u_xlat16_22 = u_xlat16_22 * u_xlat16_4.x;
					    u_xlat16_22 = u_xlat16_22 * 6.0;
					    u_xlat16_5.x = dot((-u_xlat3.xyz), u_xlat7.xyz);
					    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;
					    u_xlat16_5.xyz = u_xlat7.xyz * (-u_xlat16_5.xxx) + (-u_xlat3.xyz);
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_22);
					    u_xlat16_22 = u_xlat10_0.w + -1.0;
					    u_xlat16_22 = unity_SpecCube0_HDR.w * u_xlat16_22 + 1.0;
					    u_xlat16_22 = u_xlat16_22 * unity_SpecCube0_HDR.x;
					    u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(u_xlat16_22);
					    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_26);
					    u_xlat2.xyz = u_xlat16_5.xyz * u_xlat16_1.xyz + u_xlat11.xyz;
					    SV_Target0 = u_xlat2;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp vec4 unity_4LightPosX0;
					uniform highp vec4 unity_4LightPosY0;
					uniform highp vec4 unity_4LightPosZ0;
					uniform mediump vec4 unity_4LightAtten0;
					uniform mediump vec4 unity_LightColor[8];
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying mediump vec3 xlv_TEXCOORD6;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  mediump vec3 tmpvar_5;
					  highp vec4 tmpvar_6;
					  highp vec4 tmpvar_7;
					  tmpvar_7.w = _glesVertex.w;
					  highp vec4 tmpvar_8;
					  highp float result_9;
					  result_9 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_9 = (result_9 / _Period);
					  highp vec4 vertColor_10;
					  vertColor_10 = tmpvar_1;
					  highp vec3 tmpvar_11;
					  tmpvar_11.xz = vec2(0.0, 0.0);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_13;
					  tmpvar_13 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_11.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_12)) + result_9)
					  ) * (_Amplitude + tmpvar_13)) * vertColor_10.y);
					  tmpvar_7.xyz = (_glesVertex.xyz + tmpvar_11);
					  highp vec4 vertColor_14;
					  vertColor_14 = tmpvar_1;
					  highp float result_15;
					  result_15 = (((_WaveDir02.x * tmpvar_7.x) + (_WaveDir02.y * tmpvar_7.y)) + (_WaveDir02.z * tmpvar_7.z));
					  result_15 = (result_15 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_16;
					  vertColor_16 = tmpvar_1;
					  highp vec3 tmpvar_17;
					  tmpvar_17.xz = vec2(0.0, 0.0);
					  tmpvar_17.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_12)) + result_15)
					  ) * (_Amplitude + tmpvar_13)) * vertColor_16.y);
					  tmpvar_7.xyz = (tmpvar_7.xyz + tmpvar_17);
					  highp vec4 vertColor_18;
					  vertColor_18 = tmpvar_1;
					  highp float result_19;
					  result_19 = (((_WaveDir03.x * tmpvar_7.x) + (_WaveDir03.y * tmpvar_7.y)) + (_WaveDir03.z * tmpvar_7.z));
					  result_19 = (result_19 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_20;
					  vertColor_20 = tmpvar_1;
					  highp vec3 tmpvar_21;
					  tmpvar_21.xz = vec2(0.0, 0.0);
					  tmpvar_21.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_12)) + result_19)
					  ) * (_Amplitude + tmpvar_13)) * vertColor_20.y);
					  tmpvar_7.xyz = (tmpvar_7.xyz + tmpvar_21);
					  highp vec4 vertColor_22;
					  vertColor_22 = tmpvar_1;
					  highp vec4 tmpvar_23;
					  highp vec4 tmpvar_24;
					  tmpvar_24.w = 1.0;
					  tmpvar_24.xyz = tmpvar_7.xyz;
					  tmpvar_23 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_24));
					  highp vec3 tmpvar_25;
					  tmpvar_25 = (unity_ObjectToWorld * tmpvar_7).xyz;
					  highp mat3 tmpvar_26;
					  tmpvar_26[0] = unity_WorldToObject[0].xyz;
					  tmpvar_26[1] = unity_WorldToObject[1].xyz;
					  tmpvar_26[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_27;
					  tmpvar_27 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_9))
					       * vertColor_14.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_12)
					       + result_15)) * vertColor_18.y) * tmpvar_13)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_19))
					     * vertColor_22.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_26));
					  highp mat3 tmpvar_28;
					  tmpvar_28[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_28[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_28[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_29;
					  tmpvar_29 = normalize((tmpvar_28 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_29;
					  highp float tmpvar_30;
					  tmpvar_30 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_30;
					  highp vec3 tmpvar_31;
					  tmpvar_31 = (((tmpvar_27.yzx * worldTangent_4.zxy) - (tmpvar_27.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_31;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.x;
					  tmpvar_32.y = worldBinormal_2.x;
					  tmpvar_32.z = tmpvar_27.x;
					  tmpvar_32.w = tmpvar_25.x;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.y;
					  tmpvar_33.y = worldBinormal_2.y;
					  tmpvar_33.z = tmpvar_27.y;
					  tmpvar_33.w = tmpvar_25.y;
					  highp vec4 tmpvar_34;
					  tmpvar_34.x = worldTangent_4.z;
					  tmpvar_34.y = worldBinormal_2.z;
					  tmpvar_34.z = tmpvar_27.z;
					  tmpvar_34.w = tmpvar_25.z;
					  highp vec4 o_35;
					  highp vec4 tmpvar_36;
					  tmpvar_36 = (tmpvar_23 * 0.5);
					  highp vec2 tmpvar_37;
					  tmpvar_37.x = tmpvar_36.x;
					  tmpvar_37.y = (tmpvar_36.y * _ProjectionParams.x);
					  o_35.xy = (tmpvar_37 + tmpvar_36.w);
					  o_35.zw = tmpvar_23.zw;
					  highp vec3 lightColor0_38;
					  lightColor0_38 = unity_LightColor[0].xyz;
					  highp vec3 lightColor1_39;
					  lightColor1_39 = unity_LightColor[1].xyz;
					  highp vec3 lightColor2_40;
					  lightColor2_40 = unity_LightColor[2].xyz;
					  highp vec3 lightColor3_41;
					  lightColor3_41 = unity_LightColor[3].xyz;
					  highp vec4 lightAttenSq_42;
					  lightAttenSq_42 = unity_4LightAtten0;
					  highp vec3 col_43;
					  highp vec4 ndotl_44;
					  highp vec4 lengthSq_45;
					  highp vec4 tmpvar_46;
					  tmpvar_46 = (unity_4LightPosX0 - tmpvar_25.x);
					  highp vec4 tmpvar_47;
					  tmpvar_47 = (unity_4LightPosY0 - tmpvar_25.y);
					  highp vec4 tmpvar_48;
					  tmpvar_48 = (unity_4LightPosZ0 - tmpvar_25.z);
					  lengthSq_45 = (tmpvar_46 * tmpvar_46);
					  lengthSq_45 = (lengthSq_45 + (tmpvar_47 * tmpvar_47));
					  lengthSq_45 = (lengthSq_45 + (tmpvar_48 * tmpvar_48));
					  highp vec4 tmpvar_49;
					  tmpvar_49 = max (lengthSq_45, vec4(1e-06, 1e-06, 1e-06, 1e-06));
					  lengthSq_45 = tmpvar_49;
					  ndotl_44 = (tmpvar_46 * tmpvar_27.x);
					  ndotl_44 = (ndotl_44 + (tmpvar_47 * tmpvar_27.y));
					  ndotl_44 = (ndotl_44 + (tmpvar_48 * tmpvar_27.z));
					  highp vec4 tmpvar_50;
					  tmpvar_50 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_44 * inversesqrt(tmpvar_49)));
					  ndotl_44 = tmpvar_50;
					  highp vec4 tmpvar_51;
					  tmpvar_51 = (tmpvar_50 * (1.0/((1.0 + 
					    (tmpvar_49 * lightAttenSq_42)
					  ))));
					  col_43 = (lightColor0_38 * tmpvar_51.x);
					  col_43 = (col_43 + (lightColor1_39 * tmpvar_51.y));
					  col_43 = (col_43 + (lightColor2_40 * tmpvar_51.z));
					  col_43 = (col_43 + (lightColor3_41 * tmpvar_51.w));
					  tmpvar_5 = col_43;
					  mediump vec3 normal_52;
					  normal_52 = tmpvar_27;
					  mediump vec3 ambient_53;
					  mediump vec3 x1_54;
					  mediump vec4 tmpvar_55;
					  tmpvar_55 = (normal_52.xyzz * normal_52.yzzx);
					  x1_54.x = dot (unity_SHBr, tmpvar_55);
					  x1_54.y = dot (unity_SHBg, tmpvar_55);
					  x1_54.z = dot (unity_SHBb, tmpvar_55);
					  ambient_53 = ((tmpvar_5 * (
					    (tmpvar_5 * ((tmpvar_5 * 0.305306) + 0.6821711))
					   + 0.01252288)) + (x1_54 + (unity_SHC.xyz * 
					    ((normal_52.x * normal_52.x) - (normal_52.y * normal_52.y))
					  )));
					  tmpvar_5 = ambient_53;
					  gl_Position = tmpvar_23;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_32;
					  xlv_TEXCOORD2 = tmpvar_33;
					  xlv_TEXCOORD3 = tmpvar_34;
					  xlv_TEXCOORD4 = o_35;
					  xlv_TEXCOORD5 = tmpvar_8;
					  xlv_TEXCOORD6 = ambient_53;
					  xlv_TEXCOORD8 = tmpvar_6;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying mediump vec3 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = tmpvar_26;
					  mediump vec4 tmpvar_33;
					  tmpvar_33.w = 1.0;
					  tmpvar_33.xyz = normalWorld_32;
					  mediump vec3 x_34;
					  x_34.x = dot (unity_SHAr, tmpvar_33);
					  x_34.y = dot (unity_SHAg, tmpvar_33);
					  x_34.z = dot (unity_SHAb, tmpvar_33);
					  mediump vec4 hdr_35;
					  hdr_35 = tmpvar_2;
					  mediump vec4 tmpvar_36;
					  tmpvar_36.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_36.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_37;
					  tmpvar_37 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_36.xyz, tmpvar_36.w);
					  mediump vec4 tmpvar_38;
					  tmpvar_38 = tmpvar_37;
					  lowp vec3 tmpvar_39;
					  mediump vec4 c_40;
					  highp vec3 tmpvar_41;
					  tmpvar_41 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_42;
					  mediump vec3 albedo_43;
					  albedo_43 = tmpvar_7;
					  mediump vec3 tmpvar_44;
					  tmpvar_44 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_43, vec3(_Metallic));
					  mediump float tmpvar_45;
					  tmpvar_45 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_42 = (albedo_43 * tmpvar_45);
					  tmpvar_39 = tmpvar_42;
					  mediump vec3 diffColor_46;
					  diffColor_46 = tmpvar_39;
					  mediump float alpha_47;
					  alpha_47 = tmpvar_8;
					  tmpvar_39 = diffColor_46;
					  mediump vec3 diffColor_48;
					  diffColor_48 = tmpvar_39;
					  mediump vec3 color_49;
					  mediump vec2 rlPow4AndFresnelTerm_50;
					  mediump float tmpvar_51;
					  highp float tmpvar_52;
					  tmpvar_52 = clamp (dot (tmpvar_41, tmpvar_4), 0.0, 1.0);
					  tmpvar_51 = tmpvar_52;
					  mediump float tmpvar_53;
					  highp float tmpvar_54;
					  tmpvar_54 = clamp (dot (tmpvar_41, worldViewDir_9), 0.0, 1.0);
					  tmpvar_53 = tmpvar_54;
					  highp vec2 tmpvar_55;
					  tmpvar_55.x = dot ((worldViewDir_9 - (2.0 * 
					    (dot (tmpvar_41, worldViewDir_9) * tmpvar_41)
					  )), tmpvar_4);
					  tmpvar_55.y = (1.0 - tmpvar_53);
					  highp vec2 tmpvar_56;
					  tmpvar_56 = ((tmpvar_55 * tmpvar_55) * (tmpvar_55 * tmpvar_55));
					  rlPow4AndFresnelTerm_50 = tmpvar_56;
					  mediump float tmpvar_57;
					  tmpvar_57 = rlPow4AndFresnelTerm_50.x;
					  mediump float specular_58;
					  highp float smoothness_59;
					  smoothness_59 = _Glossiness;
					  highp vec2 tmpvar_60;
					  tmpvar_60.x = tmpvar_57;
					  tmpvar_60.y = (1.0 - smoothness_59);
					  highp float tmpvar_61;
					  tmpvar_61 = (texture2D (unity_NHxRoughness, tmpvar_60).x * 16.0);
					  specular_58 = tmpvar_61;
					  color_49 = ((diffColor_48 + (specular_58 * tmpvar_44)) * (tmpvar_3 * tmpvar_51));
					  color_49 = (color_49 + ((
					    max (((1.055 * pow (
					      max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD6 + x_34))
					    , vec3(0.4166667, 0.4166667, 0.4166667))) - 0.055), vec3(0.0, 0.0, 0.0))
					   * diffColor_48) + (
					    ((hdr_35.x * ((hdr_35.w * 
					      (tmpvar_38.w - 1.0)
					    ) + 1.0)) * tmpvar_38.xyz)
					   * 
					    mix (tmpvar_44, vec3(clamp ((_Glossiness + (1.0 - tmpvar_45)), 0.0, 1.0)), rlPow4AndFresnelTerm_50.yyy)
					  )));
					  mediump vec4 tmpvar_62;
					  tmpvar_62.w = 1.0;
					  tmpvar_62.xyz = color_49;
					  c_40.xyz = tmpvar_62.xyz;
					  c_40.w = alpha_47;
					  c_6 = c_40;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp vec4 unity_4LightPosX0;
					uniform highp vec4 unity_4LightPosY0;
					uniform highp vec4 unity_4LightPosZ0;
					uniform mediump vec4 unity_4LightAtten0;
					uniform mediump vec4 unity_LightColor[8];
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying mediump vec3 xlv_TEXCOORD6;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  mediump vec3 tmpvar_5;
					  highp vec4 tmpvar_6;
					  highp vec4 tmpvar_7;
					  tmpvar_7.w = _glesVertex.w;
					  highp vec4 tmpvar_8;
					  highp float result_9;
					  result_9 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_9 = (result_9 / _Period);
					  highp vec4 vertColor_10;
					  vertColor_10 = tmpvar_1;
					  highp vec3 tmpvar_11;
					  tmpvar_11.xz = vec2(0.0, 0.0);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_13;
					  tmpvar_13 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_11.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_12)) + result_9)
					  ) * (_Amplitude + tmpvar_13)) * vertColor_10.y);
					  tmpvar_7.xyz = (_glesVertex.xyz + tmpvar_11);
					  highp vec4 vertColor_14;
					  vertColor_14 = tmpvar_1;
					  highp float result_15;
					  result_15 = (((_WaveDir02.x * tmpvar_7.x) + (_WaveDir02.y * tmpvar_7.y)) + (_WaveDir02.z * tmpvar_7.z));
					  result_15 = (result_15 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_16;
					  vertColor_16 = tmpvar_1;
					  highp vec3 tmpvar_17;
					  tmpvar_17.xz = vec2(0.0, 0.0);
					  tmpvar_17.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_12)) + result_15)
					  ) * (_Amplitude + tmpvar_13)) * vertColor_16.y);
					  tmpvar_7.xyz = (tmpvar_7.xyz + tmpvar_17);
					  highp vec4 vertColor_18;
					  vertColor_18 = tmpvar_1;
					  highp float result_19;
					  result_19 = (((_WaveDir03.x * tmpvar_7.x) + (_WaveDir03.y * tmpvar_7.y)) + (_WaveDir03.z * tmpvar_7.z));
					  result_19 = (result_19 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_20;
					  vertColor_20 = tmpvar_1;
					  highp vec3 tmpvar_21;
					  tmpvar_21.xz = vec2(0.0, 0.0);
					  tmpvar_21.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_12)) + result_19)
					  ) * (_Amplitude + tmpvar_13)) * vertColor_20.y);
					  tmpvar_7.xyz = (tmpvar_7.xyz + tmpvar_21);
					  highp vec4 vertColor_22;
					  vertColor_22 = tmpvar_1;
					  highp vec4 tmpvar_23;
					  highp vec4 tmpvar_24;
					  tmpvar_24.w = 1.0;
					  tmpvar_24.xyz = tmpvar_7.xyz;
					  tmpvar_23 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_24));
					  highp vec3 tmpvar_25;
					  tmpvar_25 = (unity_ObjectToWorld * tmpvar_7).xyz;
					  highp mat3 tmpvar_26;
					  tmpvar_26[0] = unity_WorldToObject[0].xyz;
					  tmpvar_26[1] = unity_WorldToObject[1].xyz;
					  tmpvar_26[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_27;
					  tmpvar_27 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_9))
					       * vertColor_14.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_12)
					       + result_15)) * vertColor_18.y) * tmpvar_13)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_19))
					     * vertColor_22.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_26));
					  highp mat3 tmpvar_28;
					  tmpvar_28[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_28[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_28[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_29;
					  tmpvar_29 = normalize((tmpvar_28 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_29;
					  highp float tmpvar_30;
					  tmpvar_30 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_30;
					  highp vec3 tmpvar_31;
					  tmpvar_31 = (((tmpvar_27.yzx * worldTangent_4.zxy) - (tmpvar_27.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_31;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.x;
					  tmpvar_32.y = worldBinormal_2.x;
					  tmpvar_32.z = tmpvar_27.x;
					  tmpvar_32.w = tmpvar_25.x;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.y;
					  tmpvar_33.y = worldBinormal_2.y;
					  tmpvar_33.z = tmpvar_27.y;
					  tmpvar_33.w = tmpvar_25.y;
					  highp vec4 tmpvar_34;
					  tmpvar_34.x = worldTangent_4.z;
					  tmpvar_34.y = worldBinormal_2.z;
					  tmpvar_34.z = tmpvar_27.z;
					  tmpvar_34.w = tmpvar_25.z;
					  highp vec4 o_35;
					  highp vec4 tmpvar_36;
					  tmpvar_36 = (tmpvar_23 * 0.5);
					  highp vec2 tmpvar_37;
					  tmpvar_37.x = tmpvar_36.x;
					  tmpvar_37.y = (tmpvar_36.y * _ProjectionParams.x);
					  o_35.xy = (tmpvar_37 + tmpvar_36.w);
					  o_35.zw = tmpvar_23.zw;
					  highp vec3 lightColor0_38;
					  lightColor0_38 = unity_LightColor[0].xyz;
					  highp vec3 lightColor1_39;
					  lightColor1_39 = unity_LightColor[1].xyz;
					  highp vec3 lightColor2_40;
					  lightColor2_40 = unity_LightColor[2].xyz;
					  highp vec3 lightColor3_41;
					  lightColor3_41 = unity_LightColor[3].xyz;
					  highp vec4 lightAttenSq_42;
					  lightAttenSq_42 = unity_4LightAtten0;
					  highp vec3 col_43;
					  highp vec4 ndotl_44;
					  highp vec4 lengthSq_45;
					  highp vec4 tmpvar_46;
					  tmpvar_46 = (unity_4LightPosX0 - tmpvar_25.x);
					  highp vec4 tmpvar_47;
					  tmpvar_47 = (unity_4LightPosY0 - tmpvar_25.y);
					  highp vec4 tmpvar_48;
					  tmpvar_48 = (unity_4LightPosZ0 - tmpvar_25.z);
					  lengthSq_45 = (tmpvar_46 * tmpvar_46);
					  lengthSq_45 = (lengthSq_45 + (tmpvar_47 * tmpvar_47));
					  lengthSq_45 = (lengthSq_45 + (tmpvar_48 * tmpvar_48));
					  highp vec4 tmpvar_49;
					  tmpvar_49 = max (lengthSq_45, vec4(1e-06, 1e-06, 1e-06, 1e-06));
					  lengthSq_45 = tmpvar_49;
					  ndotl_44 = (tmpvar_46 * tmpvar_27.x);
					  ndotl_44 = (ndotl_44 + (tmpvar_47 * tmpvar_27.y));
					  ndotl_44 = (ndotl_44 + (tmpvar_48 * tmpvar_27.z));
					  highp vec4 tmpvar_50;
					  tmpvar_50 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_44 * inversesqrt(tmpvar_49)));
					  ndotl_44 = tmpvar_50;
					  highp vec4 tmpvar_51;
					  tmpvar_51 = (tmpvar_50 * (1.0/((1.0 + 
					    (tmpvar_49 * lightAttenSq_42)
					  ))));
					  col_43 = (lightColor0_38 * tmpvar_51.x);
					  col_43 = (col_43 + (lightColor1_39 * tmpvar_51.y));
					  col_43 = (col_43 + (lightColor2_40 * tmpvar_51.z));
					  col_43 = (col_43 + (lightColor3_41 * tmpvar_51.w));
					  tmpvar_5 = col_43;
					  mediump vec3 normal_52;
					  normal_52 = tmpvar_27;
					  mediump vec3 ambient_53;
					  mediump vec3 x1_54;
					  mediump vec4 tmpvar_55;
					  tmpvar_55 = (normal_52.xyzz * normal_52.yzzx);
					  x1_54.x = dot (unity_SHBr, tmpvar_55);
					  x1_54.y = dot (unity_SHBg, tmpvar_55);
					  x1_54.z = dot (unity_SHBb, tmpvar_55);
					  ambient_53 = ((tmpvar_5 * (
					    (tmpvar_5 * ((tmpvar_5 * 0.305306) + 0.6821711))
					   + 0.01252288)) + (x1_54 + (unity_SHC.xyz * 
					    ((normal_52.x * normal_52.x) - (normal_52.y * normal_52.y))
					  )));
					  tmpvar_5 = ambient_53;
					  gl_Position = tmpvar_23;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_32;
					  xlv_TEXCOORD2 = tmpvar_33;
					  xlv_TEXCOORD3 = tmpvar_34;
					  xlv_TEXCOORD4 = o_35;
					  xlv_TEXCOORD5 = tmpvar_8;
					  xlv_TEXCOORD6 = ambient_53;
					  xlv_TEXCOORD8 = tmpvar_6;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying mediump vec3 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = tmpvar_26;
					  mediump vec3 tmpvar_33;
					  mediump vec3 tmpvar_34;
					  mediump vec4 tmpvar_35;
					  tmpvar_35.w = 1.0;
					  tmpvar_35.xyz = normalWorld_32;
					  mediump vec3 x_36;
					  x_36.x = dot (unity_SHAr, tmpvar_35);
					  x_36.y = dot (unity_SHAg, tmpvar_35);
					  x_36.z = dot (unity_SHAb, tmpvar_35);
					  tmpvar_34 = max (((1.055 * 
					    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD6 + x_36)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  mediump vec4 hdr_37;
					  hdr_37 = tmpvar_2;
					  mediump vec4 tmpvar_38;
					  tmpvar_38.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_38.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_39;
					  tmpvar_39 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_38.xyz, tmpvar_38.w);
					  mediump vec4 tmpvar_40;
					  tmpvar_40 = tmpvar_39;
					  tmpvar_33 = ((hdr_37.x * (
					    (hdr_37.w * (tmpvar_40.w - 1.0))
					   + 1.0)) * tmpvar_40.xyz);
					  lowp vec3 tmpvar_41;
					  mediump vec4 c_42;
					  highp vec3 tmpvar_43;
					  tmpvar_43 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_44;
					  mediump vec3 albedo_45;
					  albedo_45 = tmpvar_7;
					  mediump vec3 tmpvar_46;
					  tmpvar_46 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_45, vec3(_Metallic));
					  mediump float tmpvar_47;
					  tmpvar_47 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_44 = (albedo_45 * tmpvar_47);
					  tmpvar_41 = tmpvar_44;
					  mediump vec3 diffColor_48;
					  diffColor_48 = tmpvar_41;
					  mediump float alpha_49;
					  alpha_49 = tmpvar_8;
					  tmpvar_41 = diffColor_48;
					  mediump vec3 diffColor_50;
					  diffColor_50 = tmpvar_41;
					  mediump vec3 color_51;
					  mediump float surfaceReduction_52;
					  highp float specularTerm_53;
					  highp float a2_54;
					  mediump float roughness_55;
					  mediump float perceptualRoughness_56;
					  highp vec3 tmpvar_57;
					  highp vec3 inVec_58;
					  inVec_58 = (tmpvar_4 + worldViewDir_9);
					  tmpvar_57 = (inVec_58 * inversesqrt(max (0.001, 
					    dot (inVec_58, inVec_58)
					  )));
					  mediump float tmpvar_59;
					  highp float tmpvar_60;
					  tmpvar_60 = clamp (dot (tmpvar_43, tmpvar_4), 0.0, 1.0);
					  tmpvar_59 = tmpvar_60;
					  highp float tmpvar_61;
					  tmpvar_61 = clamp (dot (tmpvar_43, tmpvar_57), 0.0, 1.0);
					  mediump float tmpvar_62;
					  highp float tmpvar_63;
					  tmpvar_63 = clamp (dot (tmpvar_43, worldViewDir_9), 0.0, 1.0);
					  tmpvar_62 = tmpvar_63;
					  highp float tmpvar_64;
					  highp float smoothness_65;
					  smoothness_65 = _Glossiness;
					  tmpvar_64 = (1.0 - smoothness_65);
					  perceptualRoughness_56 = tmpvar_64;
					  highp float tmpvar_66;
					  highp float perceptualRoughness_67;
					  perceptualRoughness_67 = perceptualRoughness_56;
					  tmpvar_66 = (perceptualRoughness_67 * perceptualRoughness_67);
					  roughness_55 = tmpvar_66;
					  mediump float tmpvar_68;
					  tmpvar_68 = (roughness_55 * roughness_55);
					  a2_54 = tmpvar_68;
					  specularTerm_53 = ((roughness_55 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_57), 0.0, 1.0)) * (1.5 + roughness_55))
					   * 
					    (((tmpvar_61 * tmpvar_61) * (a2_54 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_69;
					  tmpvar_69 = clamp (specularTerm_53, 0.0, 100.0);
					  specularTerm_53 = tmpvar_69;
					  surfaceReduction_52 = (1.0 - ((roughness_55 * perceptualRoughness_56) * 0.28));
					  mediump float x_70;
					  x_70 = (1.0 - tmpvar_62);
					  mediump vec3 tmpvar_71;
					  tmpvar_71 = mix (tmpvar_46, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_47)
					  ), 0.0, 1.0)), vec3(((x_70 * x_70) * (x_70 * x_70))));
					  highp vec3 tmpvar_72;
					  tmpvar_72 = (((
					    ((diffColor_50 + (tmpvar_69 * tmpvar_46)) * tmpvar_3)
					   * tmpvar_59) + (tmpvar_34 * diffColor_50)) + ((surfaceReduction_52 * tmpvar_33) * tmpvar_71));
					  color_51 = tmpvar_72;
					  mediump vec4 tmpvar_73;
					  tmpvar_73.w = 1.0;
					  tmpvar_73.xyz = color_51;
					  c_42.xyz = tmpvar_73.xyz;
					  c_42.w = alpha_49;
					  c_6 = c_42;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp vec4 unity_4LightPosX0;
					uniform highp vec4 unity_4LightPosY0;
					uniform highp vec4 unity_4LightPosZ0;
					uniform mediump vec4 unity_4LightAtten0;
					uniform mediump vec4 unity_LightColor[8];
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying mediump vec3 xlv_TEXCOORD6;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  mediump vec3 tmpvar_5;
					  highp vec4 tmpvar_6;
					  highp vec4 tmpvar_7;
					  tmpvar_7.w = _glesVertex.w;
					  highp vec4 tmpvar_8;
					  highp float result_9;
					  result_9 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_9 = (result_9 / _Period);
					  highp vec4 vertColor_10;
					  vertColor_10 = tmpvar_1;
					  highp vec3 tmpvar_11;
					  tmpvar_11.xz = vec2(0.0, 0.0);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_13;
					  tmpvar_13 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_11.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_12)) + result_9)
					  ) * (_Amplitude + tmpvar_13)) * vertColor_10.y);
					  tmpvar_7.xyz = (_glesVertex.xyz + tmpvar_11);
					  highp vec4 vertColor_14;
					  vertColor_14 = tmpvar_1;
					  highp float result_15;
					  result_15 = (((_WaveDir02.x * tmpvar_7.x) + (_WaveDir02.y * tmpvar_7.y)) + (_WaveDir02.z * tmpvar_7.z));
					  result_15 = (result_15 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_16;
					  vertColor_16 = tmpvar_1;
					  highp vec3 tmpvar_17;
					  tmpvar_17.xz = vec2(0.0, 0.0);
					  tmpvar_17.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_12)) + result_15)
					  ) * (_Amplitude + tmpvar_13)) * vertColor_16.y);
					  tmpvar_7.xyz = (tmpvar_7.xyz + tmpvar_17);
					  highp vec4 vertColor_18;
					  vertColor_18 = tmpvar_1;
					  highp float result_19;
					  result_19 = (((_WaveDir03.x * tmpvar_7.x) + (_WaveDir03.y * tmpvar_7.y)) + (_WaveDir03.z * tmpvar_7.z));
					  result_19 = (result_19 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_20;
					  vertColor_20 = tmpvar_1;
					  highp vec3 tmpvar_21;
					  tmpvar_21.xz = vec2(0.0, 0.0);
					  tmpvar_21.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_12)) + result_19)
					  ) * (_Amplitude + tmpvar_13)) * vertColor_20.y);
					  tmpvar_7.xyz = (tmpvar_7.xyz + tmpvar_21);
					  highp vec4 vertColor_22;
					  vertColor_22 = tmpvar_1;
					  highp vec4 tmpvar_23;
					  highp vec4 tmpvar_24;
					  tmpvar_24.w = 1.0;
					  tmpvar_24.xyz = tmpvar_7.xyz;
					  tmpvar_23 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_24));
					  highp vec3 tmpvar_25;
					  tmpvar_25 = (unity_ObjectToWorld * tmpvar_7).xyz;
					  highp mat3 tmpvar_26;
					  tmpvar_26[0] = unity_WorldToObject[0].xyz;
					  tmpvar_26[1] = unity_WorldToObject[1].xyz;
					  tmpvar_26[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_27;
					  tmpvar_27 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_9))
					       * vertColor_14.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_12)
					       + result_15)) * vertColor_18.y) * tmpvar_13)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_19))
					     * vertColor_22.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_26));
					  highp mat3 tmpvar_28;
					  tmpvar_28[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_28[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_28[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_29;
					  tmpvar_29 = normalize((tmpvar_28 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_29;
					  highp float tmpvar_30;
					  tmpvar_30 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_30;
					  highp vec3 tmpvar_31;
					  tmpvar_31 = (((tmpvar_27.yzx * worldTangent_4.zxy) - (tmpvar_27.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_31;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.x;
					  tmpvar_32.y = worldBinormal_2.x;
					  tmpvar_32.z = tmpvar_27.x;
					  tmpvar_32.w = tmpvar_25.x;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.y;
					  tmpvar_33.y = worldBinormal_2.y;
					  tmpvar_33.z = tmpvar_27.y;
					  tmpvar_33.w = tmpvar_25.y;
					  highp vec4 tmpvar_34;
					  tmpvar_34.x = worldTangent_4.z;
					  tmpvar_34.y = worldBinormal_2.z;
					  tmpvar_34.z = tmpvar_27.z;
					  tmpvar_34.w = tmpvar_25.z;
					  highp vec4 o_35;
					  highp vec4 tmpvar_36;
					  tmpvar_36 = (tmpvar_23 * 0.5);
					  highp vec2 tmpvar_37;
					  tmpvar_37.x = tmpvar_36.x;
					  tmpvar_37.y = (tmpvar_36.y * _ProjectionParams.x);
					  o_35.xy = (tmpvar_37 + tmpvar_36.w);
					  o_35.zw = tmpvar_23.zw;
					  highp vec3 lightColor0_38;
					  lightColor0_38 = unity_LightColor[0].xyz;
					  highp vec3 lightColor1_39;
					  lightColor1_39 = unity_LightColor[1].xyz;
					  highp vec3 lightColor2_40;
					  lightColor2_40 = unity_LightColor[2].xyz;
					  highp vec3 lightColor3_41;
					  lightColor3_41 = unity_LightColor[3].xyz;
					  highp vec4 lightAttenSq_42;
					  lightAttenSq_42 = unity_4LightAtten0;
					  highp vec3 col_43;
					  highp vec4 ndotl_44;
					  highp vec4 lengthSq_45;
					  highp vec4 tmpvar_46;
					  tmpvar_46 = (unity_4LightPosX0 - tmpvar_25.x);
					  highp vec4 tmpvar_47;
					  tmpvar_47 = (unity_4LightPosY0 - tmpvar_25.y);
					  highp vec4 tmpvar_48;
					  tmpvar_48 = (unity_4LightPosZ0 - tmpvar_25.z);
					  lengthSq_45 = (tmpvar_46 * tmpvar_46);
					  lengthSq_45 = (lengthSq_45 + (tmpvar_47 * tmpvar_47));
					  lengthSq_45 = (lengthSq_45 + (tmpvar_48 * tmpvar_48));
					  highp vec4 tmpvar_49;
					  tmpvar_49 = max (lengthSq_45, vec4(1e-06, 1e-06, 1e-06, 1e-06));
					  lengthSq_45 = tmpvar_49;
					  ndotl_44 = (tmpvar_46 * tmpvar_27.x);
					  ndotl_44 = (ndotl_44 + (tmpvar_47 * tmpvar_27.y));
					  ndotl_44 = (ndotl_44 + (tmpvar_48 * tmpvar_27.z));
					  highp vec4 tmpvar_50;
					  tmpvar_50 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_44 * inversesqrt(tmpvar_49)));
					  ndotl_44 = tmpvar_50;
					  highp vec4 tmpvar_51;
					  tmpvar_51 = (tmpvar_50 * (1.0/((1.0 + 
					    (tmpvar_49 * lightAttenSq_42)
					  ))));
					  col_43 = (lightColor0_38 * tmpvar_51.x);
					  col_43 = (col_43 + (lightColor1_39 * tmpvar_51.y));
					  col_43 = (col_43 + (lightColor2_40 * tmpvar_51.z));
					  col_43 = (col_43 + (lightColor3_41 * tmpvar_51.w));
					  tmpvar_5 = col_43;
					  mediump vec3 normal_52;
					  normal_52 = tmpvar_27;
					  mediump vec3 ambient_53;
					  mediump vec3 x1_54;
					  mediump vec4 tmpvar_55;
					  tmpvar_55 = (normal_52.xyzz * normal_52.yzzx);
					  x1_54.x = dot (unity_SHBr, tmpvar_55);
					  x1_54.y = dot (unity_SHBg, tmpvar_55);
					  x1_54.z = dot (unity_SHBb, tmpvar_55);
					  ambient_53 = ((tmpvar_5 * (
					    (tmpvar_5 * ((tmpvar_5 * 0.305306) + 0.6821711))
					   + 0.01252288)) + (x1_54 + (unity_SHC.xyz * 
					    ((normal_52.x * normal_52.x) - (normal_52.y * normal_52.y))
					  )));
					  tmpvar_5 = ambient_53;
					  gl_Position = tmpvar_23;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_32;
					  xlv_TEXCOORD2 = tmpvar_33;
					  xlv_TEXCOORD3 = tmpvar_34;
					  xlv_TEXCOORD4 = o_35;
					  xlv_TEXCOORD5 = tmpvar_8;
					  xlv_TEXCOORD6 = ambient_53;
					  xlv_TEXCOORD8 = tmpvar_6;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform lowp vec4 _LightColor0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying mediump vec3 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = tmpvar_26;
					  mediump vec3 tmpvar_33;
					  mediump vec3 tmpvar_34;
					  mediump vec4 tmpvar_35;
					  tmpvar_35.w = 1.0;
					  tmpvar_35.xyz = normalWorld_32;
					  mediump vec3 x_36;
					  x_36.x = dot (unity_SHAr, tmpvar_35);
					  x_36.y = dot (unity_SHAg, tmpvar_35);
					  x_36.z = dot (unity_SHAb, tmpvar_35);
					  tmpvar_34 = max (((1.055 * 
					    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD6 + x_36)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  mediump vec4 hdr_37;
					  hdr_37 = tmpvar_2;
					  mediump vec4 tmpvar_38;
					  tmpvar_38.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_38.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_39;
					  tmpvar_39 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_38.xyz, tmpvar_38.w);
					  mediump vec4 tmpvar_40;
					  tmpvar_40 = tmpvar_39;
					  tmpvar_33 = ((hdr_37.x * (
					    (hdr_37.w * (tmpvar_40.w - 1.0))
					   + 1.0)) * tmpvar_40.xyz);
					  lowp vec3 tmpvar_41;
					  mediump vec4 c_42;
					  highp vec3 tmpvar_43;
					  tmpvar_43 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_44;
					  mediump vec3 albedo_45;
					  albedo_45 = tmpvar_7;
					  mediump vec3 tmpvar_46;
					  tmpvar_46 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_45, vec3(_Metallic));
					  mediump float tmpvar_47;
					  tmpvar_47 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_44 = (albedo_45 * tmpvar_47);
					  tmpvar_41 = tmpvar_44;
					  mediump vec3 diffColor_48;
					  diffColor_48 = tmpvar_41;
					  mediump float alpha_49;
					  alpha_49 = tmpvar_8;
					  tmpvar_41 = diffColor_48;
					  mediump vec3 diffColor_50;
					  diffColor_50 = tmpvar_41;
					  mediump vec3 color_51;
					  mediump float surfaceReduction_52;
					  highp float specularTerm_53;
					  highp float a2_54;
					  mediump float roughness_55;
					  mediump float perceptualRoughness_56;
					  highp vec3 tmpvar_57;
					  highp vec3 inVec_58;
					  inVec_58 = (tmpvar_4 + worldViewDir_9);
					  tmpvar_57 = (inVec_58 * inversesqrt(max (0.001, 
					    dot (inVec_58, inVec_58)
					  )));
					  mediump float tmpvar_59;
					  highp float tmpvar_60;
					  tmpvar_60 = clamp (dot (tmpvar_43, tmpvar_4), 0.0, 1.0);
					  tmpvar_59 = tmpvar_60;
					  highp float tmpvar_61;
					  tmpvar_61 = clamp (dot (tmpvar_43, tmpvar_57), 0.0, 1.0);
					  mediump float tmpvar_62;
					  highp float tmpvar_63;
					  tmpvar_63 = clamp (dot (tmpvar_43, worldViewDir_9), 0.0, 1.0);
					  tmpvar_62 = tmpvar_63;
					  highp float tmpvar_64;
					  highp float smoothness_65;
					  smoothness_65 = _Glossiness;
					  tmpvar_64 = (1.0 - smoothness_65);
					  perceptualRoughness_56 = tmpvar_64;
					  highp float tmpvar_66;
					  highp float perceptualRoughness_67;
					  perceptualRoughness_67 = perceptualRoughness_56;
					  tmpvar_66 = (perceptualRoughness_67 * perceptualRoughness_67);
					  roughness_55 = tmpvar_66;
					  mediump float tmpvar_68;
					  tmpvar_68 = (roughness_55 * roughness_55);
					  a2_54 = tmpvar_68;
					  specularTerm_53 = ((roughness_55 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_57), 0.0, 1.0)) * (1.5 + roughness_55))
					   * 
					    (((tmpvar_61 * tmpvar_61) * (a2_54 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_69;
					  tmpvar_69 = clamp (specularTerm_53, 0.0, 100.0);
					  specularTerm_53 = tmpvar_69;
					  surfaceReduction_52 = (1.0 - ((roughness_55 * perceptualRoughness_56) * 0.28));
					  mediump float x_70;
					  x_70 = (1.0 - tmpvar_62);
					  mediump vec3 tmpvar_71;
					  tmpvar_71 = mix (tmpvar_46, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_47)
					  ), 0.0, 1.0)), vec3(((x_70 * x_70) * (x_70 * x_70))));
					  highp vec3 tmpvar_72;
					  tmpvar_72 = (((
					    ((diffColor_50 + (tmpvar_69 * tmpvar_46)) * tmpvar_3)
					   * tmpvar_59) + (tmpvar_34 * diffColor_50)) + ((surfaceReduction_52 * tmpvar_33) * tmpvar_71));
					  color_51 = tmpvar_72;
					  mediump vec4 tmpvar_73;
					  tmpvar_73.w = 1.0;
					  tmpvar_73.xyz = color_51;
					  c_42.xyz = tmpvar_73.xyz;
					  c_42.w = alpha_49;
					  c_6 = c_42;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out mediump vec3 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat15;
					float u_xlat21;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat21 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat21 = u_xlat21 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat15 = _Time.y * u_xlat1.x + u_xlat21;
					    u_xlat21 = _Time.y * _Frequency + u_xlat21;
					    u_xlat21 = sin(u_xlat21);
					    u_xlat21 = u_xlat21 * in_COLOR0.y;
					    u_xlat21 = u_xlat21 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat21)) + in_NORMAL0.xyz;
					    u_xlat21 = sin(u_xlat15);
					    u_xlat21 = u_xlat1.y * u_xlat21;
					    u_xlat0.y = u_xlat21 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat21 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat21 = u_xlat21 / u_xlat3.z;
					    u_xlat15 = _Time.y * u_xlat1.x + u_xlat21;
					    u_xlat21 = _Time.y * u_xlat3.x + u_xlat21;
					    u_xlat21 = sin(u_xlat21);
					    u_xlat21 = u_xlat21 * in_COLOR0.y;
					    u_xlat21 = u_xlat3.y * u_xlat21;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat3.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat15 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat15 = u_xlat15 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat15;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat15 = u_xlat1.z * in_COLOR0.y;
					    u_xlat15 = u_xlat3.z * u_xlat15;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat21));
					    u_xlat21 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat21) + abs(vec3(u_xlat15));
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1 = vec4(u_xlat21) * u_xlat2.xyzz;
					    vs_TEXCOORD1.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.wxy * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat1.w;
					    u_xlat21 = u_xlat3.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat21 * 0.5;
					    u_xlat2.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.wwzw + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.ywzx * u_xlat1;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in mediump vec3 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_9;
					float u_xlat11;
					vec2 u_xlat18;
					float u_xlat27;
					mediump float u_xlat16_30;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat10_1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat10_1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat10_1.xyz);
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat16_3.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat1.xyz * (-u_xlat16_3.xxx) + (-u_xlat0.xyz);
					    u_xlat2.z = (-_Glossiness) + 1.0;
					    u_xlat16_30 = (-u_xlat2.z) * 0.699999988 + 1.70000005;
					    u_xlat16_30 = u_xlat2.z * u_xlat16_30;
					    u_xlat16_30 = u_xlat16_30 * 6.0;
					    u_xlat10_3 = textureLod(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_30);
					    u_xlat16_4.x = u_xlat10_3.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_3.xyz * u_xlat16_4.xxx;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat11 = u_xlat27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
					#else
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat27)) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat2.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat2.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_31 = (-u_xlat11) + 1.0;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_9;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_9;
					    u_xlat18.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat18.x = texture(_CameraDepthTexture, u_xlat18.xy).x;
					    u_xlat18.x = _ZBufferParams.z * u_xlat18.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-vs_TEXCOORD4.w);
					    u_xlat18.x = u_xlat18.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
					#else
					    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
					#endif
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat18.x = u_xlat18.x * _FoamColor.w + u_xlat18.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
					#else
					    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
					#endif
					    u_xlat10_2 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * _Color;
					    u_xlat16_2 = u_xlat10_2 * _FoamColor + (-u_xlat16_3);
					    u_xlat2 = u_xlat18.xxxx * u_xlat16_2 + u_xlat16_3;
					    u_xlat16_5.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_32 = (-u_xlat16_31) + _Glossiness;
					    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat16_31);
					    SV_Target0.w = u_xlat2.w;
					    u_xlat16_31 = u_xlat16_32 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_31);
					    u_xlat16_7.xyz = vec3(u_xlat16_9) * u_xlat16_7.xyz + u_xlat16_5.xyz;
					    u_xlat16_5.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD6.xyz;
					    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_8.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_6.xyz + u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz + u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out mediump vec3 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat15;
					float u_xlat21;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat21 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat21 = u_xlat21 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat15 = _Time.y * u_xlat1.x + u_xlat21;
					    u_xlat21 = _Time.y * _Frequency + u_xlat21;
					    u_xlat21 = sin(u_xlat21);
					    u_xlat21 = u_xlat21 * in_COLOR0.y;
					    u_xlat21 = u_xlat21 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat21)) + in_NORMAL0.xyz;
					    u_xlat21 = sin(u_xlat15);
					    u_xlat21 = u_xlat1.y * u_xlat21;
					    u_xlat0.y = u_xlat21 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat21 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat21 = u_xlat21 / u_xlat3.z;
					    u_xlat15 = _Time.y * u_xlat1.x + u_xlat21;
					    u_xlat21 = _Time.y * u_xlat3.x + u_xlat21;
					    u_xlat21 = sin(u_xlat21);
					    u_xlat21 = u_xlat21 * in_COLOR0.y;
					    u_xlat21 = u_xlat3.y * u_xlat21;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat3.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat15 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat15 = u_xlat15 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat15;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat15 = u_xlat1.z * in_COLOR0.y;
					    u_xlat15 = u_xlat3.z * u_xlat15;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat21));
					    u_xlat21 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat21) + abs(vec3(u_xlat15));
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1 = vec4(u_xlat21) * u_xlat2.xyzz;
					    vs_TEXCOORD1.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.wxy * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat1.w;
					    u_xlat21 = u_xlat3.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat21 * 0.5;
					    u_xlat2.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.wwzw + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.ywzx * u_xlat1;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in mediump vec3 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec4 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat10;
					mediump float u_xlat16_10;
					mediump vec3 u_xlat16_11;
					mediump float u_xlat16_17;
					mediump float u_xlat16_18;
					float u_xlat21;
					float u_xlat22;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat10_0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat10_0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat10_0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD6.xyz;
					    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xyz = log2(u_xlat16_2.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat21 = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat21 = _ZBufferParams.z * u_xlat21 + _ZBufferParams.w;
					    u_xlat21 = float(1.0) / u_xlat21;
					    u_xlat21 = u_xlat21 + (-vs_TEXCOORD4.w);
					    u_xlat21 = u_xlat21 * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 * _FoamColor.w + u_xlat21;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat10_2 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * _Color;
					    u_xlat16_2 = u_xlat10_2 * _FoamColor + (-u_xlat16_3);
					    u_xlat2 = vec4(u_xlat21) * u_xlat16_2 + u_xlat16_3;
					    u_xlat16_4.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_11.xyz = u_xlat2.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = (-u_xlat16_4.x) + _Glossiness;
					    u_xlat16_4.x = u_xlat16_4.x + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_11.xyz;
					    u_xlat16_6.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat1.x = vs_TEXCOORD1.w;
					    u_xlat1.y = vs_TEXCOORD2.w;
					    u_xlat1.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat22 = dot(u_xlat0.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
					#else
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					#endif
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat21 = max(u_xlat21, 0.319999993);
					    u_xlat16_3.x = (-_Glossiness) + 1.0;
					    u_xlat16_10 = u_xlat16_3.x * u_xlat16_3.x + 1.5;
					    u_xlat21 = u_xlat21 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_17 = u_xlat16_10 * u_xlat16_10 + -1.0;
					    u_xlat22 = u_xlat22 * u_xlat16_17 + 1.00001001;
					    u_xlat21 = u_xlat21 * u_xlat22;
					    u_xlat21 = u_xlat16_10 / u_xlat21;
					    u_xlat16_26 = u_xlat16_3.x * u_xlat16_10;
					    u_xlat16_26 = (-u_xlat16_26) * 0.280000001 + 1.0;
					    u_xlat21 = u_xlat21 + -9.99999975e-05;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = min(u_xlat21, 100.0);
					    u_xlat10.xyz = vec3(u_xlat21) * u_xlat16_6.xyz + u_xlat16_11.xyz;
					    u_xlat10.xyz = u_xlat10.xyz * _LightColor0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
					    u_xlat16_11.x = (-u_xlat16_3.x) * 0.699999988 + 1.70000005;
					    u_xlat16_11.x = u_xlat16_3.x * u_xlat16_11.x;
					    u_xlat16_11.x = u_xlat16_11.x * 6.0;
					    u_xlat16_18 = dot((-u_xlat1.xyz), u_xlat0.xyz);
					    u_xlat16_18 = u_xlat16_18 + u_xlat16_18;
					    u_xlat16_5.xyz = u_xlat0.xyz * (-vec3(u_xlat16_18)) + (-u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat0.x) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_11.x);
					    u_xlat16_11.x = u_xlat10_0.w + -1.0;
					    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;
					    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;
					    u_xlat16_5.xyz = u_xlat10_0.xyz * u_xlat16_11.xxx;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_26);
					    u_xlat16_4.xyw = u_xlat16_4.xxx + (-u_xlat16_6.xyz);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyw + u_xlat16_6.xyz;
					    u_xlat2.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat10.xyz;
					    SV_Target0 = u_xlat2;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out mediump vec3 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat15;
					float u_xlat21;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat21 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat21 = u_xlat21 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat15 = _Time.y * u_xlat1.x + u_xlat21;
					    u_xlat21 = _Time.y * _Frequency + u_xlat21;
					    u_xlat21 = sin(u_xlat21);
					    u_xlat21 = u_xlat21 * in_COLOR0.y;
					    u_xlat21 = u_xlat21 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat21)) + in_NORMAL0.xyz;
					    u_xlat21 = sin(u_xlat15);
					    u_xlat21 = u_xlat1.y * u_xlat21;
					    u_xlat0.y = u_xlat21 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat21 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat21 = u_xlat21 / u_xlat3.z;
					    u_xlat15 = _Time.y * u_xlat1.x + u_xlat21;
					    u_xlat21 = _Time.y * u_xlat3.x + u_xlat21;
					    u_xlat21 = sin(u_xlat21);
					    u_xlat21 = u_xlat21 * in_COLOR0.y;
					    u_xlat21 = u_xlat3.y * u_xlat21;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat3.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat15 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat15 = u_xlat15 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat15;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat15 = u_xlat1.z * in_COLOR0.y;
					    u_xlat15 = u_xlat3.z * u_xlat15;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat21));
					    u_xlat21 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat21) + abs(vec3(u_xlat15));
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1 = vec4(u_xlat21) * u_xlat2.xyzz;
					    vs_TEXCOORD1.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.wxy * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat1.w;
					    u_xlat21 = u_xlat3.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat21 * 0.5;
					    u_xlat2.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.wwzw + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.ywzx * u_xlat1;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in mediump vec3 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec4 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat10;
					mediump float u_xlat16_10;
					mediump vec3 u_xlat16_11;
					mediump float u_xlat16_17;
					mediump float u_xlat16_18;
					float u_xlat21;
					float u_xlat22;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat10_0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat10_0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat10_0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD6.xyz;
					    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xyz = log2(u_xlat16_2.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat21 = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat21 = _ZBufferParams.z * u_xlat21 + _ZBufferParams.w;
					    u_xlat21 = float(1.0) / u_xlat21;
					    u_xlat21 = u_xlat21 + (-vs_TEXCOORD4.w);
					    u_xlat21 = u_xlat21 * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 * _FoamColor.w + u_xlat21;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat10_2 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * _Color;
					    u_xlat16_2 = u_xlat10_2 * _FoamColor + (-u_xlat16_3);
					    u_xlat2 = vec4(u_xlat21) * u_xlat16_2 + u_xlat16_3;
					    u_xlat16_4.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_11.xyz = u_xlat2.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = (-u_xlat16_4.x) + _Glossiness;
					    u_xlat16_4.x = u_xlat16_4.x + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_11.xyz;
					    u_xlat16_6.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat1.x = vs_TEXCOORD1.w;
					    u_xlat1.y = vs_TEXCOORD2.w;
					    u_xlat1.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat22 = dot(u_xlat0.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
					#else
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					#endif
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat21 = max(u_xlat21, 0.319999993);
					    u_xlat16_3.x = (-_Glossiness) + 1.0;
					    u_xlat16_10 = u_xlat16_3.x * u_xlat16_3.x + 1.5;
					    u_xlat21 = u_xlat21 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_17 = u_xlat16_10 * u_xlat16_10 + -1.0;
					    u_xlat22 = u_xlat22 * u_xlat16_17 + 1.00001001;
					    u_xlat21 = u_xlat21 * u_xlat22;
					    u_xlat21 = u_xlat16_10 / u_xlat21;
					    u_xlat16_26 = u_xlat16_3.x * u_xlat16_10;
					    u_xlat16_26 = (-u_xlat16_26) * 0.280000001 + 1.0;
					    u_xlat21 = u_xlat21 + -9.99999975e-05;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = min(u_xlat21, 100.0);
					    u_xlat10.xyz = vec3(u_xlat21) * u_xlat16_6.xyz + u_xlat16_11.xyz;
					    u_xlat10.xyz = u_xlat10.xyz * _LightColor0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
					    u_xlat16_11.x = (-u_xlat16_3.x) * 0.699999988 + 1.70000005;
					    u_xlat16_11.x = u_xlat16_3.x * u_xlat16_11.x;
					    u_xlat16_11.x = u_xlat16_11.x * 6.0;
					    u_xlat16_18 = dot((-u_xlat1.xyz), u_xlat0.xyz);
					    u_xlat16_18 = u_xlat16_18 + u_xlat16_18;
					    u_xlat16_5.xyz = u_xlat0.xyz * (-vec3(u_xlat16_18)) + (-u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat0.x) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_11.x);
					    u_xlat16_11.x = u_xlat10_0.w + -1.0;
					    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;
					    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;
					    u_xlat16_5.xyz = u_xlat10_0.xyz * u_xlat16_11.xxx;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_26);
					    u_xlat16_4.xyw = u_xlat16_4.xxx + (-u_xlat16_6.xyz);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyw + u_xlat16_6.xyz;
					    u_xlat2.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat10.xyz;
					    SV_Target0 = u_xlat2;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  tmpvar_5.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD8 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  lowp vec4 tmpvar_32;
					  tmpvar_32 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD8.zw);
					  mediump vec4 hdr_33;
					  hdr_33 = tmpvar_2;
					  mediump vec4 tmpvar_34;
					  tmpvar_34.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_34.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_35;
					  tmpvar_35 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_34.xyz, tmpvar_34.w);
					  mediump vec4 tmpvar_36;
					  tmpvar_36 = tmpvar_35;
					  lowp vec3 tmpvar_37;
					  mediump vec4 c_38;
					  highp vec3 tmpvar_39;
					  tmpvar_39 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_40;
					  mediump vec3 albedo_41;
					  albedo_41 = tmpvar_7;
					  mediump vec3 tmpvar_42;
					  tmpvar_42 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_41, vec3(_Metallic));
					  mediump float tmpvar_43;
					  tmpvar_43 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_40 = (albedo_41 * tmpvar_43);
					  tmpvar_37 = tmpvar_40;
					  mediump vec3 diffColor_44;
					  diffColor_44 = tmpvar_37;
					  mediump float alpha_45;
					  alpha_45 = tmpvar_8;
					  tmpvar_37 = diffColor_44;
					  mediump vec3 diffColor_46;
					  diffColor_46 = tmpvar_37;
					  mediump vec3 color_47;
					  mediump vec2 rlPow4AndFresnelTerm_48;
					  mediump float tmpvar_49;
					  highp float tmpvar_50;
					  tmpvar_50 = clamp (dot (tmpvar_39, tmpvar_4), 0.0, 1.0);
					  tmpvar_49 = tmpvar_50;
					  mediump float tmpvar_51;
					  highp float tmpvar_52;
					  tmpvar_52 = clamp (dot (tmpvar_39, worldViewDir_9), 0.0, 1.0);
					  tmpvar_51 = tmpvar_52;
					  highp vec2 tmpvar_53;
					  tmpvar_53.x = dot ((worldViewDir_9 - (2.0 * 
					    (dot (tmpvar_39, worldViewDir_9) * tmpvar_39)
					  )), tmpvar_4);
					  tmpvar_53.y = (1.0 - tmpvar_51);
					  highp vec2 tmpvar_54;
					  tmpvar_54 = ((tmpvar_53 * tmpvar_53) * (tmpvar_53 * tmpvar_53));
					  rlPow4AndFresnelTerm_48 = tmpvar_54;
					  mediump float tmpvar_55;
					  tmpvar_55 = rlPow4AndFresnelTerm_48.x;
					  mediump float specular_56;
					  highp float smoothness_57;
					  smoothness_57 = _Glossiness;
					  highp vec2 tmpvar_58;
					  tmpvar_58.x = tmpvar_55;
					  tmpvar_58.y = (1.0 - smoothness_57);
					  highp float tmpvar_59;
					  tmpvar_59 = (texture2D (unity_NHxRoughness, tmpvar_58).x * 16.0);
					  specular_56 = tmpvar_59;
					  color_47 = ((diffColor_46 + (specular_56 * tmpvar_42)) * (tmpvar_3 * tmpvar_49));
					  color_47 = (color_47 + ((
					    pow (((unity_DynamicLightmap_HDR.x * tmpvar_32.w) * tmpvar_32.xyz), unity_DynamicLightmap_HDR.yyy)
					   * diffColor_46) + (
					    ((hdr_33.x * ((hdr_33.w * 
					      (tmpvar_36.w - 1.0)
					    ) + 1.0)) * tmpvar_36.xyz)
					   * 
					    mix (tmpvar_42, vec3(clamp ((_Glossiness + (1.0 - tmpvar_43)), 0.0, 1.0)), rlPow4AndFresnelTerm_48.yyy)
					  )));
					  mediump vec4 tmpvar_60;
					  tmpvar_60.w = 1.0;
					  tmpvar_60.xyz = color_47;
					  c_38.xyz = tmpvar_60.xyz;
					  c_38.w = alpha_45;
					  c_6 = c_38;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  tmpvar_5.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD8 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 tmpvar_32;
					  mediump vec3 tmpvar_33;
					  lowp vec4 tmpvar_34;
					  tmpvar_34 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD8.zw);
					  tmpvar_33 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_34.w) * tmpvar_34.xyz), unity_DynamicLightmap_HDR.yyy);
					  mediump vec4 hdr_35;
					  hdr_35 = tmpvar_2;
					  mediump vec4 tmpvar_36;
					  tmpvar_36.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_36.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_37;
					  tmpvar_37 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_36.xyz, tmpvar_36.w);
					  mediump vec4 tmpvar_38;
					  tmpvar_38 = tmpvar_37;
					  tmpvar_32 = ((hdr_35.x * (
					    (hdr_35.w * (tmpvar_38.w - 1.0))
					   + 1.0)) * tmpvar_38.xyz);
					  lowp vec3 tmpvar_39;
					  mediump vec4 c_40;
					  highp vec3 tmpvar_41;
					  tmpvar_41 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_42;
					  mediump vec3 albedo_43;
					  albedo_43 = tmpvar_7;
					  mediump vec3 tmpvar_44;
					  tmpvar_44 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_43, vec3(_Metallic));
					  mediump float tmpvar_45;
					  tmpvar_45 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_42 = (albedo_43 * tmpvar_45);
					  tmpvar_39 = tmpvar_42;
					  mediump vec3 diffColor_46;
					  diffColor_46 = tmpvar_39;
					  mediump float alpha_47;
					  alpha_47 = tmpvar_8;
					  tmpvar_39 = diffColor_46;
					  mediump vec3 diffColor_48;
					  diffColor_48 = tmpvar_39;
					  mediump vec3 color_49;
					  mediump float surfaceReduction_50;
					  highp float specularTerm_51;
					  highp float a2_52;
					  mediump float roughness_53;
					  mediump float perceptualRoughness_54;
					  highp vec3 tmpvar_55;
					  highp vec3 inVec_56;
					  inVec_56 = (tmpvar_4 + worldViewDir_9);
					  tmpvar_55 = (inVec_56 * inversesqrt(max (0.001, 
					    dot (inVec_56, inVec_56)
					  )));
					  mediump float tmpvar_57;
					  highp float tmpvar_58;
					  tmpvar_58 = clamp (dot (tmpvar_41, tmpvar_4), 0.0, 1.0);
					  tmpvar_57 = tmpvar_58;
					  highp float tmpvar_59;
					  tmpvar_59 = clamp (dot (tmpvar_41, tmpvar_55), 0.0, 1.0);
					  mediump float tmpvar_60;
					  highp float tmpvar_61;
					  tmpvar_61 = clamp (dot (tmpvar_41, worldViewDir_9), 0.0, 1.0);
					  tmpvar_60 = tmpvar_61;
					  highp float tmpvar_62;
					  highp float smoothness_63;
					  smoothness_63 = _Glossiness;
					  tmpvar_62 = (1.0 - smoothness_63);
					  perceptualRoughness_54 = tmpvar_62;
					  highp float tmpvar_64;
					  highp float perceptualRoughness_65;
					  perceptualRoughness_65 = perceptualRoughness_54;
					  tmpvar_64 = (perceptualRoughness_65 * perceptualRoughness_65);
					  roughness_53 = tmpvar_64;
					  mediump float tmpvar_66;
					  tmpvar_66 = (roughness_53 * roughness_53);
					  a2_52 = tmpvar_66;
					  specularTerm_51 = ((roughness_53 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_55), 0.0, 1.0)) * (1.5 + roughness_53))
					   * 
					    (((tmpvar_59 * tmpvar_59) * (a2_52 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (specularTerm_51, 0.0, 100.0);
					  specularTerm_51 = tmpvar_67;
					  surfaceReduction_50 = (1.0 - ((roughness_53 * perceptualRoughness_54) * 0.28));
					  mediump float x_68;
					  x_68 = (1.0 - tmpvar_60);
					  mediump vec3 tmpvar_69;
					  tmpvar_69 = mix (tmpvar_44, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_45)
					  ), 0.0, 1.0)), vec3(((x_68 * x_68) * (x_68 * x_68))));
					  highp vec3 tmpvar_70;
					  tmpvar_70 = (((
					    ((diffColor_48 + (tmpvar_67 * tmpvar_44)) * tmpvar_3)
					   * tmpvar_57) + (tmpvar_33 * diffColor_48)) + ((surfaceReduction_50 * tmpvar_32) * tmpvar_69));
					  color_49 = tmpvar_70;
					  mediump vec4 tmpvar_71;
					  tmpvar_71.w = 1.0;
					  tmpvar_71.xyz = color_49;
					  c_40.xyz = tmpvar_71.xyz;
					  c_40.w = alpha_47;
					  c_6 = c_40;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  tmpvar_5.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD8 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 tmpvar_32;
					  mediump vec3 tmpvar_33;
					  lowp vec4 tmpvar_34;
					  tmpvar_34 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD8.zw);
					  tmpvar_33 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_34.w) * tmpvar_34.xyz), unity_DynamicLightmap_HDR.yyy);
					  mediump vec4 hdr_35;
					  hdr_35 = tmpvar_2;
					  mediump vec4 tmpvar_36;
					  tmpvar_36.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_36.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_37;
					  tmpvar_37 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_36.xyz, tmpvar_36.w);
					  mediump vec4 tmpvar_38;
					  tmpvar_38 = tmpvar_37;
					  tmpvar_32 = ((hdr_35.x * (
					    (hdr_35.w * (tmpvar_38.w - 1.0))
					   + 1.0)) * tmpvar_38.xyz);
					  lowp vec3 tmpvar_39;
					  mediump vec4 c_40;
					  highp vec3 tmpvar_41;
					  tmpvar_41 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_42;
					  mediump vec3 albedo_43;
					  albedo_43 = tmpvar_7;
					  mediump vec3 tmpvar_44;
					  tmpvar_44 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_43, vec3(_Metallic));
					  mediump float tmpvar_45;
					  tmpvar_45 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_42 = (albedo_43 * tmpvar_45);
					  tmpvar_39 = tmpvar_42;
					  mediump vec3 diffColor_46;
					  diffColor_46 = tmpvar_39;
					  mediump float alpha_47;
					  alpha_47 = tmpvar_8;
					  tmpvar_39 = diffColor_46;
					  mediump vec3 diffColor_48;
					  diffColor_48 = tmpvar_39;
					  mediump vec3 color_49;
					  mediump float surfaceReduction_50;
					  highp float specularTerm_51;
					  highp float a2_52;
					  mediump float roughness_53;
					  mediump float perceptualRoughness_54;
					  highp vec3 tmpvar_55;
					  highp vec3 inVec_56;
					  inVec_56 = (tmpvar_4 + worldViewDir_9);
					  tmpvar_55 = (inVec_56 * inversesqrt(max (0.001, 
					    dot (inVec_56, inVec_56)
					  )));
					  mediump float tmpvar_57;
					  highp float tmpvar_58;
					  tmpvar_58 = clamp (dot (tmpvar_41, tmpvar_4), 0.0, 1.0);
					  tmpvar_57 = tmpvar_58;
					  highp float tmpvar_59;
					  tmpvar_59 = clamp (dot (tmpvar_41, tmpvar_55), 0.0, 1.0);
					  mediump float tmpvar_60;
					  highp float tmpvar_61;
					  tmpvar_61 = clamp (dot (tmpvar_41, worldViewDir_9), 0.0, 1.0);
					  tmpvar_60 = tmpvar_61;
					  highp float tmpvar_62;
					  highp float smoothness_63;
					  smoothness_63 = _Glossiness;
					  tmpvar_62 = (1.0 - smoothness_63);
					  perceptualRoughness_54 = tmpvar_62;
					  highp float tmpvar_64;
					  highp float perceptualRoughness_65;
					  perceptualRoughness_65 = perceptualRoughness_54;
					  tmpvar_64 = (perceptualRoughness_65 * perceptualRoughness_65);
					  roughness_53 = tmpvar_64;
					  mediump float tmpvar_66;
					  tmpvar_66 = (roughness_53 * roughness_53);
					  a2_52 = tmpvar_66;
					  specularTerm_51 = ((roughness_53 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_55), 0.0, 1.0)) * (1.5 + roughness_53))
					   * 
					    (((tmpvar_59 * tmpvar_59) * (a2_52 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (specularTerm_51, 0.0, 100.0);
					  specularTerm_51 = tmpvar_67;
					  surfaceReduction_50 = (1.0 - ((roughness_53 * perceptualRoughness_54) * 0.28));
					  mediump float x_68;
					  x_68 = (1.0 - tmpvar_60);
					  mediump vec3 tmpvar_69;
					  tmpvar_69 = mix (tmpvar_44, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_45)
					  ), 0.0, 1.0)), vec3(((x_68 * x_68) * (x_68 * x_68))));
					  highp vec3 tmpvar_70;
					  tmpvar_70 = (((
					    ((diffColor_48 + (tmpvar_67 * tmpvar_44)) * tmpvar_3)
					   * tmpvar_57) + (tmpvar_33 * diffColor_48)) + ((surfaceReduction_50 * tmpvar_32) * tmpvar_69));
					  color_49 = tmpvar_70;
					  mediump vec4 tmpvar_71;
					  tmpvar_71.w = 1.0;
					  tmpvar_71.xyz = color_49;
					  c_40.xyz = tmpvar_71.xyz;
					  c_40.w = alpha_47;
					  c_6 = c_40;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD9;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump float u_xlat16_10;
					vec2 u_xlat20;
					float u_xlat30;
					mediump float u_xlat16_31;
					float u_xlat32;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD9.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat10_2.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, u_xlat10_2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD2.xyz, u_xlat10_2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD3.xyz, u_xlat10_2.xyz);
					    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat3.xyz;
					    u_xlat16_31 = dot((-u_xlat0.xyz), u_xlat2.xyz);
					    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
					    u_xlat16_4.xyz = u_xlat2.xyz * (-vec3(u_xlat16_31)) + (-u_xlat0.xyz);
					    u_xlat3.z = (-_Glossiness) + 1.0;
					    u_xlat16_31 = (-u_xlat3.z) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat16_31 * u_xlat3.z;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat10_4 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_31);
					    u_xlat16_31 = u_xlat10_4.w + -1.0;
					    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;
					    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;
					    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(u_xlat16_31);
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat32 = u_xlat30;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
					#else
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					#endif
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat0.xyz = u_xlat2.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = vec3(u_xlat30) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat3.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_31 = (-u_xlat32) + 1.0;
					    u_xlat16_10 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_10 = u_xlat16_31 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_31 * u_xlat16_10;
					    u_xlat20.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat20.x = texture(_CameraDepthTexture, u_xlat20.xy).x;
					    u_xlat20.x = _ZBufferParams.z * u_xlat20.x + _ZBufferParams.w;
					    u_xlat20.x = float(1.0) / u_xlat20.x;
					    u_xlat20.x = u_xlat20.x + (-vs_TEXCOORD4.w);
					    u_xlat20.x = u_xlat20.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
					#else
					    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
					#endif
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat20.x = u_xlat20.x * _FoamColor.w + u_xlat20.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
					#else
					    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
					#endif
					    u_xlat10_2 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * _Color;
					    u_xlat16_2 = u_xlat10_2 * _FoamColor + (-u_xlat16_3);
					    u_xlat2 = u_xlat20.xxxx * u_xlat16_2 + u_xlat16_3;
					    u_xlat16_7.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_35 = (-u_xlat16_31) + _Glossiness;
					    u_xlat16_8.xyz = vec3(u_xlat16_31) * u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    u_xlat16_31 = u_xlat16_35 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_31);
					    u_xlat16_9.xyz = vec3(u_xlat16_10) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_9.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_5.xyz;
					    SV_Target0.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_1.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD9;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					lowp vec4 u_xlat10_0;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_6;
					lowp vec3 u_xlat10_6;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_11;
					mediump float u_xlat16_19;
					mediump float u_xlat16_25;
					float u_xlat26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD9.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
					    u_xlat0.x = u_xlat0.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _FoamColor.w + u_xlat0.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat10_2 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * _Color;
					    u_xlat16_2 = u_xlat10_2 * _FoamColor + (-u_xlat16_3);
					    u_xlat0 = u_xlat0.xxxx * u_xlat16_2 + u_xlat16_3;
					    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = u_xlat0.xyz * vec3(u_xlat16_25);
					    u_xlat16_25 = (-u_xlat16_25) + _Glossiness;
					    u_xlat16_25 = u_xlat16_25 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    u_xlat16_5.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat26) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat26) * u_xlat2.xyz;
					    u_xlat26 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat26 = max(u_xlat26, 0.00100000005);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat3.xyz = vec3(u_xlat26) * u_xlat3.xyz;
					    u_xlat26 = dot(_WorldSpaceLightPos0.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
					#else
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					#endif
					    u_xlat26 = max(u_xlat26, 0.319999993);
					    u_xlat16_27 = (-_Glossiness) + 1.0;
					    u_xlat16_6 = u_xlat16_27 * u_xlat16_27 + 1.5;
					    u_xlat26 = u_xlat26 * u_xlat16_6;
					    u_xlat10_6.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat7.x = dot(vs_TEXCOORD1.xyz, u_xlat10_6.xyz);
					    u_xlat7.y = dot(vs_TEXCOORD2.xyz, u_xlat10_6.xyz);
					    u_xlat7.z = dot(vs_TEXCOORD3.xyz, u_xlat10_6.xyz);
					    u_xlat6.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat7.xyz;
					    u_xlat3.x = dot(u_xlat6.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16_11 = u_xlat16_27 * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_11 * u_xlat16_11 + -1.0;
					    u_xlat3.x = u_xlat3.x * u_xlat16_19 + 1.00001001;
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat26 = u_xlat16_11 / u_xlat26;
					    u_xlat16_28 = u_xlat16_27 * u_xlat16_11;
					    u_xlat16_28 = (-u_xlat16_28) * 0.280000001 + 1.0;
					    u_xlat26 = u_xlat26 + -9.99999975e-05;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat26 = min(u_xlat26, 100.0);
					    u_xlat3.xyz = vec3(u_xlat26) * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _LightColor0.xyz;
					    u_xlat26 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
					#else
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					#endif
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat26) + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-u_xlat16_27) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat16_9 = dot((-u_xlat2.xyz), u_xlat6.xyz);
					    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
					    u_xlat16_4.xyz = u_xlat6.xyz * (-vec3(u_xlat16_9)) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = (-u_xlat2.x) + 1.0;
					    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
					    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat10_2.w + -1.0;
					    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_2.xyz * u_xlat16_1.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_28);
					    u_xlat16_1.xzw = vec3(u_xlat16_25) + (-u_xlat16_5.xyz);
					    u_xlat16_1.xyz = vec3(u_xlat16_9) * u_xlat16_1.xzw + u_xlat16_5.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat3.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD9;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					lowp vec4 u_xlat10_0;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_6;
					lowp vec3 u_xlat10_6;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_11;
					mediump float u_xlat16_19;
					mediump float u_xlat16_25;
					float u_xlat26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD9.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
					    u_xlat0.x = u_xlat0.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _FoamColor.w + u_xlat0.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat10_2 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * _Color;
					    u_xlat16_2 = u_xlat10_2 * _FoamColor + (-u_xlat16_3);
					    u_xlat0 = u_xlat0.xxxx * u_xlat16_2 + u_xlat16_3;
					    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = u_xlat0.xyz * vec3(u_xlat16_25);
					    u_xlat16_25 = (-u_xlat16_25) + _Glossiness;
					    u_xlat16_25 = u_xlat16_25 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    u_xlat16_5.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat26) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat26) * u_xlat2.xyz;
					    u_xlat26 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat26 = max(u_xlat26, 0.00100000005);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat3.xyz = vec3(u_xlat26) * u_xlat3.xyz;
					    u_xlat26 = dot(_WorldSpaceLightPos0.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
					#else
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					#endif
					    u_xlat26 = max(u_xlat26, 0.319999993);
					    u_xlat16_27 = (-_Glossiness) + 1.0;
					    u_xlat16_6 = u_xlat16_27 * u_xlat16_27 + 1.5;
					    u_xlat26 = u_xlat26 * u_xlat16_6;
					    u_xlat10_6.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat7.x = dot(vs_TEXCOORD1.xyz, u_xlat10_6.xyz);
					    u_xlat7.y = dot(vs_TEXCOORD2.xyz, u_xlat10_6.xyz);
					    u_xlat7.z = dot(vs_TEXCOORD3.xyz, u_xlat10_6.xyz);
					    u_xlat6.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat7.xyz;
					    u_xlat3.x = dot(u_xlat6.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16_11 = u_xlat16_27 * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_11 * u_xlat16_11 + -1.0;
					    u_xlat3.x = u_xlat3.x * u_xlat16_19 + 1.00001001;
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat26 = u_xlat16_11 / u_xlat26;
					    u_xlat16_28 = u_xlat16_27 * u_xlat16_11;
					    u_xlat16_28 = (-u_xlat16_28) * 0.280000001 + 1.0;
					    u_xlat26 = u_xlat26 + -9.99999975e-05;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat26 = min(u_xlat26, 100.0);
					    u_xlat3.xyz = vec3(u_xlat26) * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * _LightColor0.xyz;
					    u_xlat26 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
					#else
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					#endif
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat26) + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-u_xlat16_27) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat16_9 = dot((-u_xlat2.xyz), u_xlat6.xyz);
					    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
					    u_xlat16_4.xyz = u_xlat6.xyz * (-vec3(u_xlat16_9)) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = (-u_xlat2.x) + 1.0;
					    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
					    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat10_2.w + -1.0;
					    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_2.xyz * u_xlat16_1.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_28);
					    u_xlat16_1.xzw = vec3(u_xlat16_25) + (-u_xlat16_5.xyz);
					    u_xlat16_1.xyz = vec3(u_xlat16_9) * u_xlat16_1.xzw + u_xlat16_5.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat3.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  tmpvar_5.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD8 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = tmpvar_26;
					  mediump vec4 realtimeDirTex_33;
					  lowp vec4 tmpvar_34;
					  tmpvar_34 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD8.zw);
					  lowp vec4 tmpvar_35;
					  tmpvar_35 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD8.zw);
					  realtimeDirTex_33 = tmpvar_35;
					  lowp vec4 dirTex_36;
					  dirTex_36 = realtimeDirTex_33;
					  lowp vec3 y_37;
					  y_37 = (dirTex_36.xyz - 0.5);
					  lowp float tmpvar_38;
					  tmpvar_38 = max (0.0001, dirTex_36.w);
					  mediump vec4 hdr_39;
					  hdr_39 = tmpvar_2;
					  mediump vec4 tmpvar_40;
					  tmpvar_40.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_40.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_41;
					  tmpvar_41 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_40.xyz, tmpvar_40.w);
					  mediump vec4 tmpvar_42;
					  tmpvar_42 = tmpvar_41;
					  lowp vec3 tmpvar_43;
					  mediump vec4 c_44;
					  highp vec3 tmpvar_45;
					  tmpvar_45 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_46;
					  mediump vec3 albedo_47;
					  albedo_47 = tmpvar_7;
					  mediump vec3 tmpvar_48;
					  tmpvar_48 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_47, vec3(_Metallic));
					  mediump float tmpvar_49;
					  tmpvar_49 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_46 = (albedo_47 * tmpvar_49);
					  tmpvar_43 = tmpvar_46;
					  mediump vec3 diffColor_50;
					  diffColor_50 = tmpvar_43;
					  mediump float alpha_51;
					  alpha_51 = tmpvar_8;
					  tmpvar_43 = diffColor_50;
					  mediump vec3 diffColor_52;
					  diffColor_52 = tmpvar_43;
					  mediump vec3 color_53;
					  mediump vec2 rlPow4AndFresnelTerm_54;
					  mediump float tmpvar_55;
					  highp float tmpvar_56;
					  tmpvar_56 = clamp (dot (tmpvar_45, tmpvar_4), 0.0, 1.0);
					  tmpvar_55 = tmpvar_56;
					  mediump float tmpvar_57;
					  highp float tmpvar_58;
					  tmpvar_58 = clamp (dot (tmpvar_45, worldViewDir_9), 0.0, 1.0);
					  tmpvar_57 = tmpvar_58;
					  highp vec2 tmpvar_59;
					  tmpvar_59.x = dot ((worldViewDir_9 - (2.0 * 
					    (dot (tmpvar_45, worldViewDir_9) * tmpvar_45)
					  )), tmpvar_4);
					  tmpvar_59.y = (1.0 - tmpvar_57);
					  highp vec2 tmpvar_60;
					  tmpvar_60 = ((tmpvar_59 * tmpvar_59) * (tmpvar_59 * tmpvar_59));
					  rlPow4AndFresnelTerm_54 = tmpvar_60;
					  mediump float tmpvar_61;
					  tmpvar_61 = rlPow4AndFresnelTerm_54.x;
					  mediump float specular_62;
					  highp float smoothness_63;
					  smoothness_63 = _Glossiness;
					  highp vec2 tmpvar_64;
					  tmpvar_64.x = tmpvar_61;
					  tmpvar_64.y = (1.0 - smoothness_63);
					  highp float tmpvar_65;
					  tmpvar_65 = (texture2D (unity_NHxRoughness, tmpvar_64).x * 16.0);
					  specular_62 = tmpvar_65;
					  color_53 = ((diffColor_52 + (specular_62 * tmpvar_48)) * (tmpvar_3 * tmpvar_55));
					  color_53 = (color_53 + ((
					    ((pow ((
					      (unity_DynamicLightmap_HDR.x * tmpvar_34.w)
					     * tmpvar_34.xyz), unity_DynamicLightmap_HDR.yyy) * (dot (normalWorld_32, y_37) + 0.5)) / tmpvar_38)
					   * diffColor_52) + (
					    ((hdr_39.x * ((hdr_39.w * 
					      (tmpvar_42.w - 1.0)
					    ) + 1.0)) * tmpvar_42.xyz)
					   * 
					    mix (tmpvar_48, vec3(clamp ((_Glossiness + (1.0 - tmpvar_49)), 0.0, 1.0)), rlPow4AndFresnelTerm_54.yyy)
					  )));
					  mediump vec4 tmpvar_66;
					  tmpvar_66.w = 1.0;
					  tmpvar_66.xyz = color_53;
					  c_44.xyz = tmpvar_66.xyz;
					  c_44.w = alpha_51;
					  c_6 = c_44;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  tmpvar_5.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD8 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = tmpvar_26;
					  mediump vec3 tmpvar_33;
					  mediump vec4 realtimeDirTex_34;
					  mediump vec3 tmpvar_35;
					  lowp vec4 tmpvar_36;
					  tmpvar_36 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD8.zw);
					  lowp vec4 tmpvar_37;
					  tmpvar_37 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD8.zw);
					  realtimeDirTex_34 = tmpvar_37;
					  lowp vec4 dirTex_38;
					  dirTex_38 = realtimeDirTex_34;
					  lowp vec3 y_39;
					  y_39 = (dirTex_38.xyz - 0.5);
					  lowp float tmpvar_40;
					  tmpvar_40 = max (0.0001, dirTex_38.w);
					  tmpvar_35 = ((pow (
					    ((unity_DynamicLightmap_HDR.x * tmpvar_36.w) * tmpvar_36.xyz)
					  , unity_DynamicLightmap_HDR.yyy) * (
					    dot (normalWorld_32, y_39)
					   + 0.5)) / tmpvar_40);
					  mediump vec4 hdr_41;
					  hdr_41 = tmpvar_2;
					  mediump vec4 tmpvar_42;
					  tmpvar_42.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_42.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_43;
					  tmpvar_43 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42.xyz, tmpvar_42.w);
					  mediump vec4 tmpvar_44;
					  tmpvar_44 = tmpvar_43;
					  tmpvar_33 = ((hdr_41.x * (
					    (hdr_41.w * (tmpvar_44.w - 1.0))
					   + 1.0)) * tmpvar_44.xyz);
					  lowp vec3 tmpvar_45;
					  mediump vec4 c_46;
					  highp vec3 tmpvar_47;
					  tmpvar_47 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_48;
					  mediump vec3 albedo_49;
					  albedo_49 = tmpvar_7;
					  mediump vec3 tmpvar_50;
					  tmpvar_50 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_49, vec3(_Metallic));
					  mediump float tmpvar_51;
					  tmpvar_51 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_48 = (albedo_49 * tmpvar_51);
					  tmpvar_45 = tmpvar_48;
					  mediump vec3 diffColor_52;
					  diffColor_52 = tmpvar_45;
					  mediump float alpha_53;
					  alpha_53 = tmpvar_8;
					  tmpvar_45 = diffColor_52;
					  mediump vec3 diffColor_54;
					  diffColor_54 = tmpvar_45;
					  mediump vec3 color_55;
					  mediump float surfaceReduction_56;
					  highp float specularTerm_57;
					  highp float a2_58;
					  mediump float roughness_59;
					  mediump float perceptualRoughness_60;
					  highp vec3 tmpvar_61;
					  highp vec3 inVec_62;
					  inVec_62 = (tmpvar_4 + worldViewDir_9);
					  tmpvar_61 = (inVec_62 * inversesqrt(max (0.001, 
					    dot (inVec_62, inVec_62)
					  )));
					  mediump float tmpvar_63;
					  highp float tmpvar_64;
					  tmpvar_64 = clamp (dot (tmpvar_47, tmpvar_4), 0.0, 1.0);
					  tmpvar_63 = tmpvar_64;
					  highp float tmpvar_65;
					  tmpvar_65 = clamp (dot (tmpvar_47, tmpvar_61), 0.0, 1.0);
					  mediump float tmpvar_66;
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (dot (tmpvar_47, worldViewDir_9), 0.0, 1.0);
					  tmpvar_66 = tmpvar_67;
					  highp float tmpvar_68;
					  highp float smoothness_69;
					  smoothness_69 = _Glossiness;
					  tmpvar_68 = (1.0 - smoothness_69);
					  perceptualRoughness_60 = tmpvar_68;
					  highp float tmpvar_70;
					  highp float perceptualRoughness_71;
					  perceptualRoughness_71 = perceptualRoughness_60;
					  tmpvar_70 = (perceptualRoughness_71 * perceptualRoughness_71);
					  roughness_59 = tmpvar_70;
					  mediump float tmpvar_72;
					  tmpvar_72 = (roughness_59 * roughness_59);
					  a2_58 = tmpvar_72;
					  specularTerm_57 = ((roughness_59 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_61), 0.0, 1.0)) * (1.5 + roughness_59))
					   * 
					    (((tmpvar_65 * tmpvar_65) * (a2_58 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_73;
					  tmpvar_73 = clamp (specularTerm_57, 0.0, 100.0);
					  specularTerm_57 = tmpvar_73;
					  surfaceReduction_56 = (1.0 - ((roughness_59 * perceptualRoughness_60) * 0.28));
					  mediump float x_74;
					  x_74 = (1.0 - tmpvar_66);
					  mediump vec3 tmpvar_75;
					  tmpvar_75 = mix (tmpvar_50, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_51)
					  ), 0.0, 1.0)), vec3(((x_74 * x_74) * (x_74 * x_74))));
					  highp vec3 tmpvar_76;
					  tmpvar_76 = (((
					    ((diffColor_54 + (tmpvar_73 * tmpvar_50)) * tmpvar_3)
					   * tmpvar_63) + (tmpvar_35 * diffColor_54)) + ((surfaceReduction_56 * tmpvar_33) * tmpvar_75));
					  color_55 = tmpvar_76;
					  mediump vec4 tmpvar_77;
					  tmpvar_77.w = 1.0;
					  tmpvar_77.xyz = color_55;
					  c_46.xyz = tmpvar_77.xyz;
					  c_46.w = alpha_53;
					  c_6 = c_46;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = _glesVertex.w;
					  highp vec4 tmpvar_7;
					  highp float result_8;
					  result_8 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_8 = (result_8 / _Period);
					  highp vec4 vertColor_9;
					  vertColor_9 = tmpvar_1;
					  highp vec3 tmpvar_10;
					  tmpvar_10.xz = vec2(0.0, 0.0);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_12;
					  tmpvar_12 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_10.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_8)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_9.y);
					  tmpvar_6.xyz = (_glesVertex.xyz + tmpvar_10);
					  highp vec4 vertColor_13;
					  vertColor_13 = tmpvar_1;
					  highp float result_14;
					  result_14 = (((_WaveDir02.x * tmpvar_6.x) + (_WaveDir02.y * tmpvar_6.y)) + (_WaveDir02.z * tmpvar_6.z));
					  result_14 = (result_14 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_15;
					  vertColor_15 = tmpvar_1;
					  highp vec3 tmpvar_16;
					  tmpvar_16.xz = vec2(0.0, 0.0);
					  tmpvar_16.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_14)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_15.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_16);
					  highp vec4 vertColor_17;
					  vertColor_17 = tmpvar_1;
					  highp float result_18;
					  result_18 = (((_WaveDir03.x * tmpvar_6.x) + (_WaveDir03.y * tmpvar_6.y)) + (_WaveDir03.z * tmpvar_6.z));
					  result_18 = (result_18 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_19;
					  vertColor_19 = tmpvar_1;
					  highp vec3 tmpvar_20;
					  tmpvar_20.xz = vec2(0.0, 0.0);
					  tmpvar_20.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_11)) + result_18)
					  ) * (_Amplitude + tmpvar_12)) * vertColor_19.y);
					  tmpvar_6.xyz = (tmpvar_6.xyz + tmpvar_20);
					  highp vec4 vertColor_21;
					  vertColor_21 = tmpvar_1;
					  highp vec4 tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = tmpvar_6.xyz;
					  tmpvar_22 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_23));
					  highp vec3 tmpvar_24;
					  tmpvar_24 = (unity_ObjectToWorld * tmpvar_6).xyz;
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_WorldToObject[0].xyz;
					  tmpvar_25[1] = unity_WorldToObject[1].xyz;
					  tmpvar_25[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_8))
					       * vertColor_13.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_11)
					       + result_14)) * vertColor_17.y) * tmpvar_12)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_18))
					     * vertColor_21.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_25));
					  highp mat3 tmpvar_27;
					  tmpvar_27[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_27[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_27[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize((tmpvar_27 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_28;
					  highp float tmpvar_29;
					  tmpvar_29 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_29;
					  highp vec3 tmpvar_30;
					  tmpvar_30 = (((tmpvar_26.yzx * worldTangent_4.zxy) - (tmpvar_26.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.x;
					  tmpvar_31.y = worldBinormal_2.x;
					  tmpvar_31.z = tmpvar_26.x;
					  tmpvar_31.w = tmpvar_24.x;
					  highp vec4 tmpvar_32;
					  tmpvar_32.x = worldTangent_4.y;
					  tmpvar_32.y = worldBinormal_2.y;
					  tmpvar_32.z = tmpvar_26.y;
					  tmpvar_32.w = tmpvar_24.y;
					  highp vec4 tmpvar_33;
					  tmpvar_33.x = worldTangent_4.z;
					  tmpvar_33.y = worldBinormal_2.z;
					  tmpvar_33.z = tmpvar_26.z;
					  tmpvar_33.w = tmpvar_24.z;
					  highp vec4 o_34;
					  highp vec4 tmpvar_35;
					  tmpvar_35 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = tmpvar_35.x;
					  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
					  o_34.xy = (tmpvar_36 + tmpvar_35.w);
					  o_34.zw = tmpvar_22.zw;
					  tmpvar_5.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_31;
					  xlv_TEXCOORD2 = tmpvar_32;
					  xlv_TEXCOORD3 = tmpvar_33;
					  xlv_TEXCOORD4 = o_34;
					  xlv_TEXCOORD5 = tmpvar_7;
					  xlv_TEXCOORD8 = tmpvar_5;
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_shader_texture_lod : enable
					lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
					{
					#if defined(GL_EXT_shader_texture_lod)
						return textureCubeLodEXT(sampler, coord, lod);
					#else
						return textureCube(sampler, coord, lod);
					#endif
					}
					
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform sampler2D unity_DynamicLightmap;
					uniform sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					uniform mediump vec4 unity_SpecCube0_HDR;
					uniform mediump vec4 unity_DynamicLightmap_HDR;
					uniform lowp vec4 _LightColor0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD8;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  mediump vec3 tmpvar_4;
					  highp vec3 worldN_5;
					  lowp vec4 c_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = xlv_TEXCOORD1.xyz;
					  _unity_tbn_0_13 = tmpvar_14;
					  highp vec3 tmpvar_15;
					  tmpvar_15 = xlv_TEXCOORD2.xyz;
					  _unity_tbn_1_12 = tmpvar_15;
					  highp vec3 tmpvar_16;
					  tmpvar_16 = xlv_TEXCOORD3.xyz;
					  _unity_tbn_2_11 = tmpvar_16;
					  highp vec3 tmpvar_17;
					  tmpvar_17.x = xlv_TEXCOORD1.w;
					  tmpvar_17.y = xlv_TEXCOORD2.w;
					  tmpvar_17.z = xlv_TEXCOORD3.w;
					  mediump vec3 tmpvar_18;
					  tmpvar_18 = _WorldSpaceLightPos0.xyz;
					  lightDir_10 = tmpvar_18;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - tmpvar_17));
					  highp vec3 tmpvar_19;
					  highp vec4 depthSample_20;
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_20 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_20.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((tmpvar_22 + (tmpvar_22 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_24;
					  tmpvar_24 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_23));
					  lowp vec3 tmpvar_25;
					  tmpvar_25 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_19 = tmpvar_25;
					  tmpvar_7 = tmpvar_24.xyz;
					  tmpvar_8 = tmpvar_24.w;
					  worldN_5.x = dot (_unity_tbn_0_13, tmpvar_19);
					  worldN_5.y = dot (_unity_tbn_1_12, tmpvar_19);
					  worldN_5.z = dot (_unity_tbn_2_11, tmpvar_19);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_5);
					  worldN_5 = tmpvar_26;
					  tmpvar_3 = _LightColor0.xyz;
					  tmpvar_4 = lightDir_10;
					  tmpvar_1 = worldViewDir_9;
					  tmpvar_2 = unity_SpecCube0_HDR;
					  mediump vec3 Normal_27;
					  Normal_27 = tmpvar_26;
					  mediump float tmpvar_28;
					  highp float tmpvar_29;
					  highp float smoothness_30;
					  smoothness_30 = _Glossiness;
					  tmpvar_29 = (1.0 - smoothness_30);
					  tmpvar_28 = tmpvar_29;
					  mediump vec3 I_31;
					  I_31 = -(tmpvar_1);
					  mediump vec3 normalWorld_32;
					  normalWorld_32 = tmpvar_26;
					  mediump vec3 tmpvar_33;
					  mediump vec4 realtimeDirTex_34;
					  mediump vec3 tmpvar_35;
					  lowp vec4 tmpvar_36;
					  tmpvar_36 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD8.zw);
					  lowp vec4 tmpvar_37;
					  tmpvar_37 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD8.zw);
					  realtimeDirTex_34 = tmpvar_37;
					  lowp vec4 dirTex_38;
					  dirTex_38 = realtimeDirTex_34;
					  lowp vec3 y_39;
					  y_39 = (dirTex_38.xyz - 0.5);
					  lowp float tmpvar_40;
					  tmpvar_40 = max (0.0001, dirTex_38.w);
					  tmpvar_35 = ((pow (
					    ((unity_DynamicLightmap_HDR.x * tmpvar_36.w) * tmpvar_36.xyz)
					  , unity_DynamicLightmap_HDR.yyy) * (
					    dot (normalWorld_32, y_39)
					   + 0.5)) / tmpvar_40);
					  mediump vec4 hdr_41;
					  hdr_41 = tmpvar_2;
					  mediump vec4 tmpvar_42;
					  tmpvar_42.xyz = (I_31 - (2.0 * (
					    dot (Normal_27, I_31)
					   * Normal_27)));
					  tmpvar_42.w = ((tmpvar_28 * (1.7 - 
					    (0.7 * tmpvar_28)
					  )) * 6.0);
					  lowp vec4 tmpvar_43;
					  tmpvar_43 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42.xyz, tmpvar_42.w);
					  mediump vec4 tmpvar_44;
					  tmpvar_44 = tmpvar_43;
					  tmpvar_33 = ((hdr_41.x * (
					    (hdr_41.w * (tmpvar_44.w - 1.0))
					   + 1.0)) * tmpvar_44.xyz);
					  lowp vec3 tmpvar_45;
					  mediump vec4 c_46;
					  highp vec3 tmpvar_47;
					  tmpvar_47 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_48;
					  mediump vec3 albedo_49;
					  albedo_49 = tmpvar_7;
					  mediump vec3 tmpvar_50;
					  tmpvar_50 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_49, vec3(_Metallic));
					  mediump float tmpvar_51;
					  tmpvar_51 = (0.7790837 - (_Metallic * 0.7790837));
					  tmpvar_48 = (albedo_49 * tmpvar_51);
					  tmpvar_45 = tmpvar_48;
					  mediump vec3 diffColor_52;
					  diffColor_52 = tmpvar_45;
					  mediump float alpha_53;
					  alpha_53 = tmpvar_8;
					  tmpvar_45 = diffColor_52;
					  mediump vec3 diffColor_54;
					  diffColor_54 = tmpvar_45;
					  mediump vec3 color_55;
					  mediump float surfaceReduction_56;
					  highp float specularTerm_57;
					  highp float a2_58;
					  mediump float roughness_59;
					  mediump float perceptualRoughness_60;
					  highp vec3 tmpvar_61;
					  highp vec3 inVec_62;
					  inVec_62 = (tmpvar_4 + worldViewDir_9);
					  tmpvar_61 = (inVec_62 * inversesqrt(max (0.001, 
					    dot (inVec_62, inVec_62)
					  )));
					  mediump float tmpvar_63;
					  highp float tmpvar_64;
					  tmpvar_64 = clamp (dot (tmpvar_47, tmpvar_4), 0.0, 1.0);
					  tmpvar_63 = tmpvar_64;
					  highp float tmpvar_65;
					  tmpvar_65 = clamp (dot (tmpvar_47, tmpvar_61), 0.0, 1.0);
					  mediump float tmpvar_66;
					  highp float tmpvar_67;
					  tmpvar_67 = clamp (dot (tmpvar_47, worldViewDir_9), 0.0, 1.0);
					  tmpvar_66 = tmpvar_67;
					  highp float tmpvar_68;
					  highp float smoothness_69;
					  smoothness_69 = _Glossiness;
					  tmpvar_68 = (1.0 - smoothness_69);
					  perceptualRoughness_60 = tmpvar_68;
					  highp float tmpvar_70;
					  highp float perceptualRoughness_71;
					  perceptualRoughness_71 = perceptualRoughness_60;
					  tmpvar_70 = (perceptualRoughness_71 * perceptualRoughness_71);
					  roughness_59 = tmpvar_70;
					  mediump float tmpvar_72;
					  tmpvar_72 = (roughness_59 * roughness_59);
					  a2_58 = tmpvar_72;
					  specularTerm_57 = ((roughness_59 / (
					    (max (0.32, clamp (dot (tmpvar_4, tmpvar_61), 0.0, 1.0)) * (1.5 + roughness_59))
					   * 
					    (((tmpvar_65 * tmpvar_65) * (a2_58 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_73;
					  tmpvar_73 = clamp (specularTerm_57, 0.0, 100.0);
					  specularTerm_57 = tmpvar_73;
					  surfaceReduction_56 = (1.0 - ((roughness_59 * perceptualRoughness_60) * 0.28));
					  mediump float x_74;
					  x_74 = (1.0 - tmpvar_66);
					  mediump vec3 tmpvar_75;
					  tmpvar_75 = mix (tmpvar_50, vec3(clamp ((_Glossiness + 
					    (1.0 - tmpvar_51)
					  ), 0.0, 1.0)), vec3(((x_74 * x_74) * (x_74 * x_74))));
					  highp vec3 tmpvar_76;
					  tmpvar_76 = (((
					    ((diffColor_54 + (tmpvar_73 * tmpvar_50)) * tmpvar_3)
					   * tmpvar_63) + (tmpvar_35 * diffColor_54)) + ((surfaceReduction_56 * tmpvar_33) * tmpvar_75));
					  color_55 = tmpvar_76;
					  mediump vec4 tmpvar_77;
					  tmpvar_77.w = 1.0;
					  tmpvar_77.xyz = color_55;
					  c_46.xyz = tmpvar_77.xyz;
					  c_46.w = alpha_53;
					  c_6 = c_46;
					  gl_FragData[0] = c_6;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD9;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat9;
					mediump float u_xlat16_9;
					vec2 u_xlat18;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_30;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat10_1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat10_1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat10_1.xyz);
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat16_3.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat1.xyz * (-u_xlat16_3.xxx) + (-u_xlat0.xyz);
					    u_xlat2.z = (-_Glossiness) + 1.0;
					    u_xlat16_30 = (-u_xlat2.z) * 0.699999988 + 1.70000005;
					    u_xlat16_30 = u_xlat2.z * u_xlat16_30;
					    u_xlat16_30 = u_xlat16_30 * 6.0;
					    u_xlat10_3 = textureLod(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_30);
					    u_xlat16_4.x = u_xlat10_3.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_3.xyz * u_xlat16_4.xxx;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat28 = u_xlat27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat27)) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat2.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat2.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_31 = (-u_xlat28) + 1.0;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_9;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_9;
					    u_xlat18.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat18.x = texture(_CameraDepthTexture, u_xlat18.xy).x;
					    u_xlat18.x = _ZBufferParams.z * u_xlat18.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-vs_TEXCOORD4.w);
					    u_xlat18.x = u_xlat18.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
					#else
					    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
					#endif
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat18.x = u_xlat18.x * _FoamColor.w + u_xlat18.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
					#else
					    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
					#endif
					    u_xlat10_2 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * _Color;
					    u_xlat16_2 = u_xlat10_2 * _FoamColor + (-u_xlat16_3);
					    u_xlat2 = u_xlat18.xxxx * u_xlat16_2 + u_xlat16_3;
					    u_xlat16_5.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_32 = (-u_xlat16_31) + _Glossiness;
					    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat16_31);
					    SV_Target0.w = u_xlat2.w;
					    u_xlat16_31 = u_xlat16_32 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_31);
					    u_xlat16_7.xyz = vec3(u_xlat16_9) * u_xlat16_7.xyz + u_xlat16_5.xyz;
					    u_xlat16_5.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD9.zw);
					    u_xlat16_31 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_0.xyz * vec3(u_xlat16_31);
					    u_xlat16_7.xyz = log2(u_xlat16_7.xyz);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD9.zw);
					    u_xlat16_8.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat16_31 = dot(u_xlat1.xyz, u_xlat16_8.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat16_8.xyz = vec3(u_xlat9) * _LightColor0.xyz;
					    u_xlat16_31 = u_xlat16_31 + 0.5;
					    u_xlat16_7.xyz = vec3(u_xlat16_31) * u_xlat16_7.xyz;
					    u_xlat16_0.xyz = u_xlat16_7.xyz / u_xlat16_0.xxx;
					    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_6.xyz + u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_8.xyz + u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD9;
					layout(location = 0) out mediump vec4 SV_Target0;
					float u_xlat0;
					mediump float u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump float u_xlat16_4;
					mediump vec4 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					lowp vec3 u_xlat10_8;
					vec3 u_xlat12;
					mediump float u_xlat16_12;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_20;
					mediump float u_xlat16_21;
					mediump float u_xlat16_25;
					float u_xlat27;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD9.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD9.zw);
					    u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0 = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat10_8.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, u_xlat10_8.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD2.xyz, u_xlat10_8.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD3.xyz, u_xlat10_8.xyz);
					    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat8.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat16_25 = dot(u_xlat8.xyz, u_xlat16_2.xyz);
					    u_xlat16_25 = u_xlat16_25 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_25) * u_xlat16_1.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz / vec3(u_xlat16_0);
					    u_xlat4.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat0 = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat0 = _ZBufferParams.z * u_xlat0 + _ZBufferParams.w;
					    u_xlat0 = float(1.0) / u_xlat0;
					    u_xlat0 = u_xlat0 + (-vs_TEXCOORD4.w);
					    u_xlat0 = u_xlat0 * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
					#else
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					#endif
					    u_xlat0 = (-u_xlat0) + 1.0;
					    u_xlat0 = u_xlat0 * _FoamColor.w + u_xlat0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
					#else
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					#endif
					    u_xlat10_1 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * _Color;
					    u_xlat16_1 = u_xlat10_1 * _FoamColor + (-u_xlat16_2);
					    u_xlat1 = vec4(u_xlat0) * u_xlat16_1 + u_xlat16_2;
					    u_xlat16_5.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_13.xyz = u_xlat1.xyz * u_xlat16_5.xxx;
					    u_xlat16_5.x = (-u_xlat16_5.x) + _Glossiness;
					    u_xlat16_5.x = u_xlat16_5.x + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
					#else
					    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_13.xyz;
					    u_xlat16_7.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat3.x = vs_TEXCOORD1.w;
					    u_xlat3.y = vs_TEXCOORD2.w;
					    u_xlat3.z = vs_TEXCOORD3.w;
					    u_xlat3.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat0 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0 = inversesqrt(u_xlat0);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat0) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat0) * u_xlat3.xyz;
					    u_xlat0 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat0 = max(u_xlat0, 0.00100000005);
					    u_xlat0 = inversesqrt(u_xlat0);
					    u_xlat4.xyz = vec3(u_xlat0) * u_xlat4.xyz;
					    u_xlat0 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
					#else
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					#endif
					    u_xlat27 = dot(u_xlat8.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat0 = max(u_xlat0, 0.319999993);
					    u_xlat16_4 = (-_Glossiness) + 1.0;
					    u_xlat16_12 = u_xlat16_4 * u_xlat16_4 + 1.5;
					    u_xlat0 = u_xlat0 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_20 = u_xlat16_12 * u_xlat16_12 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat16_20 + 1.00001001;
					    u_xlat0 = u_xlat0 * u_xlat27;
					    u_xlat0 = u_xlat16_12 / u_xlat0;
					    u_xlat16_30 = u_xlat16_4 * u_xlat16_12;
					    u_xlat16_30 = (-u_xlat16_30) * 0.280000001 + 1.0;
					    u_xlat0 = u_xlat0 + -9.99999975e-05;
					    u_xlat0 = max(u_xlat0, 0.0);
					    u_xlat0 = min(u_xlat0, 100.0);
					    u_xlat12.xyz = vec3(u_xlat0) * u_xlat16_7.xyz + u_xlat16_13.xyz;
					    u_xlat12.xyz = u_xlat12.xyz * _LightColor0.xyz;
					    u_xlat0 = dot(u_xlat8.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
					#else
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					#endif
					    u_xlat12.xyz = u_xlat12.xyz * vec3(u_xlat0) + u_xlat16_6.xyz;
					    u_xlat16_13.x = (-u_xlat16_4) * 0.699999988 + 1.70000005;
					    u_xlat16_13.x = u_xlat16_4 * u_xlat16_13.x;
					    u_xlat16_13.x = u_xlat16_13.x * 6.0;
					    u_xlat16_21 = dot((-u_xlat3.xyz), u_xlat8.xyz);
					    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
					    u_xlat16_6.xyz = u_xlat8.xyz * (-vec3(u_xlat16_21)) + (-u_xlat3.xyz);
					    u_xlat0 = dot(u_xlat8.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
					#else
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					#endif
					    u_xlat16_21 = (-u_xlat0) + 1.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_13.x);
					    u_xlat16_13.x = u_xlat10_0.w + -1.0;
					    u_xlat16_13.x = unity_SpecCube0_HDR.w * u_xlat16_13.x + 1.0;
					    u_xlat16_13.x = u_xlat16_13.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_0.xyz * u_xlat16_13.xxx;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_30);
					    u_xlat16_5.xyw = u_xlat16_5.xxx + (-u_xlat16_7.xyz);
					    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyw + u_xlat16_7.xyz;
					    u_xlat1.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat12.xyz;
					    SV_Target0 = u_xlat1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat1.xyw * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform lowp sampler2D unity_DynamicLightmap;
					uniform lowp sampler2D unity_DynamicDirectionality;
					uniform lowp samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD9;
					layout(location = 0) out mediump vec4 SV_Target0;
					float u_xlat0;
					mediump float u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump float u_xlat16_4;
					mediump vec4 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					lowp vec3 u_xlat10_8;
					vec3 u_xlat12;
					mediump float u_xlat16_12;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_20;
					mediump float u_xlat16_21;
					mediump float u_xlat16_25;
					float u_xlat27;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD9.zw);
					    u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD9.zw);
					    u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0 = max(u_xlat10_0.w, 9.99999975e-05);
					    u_xlat10_8.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, u_xlat10_8.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD2.xyz, u_xlat10_8.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD3.xyz, u_xlat10_8.xyz);
					    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat8.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat16_25 = dot(u_xlat8.xyz, u_xlat16_2.xyz);
					    u_xlat16_25 = u_xlat16_25 + 0.5;
					    u_xlat16_1.xyz = vec3(u_xlat16_25) * u_xlat16_1.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz / vec3(u_xlat16_0);
					    u_xlat4.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat0 = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat0 = _ZBufferParams.z * u_xlat0 + _ZBufferParams.w;
					    u_xlat0 = float(1.0) / u_xlat0;
					    u_xlat0 = u_xlat0 + (-vs_TEXCOORD4.w);
					    u_xlat0 = u_xlat0 * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
					#else
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					#endif
					    u_xlat0 = (-u_xlat0) + 1.0;
					    u_xlat0 = u_xlat0 * _FoamColor.w + u_xlat0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
					#else
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					#endif
					    u_xlat10_1 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * _Color;
					    u_xlat16_1 = u_xlat10_1 * _FoamColor + (-u_xlat16_2);
					    u_xlat1 = vec4(u_xlat0) * u_xlat16_1 + u_xlat16_2;
					    u_xlat16_5.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_13.xyz = u_xlat1.xyz * u_xlat16_5.xxx;
					    u_xlat16_5.x = (-u_xlat16_5.x) + _Glossiness;
					    u_xlat16_5.x = u_xlat16_5.x + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
					#else
					    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_13.xyz;
					    u_xlat16_7.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat3.x = vs_TEXCOORD1.w;
					    u_xlat3.y = vs_TEXCOORD2.w;
					    u_xlat3.z = vs_TEXCOORD3.w;
					    u_xlat3.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat0 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0 = inversesqrt(u_xlat0);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat0) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat0) * u_xlat3.xyz;
					    u_xlat0 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat0 = max(u_xlat0, 0.00100000005);
					    u_xlat0 = inversesqrt(u_xlat0);
					    u_xlat4.xyz = vec3(u_xlat0) * u_xlat4.xyz;
					    u_xlat0 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
					#else
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					#endif
					    u_xlat27 = dot(u_xlat8.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat0 = max(u_xlat0, 0.319999993);
					    u_xlat16_4 = (-_Glossiness) + 1.0;
					    u_xlat16_12 = u_xlat16_4 * u_xlat16_4 + 1.5;
					    u_xlat0 = u_xlat0 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_20 = u_xlat16_12 * u_xlat16_12 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat16_20 + 1.00001001;
					    u_xlat0 = u_xlat0 * u_xlat27;
					    u_xlat0 = u_xlat16_12 / u_xlat0;
					    u_xlat16_30 = u_xlat16_4 * u_xlat16_12;
					    u_xlat16_30 = (-u_xlat16_30) * 0.280000001 + 1.0;
					    u_xlat0 = u_xlat0 + -9.99999975e-05;
					    u_xlat0 = max(u_xlat0, 0.0);
					    u_xlat0 = min(u_xlat0, 100.0);
					    u_xlat12.xyz = vec3(u_xlat0) * u_xlat16_7.xyz + u_xlat16_13.xyz;
					    u_xlat12.xyz = u_xlat12.xyz * _LightColor0.xyz;
					    u_xlat0 = dot(u_xlat8.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
					#else
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					#endif
					    u_xlat12.xyz = u_xlat12.xyz * vec3(u_xlat0) + u_xlat16_6.xyz;
					    u_xlat16_13.x = (-u_xlat16_4) * 0.699999988 + 1.70000005;
					    u_xlat16_13.x = u_xlat16_4 * u_xlat16_13.x;
					    u_xlat16_13.x = u_xlat16_13.x * 6.0;
					    u_xlat16_21 = dot((-u_xlat3.xyz), u_xlat8.xyz);
					    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
					    u_xlat16_6.xyz = u_xlat8.xyz * (-vec3(u_xlat16_21)) + (-u_xlat3.xyz);
					    u_xlat0 = dot(u_xlat8.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
					#else
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					#endif
					    u_xlat16_21 = (-u_xlat0) + 1.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat10_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_13.x);
					    u_xlat16_13.x = u_xlat10_0.w + -1.0;
					    u_xlat16_13.x = unity_SpecCube0_HDR.w * u_xlat16_13.x + 1.0;
					    u_xlat16_13.x = u_xlat16_13.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_0.xyz * u_xlat16_13.xxx;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_30);
					    u_xlat16_5.xyw = u_xlat16_5.xxx + (-u_xlat16_7.xyz);
					    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyw + u_xlat16_7.xyz;
					    u_xlat1.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat12.xyz;
					    SV_Target0 = u_xlat1;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"!!GLES3"
				}
			}
		}
		Pass {
			Name "FORWARD"
			LOD 200
			Tags { "LIGHTMODE" = "FORWARDADD" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
			Blend SrcAlpha One, SrcAlpha One
			ColorMask RGB -1
			ZWrite Off
			GpuProgramID 90349
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					varying highp vec3 xlv_TEXCOORD7;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = _glesVertex.w;
					  highp vec4 tmpvar_6;
					  highp float result_7;
					  result_7 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_7 = (result_7 / _Period);
					  highp vec4 vertColor_8;
					  vertColor_8 = tmpvar_1;
					  highp vec3 tmpvar_9;
					  tmpvar_9.xz = vec2(0.0, 0.0);
					  highp float tmpvar_10;
					  tmpvar_10 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_9.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_7)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_8.y);
					  tmpvar_5.xyz = (_glesVertex.xyz + tmpvar_9);
					  highp vec4 vertColor_12;
					  vertColor_12 = tmpvar_1;
					  highp float result_13;
					  result_13 = (((_WaveDir02.x * tmpvar_5.x) + (_WaveDir02.y * tmpvar_5.y)) + (_WaveDir02.z * tmpvar_5.z));
					  result_13 = (result_13 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_14;
					  vertColor_14 = tmpvar_1;
					  highp vec3 tmpvar_15;
					  tmpvar_15.xz = vec2(0.0, 0.0);
					  tmpvar_15.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_13)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_14.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_15);
					  highp vec4 vertColor_16;
					  vertColor_16 = tmpvar_1;
					  highp float result_17;
					  result_17 = (((_WaveDir03.x * tmpvar_5.x) + (_WaveDir03.y * tmpvar_5.y)) + (_WaveDir03.z * tmpvar_5.z));
					  result_17 = (result_17 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_18;
					  vertColor_18 = tmpvar_1;
					  highp vec3 tmpvar_19;
					  tmpvar_19.xz = vec2(0.0, 0.0);
					  tmpvar_19.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_17)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_18.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_19);
					  highp vec4 vertColor_20;
					  vertColor_20 = tmpvar_1;
					  highp vec4 tmpvar_21;
					  highp vec4 tmpvar_22;
					  tmpvar_22.w = 1.0;
					  tmpvar_22.xyz = tmpvar_5.xyz;
					  tmpvar_21 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_22));
					  highp mat3 tmpvar_23;
					  tmpvar_23[0] = unity_WorldToObject[0].xyz;
					  tmpvar_23[1] = unity_WorldToObject[1].xyz;
					  tmpvar_23[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_24;
					  tmpvar_24 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_7))
					       * vertColor_12.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_10)
					       + result_13)) * vertColor_16.y) * tmpvar_11)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_17))
					     * vertColor_20.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_23));
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_25[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_25[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((tmpvar_25 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_26;
					  highp float tmpvar_27;
					  tmpvar_27 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_27;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = (((tmpvar_24.yzx * worldTangent_4.zxy) - (tmpvar_24.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_28;
					  highp vec3 tmpvar_29;
					  tmpvar_29.x = worldTangent_4.x;
					  tmpvar_29.y = worldBinormal_2.x;
					  tmpvar_29.z = tmpvar_24.x;
					  highp vec3 tmpvar_30;
					  tmpvar_30.x = worldTangent_4.y;
					  tmpvar_30.y = worldBinormal_2.y;
					  tmpvar_30.z = tmpvar_24.y;
					  highp vec3 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.z;
					  tmpvar_31.y = worldBinormal_2.z;
					  tmpvar_31.z = tmpvar_24.z;
					  highp vec4 o_32;
					  highp vec4 tmpvar_33;
					  tmpvar_33 = (tmpvar_21 * 0.5);
					  highp vec2 tmpvar_34;
					  tmpvar_34.x = tmpvar_33.x;
					  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
					  o_32.xy = (tmpvar_34 + tmpvar_33.w);
					  o_32.zw = tmpvar_21.zw;
					  gl_Position = tmpvar_21;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_29;
					  xlv_TEXCOORD2 = tmpvar_30;
					  xlv_TEXCOORD3 = tmpvar_31;
					  xlv_TEXCOORD4 = (unity_ObjectToWorld * tmpvar_5).xyz;
					  xlv_TEXCOORD5 = o_32;
					  xlv_TEXCOORD6 = tmpvar_6;
					  xlv_TEXCOORD7 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_5)).xyz;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp sampler2D _LightTexture0;
					uniform highp mat4 unity_WorldToLight;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec3 worldN_3;
					  lowp vec4 c_4;
					  lowp float atten_5;
					  highp vec3 lightCoord_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  highp vec3 worldViewDir_9;
					  lowp vec3 lightDir_10;
					  lowp vec3 _unity_tbn_2_11;
					  lowp vec3 _unity_tbn_1_12;
					  lowp vec3 _unity_tbn_0_13;
					  _unity_tbn_0_13 = xlv_TEXCOORD1;
					  _unity_tbn_1_12 = xlv_TEXCOORD2;
					  _unity_tbn_2_11 = xlv_TEXCOORD3;
					  highp vec3 tmpvar_14;
					  tmpvar_14 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD4));
					  lightDir_10 = tmpvar_14;
					  worldViewDir_9 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD4));
					  highp vec3 tmpvar_15;
					  highp vec4 depthSample_16;
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD5).xxxx;
					  depthSample_16 = tmpvar_17;
					  highp float tmpvar_18;
					  tmpvar_18 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_16.x) + _ZBufferParams.w))) - xlv_TEXCOORD5.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_19;
					  tmpvar_19 = clamp ((tmpvar_18 + (tmpvar_18 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_19));
					  lowp vec3 tmpvar_21;
					  tmpvar_21 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_15 = tmpvar_21;
					  tmpvar_7 = tmpvar_20.xyz;
					  tmpvar_8 = tmpvar_20.w;
					  highp vec4 tmpvar_22;
					  tmpvar_22.w = 1.0;
					  tmpvar_22.xyz = xlv_TEXCOORD4;
					  lightCoord_6 = (unity_WorldToLight * tmpvar_22).xyz;
					  highp float tmpvar_23;
					  tmpvar_23 = texture2D (_LightTexture0, vec2(dot (lightCoord_6, lightCoord_6))).x;
					  atten_5 = tmpvar_23;
					  worldN_3.x = dot (_unity_tbn_0_13, tmpvar_15);
					  worldN_3.y = dot (_unity_tbn_1_12, tmpvar_15);
					  worldN_3.z = dot (_unity_tbn_2_11, tmpvar_15);
					  highp vec3 tmpvar_24;
					  tmpvar_24 = normalize(worldN_3);
					  worldN_3 = tmpvar_24;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_10;
					  tmpvar_1 = (tmpvar_1 * atten_5);
					  lowp vec3 tmpvar_25;
					  mediump vec4 c_26;
					  highp vec3 tmpvar_27;
					  tmpvar_27 = normalize(tmpvar_24);
					  mediump vec3 tmpvar_28;
					  mediump vec3 albedo_29;
					  albedo_29 = tmpvar_7;
					  tmpvar_28 = (albedo_29 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_25 = tmpvar_28;
					  mediump vec3 diffColor_30;
					  diffColor_30 = tmpvar_25;
					  mediump float alpha_31;
					  alpha_31 = tmpvar_8;
					  tmpvar_25 = diffColor_30;
					  mediump vec3 diffColor_32;
					  diffColor_32 = tmpvar_25;
					  mediump vec2 rlPow4AndFresnelTerm_33;
					  mediump float tmpvar_34;
					  highp float tmpvar_35;
					  tmpvar_35 = clamp (dot (tmpvar_27, tmpvar_2), 0.0, 1.0);
					  tmpvar_34 = tmpvar_35;
					  mediump float tmpvar_36;
					  highp float tmpvar_37;
					  tmpvar_37 = clamp (dot (tmpvar_27, worldViewDir_9), 0.0, 1.0);
					  tmpvar_36 = tmpvar_37;
					  highp vec2 tmpvar_38;
					  tmpvar_38.x = dot ((worldViewDir_9 - (2.0 * 
					    (dot (tmpvar_27, worldViewDir_9) * tmpvar_27)
					  )), tmpvar_2);
					  tmpvar_38.y = (1.0 - tmpvar_36);
					  highp vec2 tmpvar_39;
					  tmpvar_39 = ((tmpvar_38 * tmpvar_38) * (tmpvar_38 * tmpvar_38));
					  rlPow4AndFresnelTerm_33 = tmpvar_39;
					  mediump float tmpvar_40;
					  tmpvar_40 = rlPow4AndFresnelTerm_33.x;
					  mediump float specular_41;
					  highp float smoothness_42;
					  smoothness_42 = _Glossiness;
					  highp vec2 tmpvar_43;
					  tmpvar_43.x = tmpvar_40;
					  tmpvar_43.y = (1.0 - smoothness_42);
					  highp float tmpvar_44;
					  tmpvar_44 = (texture2D (unity_NHxRoughness, tmpvar_43).x * 16.0);
					  specular_41 = tmpvar_44;
					  mediump vec4 tmpvar_45;
					  tmpvar_45.w = 1.0;
					  tmpvar_45.xyz = ((diffColor_32 + (specular_41 * 
					    mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_29, vec3(_Metallic))
					  )) * (tmpvar_1 * tmpvar_34));
					  c_26.xyz = tmpvar_45.xyz;
					  c_26.w = alpha_31;
					  c_4 = c_26;
					  gl_FragData[0] = c_4;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					varying highp vec3 xlv_TEXCOORD7;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = _glesVertex.w;
					  highp vec4 tmpvar_6;
					  highp float result_7;
					  result_7 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_7 = (result_7 / _Period);
					  highp vec4 vertColor_8;
					  vertColor_8 = tmpvar_1;
					  highp vec3 tmpvar_9;
					  tmpvar_9.xz = vec2(0.0, 0.0);
					  highp float tmpvar_10;
					  tmpvar_10 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_9.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_7)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_8.y);
					  tmpvar_5.xyz = (_glesVertex.xyz + tmpvar_9);
					  highp vec4 vertColor_12;
					  vertColor_12 = tmpvar_1;
					  highp float result_13;
					  result_13 = (((_WaveDir02.x * tmpvar_5.x) + (_WaveDir02.y * tmpvar_5.y)) + (_WaveDir02.z * tmpvar_5.z));
					  result_13 = (result_13 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_14;
					  vertColor_14 = tmpvar_1;
					  highp vec3 tmpvar_15;
					  tmpvar_15.xz = vec2(0.0, 0.0);
					  tmpvar_15.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_13)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_14.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_15);
					  highp vec4 vertColor_16;
					  vertColor_16 = tmpvar_1;
					  highp float result_17;
					  result_17 = (((_WaveDir03.x * tmpvar_5.x) + (_WaveDir03.y * tmpvar_5.y)) + (_WaveDir03.z * tmpvar_5.z));
					  result_17 = (result_17 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_18;
					  vertColor_18 = tmpvar_1;
					  highp vec3 tmpvar_19;
					  tmpvar_19.xz = vec2(0.0, 0.0);
					  tmpvar_19.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_17)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_18.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_19);
					  highp vec4 vertColor_20;
					  vertColor_20 = tmpvar_1;
					  highp vec4 tmpvar_21;
					  highp vec4 tmpvar_22;
					  tmpvar_22.w = 1.0;
					  tmpvar_22.xyz = tmpvar_5.xyz;
					  tmpvar_21 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_22));
					  highp mat3 tmpvar_23;
					  tmpvar_23[0] = unity_WorldToObject[0].xyz;
					  tmpvar_23[1] = unity_WorldToObject[1].xyz;
					  tmpvar_23[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_24;
					  tmpvar_24 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_7))
					       * vertColor_12.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_10)
					       + result_13)) * vertColor_16.y) * tmpvar_11)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_17))
					     * vertColor_20.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_23));
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_25[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_25[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((tmpvar_25 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_26;
					  highp float tmpvar_27;
					  tmpvar_27 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_27;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = (((tmpvar_24.yzx * worldTangent_4.zxy) - (tmpvar_24.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_28;
					  highp vec3 tmpvar_29;
					  tmpvar_29.x = worldTangent_4.x;
					  tmpvar_29.y = worldBinormal_2.x;
					  tmpvar_29.z = tmpvar_24.x;
					  highp vec3 tmpvar_30;
					  tmpvar_30.x = worldTangent_4.y;
					  tmpvar_30.y = worldBinormal_2.y;
					  tmpvar_30.z = tmpvar_24.y;
					  highp vec3 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.z;
					  tmpvar_31.y = worldBinormal_2.z;
					  tmpvar_31.z = tmpvar_24.z;
					  highp vec4 o_32;
					  highp vec4 tmpvar_33;
					  tmpvar_33 = (tmpvar_21 * 0.5);
					  highp vec2 tmpvar_34;
					  tmpvar_34.x = tmpvar_33.x;
					  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
					  o_32.xy = (tmpvar_34 + tmpvar_33.w);
					  o_32.zw = tmpvar_21.zw;
					  gl_Position = tmpvar_21;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_29;
					  xlv_TEXCOORD2 = tmpvar_30;
					  xlv_TEXCOORD3 = tmpvar_31;
					  xlv_TEXCOORD4 = (unity_ObjectToWorld * tmpvar_5).xyz;
					  xlv_TEXCOORD5 = o_32;
					  xlv_TEXCOORD6 = tmpvar_6;
					  xlv_TEXCOORD7 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_5)).xyz;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _LightTexture0;
					uniform highp mat4 unity_WorldToLight;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec3 worldN_3;
					  lowp vec4 c_4;
					  lowp float atten_5;
					  highp vec3 lightCoord_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  lowp vec3 lightDir_9;
					  lowp vec3 _unity_tbn_2_10;
					  lowp vec3 _unity_tbn_1_11;
					  lowp vec3 _unity_tbn_0_12;
					  _unity_tbn_0_12 = xlv_TEXCOORD1;
					  _unity_tbn_1_11 = xlv_TEXCOORD2;
					  _unity_tbn_2_10 = xlv_TEXCOORD3;
					  highp vec3 tmpvar_13;
					  tmpvar_13 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD4));
					  lightDir_9 = tmpvar_13;
					  highp vec3 tmpvar_14;
					  highp vec4 depthSample_15;
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD5).xxxx;
					  depthSample_15 = tmpvar_16;
					  highp float tmpvar_17;
					  tmpvar_17 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_15.x) + _ZBufferParams.w))) - xlv_TEXCOORD5.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_18;
					  tmpvar_18 = clamp ((tmpvar_17 + (tmpvar_17 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_18));
					  lowp vec3 tmpvar_20;
					  tmpvar_20 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_14 = tmpvar_20;
					  tmpvar_7 = tmpvar_19.xyz;
					  tmpvar_8 = tmpvar_19.w;
					  highp vec4 tmpvar_21;
					  tmpvar_21.w = 1.0;
					  tmpvar_21.xyz = xlv_TEXCOORD4;
					  lightCoord_6 = (unity_WorldToLight * tmpvar_21).xyz;
					  highp float tmpvar_22;
					  tmpvar_22 = texture2D (_LightTexture0, vec2(dot (lightCoord_6, lightCoord_6))).x;
					  atten_5 = tmpvar_22;
					  worldN_3.x = dot (_unity_tbn_0_12, tmpvar_14);
					  worldN_3.y = dot (_unity_tbn_1_11, tmpvar_14);
					  worldN_3.z = dot (_unity_tbn_2_10, tmpvar_14);
					  highp vec3 tmpvar_23;
					  tmpvar_23 = normalize(worldN_3);
					  worldN_3 = tmpvar_23;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_9;
					  tmpvar_1 = (tmpvar_1 * atten_5);
					  lowp vec3 tmpvar_24;
					  mediump vec4 c_25;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(tmpvar_23);
					  mediump vec3 tmpvar_27;
					  mediump vec3 albedo_28;
					  albedo_28 = tmpvar_7;
					  mediump vec3 tmpvar_29;
					  tmpvar_29 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_28, vec3(_Metallic));
					  tmpvar_27 = (albedo_28 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_24 = tmpvar_27;
					  mediump vec3 diffColor_30;
					  diffColor_30 = tmpvar_24;
					  mediump float alpha_31;
					  alpha_31 = tmpvar_8;
					  tmpvar_24 = diffColor_30;
					  mediump vec3 diffColor_32;
					  diffColor_32 = tmpvar_24;
					  mediump vec3 color_33;
					  highp float specularTerm_34;
					  highp float a2_35;
					  mediump float roughness_36;
					  mediump float perceptualRoughness_37;
					  highp vec3 tmpvar_38;
					  highp vec3 inVec_39;
					  inVec_39 = (tmpvar_2 + normalize((_WorldSpaceCameraPos - xlv_TEXCOORD4)));
					  tmpvar_38 = (inVec_39 * inversesqrt(max (0.001, 
					    dot (inVec_39, inVec_39)
					  )));
					  mediump float tmpvar_40;
					  highp float tmpvar_41;
					  tmpvar_41 = clamp (dot (tmpvar_26, tmpvar_2), 0.0, 1.0);
					  tmpvar_40 = tmpvar_41;
					  highp float tmpvar_42;
					  tmpvar_42 = clamp (dot (tmpvar_26, tmpvar_38), 0.0, 1.0);
					  highp float tmpvar_43;
					  highp float smoothness_44;
					  smoothness_44 = _Glossiness;
					  tmpvar_43 = (1.0 - smoothness_44);
					  perceptualRoughness_37 = tmpvar_43;
					  highp float tmpvar_45;
					  highp float perceptualRoughness_46;
					  perceptualRoughness_46 = perceptualRoughness_37;
					  tmpvar_45 = (perceptualRoughness_46 * perceptualRoughness_46);
					  roughness_36 = tmpvar_45;
					  mediump float tmpvar_47;
					  tmpvar_47 = (roughness_36 * roughness_36);
					  a2_35 = tmpvar_47;
					  specularTerm_34 = ((roughness_36 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_38), 0.0, 1.0)) * (1.5 + roughness_36))
					   * 
					    (((tmpvar_42 * tmpvar_42) * (a2_35 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_48;
					  tmpvar_48 = clamp (specularTerm_34, 0.0, 100.0);
					  specularTerm_34 = tmpvar_48;
					  highp vec3 tmpvar_49;
					  tmpvar_49 = (((diffColor_32 + 
					    (tmpvar_48 * tmpvar_29)
					  ) * tmpvar_1) * tmpvar_40);
					  color_33 = tmpvar_49;
					  mediump vec4 tmpvar_50;
					  tmpvar_50.w = 1.0;
					  tmpvar_50.xyz = color_33;
					  c_25.xyz = tmpvar_50.xyz;
					  c_25.w = alpha_31;
					  c_4 = c_25;
					  gl_FragData[0] = c_4;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					varying highp vec3 xlv_TEXCOORD7;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = _glesVertex.w;
					  highp vec4 tmpvar_6;
					  highp float result_7;
					  result_7 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_7 = (result_7 / _Period);
					  highp vec4 vertColor_8;
					  vertColor_8 = tmpvar_1;
					  highp vec3 tmpvar_9;
					  tmpvar_9.xz = vec2(0.0, 0.0);
					  highp float tmpvar_10;
					  tmpvar_10 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_9.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_7)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_8.y);
					  tmpvar_5.xyz = (_glesVertex.xyz + tmpvar_9);
					  highp vec4 vertColor_12;
					  vertColor_12 = tmpvar_1;
					  highp float result_13;
					  result_13 = (((_WaveDir02.x * tmpvar_5.x) + (_WaveDir02.y * tmpvar_5.y)) + (_WaveDir02.z * tmpvar_5.z));
					  result_13 = (result_13 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_14;
					  vertColor_14 = tmpvar_1;
					  highp vec3 tmpvar_15;
					  tmpvar_15.xz = vec2(0.0, 0.0);
					  tmpvar_15.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_13)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_14.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_15);
					  highp vec4 vertColor_16;
					  vertColor_16 = tmpvar_1;
					  highp float result_17;
					  result_17 = (((_WaveDir03.x * tmpvar_5.x) + (_WaveDir03.y * tmpvar_5.y)) + (_WaveDir03.z * tmpvar_5.z));
					  result_17 = (result_17 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_18;
					  vertColor_18 = tmpvar_1;
					  highp vec3 tmpvar_19;
					  tmpvar_19.xz = vec2(0.0, 0.0);
					  tmpvar_19.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_17)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_18.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_19);
					  highp vec4 vertColor_20;
					  vertColor_20 = tmpvar_1;
					  highp vec4 tmpvar_21;
					  highp vec4 tmpvar_22;
					  tmpvar_22.w = 1.0;
					  tmpvar_22.xyz = tmpvar_5.xyz;
					  tmpvar_21 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_22));
					  highp mat3 tmpvar_23;
					  tmpvar_23[0] = unity_WorldToObject[0].xyz;
					  tmpvar_23[1] = unity_WorldToObject[1].xyz;
					  tmpvar_23[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_24;
					  tmpvar_24 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_7))
					       * vertColor_12.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_10)
					       + result_13)) * vertColor_16.y) * tmpvar_11)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_17))
					     * vertColor_20.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_23));
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_25[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_25[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((tmpvar_25 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_26;
					  highp float tmpvar_27;
					  tmpvar_27 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_27;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = (((tmpvar_24.yzx * worldTangent_4.zxy) - (tmpvar_24.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_28;
					  highp vec3 tmpvar_29;
					  tmpvar_29.x = worldTangent_4.x;
					  tmpvar_29.y = worldBinormal_2.x;
					  tmpvar_29.z = tmpvar_24.x;
					  highp vec3 tmpvar_30;
					  tmpvar_30.x = worldTangent_4.y;
					  tmpvar_30.y = worldBinormal_2.y;
					  tmpvar_30.z = tmpvar_24.y;
					  highp vec3 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.z;
					  tmpvar_31.y = worldBinormal_2.z;
					  tmpvar_31.z = tmpvar_24.z;
					  highp vec4 o_32;
					  highp vec4 tmpvar_33;
					  tmpvar_33 = (tmpvar_21 * 0.5);
					  highp vec2 tmpvar_34;
					  tmpvar_34.x = tmpvar_33.x;
					  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
					  o_32.xy = (tmpvar_34 + tmpvar_33.w);
					  o_32.zw = tmpvar_21.zw;
					  gl_Position = tmpvar_21;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_29;
					  xlv_TEXCOORD2 = tmpvar_30;
					  xlv_TEXCOORD3 = tmpvar_31;
					  xlv_TEXCOORD4 = (unity_ObjectToWorld * tmpvar_5).xyz;
					  xlv_TEXCOORD5 = o_32;
					  xlv_TEXCOORD6 = tmpvar_6;
					  xlv_TEXCOORD7 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_5)).xyz;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _LightTexture0;
					uniform highp mat4 unity_WorldToLight;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec3 worldN_3;
					  lowp vec4 c_4;
					  lowp float atten_5;
					  highp vec3 lightCoord_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  lowp vec3 lightDir_9;
					  lowp vec3 _unity_tbn_2_10;
					  lowp vec3 _unity_tbn_1_11;
					  lowp vec3 _unity_tbn_0_12;
					  _unity_tbn_0_12 = xlv_TEXCOORD1;
					  _unity_tbn_1_11 = xlv_TEXCOORD2;
					  _unity_tbn_2_10 = xlv_TEXCOORD3;
					  highp vec3 tmpvar_13;
					  tmpvar_13 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD4));
					  lightDir_9 = tmpvar_13;
					  highp vec3 tmpvar_14;
					  highp vec4 depthSample_15;
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD5).xxxx;
					  depthSample_15 = tmpvar_16;
					  highp float tmpvar_17;
					  tmpvar_17 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_15.x) + _ZBufferParams.w))) - xlv_TEXCOORD5.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_18;
					  tmpvar_18 = clamp ((tmpvar_17 + (tmpvar_17 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_18));
					  lowp vec3 tmpvar_20;
					  tmpvar_20 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_14 = tmpvar_20;
					  tmpvar_7 = tmpvar_19.xyz;
					  tmpvar_8 = tmpvar_19.w;
					  highp vec4 tmpvar_21;
					  tmpvar_21.w = 1.0;
					  tmpvar_21.xyz = xlv_TEXCOORD4;
					  lightCoord_6 = (unity_WorldToLight * tmpvar_21).xyz;
					  highp float tmpvar_22;
					  tmpvar_22 = texture2D (_LightTexture0, vec2(dot (lightCoord_6, lightCoord_6))).x;
					  atten_5 = tmpvar_22;
					  worldN_3.x = dot (_unity_tbn_0_12, tmpvar_14);
					  worldN_3.y = dot (_unity_tbn_1_11, tmpvar_14);
					  worldN_3.z = dot (_unity_tbn_2_10, tmpvar_14);
					  highp vec3 tmpvar_23;
					  tmpvar_23 = normalize(worldN_3);
					  worldN_3 = tmpvar_23;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_9;
					  tmpvar_1 = (tmpvar_1 * atten_5);
					  lowp vec3 tmpvar_24;
					  mediump vec4 c_25;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(tmpvar_23);
					  mediump vec3 tmpvar_27;
					  mediump vec3 albedo_28;
					  albedo_28 = tmpvar_7;
					  mediump vec3 tmpvar_29;
					  tmpvar_29 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_28, vec3(_Metallic));
					  tmpvar_27 = (albedo_28 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_24 = tmpvar_27;
					  mediump vec3 diffColor_30;
					  diffColor_30 = tmpvar_24;
					  mediump float alpha_31;
					  alpha_31 = tmpvar_8;
					  tmpvar_24 = diffColor_30;
					  mediump vec3 diffColor_32;
					  diffColor_32 = tmpvar_24;
					  mediump vec3 color_33;
					  highp float specularTerm_34;
					  highp float a2_35;
					  mediump float roughness_36;
					  mediump float perceptualRoughness_37;
					  highp vec3 tmpvar_38;
					  highp vec3 inVec_39;
					  inVec_39 = (tmpvar_2 + normalize((_WorldSpaceCameraPos - xlv_TEXCOORD4)));
					  tmpvar_38 = (inVec_39 * inversesqrt(max (0.001, 
					    dot (inVec_39, inVec_39)
					  )));
					  mediump float tmpvar_40;
					  highp float tmpvar_41;
					  tmpvar_41 = clamp (dot (tmpvar_26, tmpvar_2), 0.0, 1.0);
					  tmpvar_40 = tmpvar_41;
					  highp float tmpvar_42;
					  tmpvar_42 = clamp (dot (tmpvar_26, tmpvar_38), 0.0, 1.0);
					  highp float tmpvar_43;
					  highp float smoothness_44;
					  smoothness_44 = _Glossiness;
					  tmpvar_43 = (1.0 - smoothness_44);
					  perceptualRoughness_37 = tmpvar_43;
					  highp float tmpvar_45;
					  highp float perceptualRoughness_46;
					  perceptualRoughness_46 = perceptualRoughness_37;
					  tmpvar_45 = (perceptualRoughness_46 * perceptualRoughness_46);
					  roughness_36 = tmpvar_45;
					  mediump float tmpvar_47;
					  tmpvar_47 = (roughness_36 * roughness_36);
					  a2_35 = tmpvar_47;
					  specularTerm_34 = ((roughness_36 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_38), 0.0, 1.0)) * (1.5 + roughness_36))
					   * 
					    (((tmpvar_42 * tmpvar_42) * (a2_35 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_48;
					  tmpvar_48 = clamp (specularTerm_34, 0.0, 100.0);
					  specularTerm_34 = tmpvar_48;
					  highp vec3 tmpvar_49;
					  tmpvar_49 = (((diffColor_32 + 
					    (tmpvar_48 * tmpvar_29)
					  ) * tmpvar_1) * tmpvar_40);
					  color_33 = tmpvar_49;
					  mediump vec4 tmpvar_50;
					  tmpvar_50.w = 1.0;
					  tmpvar_50.xyz = color_33;
					  c_25.xyz = tmpvar_50.xyz;
					  c_25.w = alpha_31;
					  c_4 = c_25;
					  gl_FragData[0] = c_4;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					out highp vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat13;
					float u_xlat18;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat18 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat18 = u_xlat18 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat13 = _Time.y * u_xlat1.x + u_xlat18;
					    u_xlat18 = _Time.y * _Frequency + u_xlat18;
					    u_xlat18 = sin(u_xlat18);
					    u_xlat18 = u_xlat18 * in_COLOR0.y;
					    u_xlat18 = u_xlat18 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat18)) + in_NORMAL0.xyz;
					    u_xlat18 = sin(u_xlat13);
					    u_xlat18 = u_xlat1.y * u_xlat18;
					    u_xlat0.y = u_xlat18 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat18 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat18 = u_xlat18 / u_xlat3.z;
					    u_xlat13 = _Time.y * u_xlat1.x + u_xlat18;
					    u_xlat18 = _Time.y * u_xlat3.x + u_xlat18;
					    u_xlat18 = sin(u_xlat18);
					    u_xlat18 = u_xlat18 * in_COLOR0.y;
					    u_xlat18 = u_xlat3.y * u_xlat18;
					    u_xlat13 = sin(u_xlat13);
					    u_xlat13 = u_xlat1.y * u_xlat13;
					    u_xlat3.y = u_xlat13 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat13 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat13 = u_xlat13 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat13;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat13;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat13 = u_xlat1.z * in_COLOR0.y;
					    u_xlat13 = u_xlat3.z * u_xlat13;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat5 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat5 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat5;
					    gl_Position = u_xlat4;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx + abs(vec3(u_xlat18));
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + abs(vec3(u_xlat13));
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat6 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat6) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat1.x = u_xlat4.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat4.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat4.zw;
					    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D unity_NHxRoughness;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					vec2 u_xlat10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat10_0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat10_0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat10_0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat15)) + u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat5.x * u_xlat5.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat5.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat5.x = u_xlat5.x * 16.0;
					    u_xlat10.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat10.x = texture(_CameraDepthTexture, u_xlat10.xy).x;
					    u_xlat10.x = _ZBufferParams.z * u_xlat10.x + _ZBufferParams.w;
					    u_xlat10.x = float(1.0) / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + (-vs_TEXCOORD5.w);
					    u_xlat10.x = u_xlat10.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
					#else
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					#endif
					    u_xlat10.x = (-u_xlat10.x) + 1.0;
					    u_xlat10.x = u_xlat10.x * _FoamColor.w + u_xlat10.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
					#else
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					#endif
					    u_xlat10_1 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * _Color;
					    u_xlat16_1 = u_xlat10_1 * _FoamColor + (-u_xlat16_2);
					    u_xlat1 = u_xlat10.xxxx * u_xlat16_1 + u_xlat16_2;
					    u_xlat16_3.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_3.xyz = u_xlat5.xxx * u_xlat16_3.xyz;
					    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_18) + u_xlat16_3.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat5.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat5.xyz;
					    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat5.x = texture(_LightTexture0, u_xlat5.xx).x;
					    u_xlat16_4.xyz = u_xlat5.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					out highp vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat13;
					float u_xlat18;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat18 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat18 = u_xlat18 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat13 = _Time.y * u_xlat1.x + u_xlat18;
					    u_xlat18 = _Time.y * _Frequency + u_xlat18;
					    u_xlat18 = sin(u_xlat18);
					    u_xlat18 = u_xlat18 * in_COLOR0.y;
					    u_xlat18 = u_xlat18 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat18)) + in_NORMAL0.xyz;
					    u_xlat18 = sin(u_xlat13);
					    u_xlat18 = u_xlat1.y * u_xlat18;
					    u_xlat0.y = u_xlat18 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat18 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat18 = u_xlat18 / u_xlat3.z;
					    u_xlat13 = _Time.y * u_xlat1.x + u_xlat18;
					    u_xlat18 = _Time.y * u_xlat3.x + u_xlat18;
					    u_xlat18 = sin(u_xlat18);
					    u_xlat18 = u_xlat18 * in_COLOR0.y;
					    u_xlat18 = u_xlat3.y * u_xlat18;
					    u_xlat13 = sin(u_xlat13);
					    u_xlat13 = u_xlat1.y * u_xlat13;
					    u_xlat3.y = u_xlat13 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat13 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat13 = u_xlat13 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat13;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat13;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat13 = u_xlat1.z * in_COLOR0.y;
					    u_xlat13 = u_xlat3.z * u_xlat13;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat5 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat5 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat5;
					    gl_Position = u_xlat4;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx + abs(vec3(u_xlat18));
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + abs(vec3(u_xlat13));
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat6 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat6) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat1.x = u_xlat4.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat4.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat4.zw;
					    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform highp sampler2D _LightTexture0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					vec2 u_xlat10;
					mediump float u_xlat16_10;
					float u_xlat15;
					float u_xlat16;
					mediump float u_xlat16_16;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat16_16 = (-_Glossiness) + 1.0;
					    u_xlat16_2.x = u_xlat16_16 * u_xlat16_16 + 1.5;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat10_2.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, u_xlat10_2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD2.xyz, u_xlat10_2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD3.xyz, u_xlat10_2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_10 = u_xlat16_16 * u_xlat16_16 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_10 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat15;
					    u_xlat0.x = u_xlat16_16 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat10.x = texture(_CameraDepthTexture, u_xlat10.xy).x;
					    u_xlat10.x = _ZBufferParams.z * u_xlat10.x + _ZBufferParams.w;
					    u_xlat10.x = float(1.0) / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + (-vs_TEXCOORD5.w);
					    u_xlat10.x = u_xlat10.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
					#else
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					#endif
					    u_xlat10.x = (-u_xlat10.x) + 1.0;
					    u_xlat10.x = u_xlat10.x * _FoamColor.w + u_xlat10.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
					#else
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					#endif
					    u_xlat10_1 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * _Color;
					    u_xlat16_1 = u_xlat10_1 * _FoamColor + (-u_xlat16_2);
					    u_xlat1 = u_xlat10.xxxx * u_xlat16_1 + u_xlat16_2;
					    u_xlat16_4.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xzw = u_xlat1.xyz * u_xlat16_4.xxx + u_xlat0.xzw;
					    u_xlat2.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.x = texture(_LightTexture0, u_xlat2.xx).x;
					    u_xlat16_4.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_4.xyz;
					    u_xlat1.xyz = vec3(u_xlat5) * u_xlat0.xzw;
					    SV_Target0 = u_xlat1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					out highp vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat13;
					float u_xlat18;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat18 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat18 = u_xlat18 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat13 = _Time.y * u_xlat1.x + u_xlat18;
					    u_xlat18 = _Time.y * _Frequency + u_xlat18;
					    u_xlat18 = sin(u_xlat18);
					    u_xlat18 = u_xlat18 * in_COLOR0.y;
					    u_xlat18 = u_xlat18 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat18)) + in_NORMAL0.xyz;
					    u_xlat18 = sin(u_xlat13);
					    u_xlat18 = u_xlat1.y * u_xlat18;
					    u_xlat0.y = u_xlat18 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat18 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat18 = u_xlat18 / u_xlat3.z;
					    u_xlat13 = _Time.y * u_xlat1.x + u_xlat18;
					    u_xlat18 = _Time.y * u_xlat3.x + u_xlat18;
					    u_xlat18 = sin(u_xlat18);
					    u_xlat18 = u_xlat18 * in_COLOR0.y;
					    u_xlat18 = u_xlat3.y * u_xlat18;
					    u_xlat13 = sin(u_xlat13);
					    u_xlat13 = u_xlat1.y * u_xlat13;
					    u_xlat3.y = u_xlat13 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat13 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat13 = u_xlat13 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat13;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat13;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat13 = u_xlat1.z * in_COLOR0.y;
					    u_xlat13 = u_xlat3.z * u_xlat13;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat5 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat5 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat5;
					    gl_Position = u_xlat4;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx + abs(vec3(u_xlat18));
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + abs(vec3(u_xlat13));
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat6 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat6) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat1.x = u_xlat4.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat4.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat4.zw;
					    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform highp sampler2D _LightTexture0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					vec2 u_xlat10;
					mediump float u_xlat16_10;
					float u_xlat15;
					float u_xlat16;
					mediump float u_xlat16_16;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat16_16 = (-_Glossiness) + 1.0;
					    u_xlat16_2.x = u_xlat16_16 * u_xlat16_16 + 1.5;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat10_2.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, u_xlat10_2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD2.xyz, u_xlat10_2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD3.xyz, u_xlat10_2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_10 = u_xlat16_16 * u_xlat16_16 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_10 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat15;
					    u_xlat0.x = u_xlat16_16 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat10.x = texture(_CameraDepthTexture, u_xlat10.xy).x;
					    u_xlat10.x = _ZBufferParams.z * u_xlat10.x + _ZBufferParams.w;
					    u_xlat10.x = float(1.0) / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + (-vs_TEXCOORD5.w);
					    u_xlat10.x = u_xlat10.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
					#else
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					#endif
					    u_xlat10.x = (-u_xlat10.x) + 1.0;
					    u_xlat10.x = u_xlat10.x * _FoamColor.w + u_xlat10.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
					#else
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					#endif
					    u_xlat10_1 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * _Color;
					    u_xlat16_1 = u_xlat10_1 * _FoamColor + (-u_xlat16_2);
					    u_xlat1 = u_xlat10.xxxx * u_xlat16_1 + u_xlat16_2;
					    u_xlat16_4.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xzw = u_xlat1.xyz * u_xlat16_4.xxx + u_xlat0.xzw;
					    u_xlat2.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.x = texture(_LightTexture0, u_xlat2.xx).x;
					    u_xlat16_4.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_4.xyz;
					    u_xlat1.xyz = vec3(u_xlat5) * u_xlat0.xzw;
					    SV_Target0 = u_xlat1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = _glesVertex.w;
					  highp vec4 tmpvar_6;
					  highp float result_7;
					  result_7 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_7 = (result_7 / _Period);
					  highp vec4 vertColor_8;
					  vertColor_8 = tmpvar_1;
					  highp vec3 tmpvar_9;
					  tmpvar_9.xz = vec2(0.0, 0.0);
					  highp float tmpvar_10;
					  tmpvar_10 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_9.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_7)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_8.y);
					  tmpvar_5.xyz = (_glesVertex.xyz + tmpvar_9);
					  highp vec4 vertColor_12;
					  vertColor_12 = tmpvar_1;
					  highp float result_13;
					  result_13 = (((_WaveDir02.x * tmpvar_5.x) + (_WaveDir02.y * tmpvar_5.y)) + (_WaveDir02.z * tmpvar_5.z));
					  result_13 = (result_13 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_14;
					  vertColor_14 = tmpvar_1;
					  highp vec3 tmpvar_15;
					  tmpvar_15.xz = vec2(0.0, 0.0);
					  tmpvar_15.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_13)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_14.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_15);
					  highp vec4 vertColor_16;
					  vertColor_16 = tmpvar_1;
					  highp float result_17;
					  result_17 = (((_WaveDir03.x * tmpvar_5.x) + (_WaveDir03.y * tmpvar_5.y)) + (_WaveDir03.z * tmpvar_5.z));
					  result_17 = (result_17 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_18;
					  vertColor_18 = tmpvar_1;
					  highp vec3 tmpvar_19;
					  tmpvar_19.xz = vec2(0.0, 0.0);
					  tmpvar_19.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_17)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_18.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_19);
					  highp vec4 vertColor_20;
					  vertColor_20 = tmpvar_1;
					  highp vec4 tmpvar_21;
					  highp vec4 tmpvar_22;
					  tmpvar_22.w = 1.0;
					  tmpvar_22.xyz = tmpvar_5.xyz;
					  tmpvar_21 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_22));
					  highp mat3 tmpvar_23;
					  tmpvar_23[0] = unity_WorldToObject[0].xyz;
					  tmpvar_23[1] = unity_WorldToObject[1].xyz;
					  tmpvar_23[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_24;
					  tmpvar_24 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_7))
					       * vertColor_12.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_10)
					       + result_13)) * vertColor_16.y) * tmpvar_11)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_17))
					     * vertColor_20.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_23));
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_25[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_25[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((tmpvar_25 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_26;
					  highp float tmpvar_27;
					  tmpvar_27 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_27;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = (((tmpvar_24.yzx * worldTangent_4.zxy) - (tmpvar_24.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_28;
					  highp vec3 tmpvar_29;
					  tmpvar_29.x = worldTangent_4.x;
					  tmpvar_29.y = worldBinormal_2.x;
					  tmpvar_29.z = tmpvar_24.x;
					  highp vec3 tmpvar_30;
					  tmpvar_30.x = worldTangent_4.y;
					  tmpvar_30.y = worldBinormal_2.y;
					  tmpvar_30.z = tmpvar_24.y;
					  highp vec3 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.z;
					  tmpvar_31.y = worldBinormal_2.z;
					  tmpvar_31.z = tmpvar_24.z;
					  highp vec4 o_32;
					  highp vec4 tmpvar_33;
					  tmpvar_33 = (tmpvar_21 * 0.5);
					  highp vec2 tmpvar_34;
					  tmpvar_34.x = tmpvar_33.x;
					  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
					  o_32.xy = (tmpvar_34 + tmpvar_33.w);
					  o_32.zw = tmpvar_21.zw;
					  gl_Position = tmpvar_21;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_29;
					  xlv_TEXCOORD2 = tmpvar_30;
					  xlv_TEXCOORD3 = tmpvar_31;
					  xlv_TEXCOORD4 = (unity_ObjectToWorld * tmpvar_5).xyz;
					  xlv_TEXCOORD5 = o_32;
					  xlv_TEXCOORD6 = tmpvar_6;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec3 worldN_3;
					  lowp vec4 c_4;
					  lowp vec3 tmpvar_5;
					  lowp float tmpvar_6;
					  highp vec3 worldViewDir_7;
					  lowp vec3 lightDir_8;
					  lowp vec3 _unity_tbn_2_9;
					  lowp vec3 _unity_tbn_1_10;
					  lowp vec3 _unity_tbn_0_11;
					  _unity_tbn_0_11 = xlv_TEXCOORD1;
					  _unity_tbn_1_10 = xlv_TEXCOORD2;
					  _unity_tbn_2_9 = xlv_TEXCOORD3;
					  mediump vec3 tmpvar_12;
					  tmpvar_12 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_12;
					  worldViewDir_7 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD4));
					  highp vec3 tmpvar_13;
					  highp vec4 depthSample_14;
					  lowp vec4 tmpvar_15;
					  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD5).xxxx;
					  depthSample_14 = tmpvar_15;
					  highp float tmpvar_16;
					  tmpvar_16 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_14.x) + _ZBufferParams.w))) - xlv_TEXCOORD5.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_17;
					  tmpvar_17 = clamp ((tmpvar_16 + (tmpvar_16 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_17));
					  lowp vec3 tmpvar_19;
					  tmpvar_19 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_13 = tmpvar_19;
					  tmpvar_5 = tmpvar_18.xyz;
					  tmpvar_6 = tmpvar_18.w;
					  worldN_3.x = dot (_unity_tbn_0_11, tmpvar_13);
					  worldN_3.y = dot (_unity_tbn_1_10, tmpvar_13);
					  worldN_3.z = dot (_unity_tbn_2_9, tmpvar_13);
					  highp vec3 tmpvar_20;
					  tmpvar_20 = normalize(worldN_3);
					  worldN_3 = tmpvar_20;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_8;
					  lowp vec3 tmpvar_21;
					  mediump vec4 c_22;
					  highp vec3 tmpvar_23;
					  tmpvar_23 = normalize(tmpvar_20);
					  mediump vec3 tmpvar_24;
					  mediump vec3 albedo_25;
					  albedo_25 = tmpvar_5;
					  tmpvar_24 = (albedo_25 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_21 = tmpvar_24;
					  mediump vec3 diffColor_26;
					  diffColor_26 = tmpvar_21;
					  mediump float alpha_27;
					  alpha_27 = tmpvar_6;
					  tmpvar_21 = diffColor_26;
					  mediump vec3 diffColor_28;
					  diffColor_28 = tmpvar_21;
					  mediump vec2 rlPow4AndFresnelTerm_29;
					  mediump float tmpvar_30;
					  highp float tmpvar_31;
					  tmpvar_31 = clamp (dot (tmpvar_23, tmpvar_2), 0.0, 1.0);
					  tmpvar_30 = tmpvar_31;
					  mediump float tmpvar_32;
					  highp float tmpvar_33;
					  tmpvar_33 = clamp (dot (tmpvar_23, worldViewDir_7), 0.0, 1.0);
					  tmpvar_32 = tmpvar_33;
					  highp vec2 tmpvar_34;
					  tmpvar_34.x = dot ((worldViewDir_7 - (2.0 * 
					    (dot (tmpvar_23, worldViewDir_7) * tmpvar_23)
					  )), tmpvar_2);
					  tmpvar_34.y = (1.0 - tmpvar_32);
					  highp vec2 tmpvar_35;
					  tmpvar_35 = ((tmpvar_34 * tmpvar_34) * (tmpvar_34 * tmpvar_34));
					  rlPow4AndFresnelTerm_29 = tmpvar_35;
					  mediump float tmpvar_36;
					  tmpvar_36 = rlPow4AndFresnelTerm_29.x;
					  mediump float specular_37;
					  highp float smoothness_38;
					  smoothness_38 = _Glossiness;
					  highp vec2 tmpvar_39;
					  tmpvar_39.x = tmpvar_36;
					  tmpvar_39.y = (1.0 - smoothness_38);
					  highp float tmpvar_40;
					  tmpvar_40 = (texture2D (unity_NHxRoughness, tmpvar_39).x * 16.0);
					  specular_37 = tmpvar_40;
					  mediump vec4 tmpvar_41;
					  tmpvar_41.w = 1.0;
					  tmpvar_41.xyz = ((diffColor_28 + (specular_37 * 
					    mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_25, vec3(_Metallic))
					  )) * (tmpvar_1 * tmpvar_30));
					  c_22.xyz = tmpvar_41.xyz;
					  c_22.w = alpha_27;
					  c_4 = c_22;
					  gl_FragData[0] = c_4;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = _glesVertex.w;
					  highp vec4 tmpvar_6;
					  highp float result_7;
					  result_7 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_7 = (result_7 / _Period);
					  highp vec4 vertColor_8;
					  vertColor_8 = tmpvar_1;
					  highp vec3 tmpvar_9;
					  tmpvar_9.xz = vec2(0.0, 0.0);
					  highp float tmpvar_10;
					  tmpvar_10 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_9.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_7)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_8.y);
					  tmpvar_5.xyz = (_glesVertex.xyz + tmpvar_9);
					  highp vec4 vertColor_12;
					  vertColor_12 = tmpvar_1;
					  highp float result_13;
					  result_13 = (((_WaveDir02.x * tmpvar_5.x) + (_WaveDir02.y * tmpvar_5.y)) + (_WaveDir02.z * tmpvar_5.z));
					  result_13 = (result_13 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_14;
					  vertColor_14 = tmpvar_1;
					  highp vec3 tmpvar_15;
					  tmpvar_15.xz = vec2(0.0, 0.0);
					  tmpvar_15.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_13)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_14.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_15);
					  highp vec4 vertColor_16;
					  vertColor_16 = tmpvar_1;
					  highp float result_17;
					  result_17 = (((_WaveDir03.x * tmpvar_5.x) + (_WaveDir03.y * tmpvar_5.y)) + (_WaveDir03.z * tmpvar_5.z));
					  result_17 = (result_17 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_18;
					  vertColor_18 = tmpvar_1;
					  highp vec3 tmpvar_19;
					  tmpvar_19.xz = vec2(0.0, 0.0);
					  tmpvar_19.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_17)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_18.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_19);
					  highp vec4 vertColor_20;
					  vertColor_20 = tmpvar_1;
					  highp vec4 tmpvar_21;
					  highp vec4 tmpvar_22;
					  tmpvar_22.w = 1.0;
					  tmpvar_22.xyz = tmpvar_5.xyz;
					  tmpvar_21 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_22));
					  highp mat3 tmpvar_23;
					  tmpvar_23[0] = unity_WorldToObject[0].xyz;
					  tmpvar_23[1] = unity_WorldToObject[1].xyz;
					  tmpvar_23[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_24;
					  tmpvar_24 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_7))
					       * vertColor_12.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_10)
					       + result_13)) * vertColor_16.y) * tmpvar_11)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_17))
					     * vertColor_20.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_23));
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_25[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_25[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((tmpvar_25 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_26;
					  highp float tmpvar_27;
					  tmpvar_27 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_27;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = (((tmpvar_24.yzx * worldTangent_4.zxy) - (tmpvar_24.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_28;
					  highp vec3 tmpvar_29;
					  tmpvar_29.x = worldTangent_4.x;
					  tmpvar_29.y = worldBinormal_2.x;
					  tmpvar_29.z = tmpvar_24.x;
					  highp vec3 tmpvar_30;
					  tmpvar_30.x = worldTangent_4.y;
					  tmpvar_30.y = worldBinormal_2.y;
					  tmpvar_30.z = tmpvar_24.y;
					  highp vec3 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.z;
					  tmpvar_31.y = worldBinormal_2.z;
					  tmpvar_31.z = tmpvar_24.z;
					  highp vec4 o_32;
					  highp vec4 tmpvar_33;
					  tmpvar_33 = (tmpvar_21 * 0.5);
					  highp vec2 tmpvar_34;
					  tmpvar_34.x = tmpvar_33.x;
					  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
					  o_32.xy = (tmpvar_34 + tmpvar_33.w);
					  o_32.zw = tmpvar_21.zw;
					  gl_Position = tmpvar_21;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_29;
					  xlv_TEXCOORD2 = tmpvar_30;
					  xlv_TEXCOORD3 = tmpvar_31;
					  xlv_TEXCOORD4 = (unity_ObjectToWorld * tmpvar_5).xyz;
					  xlv_TEXCOORD5 = o_32;
					  xlv_TEXCOORD6 = tmpvar_6;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec3 worldN_3;
					  lowp vec4 c_4;
					  lowp vec3 tmpvar_5;
					  lowp float tmpvar_6;
					  lowp vec3 lightDir_7;
					  lowp vec3 _unity_tbn_2_8;
					  lowp vec3 _unity_tbn_1_9;
					  lowp vec3 _unity_tbn_0_10;
					  _unity_tbn_0_10 = xlv_TEXCOORD1;
					  _unity_tbn_1_9 = xlv_TEXCOORD2;
					  _unity_tbn_2_8 = xlv_TEXCOORD3;
					  mediump vec3 tmpvar_11;
					  tmpvar_11 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  highp vec4 depthSample_13;
					  lowp vec4 tmpvar_14;
					  tmpvar_14 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD5).xxxx;
					  depthSample_13 = tmpvar_14;
					  highp float tmpvar_15;
					  tmpvar_15 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_13.x) + _ZBufferParams.w))) - xlv_TEXCOORD5.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_16;
					  tmpvar_16 = clamp ((tmpvar_15 + (tmpvar_15 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_16));
					  lowp vec3 tmpvar_18;
					  tmpvar_18 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_12 = tmpvar_18;
					  tmpvar_5 = tmpvar_17.xyz;
					  tmpvar_6 = tmpvar_17.w;
					  worldN_3.x = dot (_unity_tbn_0_10, tmpvar_12);
					  worldN_3.y = dot (_unity_tbn_1_9, tmpvar_12);
					  worldN_3.z = dot (_unity_tbn_2_8, tmpvar_12);
					  highp vec3 tmpvar_19;
					  tmpvar_19 = normalize(worldN_3);
					  worldN_3 = tmpvar_19;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_7;
					  lowp vec3 tmpvar_20;
					  mediump vec4 c_21;
					  highp vec3 tmpvar_22;
					  tmpvar_22 = normalize(tmpvar_19);
					  mediump vec3 tmpvar_23;
					  mediump vec3 albedo_24;
					  albedo_24 = tmpvar_5;
					  mediump vec3 tmpvar_25;
					  tmpvar_25 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_24, vec3(_Metallic));
					  tmpvar_23 = (albedo_24 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_20 = tmpvar_23;
					  mediump vec3 diffColor_26;
					  diffColor_26 = tmpvar_20;
					  mediump float alpha_27;
					  alpha_27 = tmpvar_6;
					  tmpvar_20 = diffColor_26;
					  mediump vec3 diffColor_28;
					  diffColor_28 = tmpvar_20;
					  mediump vec3 color_29;
					  highp float specularTerm_30;
					  highp float a2_31;
					  mediump float roughness_32;
					  mediump float perceptualRoughness_33;
					  highp vec3 tmpvar_34;
					  highp vec3 inVec_35;
					  inVec_35 = (tmpvar_2 + normalize((_WorldSpaceCameraPos - xlv_TEXCOORD4)));
					  tmpvar_34 = (inVec_35 * inversesqrt(max (0.001, 
					    dot (inVec_35, inVec_35)
					  )));
					  mediump float tmpvar_36;
					  highp float tmpvar_37;
					  tmpvar_37 = clamp (dot (tmpvar_22, tmpvar_2), 0.0, 1.0);
					  tmpvar_36 = tmpvar_37;
					  highp float tmpvar_38;
					  tmpvar_38 = clamp (dot (tmpvar_22, tmpvar_34), 0.0, 1.0);
					  highp float tmpvar_39;
					  highp float smoothness_40;
					  smoothness_40 = _Glossiness;
					  tmpvar_39 = (1.0 - smoothness_40);
					  perceptualRoughness_33 = tmpvar_39;
					  highp float tmpvar_41;
					  highp float perceptualRoughness_42;
					  perceptualRoughness_42 = perceptualRoughness_33;
					  tmpvar_41 = (perceptualRoughness_42 * perceptualRoughness_42);
					  roughness_32 = tmpvar_41;
					  mediump float tmpvar_43;
					  tmpvar_43 = (roughness_32 * roughness_32);
					  a2_31 = tmpvar_43;
					  specularTerm_30 = ((roughness_32 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_34), 0.0, 1.0)) * (1.5 + roughness_32))
					   * 
					    (((tmpvar_38 * tmpvar_38) * (a2_31 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_44;
					  tmpvar_44 = clamp (specularTerm_30, 0.0, 100.0);
					  specularTerm_30 = tmpvar_44;
					  highp vec3 tmpvar_45;
					  tmpvar_45 = (((diffColor_28 + 
					    (tmpvar_44 * tmpvar_25)
					  ) * tmpvar_1) * tmpvar_36);
					  color_29 = tmpvar_45;
					  mediump vec4 tmpvar_46;
					  tmpvar_46.w = 1.0;
					  tmpvar_46.xyz = color_29;
					  c_21.xyz = tmpvar_46.xyz;
					  c_21.w = alpha_27;
					  c_4 = c_21;
					  gl_FragData[0] = c_4;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = _glesVertex.w;
					  highp vec4 tmpvar_6;
					  highp float result_7;
					  result_7 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_7 = (result_7 / _Period);
					  highp vec4 vertColor_8;
					  vertColor_8 = tmpvar_1;
					  highp vec3 tmpvar_9;
					  tmpvar_9.xz = vec2(0.0, 0.0);
					  highp float tmpvar_10;
					  tmpvar_10 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_9.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_7)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_8.y);
					  tmpvar_5.xyz = (_glesVertex.xyz + tmpvar_9);
					  highp vec4 vertColor_12;
					  vertColor_12 = tmpvar_1;
					  highp float result_13;
					  result_13 = (((_WaveDir02.x * tmpvar_5.x) + (_WaveDir02.y * tmpvar_5.y)) + (_WaveDir02.z * tmpvar_5.z));
					  result_13 = (result_13 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_14;
					  vertColor_14 = tmpvar_1;
					  highp vec3 tmpvar_15;
					  tmpvar_15.xz = vec2(0.0, 0.0);
					  tmpvar_15.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_13)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_14.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_15);
					  highp vec4 vertColor_16;
					  vertColor_16 = tmpvar_1;
					  highp float result_17;
					  result_17 = (((_WaveDir03.x * tmpvar_5.x) + (_WaveDir03.y * tmpvar_5.y)) + (_WaveDir03.z * tmpvar_5.z));
					  result_17 = (result_17 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_18;
					  vertColor_18 = tmpvar_1;
					  highp vec3 tmpvar_19;
					  tmpvar_19.xz = vec2(0.0, 0.0);
					  tmpvar_19.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_17)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_18.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_19);
					  highp vec4 vertColor_20;
					  vertColor_20 = tmpvar_1;
					  highp vec4 tmpvar_21;
					  highp vec4 tmpvar_22;
					  tmpvar_22.w = 1.0;
					  tmpvar_22.xyz = tmpvar_5.xyz;
					  tmpvar_21 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_22));
					  highp mat3 tmpvar_23;
					  tmpvar_23[0] = unity_WorldToObject[0].xyz;
					  tmpvar_23[1] = unity_WorldToObject[1].xyz;
					  tmpvar_23[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_24;
					  tmpvar_24 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_7))
					       * vertColor_12.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_10)
					       + result_13)) * vertColor_16.y) * tmpvar_11)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_17))
					     * vertColor_20.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_23));
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_25[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_25[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((tmpvar_25 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_26;
					  highp float tmpvar_27;
					  tmpvar_27 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_27;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = (((tmpvar_24.yzx * worldTangent_4.zxy) - (tmpvar_24.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_28;
					  highp vec3 tmpvar_29;
					  tmpvar_29.x = worldTangent_4.x;
					  tmpvar_29.y = worldBinormal_2.x;
					  tmpvar_29.z = tmpvar_24.x;
					  highp vec3 tmpvar_30;
					  tmpvar_30.x = worldTangent_4.y;
					  tmpvar_30.y = worldBinormal_2.y;
					  tmpvar_30.z = tmpvar_24.y;
					  highp vec3 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.z;
					  tmpvar_31.y = worldBinormal_2.z;
					  tmpvar_31.z = tmpvar_24.z;
					  highp vec4 o_32;
					  highp vec4 tmpvar_33;
					  tmpvar_33 = (tmpvar_21 * 0.5);
					  highp vec2 tmpvar_34;
					  tmpvar_34.x = tmpvar_33.x;
					  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
					  o_32.xy = (tmpvar_34 + tmpvar_33.w);
					  o_32.zw = tmpvar_21.zw;
					  gl_Position = tmpvar_21;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_29;
					  xlv_TEXCOORD2 = tmpvar_30;
					  xlv_TEXCOORD3 = tmpvar_31;
					  xlv_TEXCOORD4 = (unity_ObjectToWorld * tmpvar_5).xyz;
					  xlv_TEXCOORD5 = o_32;
					  xlv_TEXCOORD6 = tmpvar_6;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec3 worldN_3;
					  lowp vec4 c_4;
					  lowp vec3 tmpvar_5;
					  lowp float tmpvar_6;
					  lowp vec3 lightDir_7;
					  lowp vec3 _unity_tbn_2_8;
					  lowp vec3 _unity_tbn_1_9;
					  lowp vec3 _unity_tbn_0_10;
					  _unity_tbn_0_10 = xlv_TEXCOORD1;
					  _unity_tbn_1_9 = xlv_TEXCOORD2;
					  _unity_tbn_2_8 = xlv_TEXCOORD3;
					  mediump vec3 tmpvar_11;
					  tmpvar_11 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  highp vec4 depthSample_13;
					  lowp vec4 tmpvar_14;
					  tmpvar_14 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD5).xxxx;
					  depthSample_13 = tmpvar_14;
					  highp float tmpvar_15;
					  tmpvar_15 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_13.x) + _ZBufferParams.w))) - xlv_TEXCOORD5.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_16;
					  tmpvar_16 = clamp ((tmpvar_15 + (tmpvar_15 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_17;
					  tmpvar_17 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_16));
					  lowp vec3 tmpvar_18;
					  tmpvar_18 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_12 = tmpvar_18;
					  tmpvar_5 = tmpvar_17.xyz;
					  tmpvar_6 = tmpvar_17.w;
					  worldN_3.x = dot (_unity_tbn_0_10, tmpvar_12);
					  worldN_3.y = dot (_unity_tbn_1_9, tmpvar_12);
					  worldN_3.z = dot (_unity_tbn_2_8, tmpvar_12);
					  highp vec3 tmpvar_19;
					  tmpvar_19 = normalize(worldN_3);
					  worldN_3 = tmpvar_19;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_7;
					  lowp vec3 tmpvar_20;
					  mediump vec4 c_21;
					  highp vec3 tmpvar_22;
					  tmpvar_22 = normalize(tmpvar_19);
					  mediump vec3 tmpvar_23;
					  mediump vec3 albedo_24;
					  albedo_24 = tmpvar_5;
					  mediump vec3 tmpvar_25;
					  tmpvar_25 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_24, vec3(_Metallic));
					  tmpvar_23 = (albedo_24 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_20 = tmpvar_23;
					  mediump vec3 diffColor_26;
					  diffColor_26 = tmpvar_20;
					  mediump float alpha_27;
					  alpha_27 = tmpvar_6;
					  tmpvar_20 = diffColor_26;
					  mediump vec3 diffColor_28;
					  diffColor_28 = tmpvar_20;
					  mediump vec3 color_29;
					  highp float specularTerm_30;
					  highp float a2_31;
					  mediump float roughness_32;
					  mediump float perceptualRoughness_33;
					  highp vec3 tmpvar_34;
					  highp vec3 inVec_35;
					  inVec_35 = (tmpvar_2 + normalize((_WorldSpaceCameraPos - xlv_TEXCOORD4)));
					  tmpvar_34 = (inVec_35 * inversesqrt(max (0.001, 
					    dot (inVec_35, inVec_35)
					  )));
					  mediump float tmpvar_36;
					  highp float tmpvar_37;
					  tmpvar_37 = clamp (dot (tmpvar_22, tmpvar_2), 0.0, 1.0);
					  tmpvar_36 = tmpvar_37;
					  highp float tmpvar_38;
					  tmpvar_38 = clamp (dot (tmpvar_22, tmpvar_34), 0.0, 1.0);
					  highp float tmpvar_39;
					  highp float smoothness_40;
					  smoothness_40 = _Glossiness;
					  tmpvar_39 = (1.0 - smoothness_40);
					  perceptualRoughness_33 = tmpvar_39;
					  highp float tmpvar_41;
					  highp float perceptualRoughness_42;
					  perceptualRoughness_42 = perceptualRoughness_33;
					  tmpvar_41 = (perceptualRoughness_42 * perceptualRoughness_42);
					  roughness_32 = tmpvar_41;
					  mediump float tmpvar_43;
					  tmpvar_43 = (roughness_32 * roughness_32);
					  a2_31 = tmpvar_43;
					  specularTerm_30 = ((roughness_32 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_34), 0.0, 1.0)) * (1.5 + roughness_32))
					   * 
					    (((tmpvar_38 * tmpvar_38) * (a2_31 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_44;
					  tmpvar_44 = clamp (specularTerm_30, 0.0, 100.0);
					  specularTerm_30 = tmpvar_44;
					  highp vec3 tmpvar_45;
					  tmpvar_45 = (((diffColor_28 + 
					    (tmpvar_44 * tmpvar_25)
					  ) * tmpvar_1) * tmpvar_36);
					  color_29 = tmpvar_45;
					  mediump vec4 tmpvar_46;
					  tmpvar_46.w = 1.0;
					  tmpvar_46.xyz = color_29;
					  c_21.xyz = tmpvar_46.xyz;
					  c_21.w = alpha_27;
					  c_4 = c_21;
					  gl_FragData[0] = c_4;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat5 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat5) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat3.zw;
					    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform highp sampler2D unity_NHxRoughness;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat10_0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat10_0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat10_0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat15)) + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_Glossiness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
					    u_xlat5.x = u_xlat5.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
					#else
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					#endif
					    u_xlat5.x = (-u_xlat5.x) + 1.0;
					    u_xlat5.x = u_xlat5.x * _FoamColor.w + u_xlat5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
					#else
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					#endif
					    u_xlat10_1 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * _Color;
					    u_xlat16_1 = u_xlat10_1 * _FoamColor + (-u_xlat16_3);
					    u_xlat1 = u_xlat5.xxxx * u_xlat16_1 + u_xlat16_3;
					    u_xlat16_4.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_17 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = u_xlat1.xyz * vec3(u_xlat16_17) + u_xlat16_4.xyz;
					    SV_Target0.w = u_xlat1.w;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat5 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat5) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat3.zw;
					    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					vec3 u_xlat5;
					mediump float u_xlat16_5;
					lowp vec3 u_xlat10_5;
					vec2 u_xlat8;
					mediump float u_xlat16_8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat16_1.x = (-_Glossiness) + 1.0;
					    u_xlat16_5 = u_xlat16_1.x * u_xlat16_1.x + 1.5;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat12 = u_xlat12 * u_xlat16_5;
					    u_xlat10_5.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat10_5.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat10_5.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat10_5.xyz);
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat4 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
					#else
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_8 = u_xlat16_1.x * u_xlat16_1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat16_1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat8.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat8.x = texture(_CameraDepthTexture, u_xlat8.xy).x;
					    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
					    u_xlat8.x = float(1.0) / u_xlat8.x;
					    u_xlat8.x = u_xlat8.x + (-vs_TEXCOORD5.w);
					    u_xlat8.x = u_xlat8.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
					#else
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					#endif
					    u_xlat8.x = (-u_xlat8.x) + 1.0;
					    u_xlat8.x = u_xlat8.x * _FoamColor.w + u_xlat8.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
					#else
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					#endif
					    u_xlat10_1 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * _Color;
					    u_xlat16_1 = u_xlat10_1 * _FoamColor + (-u_xlat16_2);
					    u_xlat1 = u_xlat8.xxxx * u_xlat16_1 + u_xlat16_2;
					    u_xlat16_3.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat1.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0 = u_xlat1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx + abs(vec3(u_xlat15));
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + abs(vec3(u_xlat11));
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat5 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat5) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat3.zw;
					    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					vec3 u_xlat5;
					mediump float u_xlat16_5;
					lowp vec3 u_xlat10_5;
					vec2 u_xlat8;
					mediump float u_xlat16_8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat16_1.x = (-_Glossiness) + 1.0;
					    u_xlat16_5 = u_xlat16_1.x * u_xlat16_1.x + 1.5;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat12 = u_xlat12 * u_xlat16_5;
					    u_xlat10_5.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat10_5.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat10_5.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat10_5.xyz);
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat4 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
					#else
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_8 = u_xlat16_1.x * u_xlat16_1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat16_1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat8.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat8.x = texture(_CameraDepthTexture, u_xlat8.xy).x;
					    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
					    u_xlat8.x = float(1.0) / u_xlat8.x;
					    u_xlat8.x = u_xlat8.x + (-vs_TEXCOORD5.w);
					    u_xlat8.x = u_xlat8.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
					#else
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					#endif
					    u_xlat8.x = (-u_xlat8.x) + 1.0;
					    u_xlat8.x = u_xlat8.x * _FoamColor.w + u_xlat8.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
					#else
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					#endif
					    u_xlat10_1 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * _Color;
					    u_xlat16_1 = u_xlat10_1 * _FoamColor + (-u_xlat16_2);
					    u_xlat1 = u_xlat8.xxxx * u_xlat16_1 + u_xlat16_2;
					    u_xlat16_3.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat1.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0 = u_xlat1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					varying highp vec4 xlv_TEXCOORD7;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = _glesVertex.w;
					  highp vec4 tmpvar_6;
					  highp float result_7;
					  result_7 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_7 = (result_7 / _Period);
					  highp vec4 vertColor_8;
					  vertColor_8 = tmpvar_1;
					  highp vec3 tmpvar_9;
					  tmpvar_9.xz = vec2(0.0, 0.0);
					  highp float tmpvar_10;
					  tmpvar_10 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_9.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_7)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_8.y);
					  tmpvar_5.xyz = (_glesVertex.xyz + tmpvar_9);
					  highp vec4 vertColor_12;
					  vertColor_12 = tmpvar_1;
					  highp float result_13;
					  result_13 = (((_WaveDir02.x * tmpvar_5.x) + (_WaveDir02.y * tmpvar_5.y)) + (_WaveDir02.z * tmpvar_5.z));
					  result_13 = (result_13 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_14;
					  vertColor_14 = tmpvar_1;
					  highp vec3 tmpvar_15;
					  tmpvar_15.xz = vec2(0.0, 0.0);
					  tmpvar_15.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_13)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_14.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_15);
					  highp vec4 vertColor_16;
					  vertColor_16 = tmpvar_1;
					  highp float result_17;
					  result_17 = (((_WaveDir03.x * tmpvar_5.x) + (_WaveDir03.y * tmpvar_5.y)) + (_WaveDir03.z * tmpvar_5.z));
					  result_17 = (result_17 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_18;
					  vertColor_18 = tmpvar_1;
					  highp vec3 tmpvar_19;
					  tmpvar_19.xz = vec2(0.0, 0.0);
					  tmpvar_19.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_17)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_18.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_19);
					  highp vec4 vertColor_20;
					  vertColor_20 = tmpvar_1;
					  highp vec4 tmpvar_21;
					  highp vec4 tmpvar_22;
					  tmpvar_22.w = 1.0;
					  tmpvar_22.xyz = tmpvar_5.xyz;
					  tmpvar_21 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_22));
					  highp mat3 tmpvar_23;
					  tmpvar_23[0] = unity_WorldToObject[0].xyz;
					  tmpvar_23[1] = unity_WorldToObject[1].xyz;
					  tmpvar_23[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_24;
					  tmpvar_24 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_7))
					       * vertColor_12.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_10)
					       + result_13)) * vertColor_16.y) * tmpvar_11)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_17))
					     * vertColor_20.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_23));
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_25[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_25[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((tmpvar_25 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_26;
					  highp float tmpvar_27;
					  tmpvar_27 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_27;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = (((tmpvar_24.yzx * worldTangent_4.zxy) - (tmpvar_24.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_28;
					  highp vec3 tmpvar_29;
					  tmpvar_29.x = worldTangent_4.x;
					  tmpvar_29.y = worldBinormal_2.x;
					  tmpvar_29.z = tmpvar_24.x;
					  highp vec3 tmpvar_30;
					  tmpvar_30.x = worldTangent_4.y;
					  tmpvar_30.y = worldBinormal_2.y;
					  tmpvar_30.z = tmpvar_24.y;
					  highp vec3 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.z;
					  tmpvar_31.y = worldBinormal_2.z;
					  tmpvar_31.z = tmpvar_24.z;
					  highp vec4 o_32;
					  highp vec4 tmpvar_33;
					  tmpvar_33 = (tmpvar_21 * 0.5);
					  highp vec2 tmpvar_34;
					  tmpvar_34.x = tmpvar_33.x;
					  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
					  o_32.xy = (tmpvar_34 + tmpvar_33.w);
					  o_32.zw = tmpvar_21.zw;
					  gl_Position = tmpvar_21;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_29;
					  xlv_TEXCOORD2 = tmpvar_30;
					  xlv_TEXCOORD3 = tmpvar_31;
					  xlv_TEXCOORD4 = (unity_ObjectToWorld * tmpvar_5).xyz;
					  xlv_TEXCOORD5 = o_32;
					  xlv_TEXCOORD6 = tmpvar_6;
					  xlv_TEXCOORD7 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_5));
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD7;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec3 worldN_3;
					  lowp vec4 c_4;
					  lowp float atten_5;
					  lowp vec3 tmpvar_6;
					  lowp float tmpvar_7;
					  highp vec3 worldViewDir_8;
					  lowp vec3 lightDir_9;
					  lowp vec3 _unity_tbn_2_10;
					  lowp vec3 _unity_tbn_1_11;
					  lowp vec3 _unity_tbn_0_12;
					  _unity_tbn_0_12 = xlv_TEXCOORD1;
					  _unity_tbn_1_11 = xlv_TEXCOORD2;
					  _unity_tbn_2_10 = xlv_TEXCOORD3;
					  highp vec3 tmpvar_13;
					  tmpvar_13 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD4));
					  lightDir_9 = tmpvar_13;
					  worldViewDir_8 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD4));
					  highp vec3 tmpvar_14;
					  highp vec4 depthSample_15;
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD5).xxxx;
					  depthSample_15 = tmpvar_16;
					  highp float tmpvar_17;
					  tmpvar_17 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_15.x) + _ZBufferParams.w))) - xlv_TEXCOORD5.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_18;
					  tmpvar_18 = clamp ((tmpvar_17 + (tmpvar_17 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_18));
					  lowp vec3 tmpvar_20;
					  tmpvar_20 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_14 = tmpvar_20;
					  tmpvar_6 = tmpvar_19.xyz;
					  tmpvar_7 = tmpvar_19.w;
					  lowp float tmpvar_21;
					  highp vec4 tmpvar_22;
					  tmpvar_22 = texture2D (_LightTexture0, ((xlv_TEXCOORD7.xy / xlv_TEXCOORD7.w) + 0.5));
					  tmpvar_21 = tmpvar_22.w;
					  lowp float tmpvar_23;
					  highp vec4 tmpvar_24;
					  tmpvar_24 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD7.xyz, xlv_TEXCOORD7.xyz)));
					  tmpvar_23 = tmpvar_24.x;
					  highp float tmpvar_25;
					  tmpvar_25 = ((float(
					    (xlv_TEXCOORD7.z > 0.0)
					  ) * tmpvar_21) * tmpvar_23);
					  atten_5 = tmpvar_25;
					  worldN_3.x = dot (_unity_tbn_0_12, tmpvar_14);
					  worldN_3.y = dot (_unity_tbn_1_11, tmpvar_14);
					  worldN_3.z = dot (_unity_tbn_2_10, tmpvar_14);
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize(worldN_3);
					  worldN_3 = tmpvar_26;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_9;
					  tmpvar_1 = (tmpvar_1 * atten_5);
					  lowp vec3 tmpvar_27;
					  mediump vec4 c_28;
					  highp vec3 tmpvar_29;
					  tmpvar_29 = normalize(tmpvar_26);
					  mediump vec3 tmpvar_30;
					  mediump vec3 albedo_31;
					  albedo_31 = tmpvar_6;
					  tmpvar_30 = (albedo_31 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_27 = tmpvar_30;
					  mediump vec3 diffColor_32;
					  diffColor_32 = tmpvar_27;
					  mediump float alpha_33;
					  alpha_33 = tmpvar_7;
					  tmpvar_27 = diffColor_32;
					  mediump vec3 diffColor_34;
					  diffColor_34 = tmpvar_27;
					  mediump vec2 rlPow4AndFresnelTerm_35;
					  mediump float tmpvar_36;
					  highp float tmpvar_37;
					  tmpvar_37 = clamp (dot (tmpvar_29, tmpvar_2), 0.0, 1.0);
					  tmpvar_36 = tmpvar_37;
					  mediump float tmpvar_38;
					  highp float tmpvar_39;
					  tmpvar_39 = clamp (dot (tmpvar_29, worldViewDir_8), 0.0, 1.0);
					  tmpvar_38 = tmpvar_39;
					  highp vec2 tmpvar_40;
					  tmpvar_40.x = dot ((worldViewDir_8 - (2.0 * 
					    (dot (tmpvar_29, worldViewDir_8) * tmpvar_29)
					  )), tmpvar_2);
					  tmpvar_40.y = (1.0 - tmpvar_38);
					  highp vec2 tmpvar_41;
					  tmpvar_41 = ((tmpvar_40 * tmpvar_40) * (tmpvar_40 * tmpvar_40));
					  rlPow4AndFresnelTerm_35 = tmpvar_41;
					  mediump float tmpvar_42;
					  tmpvar_42 = rlPow4AndFresnelTerm_35.x;
					  mediump float specular_43;
					  highp float smoothness_44;
					  smoothness_44 = _Glossiness;
					  highp vec2 tmpvar_45;
					  tmpvar_45.x = tmpvar_42;
					  tmpvar_45.y = (1.0 - smoothness_44);
					  highp float tmpvar_46;
					  tmpvar_46 = (texture2D (unity_NHxRoughness, tmpvar_45).x * 16.0);
					  specular_43 = tmpvar_46;
					  mediump vec4 tmpvar_47;
					  tmpvar_47.w = 1.0;
					  tmpvar_47.xyz = ((diffColor_34 + (specular_43 * 
					    mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_31, vec3(_Metallic))
					  )) * (tmpvar_1 * tmpvar_36));
					  c_28.xyz = tmpvar_47.xyz;
					  c_28.w = alpha_33;
					  c_4 = c_28;
					  gl_FragData[0] = c_4;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					varying highp vec4 xlv_TEXCOORD7;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = _glesVertex.w;
					  highp vec4 tmpvar_6;
					  highp float result_7;
					  result_7 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_7 = (result_7 / _Period);
					  highp vec4 vertColor_8;
					  vertColor_8 = tmpvar_1;
					  highp vec3 tmpvar_9;
					  tmpvar_9.xz = vec2(0.0, 0.0);
					  highp float tmpvar_10;
					  tmpvar_10 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_9.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_7)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_8.y);
					  tmpvar_5.xyz = (_glesVertex.xyz + tmpvar_9);
					  highp vec4 vertColor_12;
					  vertColor_12 = tmpvar_1;
					  highp float result_13;
					  result_13 = (((_WaveDir02.x * tmpvar_5.x) + (_WaveDir02.y * tmpvar_5.y)) + (_WaveDir02.z * tmpvar_5.z));
					  result_13 = (result_13 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_14;
					  vertColor_14 = tmpvar_1;
					  highp vec3 tmpvar_15;
					  tmpvar_15.xz = vec2(0.0, 0.0);
					  tmpvar_15.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_13)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_14.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_15);
					  highp vec4 vertColor_16;
					  vertColor_16 = tmpvar_1;
					  highp float result_17;
					  result_17 = (((_WaveDir03.x * tmpvar_5.x) + (_WaveDir03.y * tmpvar_5.y)) + (_WaveDir03.z * tmpvar_5.z));
					  result_17 = (result_17 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_18;
					  vertColor_18 = tmpvar_1;
					  highp vec3 tmpvar_19;
					  tmpvar_19.xz = vec2(0.0, 0.0);
					  tmpvar_19.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_17)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_18.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_19);
					  highp vec4 vertColor_20;
					  vertColor_20 = tmpvar_1;
					  highp vec4 tmpvar_21;
					  highp vec4 tmpvar_22;
					  tmpvar_22.w = 1.0;
					  tmpvar_22.xyz = tmpvar_5.xyz;
					  tmpvar_21 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_22));
					  highp mat3 tmpvar_23;
					  tmpvar_23[0] = unity_WorldToObject[0].xyz;
					  tmpvar_23[1] = unity_WorldToObject[1].xyz;
					  tmpvar_23[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_24;
					  tmpvar_24 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_7))
					       * vertColor_12.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_10)
					       + result_13)) * vertColor_16.y) * tmpvar_11)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_17))
					     * vertColor_20.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_23));
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_25[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_25[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((tmpvar_25 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_26;
					  highp float tmpvar_27;
					  tmpvar_27 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_27;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = (((tmpvar_24.yzx * worldTangent_4.zxy) - (tmpvar_24.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_28;
					  highp vec3 tmpvar_29;
					  tmpvar_29.x = worldTangent_4.x;
					  tmpvar_29.y = worldBinormal_2.x;
					  tmpvar_29.z = tmpvar_24.x;
					  highp vec3 tmpvar_30;
					  tmpvar_30.x = worldTangent_4.y;
					  tmpvar_30.y = worldBinormal_2.y;
					  tmpvar_30.z = tmpvar_24.y;
					  highp vec3 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.z;
					  tmpvar_31.y = worldBinormal_2.z;
					  tmpvar_31.z = tmpvar_24.z;
					  highp vec4 o_32;
					  highp vec4 tmpvar_33;
					  tmpvar_33 = (tmpvar_21 * 0.5);
					  highp vec2 tmpvar_34;
					  tmpvar_34.x = tmpvar_33.x;
					  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
					  o_32.xy = (tmpvar_34 + tmpvar_33.w);
					  o_32.zw = tmpvar_21.zw;
					  gl_Position = tmpvar_21;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_29;
					  xlv_TEXCOORD2 = tmpvar_30;
					  xlv_TEXCOORD3 = tmpvar_31;
					  xlv_TEXCOORD4 = (unity_ObjectToWorld * tmpvar_5).xyz;
					  xlv_TEXCOORD5 = o_32;
					  xlv_TEXCOORD6 = tmpvar_6;
					  xlv_TEXCOORD7 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_5));
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD7;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec3 worldN_3;
					  lowp vec4 c_4;
					  lowp float atten_5;
					  lowp vec3 tmpvar_6;
					  lowp float tmpvar_7;
					  lowp vec3 lightDir_8;
					  lowp vec3 _unity_tbn_2_9;
					  lowp vec3 _unity_tbn_1_10;
					  lowp vec3 _unity_tbn_0_11;
					  _unity_tbn_0_11 = xlv_TEXCOORD1;
					  _unity_tbn_1_10 = xlv_TEXCOORD2;
					  _unity_tbn_2_9 = xlv_TEXCOORD3;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD4));
					  lightDir_8 = tmpvar_12;
					  highp vec3 tmpvar_13;
					  highp vec4 depthSample_14;
					  lowp vec4 tmpvar_15;
					  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD5).xxxx;
					  depthSample_14 = tmpvar_15;
					  highp float tmpvar_16;
					  tmpvar_16 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_14.x) + _ZBufferParams.w))) - xlv_TEXCOORD5.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_17;
					  tmpvar_17 = clamp ((tmpvar_16 + (tmpvar_16 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_17));
					  lowp vec3 tmpvar_19;
					  tmpvar_19 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_13 = tmpvar_19;
					  tmpvar_6 = tmpvar_18.xyz;
					  tmpvar_7 = tmpvar_18.w;
					  lowp float tmpvar_20;
					  highp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_LightTexture0, ((xlv_TEXCOORD7.xy / xlv_TEXCOORD7.w) + 0.5));
					  tmpvar_20 = tmpvar_21.w;
					  lowp float tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD7.xyz, xlv_TEXCOORD7.xyz)));
					  tmpvar_22 = tmpvar_23.x;
					  highp float tmpvar_24;
					  tmpvar_24 = ((float(
					    (xlv_TEXCOORD7.z > 0.0)
					  ) * tmpvar_20) * tmpvar_22);
					  atten_5 = tmpvar_24;
					  worldN_3.x = dot (_unity_tbn_0_11, tmpvar_13);
					  worldN_3.y = dot (_unity_tbn_1_10, tmpvar_13);
					  worldN_3.z = dot (_unity_tbn_2_9, tmpvar_13);
					  highp vec3 tmpvar_25;
					  tmpvar_25 = normalize(worldN_3);
					  worldN_3 = tmpvar_25;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_8;
					  tmpvar_1 = (tmpvar_1 * atten_5);
					  lowp vec3 tmpvar_26;
					  mediump vec4 c_27;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize(tmpvar_25);
					  mediump vec3 tmpvar_29;
					  mediump vec3 albedo_30;
					  albedo_30 = tmpvar_6;
					  mediump vec3 tmpvar_31;
					  tmpvar_31 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_30, vec3(_Metallic));
					  tmpvar_29 = (albedo_30 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_26 = tmpvar_29;
					  mediump vec3 diffColor_32;
					  diffColor_32 = tmpvar_26;
					  mediump float alpha_33;
					  alpha_33 = tmpvar_7;
					  tmpvar_26 = diffColor_32;
					  mediump vec3 diffColor_34;
					  diffColor_34 = tmpvar_26;
					  mediump vec3 color_35;
					  highp float specularTerm_36;
					  highp float a2_37;
					  mediump float roughness_38;
					  mediump float perceptualRoughness_39;
					  highp vec3 tmpvar_40;
					  highp vec3 inVec_41;
					  inVec_41 = (tmpvar_2 + normalize((_WorldSpaceCameraPos - xlv_TEXCOORD4)));
					  tmpvar_40 = (inVec_41 * inversesqrt(max (0.001, 
					    dot (inVec_41, inVec_41)
					  )));
					  mediump float tmpvar_42;
					  highp float tmpvar_43;
					  tmpvar_43 = clamp (dot (tmpvar_28, tmpvar_2), 0.0, 1.0);
					  tmpvar_42 = tmpvar_43;
					  highp float tmpvar_44;
					  tmpvar_44 = clamp (dot (tmpvar_28, tmpvar_40), 0.0, 1.0);
					  highp float tmpvar_45;
					  highp float smoothness_46;
					  smoothness_46 = _Glossiness;
					  tmpvar_45 = (1.0 - smoothness_46);
					  perceptualRoughness_39 = tmpvar_45;
					  highp float tmpvar_47;
					  highp float perceptualRoughness_48;
					  perceptualRoughness_48 = perceptualRoughness_39;
					  tmpvar_47 = (perceptualRoughness_48 * perceptualRoughness_48);
					  roughness_38 = tmpvar_47;
					  mediump float tmpvar_49;
					  tmpvar_49 = (roughness_38 * roughness_38);
					  a2_37 = tmpvar_49;
					  specularTerm_36 = ((roughness_38 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_40), 0.0, 1.0)) * (1.5 + roughness_38))
					   * 
					    (((tmpvar_44 * tmpvar_44) * (a2_37 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_50;
					  tmpvar_50 = clamp (specularTerm_36, 0.0, 100.0);
					  specularTerm_36 = tmpvar_50;
					  highp vec3 tmpvar_51;
					  tmpvar_51 = (((diffColor_34 + 
					    (tmpvar_50 * tmpvar_31)
					  ) * tmpvar_1) * tmpvar_42);
					  color_35 = tmpvar_51;
					  mediump vec4 tmpvar_52;
					  tmpvar_52.w = 1.0;
					  tmpvar_52.xyz = color_35;
					  c_27.xyz = tmpvar_52.xyz;
					  c_27.w = alpha_33;
					  c_4 = c_27;
					  gl_FragData[0] = c_4;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					varying highp vec4 xlv_TEXCOORD7;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = _glesVertex.w;
					  highp vec4 tmpvar_6;
					  highp float result_7;
					  result_7 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_7 = (result_7 / _Period);
					  highp vec4 vertColor_8;
					  vertColor_8 = tmpvar_1;
					  highp vec3 tmpvar_9;
					  tmpvar_9.xz = vec2(0.0, 0.0);
					  highp float tmpvar_10;
					  tmpvar_10 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_9.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_7)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_8.y);
					  tmpvar_5.xyz = (_glesVertex.xyz + tmpvar_9);
					  highp vec4 vertColor_12;
					  vertColor_12 = tmpvar_1;
					  highp float result_13;
					  result_13 = (((_WaveDir02.x * tmpvar_5.x) + (_WaveDir02.y * tmpvar_5.y)) + (_WaveDir02.z * tmpvar_5.z));
					  result_13 = (result_13 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_14;
					  vertColor_14 = tmpvar_1;
					  highp vec3 tmpvar_15;
					  tmpvar_15.xz = vec2(0.0, 0.0);
					  tmpvar_15.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_13)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_14.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_15);
					  highp vec4 vertColor_16;
					  vertColor_16 = tmpvar_1;
					  highp float result_17;
					  result_17 = (((_WaveDir03.x * tmpvar_5.x) + (_WaveDir03.y * tmpvar_5.y)) + (_WaveDir03.z * tmpvar_5.z));
					  result_17 = (result_17 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_18;
					  vertColor_18 = tmpvar_1;
					  highp vec3 tmpvar_19;
					  tmpvar_19.xz = vec2(0.0, 0.0);
					  tmpvar_19.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_17)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_18.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_19);
					  highp vec4 vertColor_20;
					  vertColor_20 = tmpvar_1;
					  highp vec4 tmpvar_21;
					  highp vec4 tmpvar_22;
					  tmpvar_22.w = 1.0;
					  tmpvar_22.xyz = tmpvar_5.xyz;
					  tmpvar_21 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_22));
					  highp mat3 tmpvar_23;
					  tmpvar_23[0] = unity_WorldToObject[0].xyz;
					  tmpvar_23[1] = unity_WorldToObject[1].xyz;
					  tmpvar_23[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_24;
					  tmpvar_24 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_7))
					       * vertColor_12.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_10)
					       + result_13)) * vertColor_16.y) * tmpvar_11)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_17))
					     * vertColor_20.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_23));
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_25[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_25[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((tmpvar_25 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_26;
					  highp float tmpvar_27;
					  tmpvar_27 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_27;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = (((tmpvar_24.yzx * worldTangent_4.zxy) - (tmpvar_24.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_28;
					  highp vec3 tmpvar_29;
					  tmpvar_29.x = worldTangent_4.x;
					  tmpvar_29.y = worldBinormal_2.x;
					  tmpvar_29.z = tmpvar_24.x;
					  highp vec3 tmpvar_30;
					  tmpvar_30.x = worldTangent_4.y;
					  tmpvar_30.y = worldBinormal_2.y;
					  tmpvar_30.z = tmpvar_24.y;
					  highp vec3 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.z;
					  tmpvar_31.y = worldBinormal_2.z;
					  tmpvar_31.z = tmpvar_24.z;
					  highp vec4 o_32;
					  highp vec4 tmpvar_33;
					  tmpvar_33 = (tmpvar_21 * 0.5);
					  highp vec2 tmpvar_34;
					  tmpvar_34.x = tmpvar_33.x;
					  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
					  o_32.xy = (tmpvar_34 + tmpvar_33.w);
					  o_32.zw = tmpvar_21.zw;
					  gl_Position = tmpvar_21;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_29;
					  xlv_TEXCOORD2 = tmpvar_30;
					  xlv_TEXCOORD3 = tmpvar_31;
					  xlv_TEXCOORD4 = (unity_ObjectToWorld * tmpvar_5).xyz;
					  xlv_TEXCOORD5 = o_32;
					  xlv_TEXCOORD6 = tmpvar_6;
					  xlv_TEXCOORD7 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_5));
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD7;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec3 worldN_3;
					  lowp vec4 c_4;
					  lowp float atten_5;
					  lowp vec3 tmpvar_6;
					  lowp float tmpvar_7;
					  lowp vec3 lightDir_8;
					  lowp vec3 _unity_tbn_2_9;
					  lowp vec3 _unity_tbn_1_10;
					  lowp vec3 _unity_tbn_0_11;
					  _unity_tbn_0_11 = xlv_TEXCOORD1;
					  _unity_tbn_1_10 = xlv_TEXCOORD2;
					  _unity_tbn_2_9 = xlv_TEXCOORD3;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD4));
					  lightDir_8 = tmpvar_12;
					  highp vec3 tmpvar_13;
					  highp vec4 depthSample_14;
					  lowp vec4 tmpvar_15;
					  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD5).xxxx;
					  depthSample_14 = tmpvar_15;
					  highp float tmpvar_16;
					  tmpvar_16 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_14.x) + _ZBufferParams.w))) - xlv_TEXCOORD5.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_17;
					  tmpvar_17 = clamp ((tmpvar_16 + (tmpvar_16 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_17));
					  lowp vec3 tmpvar_19;
					  tmpvar_19 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_13 = tmpvar_19;
					  tmpvar_6 = tmpvar_18.xyz;
					  tmpvar_7 = tmpvar_18.w;
					  lowp float tmpvar_20;
					  highp vec4 tmpvar_21;
					  tmpvar_21 = texture2D (_LightTexture0, ((xlv_TEXCOORD7.xy / xlv_TEXCOORD7.w) + 0.5));
					  tmpvar_20 = tmpvar_21.w;
					  lowp float tmpvar_22;
					  highp vec4 tmpvar_23;
					  tmpvar_23 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD7.xyz, xlv_TEXCOORD7.xyz)));
					  tmpvar_22 = tmpvar_23.x;
					  highp float tmpvar_24;
					  tmpvar_24 = ((float(
					    (xlv_TEXCOORD7.z > 0.0)
					  ) * tmpvar_20) * tmpvar_22);
					  atten_5 = tmpvar_24;
					  worldN_3.x = dot (_unity_tbn_0_11, tmpvar_13);
					  worldN_3.y = dot (_unity_tbn_1_10, tmpvar_13);
					  worldN_3.z = dot (_unity_tbn_2_9, tmpvar_13);
					  highp vec3 tmpvar_25;
					  tmpvar_25 = normalize(worldN_3);
					  worldN_3 = tmpvar_25;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_8;
					  tmpvar_1 = (tmpvar_1 * atten_5);
					  lowp vec3 tmpvar_26;
					  mediump vec4 c_27;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = normalize(tmpvar_25);
					  mediump vec3 tmpvar_29;
					  mediump vec3 albedo_30;
					  albedo_30 = tmpvar_6;
					  mediump vec3 tmpvar_31;
					  tmpvar_31 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_30, vec3(_Metallic));
					  tmpvar_29 = (albedo_30 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_26 = tmpvar_29;
					  mediump vec3 diffColor_32;
					  diffColor_32 = tmpvar_26;
					  mediump float alpha_33;
					  alpha_33 = tmpvar_7;
					  tmpvar_26 = diffColor_32;
					  mediump vec3 diffColor_34;
					  diffColor_34 = tmpvar_26;
					  mediump vec3 color_35;
					  highp float specularTerm_36;
					  highp float a2_37;
					  mediump float roughness_38;
					  mediump float perceptualRoughness_39;
					  highp vec3 tmpvar_40;
					  highp vec3 inVec_41;
					  inVec_41 = (tmpvar_2 + normalize((_WorldSpaceCameraPos - xlv_TEXCOORD4)));
					  tmpvar_40 = (inVec_41 * inversesqrt(max (0.001, 
					    dot (inVec_41, inVec_41)
					  )));
					  mediump float tmpvar_42;
					  highp float tmpvar_43;
					  tmpvar_43 = clamp (dot (tmpvar_28, tmpvar_2), 0.0, 1.0);
					  tmpvar_42 = tmpvar_43;
					  highp float tmpvar_44;
					  tmpvar_44 = clamp (dot (tmpvar_28, tmpvar_40), 0.0, 1.0);
					  highp float tmpvar_45;
					  highp float smoothness_46;
					  smoothness_46 = _Glossiness;
					  tmpvar_45 = (1.0 - smoothness_46);
					  perceptualRoughness_39 = tmpvar_45;
					  highp float tmpvar_47;
					  highp float perceptualRoughness_48;
					  perceptualRoughness_48 = perceptualRoughness_39;
					  tmpvar_47 = (perceptualRoughness_48 * perceptualRoughness_48);
					  roughness_38 = tmpvar_47;
					  mediump float tmpvar_49;
					  tmpvar_49 = (roughness_38 * roughness_38);
					  a2_37 = tmpvar_49;
					  specularTerm_36 = ((roughness_38 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_40), 0.0, 1.0)) * (1.5 + roughness_38))
					   * 
					    (((tmpvar_44 * tmpvar_44) * (a2_37 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_50;
					  tmpvar_50 = clamp (specularTerm_36, 0.0, 100.0);
					  specularTerm_36 = tmpvar_50;
					  highp vec3 tmpvar_51;
					  tmpvar_51 = (((diffColor_34 + 
					    (tmpvar_50 * tmpvar_31)
					  ) * tmpvar_1) * tmpvar_42);
					  color_35 = tmpvar_51;
					  mediump vec4 tmpvar_52;
					  tmpvar_52.w = 1.0;
					  tmpvar_52.xyz = color_35;
					  c_27.xyz = tmpvar_52.xyz;
					  c_27.w = alpha_33;
					  c_4 = c_27;
					  gl_FragData[0] = c_4;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat13;
					float u_xlat18;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat18 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat18 = u_xlat18 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat13 = _Time.y * u_xlat1.x + u_xlat18;
					    u_xlat18 = _Time.y * _Frequency + u_xlat18;
					    u_xlat18 = sin(u_xlat18);
					    u_xlat18 = u_xlat18 * in_COLOR0.y;
					    u_xlat18 = u_xlat18 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat18)) + in_NORMAL0.xyz;
					    u_xlat18 = sin(u_xlat13);
					    u_xlat18 = u_xlat1.y * u_xlat18;
					    u_xlat0.y = u_xlat18 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat18 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat18 = u_xlat18 / u_xlat3.z;
					    u_xlat13 = _Time.y * u_xlat1.x + u_xlat18;
					    u_xlat18 = _Time.y * u_xlat3.x + u_xlat18;
					    u_xlat18 = sin(u_xlat18);
					    u_xlat18 = u_xlat18 * in_COLOR0.y;
					    u_xlat18 = u_xlat3.y * u_xlat18;
					    u_xlat13 = sin(u_xlat13);
					    u_xlat13 = u_xlat1.y * u_xlat13;
					    u_xlat3.y = u_xlat13 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat13 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat13 = u_xlat13 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat13;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat13;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat13 = u_xlat1.z * in_COLOR0.y;
					    u_xlat13 = u_xlat3.z * u_xlat13;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat5 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat5 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat5;
					    gl_Position = u_xlat4;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx + abs(vec3(u_xlat18));
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + abs(vec3(u_xlat13));
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat6 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat6) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat1.x = u_xlat4.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat4.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat4.zw;
					    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform highp sampler2D unity_NHxRoughness;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					vec2 u_xlat10;
					bool u_xlatb10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat10_0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat10_0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat10_0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat15)) + u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat5.x * u_xlat5.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat5.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat5.x = u_xlat5.x * 16.0;
					    u_xlat10.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat10.x = texture(_CameraDepthTexture, u_xlat10.xy).x;
					    u_xlat10.x = _ZBufferParams.z * u_xlat10.x + _ZBufferParams.w;
					    u_xlat10.x = float(1.0) / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + (-vs_TEXCOORD5.w);
					    u_xlat10.x = u_xlat10.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
					#else
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					#endif
					    u_xlat10.x = (-u_xlat10.x) + 1.0;
					    u_xlat10.x = u_xlat10.x * _FoamColor.w + u_xlat10.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
					#else
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					#endif
					    u_xlat10_1 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * _Color;
					    u_xlat16_1 = u_xlat10_1 * _FoamColor + (-u_xlat16_2);
					    u_xlat1 = u_xlat10.xxxx * u_xlat16_1 + u_xlat16_2;
					    u_xlat16_3.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_3.xyz = u_xlat5.xxx * u_xlat16_3.xyz;
					    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_18) + u_xlat16_3.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat5.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.x = texture(_LightTexture0, u_xlat5.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb10 = !!(0.0<u_xlat1.z);
					#else
					    u_xlatb10 = 0.0<u_xlat1.z;
					#endif
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat15)).x;
					    u_xlat16_18 = (u_xlatb10) ? 1.0 : 0.0;
					    u_xlat16_18 = u_xlat5.x * u_xlat16_18;
					    u_xlat16_18 = u_xlat15 * u_xlat16_18;
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat13;
					float u_xlat18;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat18 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat18 = u_xlat18 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat13 = _Time.y * u_xlat1.x + u_xlat18;
					    u_xlat18 = _Time.y * _Frequency + u_xlat18;
					    u_xlat18 = sin(u_xlat18);
					    u_xlat18 = u_xlat18 * in_COLOR0.y;
					    u_xlat18 = u_xlat18 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat18)) + in_NORMAL0.xyz;
					    u_xlat18 = sin(u_xlat13);
					    u_xlat18 = u_xlat1.y * u_xlat18;
					    u_xlat0.y = u_xlat18 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat18 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat18 = u_xlat18 / u_xlat3.z;
					    u_xlat13 = _Time.y * u_xlat1.x + u_xlat18;
					    u_xlat18 = _Time.y * u_xlat3.x + u_xlat18;
					    u_xlat18 = sin(u_xlat18);
					    u_xlat18 = u_xlat18 * in_COLOR0.y;
					    u_xlat18 = u_xlat3.y * u_xlat18;
					    u_xlat13 = sin(u_xlat13);
					    u_xlat13 = u_xlat1.y * u_xlat13;
					    u_xlat3.y = u_xlat13 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat13 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat13 = u_xlat13 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat13;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat13;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat13 = u_xlat1.z * in_COLOR0.y;
					    u_xlat13 = u_xlat3.z * u_xlat13;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat5 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat5 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat5;
					    gl_Position = u_xlat4;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx + abs(vec3(u_xlat18));
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + abs(vec3(u_xlat13));
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat6 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat6) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat1.x = u_xlat4.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat4.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat4.zw;
					    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat6;
					vec2 u_xlat12;
					mediump float u_xlat16_12;
					float u_xlat18;
					float u_xlat19;
					mediump float u_xlat16_19;
					mediump float u_xlat16_20;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat18 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = max(u_xlat18, 0.319999993);
					    u_xlat16_19 = (-_Glossiness) + 1.0;
					    u_xlat16_3.x = u_xlat16_19 * u_xlat16_19 + 1.5;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat18 = u_xlat18 * u_xlat16_3.x;
					    u_xlat10_3.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat10_3.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat10_3.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat10_3.xyz);
					    u_xlat3.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat6 = dot(u_xlat3.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
					#else
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_12 = u_xlat16_19 * u_xlat16_19 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_12 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat18;
					    u_xlat0.x = u_xlat16_19 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat12.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat12.x = texture(_CameraDepthTexture, u_xlat12.xy).x;
					    u_xlat12.x = _ZBufferParams.z * u_xlat12.x + _ZBufferParams.w;
					    u_xlat12.x = float(1.0) / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x + (-vs_TEXCOORD5.w);
					    u_xlat12.x = u_xlat12.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
					#else
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					#endif
					    u_xlat12.x = (-u_xlat12.x) + 1.0;
					    u_xlat12.x = u_xlat12.x * _FoamColor.w + u_xlat12.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
					#else
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					#endif
					    u_xlat10_1 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * _Color;
					    u_xlat16_1 = u_xlat10_1 * _FoamColor + (-u_xlat16_3);
					    u_xlat1 = u_xlat12.xxxx * u_xlat16_1 + u_xlat16_3;
					    u_xlat16_5.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_5.xyz;
					    u_xlat16_20 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xzw = u_xlat1.xyz * vec3(u_xlat16_20) + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xzw;
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat0.xzw;
					    SV_Target0 = u_xlat1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat13;
					float u_xlat18;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat18 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat18 = u_xlat18 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat13 = _Time.y * u_xlat1.x + u_xlat18;
					    u_xlat18 = _Time.y * _Frequency + u_xlat18;
					    u_xlat18 = sin(u_xlat18);
					    u_xlat18 = u_xlat18 * in_COLOR0.y;
					    u_xlat18 = u_xlat18 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat18)) + in_NORMAL0.xyz;
					    u_xlat18 = sin(u_xlat13);
					    u_xlat18 = u_xlat1.y * u_xlat18;
					    u_xlat0.y = u_xlat18 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat18 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat18 = u_xlat18 / u_xlat3.z;
					    u_xlat13 = _Time.y * u_xlat1.x + u_xlat18;
					    u_xlat18 = _Time.y * u_xlat3.x + u_xlat18;
					    u_xlat18 = sin(u_xlat18);
					    u_xlat18 = u_xlat18 * in_COLOR0.y;
					    u_xlat18 = u_xlat3.y * u_xlat18;
					    u_xlat13 = sin(u_xlat13);
					    u_xlat13 = u_xlat1.y * u_xlat13;
					    u_xlat3.y = u_xlat13 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat13 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat13 = u_xlat13 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat13;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat13;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat13 = u_xlat1.z * in_COLOR0.y;
					    u_xlat13 = u_xlat3.z * u_xlat13;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat5 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat5 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat5;
					    gl_Position = u_xlat4;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx + abs(vec3(u_xlat18));
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + abs(vec3(u_xlat13));
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat6 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat6) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat1.x = u_xlat4.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat4.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat4.zw;
					    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat6;
					vec2 u_xlat12;
					mediump float u_xlat16_12;
					float u_xlat18;
					float u_xlat19;
					mediump float u_xlat16_19;
					mediump float u_xlat16_20;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat18 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = max(u_xlat18, 0.319999993);
					    u_xlat16_19 = (-_Glossiness) + 1.0;
					    u_xlat16_3.x = u_xlat16_19 * u_xlat16_19 + 1.5;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat18 = u_xlat18 * u_xlat16_3.x;
					    u_xlat10_3.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat10_3.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat10_3.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat10_3.xyz);
					    u_xlat3.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat6 = dot(u_xlat3.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
					#else
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_12 = u_xlat16_19 * u_xlat16_19 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_12 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat18;
					    u_xlat0.x = u_xlat16_19 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat12.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat12.x = texture(_CameraDepthTexture, u_xlat12.xy).x;
					    u_xlat12.x = _ZBufferParams.z * u_xlat12.x + _ZBufferParams.w;
					    u_xlat12.x = float(1.0) / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x + (-vs_TEXCOORD5.w);
					    u_xlat12.x = u_xlat12.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
					#else
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					#endif
					    u_xlat12.x = (-u_xlat12.x) + 1.0;
					    u_xlat12.x = u_xlat12.x * _FoamColor.w + u_xlat12.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
					#else
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					#endif
					    u_xlat10_1 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * _Color;
					    u_xlat16_1 = u_xlat10_1 * _FoamColor + (-u_xlat16_3);
					    u_xlat1 = u_xlat12.xxxx * u_xlat16_1 + u_xlat16_3;
					    u_xlat16_5.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_5.xyz;
					    u_xlat16_20 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xzw = u_xlat1.xyz * vec3(u_xlat16_20) + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xzw;
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat0.xzw;
					    SV_Target0 = u_xlat1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					varying highp vec3 xlv_TEXCOORD7;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = _glesVertex.w;
					  highp vec4 tmpvar_6;
					  highp float result_7;
					  result_7 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_7 = (result_7 / _Period);
					  highp vec4 vertColor_8;
					  vertColor_8 = tmpvar_1;
					  highp vec3 tmpvar_9;
					  tmpvar_9.xz = vec2(0.0, 0.0);
					  highp float tmpvar_10;
					  tmpvar_10 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_9.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_7)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_8.y);
					  tmpvar_5.xyz = (_glesVertex.xyz + tmpvar_9);
					  highp vec4 vertColor_12;
					  vertColor_12 = tmpvar_1;
					  highp float result_13;
					  result_13 = (((_WaveDir02.x * tmpvar_5.x) + (_WaveDir02.y * tmpvar_5.y)) + (_WaveDir02.z * tmpvar_5.z));
					  result_13 = (result_13 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_14;
					  vertColor_14 = tmpvar_1;
					  highp vec3 tmpvar_15;
					  tmpvar_15.xz = vec2(0.0, 0.0);
					  tmpvar_15.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_13)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_14.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_15);
					  highp vec4 vertColor_16;
					  vertColor_16 = tmpvar_1;
					  highp float result_17;
					  result_17 = (((_WaveDir03.x * tmpvar_5.x) + (_WaveDir03.y * tmpvar_5.y)) + (_WaveDir03.z * tmpvar_5.z));
					  result_17 = (result_17 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_18;
					  vertColor_18 = tmpvar_1;
					  highp vec3 tmpvar_19;
					  tmpvar_19.xz = vec2(0.0, 0.0);
					  tmpvar_19.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_17)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_18.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_19);
					  highp vec4 vertColor_20;
					  vertColor_20 = tmpvar_1;
					  highp vec4 tmpvar_21;
					  highp vec4 tmpvar_22;
					  tmpvar_22.w = 1.0;
					  tmpvar_22.xyz = tmpvar_5.xyz;
					  tmpvar_21 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_22));
					  highp mat3 tmpvar_23;
					  tmpvar_23[0] = unity_WorldToObject[0].xyz;
					  tmpvar_23[1] = unity_WorldToObject[1].xyz;
					  tmpvar_23[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_24;
					  tmpvar_24 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_7))
					       * vertColor_12.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_10)
					       + result_13)) * vertColor_16.y) * tmpvar_11)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_17))
					     * vertColor_20.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_23));
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_25[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_25[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((tmpvar_25 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_26;
					  highp float tmpvar_27;
					  tmpvar_27 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_27;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = (((tmpvar_24.yzx * worldTangent_4.zxy) - (tmpvar_24.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_28;
					  highp vec3 tmpvar_29;
					  tmpvar_29.x = worldTangent_4.x;
					  tmpvar_29.y = worldBinormal_2.x;
					  tmpvar_29.z = tmpvar_24.x;
					  highp vec3 tmpvar_30;
					  tmpvar_30.x = worldTangent_4.y;
					  tmpvar_30.y = worldBinormal_2.y;
					  tmpvar_30.z = tmpvar_24.y;
					  highp vec3 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.z;
					  tmpvar_31.y = worldBinormal_2.z;
					  tmpvar_31.z = tmpvar_24.z;
					  highp vec4 o_32;
					  highp vec4 tmpvar_33;
					  tmpvar_33 = (tmpvar_21 * 0.5);
					  highp vec2 tmpvar_34;
					  tmpvar_34.x = tmpvar_33.x;
					  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
					  o_32.xy = (tmpvar_34 + tmpvar_33.w);
					  o_32.zw = tmpvar_21.zw;
					  gl_Position = tmpvar_21;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_29;
					  xlv_TEXCOORD2 = tmpvar_30;
					  xlv_TEXCOORD3 = tmpvar_31;
					  xlv_TEXCOORD4 = (unity_ObjectToWorld * tmpvar_5).xyz;
					  xlv_TEXCOORD5 = o_32;
					  xlv_TEXCOORD6 = tmpvar_6;
					  xlv_TEXCOORD7 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_5)).xyz;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp samplerCube _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec3 xlv_TEXCOORD7;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec3 worldN_3;
					  lowp vec4 c_4;
					  lowp float atten_5;
					  lowp vec3 tmpvar_6;
					  lowp float tmpvar_7;
					  highp vec3 worldViewDir_8;
					  lowp vec3 lightDir_9;
					  lowp vec3 _unity_tbn_2_10;
					  lowp vec3 _unity_tbn_1_11;
					  lowp vec3 _unity_tbn_0_12;
					  _unity_tbn_0_12 = xlv_TEXCOORD1;
					  _unity_tbn_1_11 = xlv_TEXCOORD2;
					  _unity_tbn_2_10 = xlv_TEXCOORD3;
					  highp vec3 tmpvar_13;
					  tmpvar_13 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD4));
					  lightDir_9 = tmpvar_13;
					  worldViewDir_8 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD4));
					  highp vec3 tmpvar_14;
					  highp vec4 depthSample_15;
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD5).xxxx;
					  depthSample_15 = tmpvar_16;
					  highp float tmpvar_17;
					  tmpvar_17 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_15.x) + _ZBufferParams.w))) - xlv_TEXCOORD5.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_18;
					  tmpvar_18 = clamp ((tmpvar_17 + (tmpvar_17 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_18));
					  lowp vec3 tmpvar_20;
					  tmpvar_20 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_14 = tmpvar_20;
					  tmpvar_6 = tmpvar_19.xyz;
					  tmpvar_7 = tmpvar_19.w;
					  highp float tmpvar_21;
					  tmpvar_21 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD7, xlv_TEXCOORD7))).x * textureCube (_LightTexture0, xlv_TEXCOORD7).w);
					  atten_5 = tmpvar_21;
					  worldN_3.x = dot (_unity_tbn_0_12, tmpvar_14);
					  worldN_3.y = dot (_unity_tbn_1_11, tmpvar_14);
					  worldN_3.z = dot (_unity_tbn_2_10, tmpvar_14);
					  highp vec3 tmpvar_22;
					  tmpvar_22 = normalize(worldN_3);
					  worldN_3 = tmpvar_22;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_9;
					  tmpvar_1 = (tmpvar_1 * atten_5);
					  lowp vec3 tmpvar_23;
					  mediump vec4 c_24;
					  highp vec3 tmpvar_25;
					  tmpvar_25 = normalize(tmpvar_22);
					  mediump vec3 tmpvar_26;
					  mediump vec3 albedo_27;
					  albedo_27 = tmpvar_6;
					  tmpvar_26 = (albedo_27 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_23 = tmpvar_26;
					  mediump vec3 diffColor_28;
					  diffColor_28 = tmpvar_23;
					  mediump float alpha_29;
					  alpha_29 = tmpvar_7;
					  tmpvar_23 = diffColor_28;
					  mediump vec3 diffColor_30;
					  diffColor_30 = tmpvar_23;
					  mediump vec2 rlPow4AndFresnelTerm_31;
					  mediump float tmpvar_32;
					  highp float tmpvar_33;
					  tmpvar_33 = clamp (dot (tmpvar_25, tmpvar_2), 0.0, 1.0);
					  tmpvar_32 = tmpvar_33;
					  mediump float tmpvar_34;
					  highp float tmpvar_35;
					  tmpvar_35 = clamp (dot (tmpvar_25, worldViewDir_8), 0.0, 1.0);
					  tmpvar_34 = tmpvar_35;
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = dot ((worldViewDir_8 - (2.0 * 
					    (dot (tmpvar_25, worldViewDir_8) * tmpvar_25)
					  )), tmpvar_2);
					  tmpvar_36.y = (1.0 - tmpvar_34);
					  highp vec2 tmpvar_37;
					  tmpvar_37 = ((tmpvar_36 * tmpvar_36) * (tmpvar_36 * tmpvar_36));
					  rlPow4AndFresnelTerm_31 = tmpvar_37;
					  mediump float tmpvar_38;
					  tmpvar_38 = rlPow4AndFresnelTerm_31.x;
					  mediump float specular_39;
					  highp float smoothness_40;
					  smoothness_40 = _Glossiness;
					  highp vec2 tmpvar_41;
					  tmpvar_41.x = tmpvar_38;
					  tmpvar_41.y = (1.0 - smoothness_40);
					  highp float tmpvar_42;
					  tmpvar_42 = (texture2D (unity_NHxRoughness, tmpvar_41).x * 16.0);
					  specular_39 = tmpvar_42;
					  mediump vec4 tmpvar_43;
					  tmpvar_43.w = 1.0;
					  tmpvar_43.xyz = ((diffColor_30 + (specular_39 * 
					    mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_27, vec3(_Metallic))
					  )) * (tmpvar_1 * tmpvar_32));
					  c_24.xyz = tmpvar_43.xyz;
					  c_24.w = alpha_29;
					  c_4 = c_24;
					  gl_FragData[0] = c_4;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					varying highp vec3 xlv_TEXCOORD7;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = _glesVertex.w;
					  highp vec4 tmpvar_6;
					  highp float result_7;
					  result_7 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_7 = (result_7 / _Period);
					  highp vec4 vertColor_8;
					  vertColor_8 = tmpvar_1;
					  highp vec3 tmpvar_9;
					  tmpvar_9.xz = vec2(0.0, 0.0);
					  highp float tmpvar_10;
					  tmpvar_10 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_9.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_7)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_8.y);
					  tmpvar_5.xyz = (_glesVertex.xyz + tmpvar_9);
					  highp vec4 vertColor_12;
					  vertColor_12 = tmpvar_1;
					  highp float result_13;
					  result_13 = (((_WaveDir02.x * tmpvar_5.x) + (_WaveDir02.y * tmpvar_5.y)) + (_WaveDir02.z * tmpvar_5.z));
					  result_13 = (result_13 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_14;
					  vertColor_14 = tmpvar_1;
					  highp vec3 tmpvar_15;
					  tmpvar_15.xz = vec2(0.0, 0.0);
					  tmpvar_15.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_13)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_14.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_15);
					  highp vec4 vertColor_16;
					  vertColor_16 = tmpvar_1;
					  highp float result_17;
					  result_17 = (((_WaveDir03.x * tmpvar_5.x) + (_WaveDir03.y * tmpvar_5.y)) + (_WaveDir03.z * tmpvar_5.z));
					  result_17 = (result_17 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_18;
					  vertColor_18 = tmpvar_1;
					  highp vec3 tmpvar_19;
					  tmpvar_19.xz = vec2(0.0, 0.0);
					  tmpvar_19.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_17)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_18.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_19);
					  highp vec4 vertColor_20;
					  vertColor_20 = tmpvar_1;
					  highp vec4 tmpvar_21;
					  highp vec4 tmpvar_22;
					  tmpvar_22.w = 1.0;
					  tmpvar_22.xyz = tmpvar_5.xyz;
					  tmpvar_21 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_22));
					  highp mat3 tmpvar_23;
					  tmpvar_23[0] = unity_WorldToObject[0].xyz;
					  tmpvar_23[1] = unity_WorldToObject[1].xyz;
					  tmpvar_23[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_24;
					  tmpvar_24 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_7))
					       * vertColor_12.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_10)
					       + result_13)) * vertColor_16.y) * tmpvar_11)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_17))
					     * vertColor_20.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_23));
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_25[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_25[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((tmpvar_25 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_26;
					  highp float tmpvar_27;
					  tmpvar_27 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_27;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = (((tmpvar_24.yzx * worldTangent_4.zxy) - (tmpvar_24.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_28;
					  highp vec3 tmpvar_29;
					  tmpvar_29.x = worldTangent_4.x;
					  tmpvar_29.y = worldBinormal_2.x;
					  tmpvar_29.z = tmpvar_24.x;
					  highp vec3 tmpvar_30;
					  tmpvar_30.x = worldTangent_4.y;
					  tmpvar_30.y = worldBinormal_2.y;
					  tmpvar_30.z = tmpvar_24.y;
					  highp vec3 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.z;
					  tmpvar_31.y = worldBinormal_2.z;
					  tmpvar_31.z = tmpvar_24.z;
					  highp vec4 o_32;
					  highp vec4 tmpvar_33;
					  tmpvar_33 = (tmpvar_21 * 0.5);
					  highp vec2 tmpvar_34;
					  tmpvar_34.x = tmpvar_33.x;
					  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
					  o_32.xy = (tmpvar_34 + tmpvar_33.w);
					  o_32.zw = tmpvar_21.zw;
					  gl_Position = tmpvar_21;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_29;
					  xlv_TEXCOORD2 = tmpvar_30;
					  xlv_TEXCOORD3 = tmpvar_31;
					  xlv_TEXCOORD4 = (unity_ObjectToWorld * tmpvar_5).xyz;
					  xlv_TEXCOORD5 = o_32;
					  xlv_TEXCOORD6 = tmpvar_6;
					  xlv_TEXCOORD7 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_5)).xyz;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform highp samplerCube _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec3 xlv_TEXCOORD7;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec3 worldN_3;
					  lowp vec4 c_4;
					  lowp float atten_5;
					  lowp vec3 tmpvar_6;
					  lowp float tmpvar_7;
					  lowp vec3 lightDir_8;
					  lowp vec3 _unity_tbn_2_9;
					  lowp vec3 _unity_tbn_1_10;
					  lowp vec3 _unity_tbn_0_11;
					  _unity_tbn_0_11 = xlv_TEXCOORD1;
					  _unity_tbn_1_10 = xlv_TEXCOORD2;
					  _unity_tbn_2_9 = xlv_TEXCOORD3;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD4));
					  lightDir_8 = tmpvar_12;
					  highp vec3 tmpvar_13;
					  highp vec4 depthSample_14;
					  lowp vec4 tmpvar_15;
					  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD5).xxxx;
					  depthSample_14 = tmpvar_15;
					  highp float tmpvar_16;
					  tmpvar_16 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_14.x) + _ZBufferParams.w))) - xlv_TEXCOORD5.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_17;
					  tmpvar_17 = clamp ((tmpvar_16 + (tmpvar_16 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_17));
					  lowp vec3 tmpvar_19;
					  tmpvar_19 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_13 = tmpvar_19;
					  tmpvar_6 = tmpvar_18.xyz;
					  tmpvar_7 = tmpvar_18.w;
					  highp float tmpvar_20;
					  tmpvar_20 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD7, xlv_TEXCOORD7))).x * textureCube (_LightTexture0, xlv_TEXCOORD7).w);
					  atten_5 = tmpvar_20;
					  worldN_3.x = dot (_unity_tbn_0_11, tmpvar_13);
					  worldN_3.y = dot (_unity_tbn_1_10, tmpvar_13);
					  worldN_3.z = dot (_unity_tbn_2_9, tmpvar_13);
					  highp vec3 tmpvar_21;
					  tmpvar_21 = normalize(worldN_3);
					  worldN_3 = tmpvar_21;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_8;
					  tmpvar_1 = (tmpvar_1 * atten_5);
					  lowp vec3 tmpvar_22;
					  mediump vec4 c_23;
					  highp vec3 tmpvar_24;
					  tmpvar_24 = normalize(tmpvar_21);
					  mediump vec3 tmpvar_25;
					  mediump vec3 albedo_26;
					  albedo_26 = tmpvar_6;
					  mediump vec3 tmpvar_27;
					  tmpvar_27 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_26, vec3(_Metallic));
					  tmpvar_25 = (albedo_26 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_22 = tmpvar_25;
					  mediump vec3 diffColor_28;
					  diffColor_28 = tmpvar_22;
					  mediump float alpha_29;
					  alpha_29 = tmpvar_7;
					  tmpvar_22 = diffColor_28;
					  mediump vec3 diffColor_30;
					  diffColor_30 = tmpvar_22;
					  mediump vec3 color_31;
					  highp float specularTerm_32;
					  highp float a2_33;
					  mediump float roughness_34;
					  mediump float perceptualRoughness_35;
					  highp vec3 tmpvar_36;
					  highp vec3 inVec_37;
					  inVec_37 = (tmpvar_2 + normalize((_WorldSpaceCameraPos - xlv_TEXCOORD4)));
					  tmpvar_36 = (inVec_37 * inversesqrt(max (0.001, 
					    dot (inVec_37, inVec_37)
					  )));
					  mediump float tmpvar_38;
					  highp float tmpvar_39;
					  tmpvar_39 = clamp (dot (tmpvar_24, tmpvar_2), 0.0, 1.0);
					  tmpvar_38 = tmpvar_39;
					  highp float tmpvar_40;
					  tmpvar_40 = clamp (dot (tmpvar_24, tmpvar_36), 0.0, 1.0);
					  highp float tmpvar_41;
					  highp float smoothness_42;
					  smoothness_42 = _Glossiness;
					  tmpvar_41 = (1.0 - smoothness_42);
					  perceptualRoughness_35 = tmpvar_41;
					  highp float tmpvar_43;
					  highp float perceptualRoughness_44;
					  perceptualRoughness_44 = perceptualRoughness_35;
					  tmpvar_43 = (perceptualRoughness_44 * perceptualRoughness_44);
					  roughness_34 = tmpvar_43;
					  mediump float tmpvar_45;
					  tmpvar_45 = (roughness_34 * roughness_34);
					  a2_33 = tmpvar_45;
					  specularTerm_32 = ((roughness_34 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_36), 0.0, 1.0)) * (1.5 + roughness_34))
					   * 
					    (((tmpvar_40 * tmpvar_40) * (a2_33 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_46;
					  tmpvar_46 = clamp (specularTerm_32, 0.0, 100.0);
					  specularTerm_32 = tmpvar_46;
					  highp vec3 tmpvar_47;
					  tmpvar_47 = (((diffColor_30 + 
					    (tmpvar_46 * tmpvar_27)
					  ) * tmpvar_1) * tmpvar_38);
					  color_31 = tmpvar_47;
					  mediump vec4 tmpvar_48;
					  tmpvar_48.w = 1.0;
					  tmpvar_48.xyz = color_31;
					  c_23.xyz = tmpvar_48.xyz;
					  c_23.w = alpha_29;
					  c_4 = c_23;
					  gl_FragData[0] = c_4;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					varying highp vec3 xlv_TEXCOORD7;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = _glesVertex.w;
					  highp vec4 tmpvar_6;
					  highp float result_7;
					  result_7 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_7 = (result_7 / _Period);
					  highp vec4 vertColor_8;
					  vertColor_8 = tmpvar_1;
					  highp vec3 tmpvar_9;
					  tmpvar_9.xz = vec2(0.0, 0.0);
					  highp float tmpvar_10;
					  tmpvar_10 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_9.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_7)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_8.y);
					  tmpvar_5.xyz = (_glesVertex.xyz + tmpvar_9);
					  highp vec4 vertColor_12;
					  vertColor_12 = tmpvar_1;
					  highp float result_13;
					  result_13 = (((_WaveDir02.x * tmpvar_5.x) + (_WaveDir02.y * tmpvar_5.y)) + (_WaveDir02.z * tmpvar_5.z));
					  result_13 = (result_13 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_14;
					  vertColor_14 = tmpvar_1;
					  highp vec3 tmpvar_15;
					  tmpvar_15.xz = vec2(0.0, 0.0);
					  tmpvar_15.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_13)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_14.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_15);
					  highp vec4 vertColor_16;
					  vertColor_16 = tmpvar_1;
					  highp float result_17;
					  result_17 = (((_WaveDir03.x * tmpvar_5.x) + (_WaveDir03.y * tmpvar_5.y)) + (_WaveDir03.z * tmpvar_5.z));
					  result_17 = (result_17 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_18;
					  vertColor_18 = tmpvar_1;
					  highp vec3 tmpvar_19;
					  tmpvar_19.xz = vec2(0.0, 0.0);
					  tmpvar_19.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_17)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_18.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_19);
					  highp vec4 vertColor_20;
					  vertColor_20 = tmpvar_1;
					  highp vec4 tmpvar_21;
					  highp vec4 tmpvar_22;
					  tmpvar_22.w = 1.0;
					  tmpvar_22.xyz = tmpvar_5.xyz;
					  tmpvar_21 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_22));
					  highp mat3 tmpvar_23;
					  tmpvar_23[0] = unity_WorldToObject[0].xyz;
					  tmpvar_23[1] = unity_WorldToObject[1].xyz;
					  tmpvar_23[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_24;
					  tmpvar_24 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_7))
					       * vertColor_12.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_10)
					       + result_13)) * vertColor_16.y) * tmpvar_11)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_17))
					     * vertColor_20.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_23));
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_25[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_25[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((tmpvar_25 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_26;
					  highp float tmpvar_27;
					  tmpvar_27 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_27;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = (((tmpvar_24.yzx * worldTangent_4.zxy) - (tmpvar_24.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_28;
					  highp vec3 tmpvar_29;
					  tmpvar_29.x = worldTangent_4.x;
					  tmpvar_29.y = worldBinormal_2.x;
					  tmpvar_29.z = tmpvar_24.x;
					  highp vec3 tmpvar_30;
					  tmpvar_30.x = worldTangent_4.y;
					  tmpvar_30.y = worldBinormal_2.y;
					  tmpvar_30.z = tmpvar_24.y;
					  highp vec3 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.z;
					  tmpvar_31.y = worldBinormal_2.z;
					  tmpvar_31.z = tmpvar_24.z;
					  highp vec4 o_32;
					  highp vec4 tmpvar_33;
					  tmpvar_33 = (tmpvar_21 * 0.5);
					  highp vec2 tmpvar_34;
					  tmpvar_34.x = tmpvar_33.x;
					  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
					  o_32.xy = (tmpvar_34 + tmpvar_33.w);
					  o_32.zw = tmpvar_21.zw;
					  gl_Position = tmpvar_21;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_29;
					  xlv_TEXCOORD2 = tmpvar_30;
					  xlv_TEXCOORD3 = tmpvar_31;
					  xlv_TEXCOORD4 = (unity_ObjectToWorld * tmpvar_5).xyz;
					  xlv_TEXCOORD5 = o_32;
					  xlv_TEXCOORD6 = tmpvar_6;
					  xlv_TEXCOORD7 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_5)).xyz;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform highp samplerCube _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec3 xlv_TEXCOORD7;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec3 worldN_3;
					  lowp vec4 c_4;
					  lowp float atten_5;
					  lowp vec3 tmpvar_6;
					  lowp float tmpvar_7;
					  lowp vec3 lightDir_8;
					  lowp vec3 _unity_tbn_2_9;
					  lowp vec3 _unity_tbn_1_10;
					  lowp vec3 _unity_tbn_0_11;
					  _unity_tbn_0_11 = xlv_TEXCOORD1;
					  _unity_tbn_1_10 = xlv_TEXCOORD2;
					  _unity_tbn_2_9 = xlv_TEXCOORD3;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD4));
					  lightDir_8 = tmpvar_12;
					  highp vec3 tmpvar_13;
					  highp vec4 depthSample_14;
					  lowp vec4 tmpvar_15;
					  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD5).xxxx;
					  depthSample_14 = tmpvar_15;
					  highp float tmpvar_16;
					  tmpvar_16 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_14.x) + _ZBufferParams.w))) - xlv_TEXCOORD5.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_17;
					  tmpvar_17 = clamp ((tmpvar_16 + (tmpvar_16 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_17));
					  lowp vec3 tmpvar_19;
					  tmpvar_19 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_13 = tmpvar_19;
					  tmpvar_6 = tmpvar_18.xyz;
					  tmpvar_7 = tmpvar_18.w;
					  highp float tmpvar_20;
					  tmpvar_20 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD7, xlv_TEXCOORD7))).x * textureCube (_LightTexture0, xlv_TEXCOORD7).w);
					  atten_5 = tmpvar_20;
					  worldN_3.x = dot (_unity_tbn_0_11, tmpvar_13);
					  worldN_3.y = dot (_unity_tbn_1_10, tmpvar_13);
					  worldN_3.z = dot (_unity_tbn_2_9, tmpvar_13);
					  highp vec3 tmpvar_21;
					  tmpvar_21 = normalize(worldN_3);
					  worldN_3 = tmpvar_21;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_8;
					  tmpvar_1 = (tmpvar_1 * atten_5);
					  lowp vec3 tmpvar_22;
					  mediump vec4 c_23;
					  highp vec3 tmpvar_24;
					  tmpvar_24 = normalize(tmpvar_21);
					  mediump vec3 tmpvar_25;
					  mediump vec3 albedo_26;
					  albedo_26 = tmpvar_6;
					  mediump vec3 tmpvar_27;
					  tmpvar_27 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_26, vec3(_Metallic));
					  tmpvar_25 = (albedo_26 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_22 = tmpvar_25;
					  mediump vec3 diffColor_28;
					  diffColor_28 = tmpvar_22;
					  mediump float alpha_29;
					  alpha_29 = tmpvar_7;
					  tmpvar_22 = diffColor_28;
					  mediump vec3 diffColor_30;
					  diffColor_30 = tmpvar_22;
					  mediump vec3 color_31;
					  highp float specularTerm_32;
					  highp float a2_33;
					  mediump float roughness_34;
					  mediump float perceptualRoughness_35;
					  highp vec3 tmpvar_36;
					  highp vec3 inVec_37;
					  inVec_37 = (tmpvar_2 + normalize((_WorldSpaceCameraPos - xlv_TEXCOORD4)));
					  tmpvar_36 = (inVec_37 * inversesqrt(max (0.001, 
					    dot (inVec_37, inVec_37)
					  )));
					  mediump float tmpvar_38;
					  highp float tmpvar_39;
					  tmpvar_39 = clamp (dot (tmpvar_24, tmpvar_2), 0.0, 1.0);
					  tmpvar_38 = tmpvar_39;
					  highp float tmpvar_40;
					  tmpvar_40 = clamp (dot (tmpvar_24, tmpvar_36), 0.0, 1.0);
					  highp float tmpvar_41;
					  highp float smoothness_42;
					  smoothness_42 = _Glossiness;
					  tmpvar_41 = (1.0 - smoothness_42);
					  perceptualRoughness_35 = tmpvar_41;
					  highp float tmpvar_43;
					  highp float perceptualRoughness_44;
					  perceptualRoughness_44 = perceptualRoughness_35;
					  tmpvar_43 = (perceptualRoughness_44 * perceptualRoughness_44);
					  roughness_34 = tmpvar_43;
					  mediump float tmpvar_45;
					  tmpvar_45 = (roughness_34 * roughness_34);
					  a2_33 = tmpvar_45;
					  specularTerm_32 = ((roughness_34 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_36), 0.0, 1.0)) * (1.5 + roughness_34))
					   * 
					    (((tmpvar_40 * tmpvar_40) * (a2_33 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_46;
					  tmpvar_46 = clamp (specularTerm_32, 0.0, 100.0);
					  specularTerm_32 = tmpvar_46;
					  highp vec3 tmpvar_47;
					  tmpvar_47 = (((diffColor_30 + 
					    (tmpvar_46 * tmpvar_27)
					  ) * tmpvar_1) * tmpvar_38);
					  color_31 = tmpvar_47;
					  mediump vec4 tmpvar_48;
					  tmpvar_48.w = 1.0;
					  tmpvar_48.xyz = color_31;
					  c_23.xyz = tmpvar_48.xyz;
					  c_23.w = alpha_29;
					  c_4 = c_23;
					  gl_FragData[0] = c_4;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					out highp vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat13;
					float u_xlat18;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat18 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat18 = u_xlat18 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat13 = _Time.y * u_xlat1.x + u_xlat18;
					    u_xlat18 = _Time.y * _Frequency + u_xlat18;
					    u_xlat18 = sin(u_xlat18);
					    u_xlat18 = u_xlat18 * in_COLOR0.y;
					    u_xlat18 = u_xlat18 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat18)) + in_NORMAL0.xyz;
					    u_xlat18 = sin(u_xlat13);
					    u_xlat18 = u_xlat1.y * u_xlat18;
					    u_xlat0.y = u_xlat18 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat18 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat18 = u_xlat18 / u_xlat3.z;
					    u_xlat13 = _Time.y * u_xlat1.x + u_xlat18;
					    u_xlat18 = _Time.y * u_xlat3.x + u_xlat18;
					    u_xlat18 = sin(u_xlat18);
					    u_xlat18 = u_xlat18 * in_COLOR0.y;
					    u_xlat18 = u_xlat3.y * u_xlat18;
					    u_xlat13 = sin(u_xlat13);
					    u_xlat13 = u_xlat1.y * u_xlat13;
					    u_xlat3.y = u_xlat13 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat13 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat13 = u_xlat13 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat13;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat13;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat13 = u_xlat1.z * in_COLOR0.y;
					    u_xlat13 = u_xlat3.z * u_xlat13;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat5 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat5 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat5;
					    gl_Position = u_xlat4;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx + abs(vec3(u_xlat18));
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + abs(vec3(u_xlat13));
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat6 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat6) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat1.x = u_xlat4.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat4.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat4.zw;
					    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform highp sampler2D unity_NHxRoughness;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					vec2 u_xlat10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat10_0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat10_0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat10_0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat15)) + u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat5.x * u_xlat5.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat5.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat5.x = u_xlat5.x * 16.0;
					    u_xlat10.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat10.x = texture(_CameraDepthTexture, u_xlat10.xy).x;
					    u_xlat10.x = _ZBufferParams.z * u_xlat10.x + _ZBufferParams.w;
					    u_xlat10.x = float(1.0) / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + (-vs_TEXCOORD5.w);
					    u_xlat10.x = u_xlat10.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
					#else
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					#endif
					    u_xlat10.x = (-u_xlat10.x) + 1.0;
					    u_xlat10.x = u_xlat10.x * _FoamColor.w + u_xlat10.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
					#else
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					#endif
					    u_xlat10_1 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * _Color;
					    u_xlat16_1 = u_xlat10_1 * _FoamColor + (-u_xlat16_2);
					    u_xlat1 = u_xlat10.xxxx * u_xlat16_1 + u_xlat16_2;
					    u_xlat16_3.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_3.xyz = u_xlat5.xxx * u_xlat16_3.xyz;
					    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_18) + u_xlat16_3.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat5.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat5.xyz;
					    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat5.x = texture(_LightTexture0, u_xlat5.xyz).w;
					    u_xlat10.x = texture(_LightTextureB0, u_xlat1.xx).x;
					    u_xlat5.x = u_xlat5.x * u_xlat10.x;
					    u_xlat16_4.xyz = u_xlat5.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					out highp vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat13;
					float u_xlat18;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat18 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat18 = u_xlat18 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat13 = _Time.y * u_xlat1.x + u_xlat18;
					    u_xlat18 = _Time.y * _Frequency + u_xlat18;
					    u_xlat18 = sin(u_xlat18);
					    u_xlat18 = u_xlat18 * in_COLOR0.y;
					    u_xlat18 = u_xlat18 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat18)) + in_NORMAL0.xyz;
					    u_xlat18 = sin(u_xlat13);
					    u_xlat18 = u_xlat1.y * u_xlat18;
					    u_xlat0.y = u_xlat18 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat18 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat18 = u_xlat18 / u_xlat3.z;
					    u_xlat13 = _Time.y * u_xlat1.x + u_xlat18;
					    u_xlat18 = _Time.y * u_xlat3.x + u_xlat18;
					    u_xlat18 = sin(u_xlat18);
					    u_xlat18 = u_xlat18 * in_COLOR0.y;
					    u_xlat18 = u_xlat3.y * u_xlat18;
					    u_xlat13 = sin(u_xlat13);
					    u_xlat13 = u_xlat1.y * u_xlat13;
					    u_xlat3.y = u_xlat13 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat13 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat13 = u_xlat13 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat13;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat13;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat13 = u_xlat1.z * in_COLOR0.y;
					    u_xlat13 = u_xlat3.z * u_xlat13;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat5 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat5 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat5;
					    gl_Position = u_xlat4;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx + abs(vec3(u_xlat18));
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + abs(vec3(u_xlat13));
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat6 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat6) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat1.x = u_xlat4.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat4.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat4.zw;
					    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					float u_xlat7;
					vec2 u_xlat10;
					mediump float u_xlat16_10;
					float u_xlat15;
					float u_xlat16;
					mediump float u_xlat16_16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat16_16 = (-_Glossiness) + 1.0;
					    u_xlat16_2.x = u_xlat16_16 * u_xlat16_16 + 1.5;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat10_2.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, u_xlat10_2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD2.xyz, u_xlat10_2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD3.xyz, u_xlat10_2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_10 = u_xlat16_16 * u_xlat16_16 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_10 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat15;
					    u_xlat0.x = u_xlat16_16 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat10.x = texture(_CameraDepthTexture, u_xlat10.xy).x;
					    u_xlat10.x = _ZBufferParams.z * u_xlat10.x + _ZBufferParams.w;
					    u_xlat10.x = float(1.0) / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + (-vs_TEXCOORD5.w);
					    u_xlat10.x = u_xlat10.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
					#else
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					#endif
					    u_xlat10.x = (-u_xlat10.x) + 1.0;
					    u_xlat10.x = u_xlat10.x * _FoamColor.w + u_xlat10.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
					#else
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					#endif
					    u_xlat10_1 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * _Color;
					    u_xlat16_1 = u_xlat10_1 * _FoamColor + (-u_xlat16_2);
					    u_xlat1 = u_xlat10.xxxx * u_xlat16_1 + u_xlat16_2;
					    u_xlat16_4.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xzw = u_xlat1.xyz * u_xlat16_4.xxx + u_xlat0.xzw;
					    u_xlat2.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.x = texture(_LightTexture0, u_xlat2.xyz).w;
					    u_xlat7 = texture(_LightTextureB0, vec2(u_xlat17)).x;
					    u_xlat2.x = u_xlat2.x * u_xlat7;
					    u_xlat16_4.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_4.xyz;
					    u_xlat1.xyz = vec3(u_xlat5) * u_xlat0.xzw;
					    SV_Target0 = u_xlat1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					out highp vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat13;
					float u_xlat18;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat18 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat18 = u_xlat18 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat13 = _Time.y * u_xlat1.x + u_xlat18;
					    u_xlat18 = _Time.y * _Frequency + u_xlat18;
					    u_xlat18 = sin(u_xlat18);
					    u_xlat18 = u_xlat18 * in_COLOR0.y;
					    u_xlat18 = u_xlat18 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat18)) + in_NORMAL0.xyz;
					    u_xlat18 = sin(u_xlat13);
					    u_xlat18 = u_xlat1.y * u_xlat18;
					    u_xlat0.y = u_xlat18 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat18 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat18 = u_xlat18 / u_xlat3.z;
					    u_xlat13 = _Time.y * u_xlat1.x + u_xlat18;
					    u_xlat18 = _Time.y * u_xlat3.x + u_xlat18;
					    u_xlat18 = sin(u_xlat18);
					    u_xlat18 = u_xlat18 * in_COLOR0.y;
					    u_xlat18 = u_xlat3.y * u_xlat18;
					    u_xlat13 = sin(u_xlat13);
					    u_xlat13 = u_xlat1.y * u_xlat13;
					    u_xlat3.y = u_xlat13 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat13 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat13 = u_xlat13 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat13;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat13;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat13 = u_xlat1.z * in_COLOR0.y;
					    u_xlat13 = u_xlat3.z * u_xlat13;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat5 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat5 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat5;
					    gl_Position = u_xlat4;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx + abs(vec3(u_xlat18));
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + abs(vec3(u_xlat13));
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat6 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat6) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat1.x = u_xlat4.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat4.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat4.zw;
					    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					float u_xlat7;
					vec2 u_xlat10;
					mediump float u_xlat16_10;
					float u_xlat15;
					float u_xlat16;
					mediump float u_xlat16_16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat16_16 = (-_Glossiness) + 1.0;
					    u_xlat16_2.x = u_xlat16_16 * u_xlat16_16 + 1.5;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat10_2.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, u_xlat10_2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD2.xyz, u_xlat10_2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD3.xyz, u_xlat10_2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_10 = u_xlat16_16 * u_xlat16_16 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_10 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat15;
					    u_xlat0.x = u_xlat16_16 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat10.x = texture(_CameraDepthTexture, u_xlat10.xy).x;
					    u_xlat10.x = _ZBufferParams.z * u_xlat10.x + _ZBufferParams.w;
					    u_xlat10.x = float(1.0) / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + (-vs_TEXCOORD5.w);
					    u_xlat10.x = u_xlat10.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
					#else
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					#endif
					    u_xlat10.x = (-u_xlat10.x) + 1.0;
					    u_xlat10.x = u_xlat10.x * _FoamColor.w + u_xlat10.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
					#else
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					#endif
					    u_xlat10_1 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * _Color;
					    u_xlat16_1 = u_xlat10_1 * _FoamColor + (-u_xlat16_2);
					    u_xlat1 = u_xlat10.xxxx * u_xlat16_1 + u_xlat16_2;
					    u_xlat16_4.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xzw = u_xlat1.xyz * u_xlat16_4.xxx + u_xlat0.xzw;
					    u_xlat2.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.x = texture(_LightTexture0, u_xlat2.xyz).w;
					    u_xlat7 = texture(_LightTextureB0, vec2(u_xlat17)).x;
					    u_xlat2.x = u_xlat2.x * u_xlat7;
					    u_xlat16_4.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_4.xyz;
					    u_xlat1.xyz = vec3(u_xlat5) * u_xlat0.xzw;
					    SV_Target0 = u_xlat1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					varying highp vec2 xlv_TEXCOORD7;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = _glesVertex.w;
					  highp vec4 tmpvar_6;
					  highp float result_7;
					  result_7 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_7 = (result_7 / _Period);
					  highp vec4 vertColor_8;
					  vertColor_8 = tmpvar_1;
					  highp vec3 tmpvar_9;
					  tmpvar_9.xz = vec2(0.0, 0.0);
					  highp float tmpvar_10;
					  tmpvar_10 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_9.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_7)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_8.y);
					  tmpvar_5.xyz = (_glesVertex.xyz + tmpvar_9);
					  highp vec4 vertColor_12;
					  vertColor_12 = tmpvar_1;
					  highp float result_13;
					  result_13 = (((_WaveDir02.x * tmpvar_5.x) + (_WaveDir02.y * tmpvar_5.y)) + (_WaveDir02.z * tmpvar_5.z));
					  result_13 = (result_13 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_14;
					  vertColor_14 = tmpvar_1;
					  highp vec3 tmpvar_15;
					  tmpvar_15.xz = vec2(0.0, 0.0);
					  tmpvar_15.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_13)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_14.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_15);
					  highp vec4 vertColor_16;
					  vertColor_16 = tmpvar_1;
					  highp float result_17;
					  result_17 = (((_WaveDir03.x * tmpvar_5.x) + (_WaveDir03.y * tmpvar_5.y)) + (_WaveDir03.z * tmpvar_5.z));
					  result_17 = (result_17 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_18;
					  vertColor_18 = tmpvar_1;
					  highp vec3 tmpvar_19;
					  tmpvar_19.xz = vec2(0.0, 0.0);
					  tmpvar_19.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_17)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_18.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_19);
					  highp vec4 vertColor_20;
					  vertColor_20 = tmpvar_1;
					  highp vec4 tmpvar_21;
					  highp vec4 tmpvar_22;
					  tmpvar_22.w = 1.0;
					  tmpvar_22.xyz = tmpvar_5.xyz;
					  tmpvar_21 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_22));
					  highp mat3 tmpvar_23;
					  tmpvar_23[0] = unity_WorldToObject[0].xyz;
					  tmpvar_23[1] = unity_WorldToObject[1].xyz;
					  tmpvar_23[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_24;
					  tmpvar_24 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_7))
					       * vertColor_12.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_10)
					       + result_13)) * vertColor_16.y) * tmpvar_11)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_17))
					     * vertColor_20.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_23));
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_25[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_25[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((tmpvar_25 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_26;
					  highp float tmpvar_27;
					  tmpvar_27 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_27;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = (((tmpvar_24.yzx * worldTangent_4.zxy) - (tmpvar_24.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_28;
					  highp vec3 tmpvar_29;
					  tmpvar_29.x = worldTangent_4.x;
					  tmpvar_29.y = worldBinormal_2.x;
					  tmpvar_29.z = tmpvar_24.x;
					  highp vec3 tmpvar_30;
					  tmpvar_30.x = worldTangent_4.y;
					  tmpvar_30.y = worldBinormal_2.y;
					  tmpvar_30.z = tmpvar_24.y;
					  highp vec3 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.z;
					  tmpvar_31.y = worldBinormal_2.z;
					  tmpvar_31.z = tmpvar_24.z;
					  highp vec4 o_32;
					  highp vec4 tmpvar_33;
					  tmpvar_33 = (tmpvar_21 * 0.5);
					  highp vec2 tmpvar_34;
					  tmpvar_34.x = tmpvar_33.x;
					  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
					  o_32.xy = (tmpvar_34 + tmpvar_33.w);
					  o_32.zw = tmpvar_21.zw;
					  gl_Position = tmpvar_21;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_29;
					  xlv_TEXCOORD2 = tmpvar_30;
					  xlv_TEXCOORD3 = tmpvar_31;
					  xlv_TEXCOORD4 = (unity_ObjectToWorld * tmpvar_5).xyz;
					  xlv_TEXCOORD5 = o_32;
					  xlv_TEXCOORD6 = tmpvar_6;
					  xlv_TEXCOORD7 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_5)).xy;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D unity_NHxRoughness;
					uniform highp sampler2D _LightTexture0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec2 xlv_TEXCOORD7;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec3 worldN_3;
					  lowp vec4 c_4;
					  lowp float atten_5;
					  lowp vec3 tmpvar_6;
					  lowp float tmpvar_7;
					  highp vec3 worldViewDir_8;
					  lowp vec3 lightDir_9;
					  lowp vec3 _unity_tbn_2_10;
					  lowp vec3 _unity_tbn_1_11;
					  lowp vec3 _unity_tbn_0_12;
					  _unity_tbn_0_12 = xlv_TEXCOORD1;
					  _unity_tbn_1_11 = xlv_TEXCOORD2;
					  _unity_tbn_2_10 = xlv_TEXCOORD3;
					  mediump vec3 tmpvar_13;
					  tmpvar_13 = _WorldSpaceLightPos0.xyz;
					  lightDir_9 = tmpvar_13;
					  worldViewDir_8 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD4));
					  highp vec3 tmpvar_14;
					  highp vec4 depthSample_15;
					  lowp vec4 tmpvar_16;
					  tmpvar_16 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD5).xxxx;
					  depthSample_15 = tmpvar_16;
					  highp float tmpvar_17;
					  tmpvar_17 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_15.x) + _ZBufferParams.w))) - xlv_TEXCOORD5.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_18;
					  tmpvar_18 = clamp ((tmpvar_17 + (tmpvar_17 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_19;
					  tmpvar_19 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_18));
					  lowp vec3 tmpvar_20;
					  tmpvar_20 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_14 = tmpvar_20;
					  tmpvar_6 = tmpvar_19.xyz;
					  tmpvar_7 = tmpvar_19.w;
					  highp float tmpvar_21;
					  tmpvar_21 = texture2D (_LightTexture0, xlv_TEXCOORD7).w;
					  atten_5 = tmpvar_21;
					  worldN_3.x = dot (_unity_tbn_0_12, tmpvar_14);
					  worldN_3.y = dot (_unity_tbn_1_11, tmpvar_14);
					  worldN_3.z = dot (_unity_tbn_2_10, tmpvar_14);
					  highp vec3 tmpvar_22;
					  tmpvar_22 = normalize(worldN_3);
					  worldN_3 = tmpvar_22;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_9;
					  tmpvar_1 = (tmpvar_1 * atten_5);
					  lowp vec3 tmpvar_23;
					  mediump vec4 c_24;
					  highp vec3 tmpvar_25;
					  tmpvar_25 = normalize(tmpvar_22);
					  mediump vec3 tmpvar_26;
					  mediump vec3 albedo_27;
					  albedo_27 = tmpvar_6;
					  tmpvar_26 = (albedo_27 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_23 = tmpvar_26;
					  mediump vec3 diffColor_28;
					  diffColor_28 = tmpvar_23;
					  mediump float alpha_29;
					  alpha_29 = tmpvar_7;
					  tmpvar_23 = diffColor_28;
					  mediump vec3 diffColor_30;
					  diffColor_30 = tmpvar_23;
					  mediump vec2 rlPow4AndFresnelTerm_31;
					  mediump float tmpvar_32;
					  highp float tmpvar_33;
					  tmpvar_33 = clamp (dot (tmpvar_25, tmpvar_2), 0.0, 1.0);
					  tmpvar_32 = tmpvar_33;
					  mediump float tmpvar_34;
					  highp float tmpvar_35;
					  tmpvar_35 = clamp (dot (tmpvar_25, worldViewDir_8), 0.0, 1.0);
					  tmpvar_34 = tmpvar_35;
					  highp vec2 tmpvar_36;
					  tmpvar_36.x = dot ((worldViewDir_8 - (2.0 * 
					    (dot (tmpvar_25, worldViewDir_8) * tmpvar_25)
					  )), tmpvar_2);
					  tmpvar_36.y = (1.0 - tmpvar_34);
					  highp vec2 tmpvar_37;
					  tmpvar_37 = ((tmpvar_36 * tmpvar_36) * (tmpvar_36 * tmpvar_36));
					  rlPow4AndFresnelTerm_31 = tmpvar_37;
					  mediump float tmpvar_38;
					  tmpvar_38 = rlPow4AndFresnelTerm_31.x;
					  mediump float specular_39;
					  highp float smoothness_40;
					  smoothness_40 = _Glossiness;
					  highp vec2 tmpvar_41;
					  tmpvar_41.x = tmpvar_38;
					  tmpvar_41.y = (1.0 - smoothness_40);
					  highp float tmpvar_42;
					  tmpvar_42 = (texture2D (unity_NHxRoughness, tmpvar_41).x * 16.0);
					  specular_39 = tmpvar_42;
					  mediump vec4 tmpvar_43;
					  tmpvar_43.w = 1.0;
					  tmpvar_43.xyz = ((diffColor_30 + (specular_39 * 
					    mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_27, vec3(_Metallic))
					  )) * (tmpvar_1 * tmpvar_32));
					  c_24.xyz = tmpvar_43.xyz;
					  c_24.w = alpha_29;
					  c_4 = c_24;
					  gl_FragData[0] = c_4;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					varying highp vec2 xlv_TEXCOORD7;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = _glesVertex.w;
					  highp vec4 tmpvar_6;
					  highp float result_7;
					  result_7 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_7 = (result_7 / _Period);
					  highp vec4 vertColor_8;
					  vertColor_8 = tmpvar_1;
					  highp vec3 tmpvar_9;
					  tmpvar_9.xz = vec2(0.0, 0.0);
					  highp float tmpvar_10;
					  tmpvar_10 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_9.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_7)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_8.y);
					  tmpvar_5.xyz = (_glesVertex.xyz + tmpvar_9);
					  highp vec4 vertColor_12;
					  vertColor_12 = tmpvar_1;
					  highp float result_13;
					  result_13 = (((_WaveDir02.x * tmpvar_5.x) + (_WaveDir02.y * tmpvar_5.y)) + (_WaveDir02.z * tmpvar_5.z));
					  result_13 = (result_13 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_14;
					  vertColor_14 = tmpvar_1;
					  highp vec3 tmpvar_15;
					  tmpvar_15.xz = vec2(0.0, 0.0);
					  tmpvar_15.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_13)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_14.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_15);
					  highp vec4 vertColor_16;
					  vertColor_16 = tmpvar_1;
					  highp float result_17;
					  result_17 = (((_WaveDir03.x * tmpvar_5.x) + (_WaveDir03.y * tmpvar_5.y)) + (_WaveDir03.z * tmpvar_5.z));
					  result_17 = (result_17 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_18;
					  vertColor_18 = tmpvar_1;
					  highp vec3 tmpvar_19;
					  tmpvar_19.xz = vec2(0.0, 0.0);
					  tmpvar_19.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_17)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_18.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_19);
					  highp vec4 vertColor_20;
					  vertColor_20 = tmpvar_1;
					  highp vec4 tmpvar_21;
					  highp vec4 tmpvar_22;
					  tmpvar_22.w = 1.0;
					  tmpvar_22.xyz = tmpvar_5.xyz;
					  tmpvar_21 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_22));
					  highp mat3 tmpvar_23;
					  tmpvar_23[0] = unity_WorldToObject[0].xyz;
					  tmpvar_23[1] = unity_WorldToObject[1].xyz;
					  tmpvar_23[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_24;
					  tmpvar_24 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_7))
					       * vertColor_12.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_10)
					       + result_13)) * vertColor_16.y) * tmpvar_11)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_17))
					     * vertColor_20.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_23));
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_25[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_25[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((tmpvar_25 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_26;
					  highp float tmpvar_27;
					  tmpvar_27 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_27;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = (((tmpvar_24.yzx * worldTangent_4.zxy) - (tmpvar_24.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_28;
					  highp vec3 tmpvar_29;
					  tmpvar_29.x = worldTangent_4.x;
					  tmpvar_29.y = worldBinormal_2.x;
					  tmpvar_29.z = tmpvar_24.x;
					  highp vec3 tmpvar_30;
					  tmpvar_30.x = worldTangent_4.y;
					  tmpvar_30.y = worldBinormal_2.y;
					  tmpvar_30.z = tmpvar_24.y;
					  highp vec3 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.z;
					  tmpvar_31.y = worldBinormal_2.z;
					  tmpvar_31.z = tmpvar_24.z;
					  highp vec4 o_32;
					  highp vec4 tmpvar_33;
					  tmpvar_33 = (tmpvar_21 * 0.5);
					  highp vec2 tmpvar_34;
					  tmpvar_34.x = tmpvar_33.x;
					  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
					  o_32.xy = (tmpvar_34 + tmpvar_33.w);
					  o_32.zw = tmpvar_21.zw;
					  gl_Position = tmpvar_21;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_29;
					  xlv_TEXCOORD2 = tmpvar_30;
					  xlv_TEXCOORD3 = tmpvar_31;
					  xlv_TEXCOORD4 = (unity_ObjectToWorld * tmpvar_5).xyz;
					  xlv_TEXCOORD5 = o_32;
					  xlv_TEXCOORD6 = tmpvar_6;
					  xlv_TEXCOORD7 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_5)).xy;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _LightTexture0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec2 xlv_TEXCOORD7;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec3 worldN_3;
					  lowp vec4 c_4;
					  lowp float atten_5;
					  lowp vec3 tmpvar_6;
					  lowp float tmpvar_7;
					  lowp vec3 lightDir_8;
					  lowp vec3 _unity_tbn_2_9;
					  lowp vec3 _unity_tbn_1_10;
					  lowp vec3 _unity_tbn_0_11;
					  _unity_tbn_0_11 = xlv_TEXCOORD1;
					  _unity_tbn_1_10 = xlv_TEXCOORD2;
					  _unity_tbn_2_9 = xlv_TEXCOORD3;
					  mediump vec3 tmpvar_12;
					  tmpvar_12 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_12;
					  highp vec3 tmpvar_13;
					  highp vec4 depthSample_14;
					  lowp vec4 tmpvar_15;
					  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD5).xxxx;
					  depthSample_14 = tmpvar_15;
					  highp float tmpvar_16;
					  tmpvar_16 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_14.x) + _ZBufferParams.w))) - xlv_TEXCOORD5.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_17;
					  tmpvar_17 = clamp ((tmpvar_16 + (tmpvar_16 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_17));
					  lowp vec3 tmpvar_19;
					  tmpvar_19 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_13 = tmpvar_19;
					  tmpvar_6 = tmpvar_18.xyz;
					  tmpvar_7 = tmpvar_18.w;
					  highp float tmpvar_20;
					  tmpvar_20 = texture2D (_LightTexture0, xlv_TEXCOORD7).w;
					  atten_5 = tmpvar_20;
					  worldN_3.x = dot (_unity_tbn_0_11, tmpvar_13);
					  worldN_3.y = dot (_unity_tbn_1_10, tmpvar_13);
					  worldN_3.z = dot (_unity_tbn_2_9, tmpvar_13);
					  highp vec3 tmpvar_21;
					  tmpvar_21 = normalize(worldN_3);
					  worldN_3 = tmpvar_21;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_8;
					  tmpvar_1 = (tmpvar_1 * atten_5);
					  lowp vec3 tmpvar_22;
					  mediump vec4 c_23;
					  highp vec3 tmpvar_24;
					  tmpvar_24 = normalize(tmpvar_21);
					  mediump vec3 tmpvar_25;
					  mediump vec3 albedo_26;
					  albedo_26 = tmpvar_6;
					  mediump vec3 tmpvar_27;
					  tmpvar_27 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_26, vec3(_Metallic));
					  tmpvar_25 = (albedo_26 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_22 = tmpvar_25;
					  mediump vec3 diffColor_28;
					  diffColor_28 = tmpvar_22;
					  mediump float alpha_29;
					  alpha_29 = tmpvar_7;
					  tmpvar_22 = diffColor_28;
					  mediump vec3 diffColor_30;
					  diffColor_30 = tmpvar_22;
					  mediump vec3 color_31;
					  highp float specularTerm_32;
					  highp float a2_33;
					  mediump float roughness_34;
					  mediump float perceptualRoughness_35;
					  highp vec3 tmpvar_36;
					  highp vec3 inVec_37;
					  inVec_37 = (tmpvar_2 + normalize((_WorldSpaceCameraPos - xlv_TEXCOORD4)));
					  tmpvar_36 = (inVec_37 * inversesqrt(max (0.001, 
					    dot (inVec_37, inVec_37)
					  )));
					  mediump float tmpvar_38;
					  highp float tmpvar_39;
					  tmpvar_39 = clamp (dot (tmpvar_24, tmpvar_2), 0.0, 1.0);
					  tmpvar_38 = tmpvar_39;
					  highp float tmpvar_40;
					  tmpvar_40 = clamp (dot (tmpvar_24, tmpvar_36), 0.0, 1.0);
					  highp float tmpvar_41;
					  highp float smoothness_42;
					  smoothness_42 = _Glossiness;
					  tmpvar_41 = (1.0 - smoothness_42);
					  perceptualRoughness_35 = tmpvar_41;
					  highp float tmpvar_43;
					  highp float perceptualRoughness_44;
					  perceptualRoughness_44 = perceptualRoughness_35;
					  tmpvar_43 = (perceptualRoughness_44 * perceptualRoughness_44);
					  roughness_34 = tmpvar_43;
					  mediump float tmpvar_45;
					  tmpvar_45 = (roughness_34 * roughness_34);
					  a2_33 = tmpvar_45;
					  specularTerm_32 = ((roughness_34 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_36), 0.0, 1.0)) * (1.5 + roughness_34))
					   * 
					    (((tmpvar_40 * tmpvar_40) * (a2_33 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_46;
					  tmpvar_46 = clamp (specularTerm_32, 0.0, 100.0);
					  specularTerm_32 = tmpvar_46;
					  highp vec3 tmpvar_47;
					  tmpvar_47 = (((diffColor_30 + 
					    (tmpvar_46 * tmpvar_27)
					  ) * tmpvar_1) * tmpvar_38);
					  color_31 = tmpvar_47;
					  mediump vec4 tmpvar_48;
					  tmpvar_48.w = 1.0;
					  tmpvar_48.xyz = color_31;
					  c_23.xyz = tmpvar_48.xyz;
					  c_23.w = alpha_29;
					  c_4 = c_23;
					  gl_FragData[0] = c_4;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp mat4 unity_WorldToLight;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					varying highp vec2 xlv_TEXCOORD7;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = _glesVertex.w;
					  highp vec4 tmpvar_6;
					  highp float result_7;
					  result_7 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_7 = (result_7 / _Period);
					  highp vec4 vertColor_8;
					  vertColor_8 = tmpvar_1;
					  highp vec3 tmpvar_9;
					  tmpvar_9.xz = vec2(0.0, 0.0);
					  highp float tmpvar_10;
					  tmpvar_10 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_9.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_7)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_8.y);
					  tmpvar_5.xyz = (_glesVertex.xyz + tmpvar_9);
					  highp vec4 vertColor_12;
					  vertColor_12 = tmpvar_1;
					  highp float result_13;
					  result_13 = (((_WaveDir02.x * tmpvar_5.x) + (_WaveDir02.y * tmpvar_5.y)) + (_WaveDir02.z * tmpvar_5.z));
					  result_13 = (result_13 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_14;
					  vertColor_14 = tmpvar_1;
					  highp vec3 tmpvar_15;
					  tmpvar_15.xz = vec2(0.0, 0.0);
					  tmpvar_15.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_13)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_14.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_15);
					  highp vec4 vertColor_16;
					  vertColor_16 = tmpvar_1;
					  highp float result_17;
					  result_17 = (((_WaveDir03.x * tmpvar_5.x) + (_WaveDir03.y * tmpvar_5.y)) + (_WaveDir03.z * tmpvar_5.z));
					  result_17 = (result_17 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_18;
					  vertColor_18 = tmpvar_1;
					  highp vec3 tmpvar_19;
					  tmpvar_19.xz = vec2(0.0, 0.0);
					  tmpvar_19.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_17)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_18.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_19);
					  highp vec4 vertColor_20;
					  vertColor_20 = tmpvar_1;
					  highp vec4 tmpvar_21;
					  highp vec4 tmpvar_22;
					  tmpvar_22.w = 1.0;
					  tmpvar_22.xyz = tmpvar_5.xyz;
					  tmpvar_21 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_22));
					  highp mat3 tmpvar_23;
					  tmpvar_23[0] = unity_WorldToObject[0].xyz;
					  tmpvar_23[1] = unity_WorldToObject[1].xyz;
					  tmpvar_23[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_24;
					  tmpvar_24 = normalize((normalize(
					    (normalize((normalize(
					      (_glesNormal + vec3(abs(((
					        sin(((_Time.y * _Frequency) + result_7))
					       * vertColor_12.y) * _Amplitude))))
					    ) + vec3(abs(
					      ((sin((
					        (_Time.y * tmpvar_10)
					       + result_13)) * vertColor_16.y) * tmpvar_11)
					    )))) + vec3(abs(((
					      sin(((_Time.y * (_Frequency * _Wave03Mult.z)) + result_17))
					     * vertColor_20.y) * (_Amplitude * _Wave03Mult.x)))))
					  ) * tmpvar_23));
					  highp mat3 tmpvar_25;
					  tmpvar_25[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_25[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_25[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_26;
					  tmpvar_26 = normalize((tmpvar_25 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_26;
					  highp float tmpvar_27;
					  tmpvar_27 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_27;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = (((tmpvar_24.yzx * worldTangent_4.zxy) - (tmpvar_24.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_28;
					  highp vec3 tmpvar_29;
					  tmpvar_29.x = worldTangent_4.x;
					  tmpvar_29.y = worldBinormal_2.x;
					  tmpvar_29.z = tmpvar_24.x;
					  highp vec3 tmpvar_30;
					  tmpvar_30.x = worldTangent_4.y;
					  tmpvar_30.y = worldBinormal_2.y;
					  tmpvar_30.z = tmpvar_24.y;
					  highp vec3 tmpvar_31;
					  tmpvar_31.x = worldTangent_4.z;
					  tmpvar_31.y = worldBinormal_2.z;
					  tmpvar_31.z = tmpvar_24.z;
					  highp vec4 o_32;
					  highp vec4 tmpvar_33;
					  tmpvar_33 = (tmpvar_21 * 0.5);
					  highp vec2 tmpvar_34;
					  tmpvar_34.x = tmpvar_33.x;
					  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
					  o_32.xy = (tmpvar_34 + tmpvar_33.w);
					  o_32.zw = tmpvar_21.zw;
					  gl_Position = tmpvar_21;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_29;
					  xlv_TEXCOORD2 = tmpvar_30;
					  xlv_TEXCOORD3 = tmpvar_31;
					  xlv_TEXCOORD4 = (unity_ObjectToWorld * tmpvar_5).xyz;
					  xlv_TEXCOORD5 = o_32;
					  xlv_TEXCOORD6 = tmpvar_6;
					  xlv_TEXCOORD7 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_5)).xy;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ZBufferParams;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform highp sampler2D _LightTexture0;
					uniform sampler2D _MainTex;
					uniform sampler2D _BumpMap;
					uniform mediump float _Glossiness;
					uniform mediump float _Metallic;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying highp vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec2 xlv_TEXCOORD7;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec3 worldN_3;
					  lowp vec4 c_4;
					  lowp float atten_5;
					  lowp vec3 tmpvar_6;
					  lowp float tmpvar_7;
					  lowp vec3 lightDir_8;
					  lowp vec3 _unity_tbn_2_9;
					  lowp vec3 _unity_tbn_1_10;
					  lowp vec3 _unity_tbn_0_11;
					  _unity_tbn_0_11 = xlv_TEXCOORD1;
					  _unity_tbn_1_10 = xlv_TEXCOORD2;
					  _unity_tbn_2_9 = xlv_TEXCOORD3;
					  mediump vec3 tmpvar_12;
					  tmpvar_12 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_12;
					  highp vec3 tmpvar_13;
					  highp vec4 depthSample_14;
					  lowp vec4 tmpvar_15;
					  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD5).xxxx;
					  depthSample_14 = tmpvar_15;
					  highp float tmpvar_16;
					  tmpvar_16 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_14.x) + _ZBufferParams.w))) - xlv_TEXCOORD5.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_17;
					  tmpvar_17 = clamp ((tmpvar_16 + (tmpvar_16 * _FoamColor.w)), 0.0, 1.0);
					  lowp vec4 tmpvar_18;
					  tmpvar_18 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_17));
					  lowp vec3 tmpvar_19;
					  tmpvar_19 = texture2D (_BumpMap, xlv_TEXCOORD0).xyz;
					  tmpvar_13 = tmpvar_19;
					  tmpvar_6 = tmpvar_18.xyz;
					  tmpvar_7 = tmpvar_18.w;
					  highp float tmpvar_20;
					  tmpvar_20 = texture2D (_LightTexture0, xlv_TEXCOORD7).w;
					  atten_5 = tmpvar_20;
					  worldN_3.x = dot (_unity_tbn_0_11, tmpvar_13);
					  worldN_3.y = dot (_unity_tbn_1_10, tmpvar_13);
					  worldN_3.z = dot (_unity_tbn_2_9, tmpvar_13);
					  highp vec3 tmpvar_21;
					  tmpvar_21 = normalize(worldN_3);
					  worldN_3 = tmpvar_21;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_8;
					  tmpvar_1 = (tmpvar_1 * atten_5);
					  lowp vec3 tmpvar_22;
					  mediump vec4 c_23;
					  highp vec3 tmpvar_24;
					  tmpvar_24 = normalize(tmpvar_21);
					  mediump vec3 tmpvar_25;
					  mediump vec3 albedo_26;
					  albedo_26 = tmpvar_6;
					  mediump vec3 tmpvar_27;
					  tmpvar_27 = mix (vec3(0.2209163, 0.2209163, 0.2209163), albedo_26, vec3(_Metallic));
					  tmpvar_25 = (albedo_26 * (0.7790837 - (_Metallic * 0.7790837)));
					  tmpvar_22 = tmpvar_25;
					  mediump vec3 diffColor_28;
					  diffColor_28 = tmpvar_22;
					  mediump float alpha_29;
					  alpha_29 = tmpvar_7;
					  tmpvar_22 = diffColor_28;
					  mediump vec3 diffColor_30;
					  diffColor_30 = tmpvar_22;
					  mediump vec3 color_31;
					  highp float specularTerm_32;
					  highp float a2_33;
					  mediump float roughness_34;
					  mediump float perceptualRoughness_35;
					  highp vec3 tmpvar_36;
					  highp vec3 inVec_37;
					  inVec_37 = (tmpvar_2 + normalize((_WorldSpaceCameraPos - xlv_TEXCOORD4)));
					  tmpvar_36 = (inVec_37 * inversesqrt(max (0.001, 
					    dot (inVec_37, inVec_37)
					  )));
					  mediump float tmpvar_38;
					  highp float tmpvar_39;
					  tmpvar_39 = clamp (dot (tmpvar_24, tmpvar_2), 0.0, 1.0);
					  tmpvar_38 = tmpvar_39;
					  highp float tmpvar_40;
					  tmpvar_40 = clamp (dot (tmpvar_24, tmpvar_36), 0.0, 1.0);
					  highp float tmpvar_41;
					  highp float smoothness_42;
					  smoothness_42 = _Glossiness;
					  tmpvar_41 = (1.0 - smoothness_42);
					  perceptualRoughness_35 = tmpvar_41;
					  highp float tmpvar_43;
					  highp float perceptualRoughness_44;
					  perceptualRoughness_44 = perceptualRoughness_35;
					  tmpvar_43 = (perceptualRoughness_44 * perceptualRoughness_44);
					  roughness_34 = tmpvar_43;
					  mediump float tmpvar_45;
					  tmpvar_45 = (roughness_34 * roughness_34);
					  a2_33 = tmpvar_45;
					  specularTerm_32 = ((roughness_34 / (
					    (max (0.32, clamp (dot (tmpvar_2, tmpvar_36), 0.0, 1.0)) * (1.5 + roughness_34))
					   * 
					    (((tmpvar_40 * tmpvar_40) * (a2_33 - 1.0)) + 1.00001)
					  )) - 0.0001);
					  highp float tmpvar_46;
					  tmpvar_46 = clamp (specularTerm_32, 0.0, 100.0);
					  specularTerm_32 = tmpvar_46;
					  highp vec3 tmpvar_47;
					  tmpvar_47 = (((diffColor_30 + 
					    (tmpvar_46 * tmpvar_27)
					  ) * tmpvar_1) * tmpvar_38);
					  color_31 = tmpvar_47;
					  mediump vec4 tmpvar_48;
					  tmpvar_48.w = 1.0;
					  tmpvar_48.xyz = color_31;
					  c_23.xyz = tmpvar_48.xyz;
					  c_23.w = alpha_29;
					  c_4 = c_23;
					  gl_FragData[0] = c_4;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat13;
					float u_xlat18;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat18 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat18 = u_xlat18 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat13 = _Time.y * u_xlat1.x + u_xlat18;
					    u_xlat18 = _Time.y * _Frequency + u_xlat18;
					    u_xlat18 = sin(u_xlat18);
					    u_xlat18 = u_xlat18 * in_COLOR0.y;
					    u_xlat18 = u_xlat18 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat18)) + in_NORMAL0.xyz;
					    u_xlat18 = sin(u_xlat13);
					    u_xlat18 = u_xlat1.y * u_xlat18;
					    u_xlat0.y = u_xlat18 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat18 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat18 = u_xlat18 / u_xlat3.z;
					    u_xlat13 = _Time.y * u_xlat1.x + u_xlat18;
					    u_xlat18 = _Time.y * u_xlat3.x + u_xlat18;
					    u_xlat18 = sin(u_xlat18);
					    u_xlat18 = u_xlat18 * in_COLOR0.y;
					    u_xlat18 = u_xlat3.y * u_xlat18;
					    u_xlat13 = sin(u_xlat13);
					    u_xlat13 = u_xlat1.y * u_xlat13;
					    u_xlat3.y = u_xlat13 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat13 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat13 = u_xlat13 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat13;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat13;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat13 = u_xlat1.z * in_COLOR0.y;
					    u_xlat13 = u_xlat3.z * u_xlat13;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat5 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat5 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat5;
					    gl_Position = u_xlat4;
					    u_xlat5 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat0.xy = u_xlat5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat5.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat5.zz + u_xlat0.xy;
					    vs_TEXCOORD7.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat5.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx + abs(vec3(u_xlat18));
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + abs(vec3(u_xlat13));
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat6 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat6) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    u_xlat0.x = u_xlat4.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat4.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat4.zw;
					    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D unity_NHxRoughness;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					vec2 u_xlat10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat10_0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat10_0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat10_0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat15)) + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat5.x = u_xlat5.x * u_xlat5.x;
					    u_xlat1.x = u_xlat5.x * u_xlat5.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat5.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat5.x = u_xlat5.x * 16.0;
					    u_xlat10.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat10.x = texture(_CameraDepthTexture, u_xlat10.xy).x;
					    u_xlat10.x = _ZBufferParams.z * u_xlat10.x + _ZBufferParams.w;
					    u_xlat10.x = float(1.0) / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + (-vs_TEXCOORD5.w);
					    u_xlat10.x = u_xlat10.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
					#else
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					#endif
					    u_xlat10.x = (-u_xlat10.x) + 1.0;
					    u_xlat10.x = u_xlat10.x * _FoamColor.w + u_xlat10.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
					#else
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					#endif
					    u_xlat10_1 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * _Color;
					    u_xlat16_1 = u_xlat10_1 * _FoamColor + (-u_xlat16_2);
					    u_xlat1 = u_xlat10.xxxx * u_xlat16_1 + u_xlat16_2;
					    u_xlat16_3.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_3.xyz = u_xlat5.xxx * u_xlat16_3.xyz;
					    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_18) + u_xlat16_3.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat5.xy = vs_TEXCOORD4.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat5.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat5.xy;
					    u_xlat5.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat5.xy;
					    u_xlat5.xy = u_xlat5.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat5.x = texture(_LightTexture0, u_xlat5.xy).w;
					    u_xlat16_4.xyz = u_xlat5.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat13;
					float u_xlat18;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat18 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat18 = u_xlat18 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat13 = _Time.y * u_xlat1.x + u_xlat18;
					    u_xlat18 = _Time.y * _Frequency + u_xlat18;
					    u_xlat18 = sin(u_xlat18);
					    u_xlat18 = u_xlat18 * in_COLOR0.y;
					    u_xlat18 = u_xlat18 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat18)) + in_NORMAL0.xyz;
					    u_xlat18 = sin(u_xlat13);
					    u_xlat18 = u_xlat1.y * u_xlat18;
					    u_xlat0.y = u_xlat18 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat18 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat18 = u_xlat18 / u_xlat3.z;
					    u_xlat13 = _Time.y * u_xlat1.x + u_xlat18;
					    u_xlat18 = _Time.y * u_xlat3.x + u_xlat18;
					    u_xlat18 = sin(u_xlat18);
					    u_xlat18 = u_xlat18 * in_COLOR0.y;
					    u_xlat18 = u_xlat3.y * u_xlat18;
					    u_xlat13 = sin(u_xlat13);
					    u_xlat13 = u_xlat1.y * u_xlat13;
					    u_xlat3.y = u_xlat13 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat13 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat13 = u_xlat13 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat13;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat13;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat13 = u_xlat1.z * in_COLOR0.y;
					    u_xlat13 = u_xlat3.z * u_xlat13;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat5 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat5 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat5;
					    gl_Position = u_xlat4;
					    u_xlat5 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat0.xy = u_xlat5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat5.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat5.zz + u_xlat0.xy;
					    vs_TEXCOORD7.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat5.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx + abs(vec3(u_xlat18));
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + abs(vec3(u_xlat13));
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat6 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat6) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    u_xlat0.x = u_xlat4.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat4.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat4.zw;
					    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform highp sampler2D _LightTexture0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					vec3 u_xlat5;
					mediump float u_xlat16_5;
					lowp vec3 u_xlat10_5;
					vec2 u_xlat8;
					mediump float u_xlat16_8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat16_1.x = (-_Glossiness) + 1.0;
					    u_xlat16_5 = u_xlat16_1.x * u_xlat16_1.x + 1.5;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat12 = u_xlat12 * u_xlat16_5;
					    u_xlat10_5.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat10_5.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat10_5.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat10_5.xyz);
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat4 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
					#else
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_8 = u_xlat16_1.x * u_xlat16_1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat16_1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat8.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat8.x = texture(_CameraDepthTexture, u_xlat8.xy).x;
					    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
					    u_xlat8.x = float(1.0) / u_xlat8.x;
					    u_xlat8.x = u_xlat8.x + (-vs_TEXCOORD5.w);
					    u_xlat8.x = u_xlat8.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
					#else
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					#endif
					    u_xlat8.x = (-u_xlat8.x) + 1.0;
					    u_xlat8.x = u_xlat8.x * _FoamColor.w + u_xlat8.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
					#else
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					#endif
					    u_xlat10_1 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * _Color;
					    u_xlat16_1 = u_xlat10_1 * _FoamColor + (-u_xlat16_2);
					    u_xlat1 = u_xlat8.xxxx * u_xlat16_1 + u_xlat16_2;
					    u_xlat16_3.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat0.xzw;
					    u_xlat2.xy = vs_TEXCOORD4.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat2.xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat2.x = texture(_LightTexture0, u_xlat2.xy).w;
					    u_xlat16_3.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_3.xyz;
					    u_xlat1.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0 = u_xlat1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat13;
					float u_xlat18;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat18 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat18 = u_xlat18 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat13 = _Time.y * u_xlat1.x + u_xlat18;
					    u_xlat18 = _Time.y * _Frequency + u_xlat18;
					    u_xlat18 = sin(u_xlat18);
					    u_xlat18 = u_xlat18 * in_COLOR0.y;
					    u_xlat18 = u_xlat18 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat18)) + in_NORMAL0.xyz;
					    u_xlat18 = sin(u_xlat13);
					    u_xlat18 = u_xlat1.y * u_xlat18;
					    u_xlat0.y = u_xlat18 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat18 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat18 = u_xlat18 / u_xlat3.z;
					    u_xlat13 = _Time.y * u_xlat1.x + u_xlat18;
					    u_xlat18 = _Time.y * u_xlat3.x + u_xlat18;
					    u_xlat18 = sin(u_xlat18);
					    u_xlat18 = u_xlat18 * in_COLOR0.y;
					    u_xlat18 = u_xlat3.y * u_xlat18;
					    u_xlat13 = sin(u_xlat13);
					    u_xlat13 = u_xlat1.y * u_xlat13;
					    u_xlat3.y = u_xlat13 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat13 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat13 = u_xlat13 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat13;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat13;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat13 = u_xlat1.z * in_COLOR0.y;
					    u_xlat13 = u_xlat3.z * u_xlat13;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
					    u_xlat4 = u_xlat3 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat5 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat5 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat4.wwww + u_xlat5;
					    gl_Position = u_xlat4;
					    u_xlat5 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat0.xy = u_xlat5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat5.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat5.zz + u_xlat0.xy;
					    vs_TEXCOORD7.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat5.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx + abs(vec3(u_xlat18));
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + abs(vec3(u_xlat13));
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat6 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat6) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    u_xlat0.x = u_xlat4.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat4.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat4.zw;
					    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					uniform lowp sampler2D _BumpMap;
					uniform highp sampler2D _LightTexture0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					vec3 u_xlat5;
					mediump float u_xlat16_5;
					lowp vec3 u_xlat10_5;
					vec2 u_xlat8;
					mediump float u_xlat16_8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat16_1.x = (-_Glossiness) + 1.0;
					    u_xlat16_5 = u_xlat16_1.x * u_xlat16_1.x + 1.5;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat12 = u_xlat12 * u_xlat16_5;
					    u_xlat10_5.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat10_5.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat10_5.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat10_5.xyz);
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat4 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
					#else
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_8 = u_xlat16_1.x * u_xlat16_1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat16_1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat8.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat8.x = texture(_CameraDepthTexture, u_xlat8.xy).x;
					    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
					    u_xlat8.x = float(1.0) / u_xlat8.x;
					    u_xlat8.x = u_xlat8.x + (-vs_TEXCOORD5.w);
					    u_xlat8.x = u_xlat8.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
					#else
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					#endif
					    u_xlat8.x = (-u_xlat8.x) + 1.0;
					    u_xlat8.x = u_xlat8.x * _FoamColor.w + u_xlat8.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
					#else
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					#endif
					    u_xlat10_1 = texture(_FoamTex, vs_TEXCOORD0.xy);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * _Color;
					    u_xlat16_1 = u_xlat10_1 * _FoamColor + (-u_xlat16_2);
					    u_xlat1 = u_xlat8.xxxx * u_xlat16_1 + u_xlat16_2;
					    u_xlat16_3.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat0.xzw;
					    u_xlat2.xy = vs_TEXCOORD4.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat2.xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat2.x = texture(_LightTexture0, u_xlat2.xy).w;
					    u_xlat16_3.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_3.xyz;
					    u_xlat1.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0 = u_xlat1;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3"
				}
			}
		}
		Pass {
			Name "Meta"
			LOD 200
			Tags { "LIGHTMODE" = "META" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
			Blend SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
			ColorMask RGB -1
			ZWrite Off
			Cull Off
			GpuProgramID 148606
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform bvec4 unity_MetaVertexControl;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = _glesVertex.w;
					  highp vec4 tmpvar_6;
					  highp float result_7;
					  result_7 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_7 = (result_7 / _Period);
					  highp vec4 vertColor_8;
					  vertColor_8 = tmpvar_1;
					  highp vec3 tmpvar_9;
					  tmpvar_9.xz = vec2(0.0, 0.0);
					  highp float tmpvar_10;
					  tmpvar_10 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_9.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_7)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_8.y);
					  tmpvar_5.xyz = (_glesVertex.xyz + tmpvar_9);
					  highp vec4 vertColor_12;
					  vertColor_12 = tmpvar_1;
					  highp float result_13;
					  result_13 = (((_WaveDir02.x * tmpvar_5.x) + (_WaveDir02.y * tmpvar_5.y)) + (_WaveDir02.z * tmpvar_5.z));
					  result_13 = (result_13 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_14;
					  vertColor_14 = tmpvar_1;
					  highp vec3 tmpvar_15;
					  tmpvar_15.xz = vec2(0.0, 0.0);
					  tmpvar_15.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_13)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_14.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_15);
					  highp vec4 vertColor_16;
					  vertColor_16 = tmpvar_1;
					  highp float result_17;
					  result_17 = (((_WaveDir03.x * tmpvar_5.x) + (_WaveDir03.y * tmpvar_5.y)) + (_WaveDir03.z * tmpvar_5.z));
					  result_17 = (result_17 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_18;
					  vertColor_18 = tmpvar_1;
					  highp vec3 tmpvar_19;
					  tmpvar_19.xz = vec2(0.0, 0.0);
					  tmpvar_19.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_17)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_18.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_19);
					  highp vec4 vertColor_20;
					  vertColor_20 = tmpvar_1;
					  highp vec3 tmpvar_21;
					  tmpvar_21 = normalize((normalize(
					    (normalize((_glesNormal + vec3(abs(
					      ((sin((
					        (_Time.y * _Frequency)
					       + result_7)) * vertColor_12.y) * _Amplitude)
					    )))) + vec3(abs(((
					      sin(((_Time.y * tmpvar_10) + result_13))
					     * vertColor_16.y) * tmpvar_11))))
					  ) + vec3(abs(
					    ((sin((
					      (_Time.y * (_Frequency * _Wave03Mult.z))
					     + result_17)) * vertColor_20.y) * (_Amplitude * _Wave03Mult.x))
					  ))));
					  highp vec4 tmpvar_22;
					  highp vec4 vertex_23;
					  vertex_23 = tmpvar_5;
					  if (unity_MetaVertexControl.x) {
					    vertex_23.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					    highp float tmpvar_24;
					    if ((tmpvar_5.z > 0.0)) {
					      tmpvar_24 = 0.0001;
					    } else {
					      tmpvar_24 = 0.0;
					    };
					    vertex_23.z = tmpvar_24;
					  };
					  if (unity_MetaVertexControl.y) {
					    vertex_23.xy = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					    highp float tmpvar_25;
					    if ((vertex_23.z > 0.0)) {
					      tmpvar_25 = 0.0001;
					    } else {
					      tmpvar_25 = 0.0;
					    };
					    vertex_23.z = tmpvar_25;
					  };
					  highp vec4 tmpvar_26;
					  tmpvar_26.w = 1.0;
					  tmpvar_26.xyz = vertex_23.xyz;
					  tmpvar_22 = (unity_MatrixVP * tmpvar_26);
					  highp vec3 tmpvar_27;
					  tmpvar_27 = (unity_ObjectToWorld * tmpvar_5).xyz;
					  highp mat3 tmpvar_28;
					  tmpvar_28[0] = unity_WorldToObject[0].xyz;
					  tmpvar_28[1] = unity_WorldToObject[1].xyz;
					  tmpvar_28[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_29;
					  tmpvar_29 = normalize((tmpvar_21 * tmpvar_28));
					  highp mat3 tmpvar_30;
					  tmpvar_30[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_30[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_30[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_31;
					  tmpvar_31 = normalize((tmpvar_30 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_31;
					  highp float tmpvar_32;
					  tmpvar_32 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_32;
					  highp vec3 tmpvar_33;
					  tmpvar_33 = (((tmpvar_29.yzx * worldTangent_4.zxy) - (tmpvar_29.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_33;
					  highp vec4 tmpvar_34;
					  tmpvar_34.x = worldTangent_4.x;
					  tmpvar_34.y = worldBinormal_2.x;
					  tmpvar_34.z = tmpvar_29.x;
					  tmpvar_34.w = tmpvar_27.x;
					  highp vec4 tmpvar_35;
					  tmpvar_35.x = worldTangent_4.y;
					  tmpvar_35.y = worldBinormal_2.y;
					  tmpvar_35.z = tmpvar_29.y;
					  tmpvar_35.w = tmpvar_27.y;
					  highp vec4 tmpvar_36;
					  tmpvar_36.x = worldTangent_4.z;
					  tmpvar_36.y = worldBinormal_2.z;
					  tmpvar_36.z = tmpvar_29.z;
					  tmpvar_36.w = tmpvar_27.z;
					  highp vec4 o_37;
					  highp vec4 tmpvar_38;
					  tmpvar_38 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_39;
					  tmpvar_39.x = tmpvar_38.x;
					  tmpvar_39.y = (tmpvar_38.y * _ProjectionParams.x);
					  o_37.xy = (tmpvar_39 + tmpvar_38.w);
					  o_37.zw = tmpvar_22.zw;
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_34;
					  xlv_TEXCOORD2 = tmpvar_35;
					  xlv_TEXCOORD3 = tmpvar_36;
					  xlv_TEXCOORD4 = o_37;
					  xlv_TEXCOORD5 = tmpvar_6;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec4 _ZBufferParams;
					uniform sampler2D _MainTex;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					uniform bvec4 unity_MetaFragmentControl;
					uniform highp float unity_OneOverOutputBoost;
					uniform highp float unity_MaxOutputValue;
					uniform highp float unity_UseLinearSpace;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec3 tmpvar_3;
					  highp vec4 depthSample_4;
					  lowp vec4 tmpvar_5;
					  tmpvar_5 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_4 = tmpvar_5;
					  highp float tmpvar_6;
					  tmpvar_6 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_4.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_7;
					  tmpvar_7 = clamp ((tmpvar_6 + (tmpvar_6 * _FoamColor.w)), 0.0, 1.0);
					  tmpvar_3 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_7)).xyz;
					  tmpvar_2 = tmpvar_3;
					  mediump vec4 res_8;
					  res_8 = vec4(0.0, 0.0, 0.0, 0.0);
					  if (unity_MetaFragmentControl.x) {
					    mediump vec4 tmpvar_9;
					    tmpvar_9.w = 1.0;
					    tmpvar_9.xyz = tmpvar_2;
					    res_8.w = tmpvar_9.w;
					    highp vec3 tmpvar_10;
					    tmpvar_10 = clamp (pow (tmpvar_2, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
					    res_8.xyz = tmpvar_10;
					  };
					  if (unity_MetaFragmentControl.y) {
					    mediump vec3 emission_11;
					    if (bool(unity_UseLinearSpace)) {
					      emission_11 = vec3(0.0, 0.0, 0.0);
					    } else {
					      emission_11 = vec3(0.0, 0.0, 0.0);
					    };
					    mediump vec4 tmpvar_12;
					    tmpvar_12.w = 1.0;
					    tmpvar_12.xyz = emission_11;
					    res_8 = tmpvar_12;
					  };
					  tmpvar_1 = res_8;
					  gl_FragData[0] = tmpvar_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform bvec4 unity_MetaVertexControl;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = _glesVertex.w;
					  highp vec4 tmpvar_6;
					  highp float result_7;
					  result_7 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_7 = (result_7 / _Period);
					  highp vec4 vertColor_8;
					  vertColor_8 = tmpvar_1;
					  highp vec3 tmpvar_9;
					  tmpvar_9.xz = vec2(0.0, 0.0);
					  highp float tmpvar_10;
					  tmpvar_10 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_9.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_7)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_8.y);
					  tmpvar_5.xyz = (_glesVertex.xyz + tmpvar_9);
					  highp vec4 vertColor_12;
					  vertColor_12 = tmpvar_1;
					  highp float result_13;
					  result_13 = (((_WaveDir02.x * tmpvar_5.x) + (_WaveDir02.y * tmpvar_5.y)) + (_WaveDir02.z * tmpvar_5.z));
					  result_13 = (result_13 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_14;
					  vertColor_14 = tmpvar_1;
					  highp vec3 tmpvar_15;
					  tmpvar_15.xz = vec2(0.0, 0.0);
					  tmpvar_15.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_13)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_14.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_15);
					  highp vec4 vertColor_16;
					  vertColor_16 = tmpvar_1;
					  highp float result_17;
					  result_17 = (((_WaveDir03.x * tmpvar_5.x) + (_WaveDir03.y * tmpvar_5.y)) + (_WaveDir03.z * tmpvar_5.z));
					  result_17 = (result_17 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_18;
					  vertColor_18 = tmpvar_1;
					  highp vec3 tmpvar_19;
					  tmpvar_19.xz = vec2(0.0, 0.0);
					  tmpvar_19.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_17)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_18.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_19);
					  highp vec4 vertColor_20;
					  vertColor_20 = tmpvar_1;
					  highp vec3 tmpvar_21;
					  tmpvar_21 = normalize((normalize(
					    (normalize((_glesNormal + vec3(abs(
					      ((sin((
					        (_Time.y * _Frequency)
					       + result_7)) * vertColor_12.y) * _Amplitude)
					    )))) + vec3(abs(((
					      sin(((_Time.y * tmpvar_10) + result_13))
					     * vertColor_16.y) * tmpvar_11))))
					  ) + vec3(abs(
					    ((sin((
					      (_Time.y * (_Frequency * _Wave03Mult.z))
					     + result_17)) * vertColor_20.y) * (_Amplitude * _Wave03Mult.x))
					  ))));
					  highp vec4 tmpvar_22;
					  highp vec4 vertex_23;
					  vertex_23 = tmpvar_5;
					  if (unity_MetaVertexControl.x) {
					    vertex_23.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					    highp float tmpvar_24;
					    if ((tmpvar_5.z > 0.0)) {
					      tmpvar_24 = 0.0001;
					    } else {
					      tmpvar_24 = 0.0;
					    };
					    vertex_23.z = tmpvar_24;
					  };
					  if (unity_MetaVertexControl.y) {
					    vertex_23.xy = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					    highp float tmpvar_25;
					    if ((vertex_23.z > 0.0)) {
					      tmpvar_25 = 0.0001;
					    } else {
					      tmpvar_25 = 0.0;
					    };
					    vertex_23.z = tmpvar_25;
					  };
					  highp vec4 tmpvar_26;
					  tmpvar_26.w = 1.0;
					  tmpvar_26.xyz = vertex_23.xyz;
					  tmpvar_22 = (unity_MatrixVP * tmpvar_26);
					  highp vec3 tmpvar_27;
					  tmpvar_27 = (unity_ObjectToWorld * tmpvar_5).xyz;
					  highp mat3 tmpvar_28;
					  tmpvar_28[0] = unity_WorldToObject[0].xyz;
					  tmpvar_28[1] = unity_WorldToObject[1].xyz;
					  tmpvar_28[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_29;
					  tmpvar_29 = normalize((tmpvar_21 * tmpvar_28));
					  highp mat3 tmpvar_30;
					  tmpvar_30[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_30[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_30[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_31;
					  tmpvar_31 = normalize((tmpvar_30 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_31;
					  highp float tmpvar_32;
					  tmpvar_32 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_32;
					  highp vec3 tmpvar_33;
					  tmpvar_33 = (((tmpvar_29.yzx * worldTangent_4.zxy) - (tmpvar_29.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_33;
					  highp vec4 tmpvar_34;
					  tmpvar_34.x = worldTangent_4.x;
					  tmpvar_34.y = worldBinormal_2.x;
					  tmpvar_34.z = tmpvar_29.x;
					  tmpvar_34.w = tmpvar_27.x;
					  highp vec4 tmpvar_35;
					  tmpvar_35.x = worldTangent_4.y;
					  tmpvar_35.y = worldBinormal_2.y;
					  tmpvar_35.z = tmpvar_29.y;
					  tmpvar_35.w = tmpvar_27.y;
					  highp vec4 tmpvar_36;
					  tmpvar_36.x = worldTangent_4.z;
					  tmpvar_36.y = worldBinormal_2.z;
					  tmpvar_36.z = tmpvar_29.z;
					  tmpvar_36.w = tmpvar_27.z;
					  highp vec4 o_37;
					  highp vec4 tmpvar_38;
					  tmpvar_38 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_39;
					  tmpvar_39.x = tmpvar_38.x;
					  tmpvar_39.y = (tmpvar_38.y * _ProjectionParams.x);
					  o_37.xy = (tmpvar_39 + tmpvar_38.w);
					  o_37.zw = tmpvar_22.zw;
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_34;
					  xlv_TEXCOORD2 = tmpvar_35;
					  xlv_TEXCOORD3 = tmpvar_36;
					  xlv_TEXCOORD4 = o_37;
					  xlv_TEXCOORD5 = tmpvar_6;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec4 _ZBufferParams;
					uniform sampler2D _MainTex;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					uniform bvec4 unity_MetaFragmentControl;
					uniform highp float unity_OneOverOutputBoost;
					uniform highp float unity_MaxOutputValue;
					uniform highp float unity_UseLinearSpace;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec3 tmpvar_3;
					  highp vec4 depthSample_4;
					  lowp vec4 tmpvar_5;
					  tmpvar_5 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_4 = tmpvar_5;
					  highp float tmpvar_6;
					  tmpvar_6 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_4.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_7;
					  tmpvar_7 = clamp ((tmpvar_6 + (tmpvar_6 * _FoamColor.w)), 0.0, 1.0);
					  tmpvar_3 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_7)).xyz;
					  tmpvar_2 = tmpvar_3;
					  mediump vec4 res_8;
					  res_8 = vec4(0.0, 0.0, 0.0, 0.0);
					  if (unity_MetaFragmentControl.x) {
					    mediump vec4 tmpvar_9;
					    tmpvar_9.w = 1.0;
					    tmpvar_9.xyz = tmpvar_2;
					    res_8.w = tmpvar_9.w;
					    highp vec3 tmpvar_10;
					    tmpvar_10 = clamp (pow (tmpvar_2, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
					    res_8.xyz = tmpvar_10;
					  };
					  if (unity_MetaFragmentControl.y) {
					    mediump vec3 emission_11;
					    if (bool(unity_UseLinearSpace)) {
					      emission_11 = vec3(0.0, 0.0, 0.0);
					    } else {
					      emission_11 = vec3(0.0, 0.0, 0.0);
					    };
					    mediump vec4 tmpvar_12;
					    tmpvar_12.w = 1.0;
					    tmpvar_12.xyz = emission_11;
					    res_8 = tmpvar_12;
					  };
					  tmpvar_1 = res_8;
					  gl_FragData[0] = tmpvar_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesTANGENT;
					attribute vec4 _glesVertex;
					attribute vec4 _glesColor;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec4 _Time;
					uniform highp vec4 _ProjectionParams;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp vec4 unity_WorldTransformParams;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform highp float _Amplitude;
					uniform highp float _Frequency;
					uniform highp float _Period;
					uniform highp vec4 _WaveDir01;
					uniform highp vec4 _WaveDir02;
					uniform highp vec4 _Wave02Mult;
					uniform highp vec4 _WaveDir03;
					uniform highp vec4 _Wave03Mult;
					uniform bvec4 unity_MetaVertexControl;
					uniform highp vec4 _MainTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD1;
					varying highp vec4 xlv_TEXCOORD2;
					varying highp vec4 xlv_TEXCOORD3;
					varying highp vec4 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  tmpvar_1 = _glesColor;
					  lowp vec3 worldBinormal_2;
					  lowp float tangentSign_3;
					  lowp vec3 worldTangent_4;
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = _glesVertex.w;
					  highp vec4 tmpvar_6;
					  highp float result_7;
					  result_7 = (((_WaveDir01.x * _glesVertex.x) + (_WaveDir01.y * _glesVertex.y)) + (_WaveDir01.z * _glesVertex.z));
					  result_7 = (result_7 / _Period);
					  highp vec4 vertColor_8;
					  vertColor_8 = tmpvar_1;
					  highp vec3 tmpvar_9;
					  tmpvar_9.xz = vec2(0.0, 0.0);
					  highp float tmpvar_10;
					  tmpvar_10 = (_Frequency * _Wave02Mult.z);
					  highp float tmpvar_11;
					  tmpvar_11 = (_Amplitude * _Wave02Mult.x);
					  tmpvar_9.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_7)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_8.y);
					  tmpvar_5.xyz = (_glesVertex.xyz + tmpvar_9);
					  highp vec4 vertColor_12;
					  vertColor_12 = tmpvar_1;
					  highp float result_13;
					  result_13 = (((_WaveDir02.x * tmpvar_5.x) + (_WaveDir02.y * tmpvar_5.y)) + (_WaveDir02.z * tmpvar_5.z));
					  result_13 = (result_13 / (_Period * _Wave02Mult.x));
					  highp vec4 vertColor_14;
					  vertColor_14 = tmpvar_1;
					  highp vec3 tmpvar_15;
					  tmpvar_15.xz = vec2(0.0, 0.0);
					  tmpvar_15.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_13)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_14.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_15);
					  highp vec4 vertColor_16;
					  vertColor_16 = tmpvar_1;
					  highp float result_17;
					  result_17 = (((_WaveDir03.x * tmpvar_5.x) + (_WaveDir03.y * tmpvar_5.y)) + (_WaveDir03.z * tmpvar_5.z));
					  result_17 = (result_17 / (_Period * _Wave03Mult.x));
					  highp vec4 vertColor_18;
					  vertColor_18 = tmpvar_1;
					  highp vec3 tmpvar_19;
					  tmpvar_19.xz = vec2(0.0, 0.0);
					  tmpvar_19.y = ((sin(
					    ((_Time.y * (_Frequency + tmpvar_10)) + result_17)
					  ) * (_Amplitude + tmpvar_11)) * vertColor_18.y);
					  tmpvar_5.xyz = (tmpvar_5.xyz + tmpvar_19);
					  highp vec4 vertColor_20;
					  vertColor_20 = tmpvar_1;
					  highp vec3 tmpvar_21;
					  tmpvar_21 = normalize((normalize(
					    (normalize((_glesNormal + vec3(abs(
					      ((sin((
					        (_Time.y * _Frequency)
					       + result_7)) * vertColor_12.y) * _Amplitude)
					    )))) + vec3(abs(((
					      sin(((_Time.y * tmpvar_10) + result_13))
					     * vertColor_16.y) * tmpvar_11))))
					  ) + vec3(abs(
					    ((sin((
					      (_Time.y * (_Frequency * _Wave03Mult.z))
					     + result_17)) * vertColor_20.y) * (_Amplitude * _Wave03Mult.x))
					  ))));
					  highp vec4 tmpvar_22;
					  highp vec4 vertex_23;
					  vertex_23 = tmpvar_5;
					  if (unity_MetaVertexControl.x) {
					    vertex_23.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					    highp float tmpvar_24;
					    if ((tmpvar_5.z > 0.0)) {
					      tmpvar_24 = 0.0001;
					    } else {
					      tmpvar_24 = 0.0;
					    };
					    vertex_23.z = tmpvar_24;
					  };
					  if (unity_MetaVertexControl.y) {
					    vertex_23.xy = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					    highp float tmpvar_25;
					    if ((vertex_23.z > 0.0)) {
					      tmpvar_25 = 0.0001;
					    } else {
					      tmpvar_25 = 0.0;
					    };
					    vertex_23.z = tmpvar_25;
					  };
					  highp vec4 tmpvar_26;
					  tmpvar_26.w = 1.0;
					  tmpvar_26.xyz = vertex_23.xyz;
					  tmpvar_22 = (unity_MatrixVP * tmpvar_26);
					  highp vec3 tmpvar_27;
					  tmpvar_27 = (unity_ObjectToWorld * tmpvar_5).xyz;
					  highp mat3 tmpvar_28;
					  tmpvar_28[0] = unity_WorldToObject[0].xyz;
					  tmpvar_28[1] = unity_WorldToObject[1].xyz;
					  tmpvar_28[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_29;
					  tmpvar_29 = normalize((tmpvar_21 * tmpvar_28));
					  highp mat3 tmpvar_30;
					  tmpvar_30[0] = unity_ObjectToWorld[0].xyz;
					  tmpvar_30[1] = unity_ObjectToWorld[1].xyz;
					  tmpvar_30[2] = unity_ObjectToWorld[2].xyz;
					  highp vec3 tmpvar_31;
					  tmpvar_31 = normalize((tmpvar_30 * _glesTANGENT.xyz));
					  worldTangent_4 = tmpvar_31;
					  highp float tmpvar_32;
					  tmpvar_32 = (_glesTANGENT.w * unity_WorldTransformParams.w);
					  tangentSign_3 = tmpvar_32;
					  highp vec3 tmpvar_33;
					  tmpvar_33 = (((tmpvar_29.yzx * worldTangent_4.zxy) - (tmpvar_29.zxy * worldTangent_4.yzx)) * tangentSign_3);
					  worldBinormal_2 = tmpvar_33;
					  highp vec4 tmpvar_34;
					  tmpvar_34.x = worldTangent_4.x;
					  tmpvar_34.y = worldBinormal_2.x;
					  tmpvar_34.z = tmpvar_29.x;
					  tmpvar_34.w = tmpvar_27.x;
					  highp vec4 tmpvar_35;
					  tmpvar_35.x = worldTangent_4.y;
					  tmpvar_35.y = worldBinormal_2.y;
					  tmpvar_35.z = tmpvar_29.y;
					  tmpvar_35.w = tmpvar_27.y;
					  highp vec4 tmpvar_36;
					  tmpvar_36.x = worldTangent_4.z;
					  tmpvar_36.y = worldBinormal_2.z;
					  tmpvar_36.z = tmpvar_29.z;
					  tmpvar_36.w = tmpvar_27.z;
					  highp vec4 o_37;
					  highp vec4 tmpvar_38;
					  tmpvar_38 = (tmpvar_22 * 0.5);
					  highp vec2 tmpvar_39;
					  tmpvar_39.x = tmpvar_38.x;
					  tmpvar_39.y = (tmpvar_38.y * _ProjectionParams.x);
					  o_37.xy = (tmpvar_39 + tmpvar_38.w);
					  o_37.zw = tmpvar_22.zw;
					  gl_Position = tmpvar_22;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_34;
					  xlv_TEXCOORD2 = tmpvar_35;
					  xlv_TEXCOORD3 = tmpvar_36;
					  xlv_TEXCOORD4 = o_37;
					  xlv_TEXCOORD5 = tmpvar_6;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec4 _ZBufferParams;
					uniform sampler2D _MainTex;
					uniform lowp vec4 _Color;
					uniform sampler2D _CameraDepthTexture;
					uniform sampler2D _FoamTex;
					uniform highp float _FoamDepth;
					uniform lowp vec4 _FoamColor;
					uniform bvec4 unity_MetaFragmentControl;
					uniform highp float unity_OneOverOutputBoost;
					uniform highp float unity_MaxOutputValue;
					uniform highp float unity_UseLinearSpace;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec4 xlv_TEXCOORD4;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec3 tmpvar_3;
					  highp vec4 depthSample_4;
					  lowp vec4 tmpvar_5;
					  tmpvar_5 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD4).xxxx;
					  depthSample_4 = tmpvar_5;
					  highp float tmpvar_6;
					  tmpvar_6 = (1.0 - clamp ((_FoamDepth * 
					    ((1.0/(((_ZBufferParams.z * depthSample_4.x) + _ZBufferParams.w))) - xlv_TEXCOORD4.w)
					  ), 0.0, 1.0));
					  highp float tmpvar_7;
					  tmpvar_7 = clamp ((tmpvar_6 + (tmpvar_6 * _FoamColor.w)), 0.0, 1.0);
					  tmpvar_3 = mix ((texture2D (_MainTex, xlv_TEXCOORD0) * _Color), (texture2D (_FoamTex, xlv_TEXCOORD0) * _FoamColor), vec4(tmpvar_7)).xyz;
					  tmpvar_2 = tmpvar_3;
					  mediump vec4 res_8;
					  res_8 = vec4(0.0, 0.0, 0.0, 0.0);
					  if (unity_MetaFragmentControl.x) {
					    mediump vec4 tmpvar_9;
					    tmpvar_9.w = 1.0;
					    tmpvar_9.xyz = tmpvar_2;
					    res_8.w = tmpvar_9.w;
					    highp vec3 tmpvar_10;
					    tmpvar_10 = clamp (pow (tmpvar_2, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
					    res_8.xyz = tmpvar_10;
					  };
					  if (unity_MetaFragmentControl.y) {
					    mediump vec3 emission_11;
					    if (bool(unity_UseLinearSpace)) {
					      emission_11 = vec3(0.0, 0.0, 0.0);
					    } else {
					      emission_11 = vec3(0.0, 0.0, 0.0);
					    };
					    mediump vec4 tmpvar_12;
					    tmpvar_12.w = 1.0;
					    tmpvar_12.xyz = emission_11;
					    res_8 = tmpvar_12;
					  };
					  tmpvar_1 = res_8;
					  gl_FragData[0] = tmpvar_1;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	bvec4 unity_MetaVertexControl;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					bool u_xlatb17;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat3.z = u_xlatb1 ? 9.99999975e-05 : float(0.0);
					    u_xlat3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat1.xyw = (unity_MetaVertexControl.x) ? u_xlat3.xyz : u_xlat0.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb17 = !!(0.0<u_xlat1.w);
					#else
					    u_xlatb17 = 0.0<u_xlat1.w;
					#endif
					    u_xlat3.z = u_xlatb17 ? 9.99999975e-05 : float(0.0);
					    u_xlat3.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat1.xyw = (unity_MetaVertexControl.y) ? u_xlat3.xyz : u_xlat1.xyw;
					    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.wwww + u_xlat3;
					    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_MatrixVP[3];
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyw = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyw;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyw;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat0.xxx + abs(vec3(u_xlat15));
					    u_xlat0.x = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat1.xyw * u_xlat0.xxx + abs(vec3(u_xlat11));
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform 	bvec4 unity_MetaFragmentControl;
					uniform 	float unity_OneOverOutputBoost;
					uniform 	float unity_MaxOutputValue;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
					    u_xlat0.x = u_xlat0.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _FoamColor.w + u_xlat0.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat10_2.xyz = texture(_FoamTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat10_2.xyz * _FoamColor.xyz + (-u_xlat16_1.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat6 = unity_OneOverOutputBoost;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
					#else
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
					    u_xlat16_0.xyz = (unity_MetaFragmentControl.x) ? u_xlat0.xyz : vec3(0.0, 0.0, 0.0);
					    u_xlat16_0.w = (unity_MetaFragmentControl.x) ? 1.0 : 0.0;
					    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	bvec4 unity_MetaVertexControl;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					bool u_xlatb17;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat3.z = u_xlatb1 ? 9.99999975e-05 : float(0.0);
					    u_xlat3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat1.xyw = (unity_MetaVertexControl.x) ? u_xlat3.xyz : u_xlat0.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb17 = !!(0.0<u_xlat1.w);
					#else
					    u_xlatb17 = 0.0<u_xlat1.w;
					#endif
					    u_xlat3.z = u_xlatb17 ? 9.99999975e-05 : float(0.0);
					    u_xlat3.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat1.xyw = (unity_MetaVertexControl.y) ? u_xlat3.xyz : u_xlat1.xyw;
					    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.wwww + u_xlat3;
					    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_MatrixVP[3];
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyw = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyw;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyw;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat0.xxx + abs(vec3(u_xlat15));
					    u_xlat0.x = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat1.xyw * u_xlat0.xxx + abs(vec3(u_xlat11));
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform 	bvec4 unity_MetaFragmentControl;
					uniform 	float unity_OneOverOutputBoost;
					uniform 	float unity_MaxOutputValue;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
					    u_xlat0.x = u_xlat0.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _FoamColor.w + u_xlat0.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat10_2.xyz = texture(_FoamTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat10_2.xyz * _FoamColor.xyz + (-u_xlat16_1.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat6 = unity_OneOverOutputBoost;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
					#else
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
					    u_xlat16_0.xyz = (unity_MetaFragmentControl.x) ? u_xlat0.xyz : vec3(0.0, 0.0, 0.0);
					    u_xlat16_0.w = (unity_MetaFragmentControl.x) ? 1.0 : 0.0;
					    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _Time;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	float _Amplitude;
					uniform 	float _Frequency;
					uniform 	float _Period;
					uniform 	vec4 _WaveDir01;
					uniform 	vec4 _WaveDir02;
					uniform 	vec4 _Wave02Mult;
					uniform 	vec4 _WaveDir03;
					uniform 	vec4 _Wave03Mult;
					uniform 	bvec4 unity_MetaVertexControl;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat11;
					float u_xlat15;
					bool u_xlatb17;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat15 = dot(_WaveDir01.xyz, in_POSITION0.xyz);
					    u_xlat15 = u_xlat15 / _Period;
					    u_xlat1.xy = vec2(_Frequency, _Amplitude) * _Wave02Mult.zx + vec2(_Frequency, _Amplitude);
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * _Frequency + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat15 * _Amplitude;
					    u_xlat2.xyz = abs(vec3(u_xlat15)) + in_NORMAL0.xyz;
					    u_xlat15 = sin(u_xlat11);
					    u_xlat15 = u_xlat1.y * u_xlat15;
					    u_xlat0.y = u_xlat15 * in_COLOR0.y;
					    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
					    u_xlat15 = dot(_WaveDir02.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Frequency, _Amplitude, _Period) * _Wave02Mult.zxx;
					    u_xlat15 = u_xlat15 / u_xlat3.z;
					    u_xlat11 = _Time.y * u_xlat1.x + u_xlat15;
					    u_xlat15 = _Time.y * u_xlat3.x + u_xlat15;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 * in_COLOR0.y;
					    u_xlat15 = u_xlat3.y * u_xlat15;
					    u_xlat11 = sin(u_xlat11);
					    u_xlat11 = u_xlat1.y * u_xlat11;
					    u_xlat3.y = u_xlat11 * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat11 = dot(_WaveDir03.xyz, u_xlat0.xyz);
					    u_xlat3.xyz = vec3(_Period, _Frequency, _Amplitude) * _Wave03Mult.xzx;
					    u_xlat11 = u_xlat11 / u_xlat3.x;
					    u_xlat1.x = _Time.y * u_xlat1.x + u_xlat11;
					    u_xlat1.z = _Time.y * u_xlat3.y + u_xlat11;
					    u_xlat1.xz = sin(u_xlat1.xz);
					    u_xlat11 = u_xlat1.z * in_COLOR0.y;
					    u_xlat11 = u_xlat3.z * u_xlat11;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3.y = u_xlat1.x * in_COLOR0.y;
					    u_xlat0.xz = in_POSITION0.xz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat3.z = u_xlatb1 ? 9.99999975e-05 : float(0.0);
					    u_xlat3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat1.xyw = (unity_MetaVertexControl.x) ? u_xlat3.xyz : u_xlat0.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb17 = !!(0.0<u_xlat1.w);
					#else
					    u_xlatb17 = 0.0<u_xlat1.w;
					#endif
					    u_xlat3.z = u_xlatb17 ? 9.99999975e-05 : float(0.0);
					    u_xlat3.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat1.xyw = (unity_MetaVertexControl.y) ? u_xlat3.xyz : u_xlat1.xyw;
					    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.wwww + u_xlat3;
					    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_MatrixVP[3];
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyw = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyw;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyw;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat0.xxx + abs(vec3(u_xlat15));
					    u_xlat0.x = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat1.xyw * u_xlat0.xxx + abs(vec3(u_xlat11));
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat3.zw;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _Color;
					uniform 	float _FoamDepth;
					uniform 	mediump vec4 _FoamColor;
					uniform 	bvec4 unity_MetaFragmentControl;
					uniform 	float unity_OneOverOutputBoost;
					uniform 	float unity_MaxOutputValue;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _FoamTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
					    u_xlat0.x = u_xlat0.x * _FoamDepth;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _FoamColor.w + u_xlat0.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat10_2.xyz = texture(_FoamTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat10_2.xyz * _FoamColor.xyz + (-u_xlat16_1.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat6 = unity_OneOverOutputBoost;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
					#else
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
					    u_xlat16_0.xyz = (unity_MetaFragmentControl.x) ? u_xlat0.xyz : vec3(0.0, 0.0, 0.0);
					    u_xlat16_0.w = (unity_MetaFragmentControl.x) ? 1.0 : 0.0;
					    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat16_0;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
	}
	Fallback "Diffuse"
}